
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800ce58 l    d  .rodata	00000000 .rodata
0801cb90 l    d  .ARM	00000000 .ARM
0801cb98 l    d  .init_array	00000000 .init_array
0801cba0 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000c94 l    d  .bss	00000000 .bss
20001f08 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
0801d838 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 build/Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
0800cde4 l       .text	00000000 LoopCopyDataInit
0800cddc l       .text	00000000 CopyDataInit
0800cdf8 l       .text	00000000 LoopFillZerobss
0800cdf2 l       .text	00000000 FillZerobss
0800ce0a l       .text	00000000 LoopForever
0800ce24 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800ce3c l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 deregister_tm_clones
080001dc l     F .text	00000000 register_tm_clones
08000200 l     F .text	00000000 __do_global_dtors_aux
20000c94 l       .bss	00000001 completed.8100
0801cba0 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000228 l     F .text	00000000 frame_dummy
20000c98 l       .bss	00000018 object.8105
0801cb9c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 build/bb_asm.o
20000000 l       .data	00000000 A4_led_call_delay
20000004 l       .data	00000000 A4_delay
20000008 l       .data	00000000 A4_updated_delay
2000000c l       .data	00000000 A4_game_time
20000010 l       .data	00000000 A4_target
20000014 l       .data	00000000 A4_curr_target
20000018 l       .data	00000000 lab_ticks
2000001c l       .data	00000000 lab_ticks_blinks
20000020 l       .data	00000000 delay_time
20000024 l       .data	00000000 tick_delay_call_delay
20000028 l       .data	00000000 LEDaddress
2000002c l       .data	00000000 A5_refresh_status
20000030 l       .data	00000000 A5_timeout
20000034 l       .data	00000000 A5_delay
20000038 l       .data	00000000 A5_updated_delay
2000003c l       .data	00000000 A5_watch_ticks
20000040 l       .data	00000000 A5_on_or_off
00000032 l       *ABS*	00000000 ACC_I2C_ADDRESS
00000029 l       *ABS*	00000000 X_H_A
00000028 l       *ABS*	00000000 X_LO
0000002b l       *ABS*	00000000 Y_H_A
004c4b40 l       *ABS*	00000000 DELAY
0000000f l       *ABS*	00000000 TICKS_TO_CALL
00000001 l       *ABS*	00000000 MIN_DELAY
0090f560 l       *ABS*	00000000 WIN_DELAY
00000008 l       *ABS*	00000000 MAX_LED_A4
00000002 l       *ABS*	00000000 WIN_LOOP_COUNTER_A4
fffffff6 l       *ABS*	00000000 NEG_VALUE
00000010 l       *ABS*	00000000 POS_VALUE
00000009 l       *ABS*	00000000 MS_SHFT_VAL_A4
00000019 l       *ABS*	00000000 SEC_MUL_VAL_A4
00000001 l       *ABS*	00000000 A5_REFRESH_FALSE
00000000 l       *ABS*	00000000 A5_REFRESH_TRUE
00000000 l       *ABS*	00000000 A5_OFF_STATUS
00000001 l       *ABS*	00000000 A5_ON_STATUS
00000002 l       *ABS*	00000000 A5_TICKS
0000ff00 l       *ABS*	00000000 A5_TRIGGER_ON
00000000 l       *ABS*	00000000 A5_TRIGGER_OFF
00000001 l       *ABS*	00000000 DEC_INC
00000000 l       *ABS*	00000000 LED_0
00000001 l       *ABS*	00000000 LED_1
00000002 l       *ABS*	00000000 LED_2
00000003 l       *ABS*	00000000 LED_3
00000004 l       *ABS*	00000000 LED_4
00000005 l       *ABS*	00000000 LED_5
00000006 l       *ABS*	00000000 LED_6
00000007 l       *ABS*	00000000 LED_7
20000044 l       .data	00000000 huge
20000054 l       .data	00000000 big
20000058 l       .data	00000000 num
20000059 l       .data	00000000 str2
2000006a l       .data	00000000 count
08000258 l       .text	00000000 myTestLoop
080002f4 l       .text	00000000 exit_func
08000264 l       .text	00000000 sub_hun_thousand
08000274 l       .text	00000000 sub_ten_thousand
08000284 l       .text	00000000 sub_one_thousand
08000296 l       .text	00000000 sub_one_hundred
080002a6 l       .text	00000000 sub_ten
080002f4 l       .text	00000000 is_invalid
08000918 l       .text	00000000 busy_delay
08000382 l       .text	00000000 _bbWatch_exit
080003d4 l       .text	00000000 loop_led_start
080003dc l       .text	00000000 rand_led_loop
080003e0 l       .text	00000000 rand_on_loop
080003f8 l       .text	00000000 rand_off_loop
080005be l       .text	00000000 turn_off_leds
080004da l       .text	00000000 a4_game_time_exit
080004e0 l       .text	00000000 a4_loose
0800053a l       .text	00000084 a4_led_logic
080004f2 l       .text	00000000 a4_win
080004fc l       .text	00000000 win_loop
08000500 l       .text	00000000 a4_win_on_loop
08000518 l       .text	00000000 a4_win_off_loop
08000534 l       .text	00000000 a4_win_exit
08000564 l       .text	00000000 is_positive
0800057c l       .text	00000000 is_negative
08000594 l       .text	00000000 is_zero
080005a4 l       .text	00000000 is_accel_end
080005c4 l       .text	00000000 off_loop
0800063a l       .text	00000000 game_time_exit
08000662 l       .text	00000000 _bb_lab_exit
08000692 l       .text	00000000 test_is_positive
080006aa l       .text	00000000 test_is_negative
080006c2 l       .text	00000000 test_is_zero
080006d2 l       .text	00000000 test_is_accel_end
080006ec l       .text	00000000 tilt_win_or_loose
08000742 l       .text	00000000 tilt_game_loose
080006fc l       .text	00000000 tilt_game_win
08000700 l       .text	00000000 tilt_win_on_loop
0800071e l       .text	00000000 tilt_win_off_loop
08000748 l       .text	00000000 tilt_win_or_loose_exit
08000778 l       .text	00000000 lab6_is_positive
08000790 l       .text	00000000 lab6_is_negative
080007a8 l       .text	00000000 lab6_is_zero
080007b8 l       .text	00000000 lab6_is_accel_end
080007d2 l       .text	00000000 bb_game_repeat_loop
080007d8 l       .text	00000000 bb_led_loop
08000830 l       .text	00000000 bb_game_exit
0800083e l       .text	00000000 bb_game_win_or_loose
0800089a l       .text	00000000 bb_game_loose
08000854 l       .text	00000000 bb_game_win
08000858 l       .text	00000000 win_on_loop
08000876 l       .text	00000000 win_off_loop
080008a0 l       .text	00000000 bb_game_win_or_loose_exit
080008a8 l       .text	00000000 loop
080008c4 l       .text	00000000 exit_loop
080008e2 l       .text	00000000 repeat_loop
080008f4 l       .text	00000000 led_loop
080008fa l       .text	00000000 heavy_loop
0800091c l       .text	00000000 delay_loop
00000000 l    df *ABS*	00000000 build/mycode.o
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
08000f9c l     F .text	00000140 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 vfprintf.c
08002624 l     F .text	0000006a __sbprintf
0800d3f4 l     O .rodata	00000010 blanks.8652
0800d404 l     O .rodata	00000010 zeroes.8653
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
080027c8 l     F .text	00000124 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800392c l     F .text	00000004 __fp_lock
0800393c l     F .text	000000d4 __sinit.part.0
08003a10 l     F .text	00000004 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
0800d418 l     O .rodata	0000000c p05.7429
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
080058f4 l     F .text	00000076 __sprint_r.part.0
08006588 l     F .text	0000006a __sbprintf
0800d540 l     O .rodata	00000010 blanks.8631
0800d550 l     O .rodata	00000010 zeroes.8632
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
08006d98 l     F .text	00000028 _init_signal_r.part.0
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 getpid.c
00000000 l    df *ABS*	00000000 kill.c
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 bb_hook.c
00000000 l    df *ABS*	00000000 watchdog.c
20000ce4 l     O .bss	00000014 hiwdg
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
20000cf8 l     O .bss	00000004 count.7387
20000cfc l     O .bss	00000004 saved.7388
20000a28 l     O .data	00000004 buf.7389
20000a2c l     O .data	00000004 printPrompt.7390
0800dc45 l     O .rodata	00000006 __FUNCTION__.7404
00000000 l    df *ABS*	00000000 dump.c
20000d00 l     O .bss	00000004 address.6789
20000a30 l     O .data	00000004 count.6790
00000000 l    df *ABS*	00000000 syscall.c
20000d04 l     O .bss	00000004 heap_end.7397
00000000 l    df *ABS*	00000000 terminal.c
0800849c l     F .text	0000007c USBD_CDC_DataIn
20000d08 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
080087f0 l     F .text	0000007c Uncompress
20000e2c l     O .bss	00000014 buf.7329
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000e40 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
0800a880 l     F .text	0000002a I2C_TransferConfig
0800a8aa l     F .text	00000098 I2C_IsAcknowledgeFailed
0800a942 l     F .text	00000064 I2C_WaitOnFlagUntilTimeout
0800a9a6 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
0800a9f6 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
0800aa4a l     F .text	00000066 I2C_RequestMemoryWrite
0800aab0 l     F .text	00000064 I2C_RequestMemoryRead
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800adee l     F .text	0000004c SPI_WaitFlagStateUntilTimeout.part.0
0800adee l     F .text	0000004c SPI_WaitFifoStateUntilTimeout.part.0
0800ae3a l     F .text	00000040 SPI_WaitFlagStateUntilTimeout
0800ae7a l     F .text	00000054 SPI_WaitFifoStateUntilTimeout
0800aece l     F .text	0000004c SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 stm32f3xx_hal_iwdg.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
0800b5ce l     F .text	00000016 USBD_CtlError.constprop.0
20000e44 l     O .bss	00000001 cfgidx.11652
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800b990 l     F .text	00000012 USBD_CDC_DataIn
0800b9a2 l     F .text	00000028 USBD_CDC_EP0_RxReady
0800b9cc l     F .text	0000000c USBD_CDC_GetFSCfgDesc
0800b9d8 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
0800b9e4 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
0800b9fc l     F .text	0000002e USBD_CDC_DataOut
0800ba2a l     F .text	0000003a USBD_CDC_DeInit
0800ba64 l     F .text	0000008c USBD_CDC_Init
0800baf0 l     F .text	00000056 USBD_CDC_Setup
20000af8 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000e48 l     O .bss	00000230 mem.11876
00000000 l    df *ABS*	00000000 usbd_desc.c
0800be00 l     F .text	0000002a IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
0800bedc l     F .text	00000004 CDC_Itf_DeInit
0800bee0 l     F .text	0000001c CDC_Itf_Receive
0800befc l     F .text	00000018 CDC_Itf_Init
0800bf14 l     F .text	00000048 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
0800bf5c l     F .text	00000084 SPIx_Init
0800bfe0 l     F .text	00000040 SPIx_WriteRead
0800c020 l     F .text	0000006c I2Cx_Init
20001078 l     O .bss	00000038 I2cHandle
200010b0 l     O .bss	00000060 SpiHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20001110 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20001114 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 i3g4250d.c
00000000 l    df *ABS*	00000000 lsm303agr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0800ce28 l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/9.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000080 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0801cba4 l       .fini_array	00000000 __fini_array_end
0801cba0 l       .fini_array	00000000 __fini_array_start
0801cba0 l       .init_array	00000000 __init_array_end
0801cb98 l       .init_array	00000000 __preinit_array_end
0801cb98 l       .init_array	00000000 __init_array_start
0801cb98 l       .init_array	00000000 __preinit_array_start
0800ce24  w    F .text	00000002 RTC_Alarm_IRQHandler
08019288 g     O .rodata	00000008 RTC_BKP19R_fields
0801c9c8 g     O .rodata	00000010 APBAHBPrescTable
0801b130 g     O .rodata	00000050 TIM2_SR_fields
080115d8 g     O .rodata	00000100 CAN_F10R1_fields
0801a2a0 g     O .rodata	00000008 TIM16_DMAR_fields
08000b28 g     F .text	00000014 putchar
0800ce24  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08005364 g     F .text	00000040 _mprec_log10
08017eb8 g     O .rodata	00000008 I2C1_RXDR_fields
080077cc g     F .text	0000002c .hidden __aeabi_dcmpun
0800c504 g     F .text	00000020 LSM303DLHC_AccFilterCmd
0800ce24  w    F .text	00000002 TIM8_CC_IRQHandler
0801b2d8 g     O .rodata	00000030 TIM6_CR1_fields
08017da0 g     O .rodata	00000048 I2C1_ICR_fields
080053ec g     F .text	00000058 __any_on
08008494 g     F .text	00000004 _isatty_r
0800d4f0 g     O .rodata	00000028 __mprec_tinytens
20001118 g     O .bss	00000050 input_b
08007790 g     F .text	00000012 .hidden __aeabi_dcmple
0801b0e0 g     O .rodata	00000008 TIM2_PSC_fields
0801a4a8 g     O .rodata	00000028 TIM17_CCMR1_Output_fields
08000d50 g     F .text	000000ba strcpy
08015ab0 g     O .rodata	00000050 COMP_COMP5_CSR_fields
08007b40 g     F .text	00000010 _getpid
08017f10 g     O .rodata	00000008 I2C1_TXDR_fields
08000b3c g     F .text	00000068 _puts_r
0800bea4 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
080127d8 g     O .rodata	00000100 CAN_F19R1_fields
080076cc g     F .text	0000007a .hidden __cmpdf2
080088c0 g     F .text	00000054 DecodeWriteRegister
0800a744 g     F .text	000000c6 HAL_PCD_EP_ClrStall
0801a1d0 g     O .rodata	00000008 TIM16_CCR1_fields
0800ce24  w    F .text	00000002 DebugMon_Handler
08008498 g     F .text	00000004 _lseek_r
08016e18 g     O .rodata	00000020 FPU_MVFR1_fields
0800bc9a g     F .text	0000001a HAL_PCD_ResetCallback
0800a840 g     F .text	0000001c PCD_WritePMA
08012fd8 g     O .rodata	00000100 CAN_F22R1_fields
08014bd8 g     O .rodata	000000e0 CAN_FA1R_fields
200011b8 g     O .bss	00000224 hUSBDDevice
0801b0e8 g     O .rodata	00000048 TIM2_SMCR_fields
08018200 g     O .rodata	00000020 NVIC_IPR1_fields
0801d880 g     O .parsetable	0000000c CmdTestE
080076cc g     F .text	0000007a .hidden __eqdf2
08011dd8 g     O .rodata	00000100 CAN_F14R1_fields
0801b828 g     O .rodata	00000008 TIM8_PSC_fields
0800c982 g     F .text	0000001c I3G4250D_ReadID
08019f60 g     O .rodata	00000030 TIM15_EGR_fields
08008518 g     F .text	0000004c CmdStats
0800c7e6 g     F .text	0000002e L3GD20_FilterConfig
0800a80a g     F .text	00000036 HAL_PCDEx_PMAConfig
0801b180 g     O .rodata	00000140 TIM2_registers
08019f00 g     O .rodata	00000058 TIM15_DIER_fields
08016260 g     O .rodata	00000008 DMA1_CMAR3_fields
08017120 g     O .rodata	00000100 GPIOA_BSRR_fields
080161f0 g     O .rodata	00000060 DMA1_CCR7_fields
08009dc4 g     F .text	000001d8 HAL_PCD_EP_Close
0801bd40 g     O .rodata	00000008 TSC_IOG6CR_fields
08011110 g     O .rodata	00000028 ADC1_SQR1_fields
08000f94 g     F .text	00000006 strtok_r
0800723c g     F .text	0000005a .hidden __floatdidf
08014e88 g     O .rodata	000000e0 CAN_FS1R_fields
08006ef4 g     F .text	00000028 _kill_r
0801a8a0 g     O .rodata	00000030 TIM1_CCMR2_Input_fields
080194c8 g     O .rodata	00000010 RTC_SHIFTR_fields
08000af8 g     F .text	00000028 printf
0800c76a g     F .text	00000040 L3GD20_EnableIT
080152d0 g     O .rodata	00000028 CAN_TI1R_fields
0800b408 g     F .text	00000016 USBD_SetClassConfig
08018140 g     O .rodata	00000020 NVIC_IPR14_fields
08006cdc g     F .text	00000034 _wcrtomb_r
0800ce24  w    F .text	00000002 TIM1_CC_IRQHandler
08009770 g     F .text	00000068 HAL_NVIC_SetPriority
08006dcc g     F .text	00000038 _signal_r
080111c8 g     O .rodata	000001b0 ADC1_registers
0800bc82 g     F .text	00000010 HAL_PCD_DataInStageCallback
0801b020 g     O .rodata	00000018 TIM2_CR2_fields
08016f98 g     O .rodata	00000008 Flash_WRPR_fields
080058cc g     F .text	00000020 __sseek
08003ae0 g     F .text	00000008 __sinit
08016010 g     O .rodata	00000060 DMA1_CCR2_fields
080065f4 g     F .text	000000b0 __swbuf_r
0800ce24  w    F .text	00000002 HardFault_Handler
0801bdd8 g     O .rodata	00000100 TSC_IOHCR_fields
08015c18 g     O .rodata	00000020 CRC_CR_fields
08006948 g     F .text	00000040 _setlocale_r
08003a14 g     F .text	0000002e __sfmoreglue
08018340 g     O .rodata	00000008 NVIC_ISER0_fields
08004a98 g     F .text	00000002 __malloc_unlock
08019d50 g     O .rodata	00000008 TIM15_ARR_fields
080192b8 g     O .rodata	00000008 RTC_BKP24R_fields
00000400 g       *ABS*	00000000 _Min_Stack_Size
0801a990 g     O .rodata	00000008 TIM1_CCR3_fields
0801ab20 g     O .rodata	00000008 TIM1_DMAR_fields
08019e58 g     O .rodata	00000008 TIM15_CCR1_fields
0800ce24  w    F .text	00000002 USB_HP_IRQHandler
0801c428 g     O .rodata	00000010 USART1_RTOR_fields
08018c08 g     O .rodata	00000070 RCC_AHBENR_fields
0801afc0 g     O .rodata	00000018 TIM2_CNT_fields
08017f18 g     O .rodata	000000b0 I2C1_registers
08007d08 g     F .text	0000001a SysTick_Handler
0801d850 g     O .parsetable	0000000c _bb_A3E
08019610 g     O .rodata	00000008 RTC_WPR_fields
080194d8 g     O .rodata	00000008 RTC_SSR_fields
080099b0 g     F .text	0000000a HAL_GPIO_WritePin
0801bd20 g     O .rodata	00000008 TSC_IOG2CR_fields
0800bb9e g     F .text	0000002e USBD_CDC_ReceivePacket
0800ce24  w    F .text	00000002 PVD_IRQHandler
080162f0 g     O .rodata	00000008 DMA1_CPAR7_fields
0800c4c8 g     F .text	0000001c LSM303DLHC_AccRebootCmd
0801b2c8 g     O .rodata	00000010 TIM6_CNT_fields
0801aaa8 g     O .rodata	00000078 TIM1_DIER_fields
0800bc92 g     F .text	00000008 HAL_PCD_SOFCallback
08018080 g     O .rodata	00000008 NVIC_ICPR0_fields
080049c4 g     F .text	000000ce memmove
0800ce24  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800c1d0 g     F .text	00000060 GYRO_IO_Init
08018240 g     O .rodata	00000020 NVIC_IPR2_fields
0801cba4 g       *ABS*	00000000 _sidata
08003acc g     F .text	00000014 _cleanup
0800968c g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800ce24  w    F .text	00000002 PendSV_Handler
0801d874 g     O .parsetable	0000000c CmdButtonE
08018088 g     O .rodata	00000008 NVIC_ICPR1_fields
0800ce24  w    F .text	00000002 NMI_Handler
080097d8 g     F .text	00000018 HAL_NVIC_EnableIRQ
08004a9c g     F .text	0000004c _Balloc
08007d6c g     F .text	00000058 bb_watch
0801cb98 g       .ARM	00000000 __exidx_end
08000f2c g     F .text	00000066 __strtok_r
0800ce24  w    F .text	00000002 EXTI3_IRQHandler
08009620 g     F .text	0000006c HAL_RCC_GetSysClockFreq
0800c114 g     F .text	0000001c BSP_LED_Off
080162a8 g     O .rodata	00000008 DMA1_CNDTR5_fields
0801b420 g     O .rodata	00000098 TIM8_CCER_fields
080148d8 g     O .rodata	00000100 CAN_F8R2_fields
080076bc g     F .text	0000008a .hidden __gtdf2
0801d94c g       .parsetable	00000000 _parsetable_end
08018c78 g     O .rodata	00000048 RCC_AHBRSTR_fields
080009b0 g     F .text	0000000c __errno
08019318 g     O .rodata	00000008 RTC_BKP6R_fields
080152f8 g     O .rodata	00000028 CAN_TI2R_fields
0800b264 g     F .text	0000009e HAL_IWDG_Init
0800b5e4 g     F .text	000001f4 USBD_StdDevReq
0800caa4 g     F .text	0000002e I3G4250D_FilterConfig
0800ab16 g     F .text	00000090 HAL_I2C_Init
0800415c g     F .text	00000004 __localeconv_l
08018350 g     O .rodata	00000008 NVIC_ISER2_fields
0801d928 g     O .parsetable	0000000c CmdWE
0800aba6  w    F .text	00000002 HAL_I2C_MspDeInit
08015070 g     O .rodata	00000020 CAN_RDH0R_fields
08016db8 g     O .rodata	00000020 FPU_FPDSCR_fields
0800cad2 g     F .text	0000002e I3G4250D_FilterCmd
0800bde8 g     F .text	0000000c USBD_VCP_DeviceDescriptor
080099c4 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
080096c4  w    F .text	00000002 HAL_MspInit
080114d8 g     O .rodata	00000100 CAN_F0R2_fields
0801bd50 g     O .rodata	00000008 TSC_IOG8CR_fields
0800bd80 g     F .text	00000026 USBD_LL_IsStallEP
080113d8 g     O .rodata	00000100 CAN_F0R1_fields
08019fa0 g     O .rodata	00000020 TIM15_SMCR_fields
0800bd34 g     F .text	0000000e USBD_LL_Start
0800c320 g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
0800c3e4 g     F .text	00000040 BSP_ACCELERO_Init
0800b3fe g     F .text	0000000a USBD_Start
0800848a g     F .text	0000000a _fstat_r
080099ba g     F .text	00000008 HAL_GPIO_TogglePin
0801b680 g     O .rodata	00000048 TIM8_CR1_fields
20001f04 g     O .bss	00000004 errno
08016eb0 g     O .rodata	00000008 Flash_AR_fields
08013bd8 g     O .rodata	00000100 CAN_F2R1_fields
08015a58 g     O .rodata	00000058 COMP_COMP4_CSR_fields
08017658 g     O .rodata	00000040 GPIOB_AFRH_fields
08005888 g     F .text	00000004 __seofread
0800ce54 g       .text	00000000 _etext
08016a88 g     O .rodata	00000010 EXTI_PR2_fields
0801c538 g     O .rodata	00000028 USB_FS_FNR_fields
20000c94 g       .bss	00000000 _sbss
08015ba8 g     O .rodata	00000070 COMP_registers
080140d8 g     O .rodata	00000100 CAN_F4R2_fields
0800bde4 g     F .text	00000002 USBD_static_free
08016250 g     O .rodata	00000008 DMA1_CMAR1_fields
0801b048 g     O .rodata	00000060 TIM2_DIER_fields
08007758 g     F .text	00000010 .hidden __aeabi_cdcmple
0801bd18 g     O .rodata	00000008 TSC_IOG1CR_fields
0801a470 g     O .rodata	00000020 TIM17_CCER_fields
0801b830 g     O .rodata	00000008 TIM8_RCR_fields
0801a1d8 g     O .rodata	00000010 TIM16_CNT_fields
08017758 g     O .rodata	00000100 GPIOB_BSRR_fields
080122d8 g     O .rodata	00000100 CAN_F16R2_fields
08007e38 g     F .text	00000058 bb_tilt_game
08011020 g     O .rodata	00000018 ADC1_OFR1_fields
080134d8 g     O .rodata	00000100 CAN_F24R2_fields
080192b0 g     O .rodata	00000008 RTC_BKP23R_fields
08019e60 g     O .rodata	00000008 TIM15_CCR2_fields
08010e18 g     O .rodata	00000098 ADC1_CFGR_fields
08019258 g     O .rodata	00000008 RTC_BKP13R_fields
0800b3f0 g     F .text	0000000e USBD_RegisterClass
08012bd8 g     O .rodata	00000100 CAN_F20R1_fields
0801c2e8 g     O .rodata	00000060 USART1_ICR_fields
080136d8 g     O .rodata	00000100 CAN_F25R2_fields
0801bd30 g     O .rodata	00000008 TSC_IOG4CR_fields
08013ad8 g     O .rodata	00000100 CAN_F27R2_fields
0801b880 g     O .rodata	00000078 TIM8_SR_fields
0801c560 g     O .rodata	00000050 USB_FS_ISTR_fields
0801d934 g     O .parsetable	0000000c bb_watchdogE
08016258 g     O .rodata	00000008 DMA1_CMAR2_fields
080192c8 g     O .rodata	00000008 RTC_BKP26R_fields
08011138 g     O .rodata	00000028 ADC1_SQR2_fields
0801a4d8 g     O .rodata	00000010 TIM17_CNT_fields
0801c990 g     O .rodata	00000008 WWDG_SR_fields
0800981c g     F .text	00000188 HAL_GPIO_Init
08016c58 g     O .rodata	000000c0 EXTI_registers
0800b5b0 g     F .text	00000006 USBD_LL_SetSpeed
20000b98 g     O .data	00000004 BUTTON_PORT
0800c424 g     F .text	00000010 BSP_ACCELERO_GetXYZ
0800b376 g     F .text	00000050 HAL_IWDG_Refresh
08018098 g     O .rodata	00000008 NVIC_ICTR_fields
0801b2c0 g     O .rodata	00000008 TIM6_ARR_fields
08015320 g     O .rodata	000000b0 CAN_TSR_fields
0800834c g     F .text	000000b4 DumpBuffer
08000b20 g     F .text	00000006 _putchar_r
08017220 g     O .rodata	00000080 GPIOA_IDR_fields
0801c708 g     O .rodata	00000050 USB_FS_USB_EP3R_fields
0800bcb6 g     F .text	00000002 HAL_PCD_ResumeCallback
08004890 g     F .text	00000134 memcpy
0801d838 g     O .parsetable	0000000c lab6E
08007748 g     F .text	00000020 .hidden __aeabi_cdrcmple
080146d8 g     O .rodata	00000100 CAN_F7R2_fields
0801a9c8 g     O .rodata	00000010 TIM1_CNT_fields
0800c230 g     F .text	00000044 GYRO_IO_Write
08000bb4 g     F .text	00000154 setvbuf
08007b64 g     F .text	0000005c CmdLED
20000c94 g     O .data	00000000 .hidden __TMC_END__
0801abd8 g     O .rodata	00000078 TIM1_SR_fields
08018120 g     O .rodata	00000020 NVIC_IPR13_fields
08019f90 g     O .rodata	00000008 TIM15_PSC_fields
0800b808 g     F .text	000000a8 USBD_StdEPReq
08003930 g     F .text	0000000c _cleanup_r
08017020 g     O .rodata	00000040 GPIOA_AFRH_fields
080071c4 g     F .text	00000022 .hidden __floatsidf
0800cbf2 g     F .text	00000020 LSM303AGR_AccInit
08015d58 g     O .rodata	00000010 DAC_DHR12RD_fields
080159b0 g     O .rodata	00000058 COMP_COMP2_CSR_fields
08000248 g     F .text	00000000 myTest
0801b750 g     O .rodata	00000078 TIM8_DIER_fields
08010f00 g     O .rodata	00000010 ADC1_DIFSEL_fields
080076c4 g     F .text	00000082 .hidden __ltdf2
0800c148 g     F .text	00000074 BSP_PB_Init
0800ce24  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
08007d22 g     F .text	00000010 EXTI0_IRQHandler
0801b818 g     O .rodata	00000010 TIM8_OR_fields
0800ce24  w    F .text	00000002 I2C2_EV_IRQHandler
080151a0 g     O .rodata	00000020 CAN_TDH0R_fields
0801c758 g     O .rodata	00000050 USB_FS_USB_EP4R_fields
08007848 g     F .text	00000000 .hidden __aeabi_uldivmod
0801c998 g     O .rodata	00000030 WWDG_registers
0801a5d8 g     O .rodata	00000008 TIM17_RCR_fields
08000ba4 g     F .text	00000010 puts
0800b964 g     F .text	00000016 USBD_CtlSendStatus
0800ce24  w    F .text	00000002 FPU_IRQHandler
08009730  w    F .text	0000001a HAL_Delay
0800b7d8 g     F .text	00000030 USBD_StdItfReq
0801b640 g     O .rodata	00000008 TIM8_CCR4_fields
20000a34 g     O .data	00000004 SystemCoreClock
08008044 g     F .text	00000020 mes_IWDGRefresh
0801a000 g     O .rodata	00000120 TIM15_registers
0801d904 g     O .parsetable	0000000c bb_random_led_functionE
0800a0a8 g     F .text	00000174 HAL_PCD_EP_Transmit
08000984 g     F .text	00000012 my_Tick
08005304 g     F .text	00000060 __ratio
08013dd8 g     O .rodata	00000100 CAN_F3R1_fields
0800b8b0 g     F .text	00000028 USBD_ParseSetupRequest
0801af80 g     O .rodata	00000010 TIM2_CCR1_fields
08015da8 g     O .rodata	00000010 DAC_SWTRIGR_fields
0800ce24  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
08011bd8 g     O .rodata	00000100 CAN_F13R1_fields
08004260 g     F .text	00000010 malloc
08017fd8 g     O .rodata	00000008 IWDG_RLR_fields
08000ad8 g     F .text	0000001e _printf_r
0800a85c g     F .text	00000022 PCD_ReadPMA
080008a6 g     F .text	00000026 string_test
08006e04 g     F .text	00000056 _raise_r
08007be8 g     F .text	0000004c CmdGyro
080066b4 g     F .text	0000003c __assert_func
08014e78 g     O .rodata	00000010 CAN_FMR_fields
0800d428 g     O .rodata	000000c8 __mprec_tens
080187d8 g     O .rodata	00000040 OPAMP_registers
080162a0 g     O .rodata	00000008 DMA1_CNDTR4_fields
08018058 g     O .rodata	00000008 NVIC_IABR1_fields
08010dc8 g     O .rodata	00000030 ADC1_2_registers
20000b64 g     O .data	0000001c VCP_Desc
080169b8 g     O .rodata	000000d0 EXTI_PR1_fields
0800cc60 g     F .text	00000020 LSM303AGR_AccFilterCmd
0800ce24  w    F .text	00000002 UsageFault_Handler
0801b648 g     O .rodata	00000020 TIM8_CCR5_fields
0800ce24  w    F .text	00000002 ADC1_2_IRQHandler
20000cb0 g     O .bss	00000004 __malloc_top_pad
20001168 g     O .bss	00000050 input
08006f1c g     F .text	00000004 _getpid_r
08013fd8 g     O .rodata	00000100 CAN_F4R1_fields
080111b8 g     O .rodata	00000010 ADC1_TR3_fields
08007ef0 g     F .text	0000004c _bb_A3
080162c8 g     O .rodata	00000008 DMA1_CPAR2_fields
0800c676 g     F .text	00000002 L3GD20_DeInit
20000c94 g       .bss	00000000 __bss_start__
0801a258 g     O .rodata	00000048 TIM16_DIER_fields
080099a4 g     F .text	0000000c HAL_GPIO_ReadPin
08018078 g     O .rodata	00000008 NVIC_ICER2_fields
080010f8 g     F .text	00000018 strtoul
20001658 g     O .bss	00000004 BuffLength
080071a4 g     F .text	0000001e .hidden __aeabi_ui2d
08004160 g     F .text	00000008 _localeconv_r
0800c936 g     F .text	00000034 I3G4250D_Init
0801b628 g     O .rodata	00000008 TIM8_CCR1_fields
2000165c g     O .bss	0000006c UartHandle
08014ad8 g     O .rodata	00000100 CAN_F9R2_fields
08015d30 g     O .rodata	00000008 DAC_DHR12L2_fields
08004cec g     F .text	0000002c __i2b
08003db4 g     F .text	00000308 __sfvwrite_r
0800b5b6 g     F .text	00000018 USBD_LL_SOF
08006e5c g     F .text	00000052 __sigtramp_r
20000000 g       .data	00000000 _sdata
0800ce24  w    F .text	00000002 SPI1_IRQHandler
080152a8 g     O .rodata	00000028 CAN_TI0R_fields
0800ce24  w    F .text	00000002 CAN_SCE_IRQHandler
08007878 g     F .text	000002c2 .hidden __udivmoddi4
08006f20 g     F .text	00000000 .hidden __aeabi_drsub
080110c8 g     O .rodata	00000048 ADC1_SMPR2_fields
08018280 g     O .rodata	00000020 NVIC_IPR4_fields
08008454 g     F .text	00000030 _sbrk_r
0800039a g     F .text	00000000 lab8
0800cbf0 g     F .text	00000002 LSM303AGR_AccDeInit
080181c0 g     O .rodata	00000020 NVIC_IPR18_fields
0800c96a g     F .text	00000018 I3G4250D_LowPower
0800bbcc g     F .text	00000098 HAL_PCD_MspInit
0801b310 g     O .rodata	00000010 TIM6_DIER_fields
0801a840 g     O .rodata	00000060 TIM1_CCMR1_Output_fields
0801c348 g     O .rodata	000000b0 USART1_ISR_fields
0800ce24  w    F .text	00000002 TIM6_DAC_IRQHandler
08017d38 g     O .rodata	00000068 I2C1_CR2_fields
0801b630 g     O .rodata	00000008 TIM8_CCR2_fields
0800a6a4 g     F .text	000000a0 HAL_PCD_EP_SetStall
0800862c g     F .text	0000000a _read_r
08007ff0 g     F .text	00000034 mes_InitIWDG
0801ab90 g     O .rodata	00000048 TIM1_SMCR_fields
080113a8 g     O .rodata	00000030 CAN_ESR_fields
0800b3c6 g     F .text	0000002a USBD_Init
080176d8 g     O .rodata	00000080 GPIOB_BRR_fields
200013e0 g     O .bss	00000178 hpcd
0800777c g     F .text	00000012 .hidden __aeabi_dcmplt
0801d868 g     O .parsetable	0000000c bb_watchE
0800675c g     F .text	00000088 _fclose_r
08011038 g     O .rodata	00000018 ADC1_OFR2_fields
0801adf0 g     O .rodata	00000010 TIM2_ARR_fields
08003908 g     F .text	00000024 fflush
0800c2bc g     F .text	00000064 COMPASSACCELERO_IO_Init
20000cdc g     O .bss	00000004 __malloc_max_sbrked_mem
0800c934 g     F .text	00000002 I3G4250D_DeInit
080149d8 g     O .rodata	00000100 CAN_F9R1_fields
080193f8 g     O .rodata	00000038 RTC_DR_fields
0801a980 g     O .rodata	00000008 TIM1_CCR1_fields
080097f0 g     F .text	0000002c HAL_SYSTICK_Config
080071e8 g     F .text	00000042 .hidden __extendsfdf2
08016f70 g     O .rodata	00000008 Flash_OPTKEYR_fields
08011068 g     O .rodata	00000018 ADC1_OFR4_fields
200013dc g     O .bss	00000004 USBDDataIn
080074ec g     F .text	000001d0 .hidden __aeabi_ddiv
0800ce24  w    F .text	00000002 TIM8_UP_IRQHandler
20000b47 g     O .data	0000001a USBD_StringSerial
080135d8 g     O .rodata	00000100 CAN_F25R1_fields
08019a60 g     O .rodata	00000018 SPI1_I2SPR_fields
08010fc8 g     O .rodata	00000008 ADC1_JDR1_fields
08017fc8 g     O .rodata	00000008 IWDG_KR_fields
0801c618 g     O .rodata	00000050 USB_FS_USB_EP0R_fields
08006f2c g     F .text	00000276 .hidden __adddf3
0800c368 g     F .text	0000003c COMPASSACCELERO_IO_Write
080132d8 g     O .rodata	00000100 CAN_F23R2_fields
08015c58 g     O .rodata	00000050 CRC_registers
0801d91c g     O .parsetable	0000000c testTickE
0801c108 g     O .rodata	000000a0 USART1_CR1_fields
08019620 g     O .rodata	00000320 RTC_registers
080142d8 g     O .rodata	00000100 CAN_F5R2_fields
0801a520 g     O .rodata	00000028 TIM17_CR2_fields
08005178 g     F .text	000000b8 __b2d
0801cb90 g       .ARM	00000000 __exidx_start
0801a190 g     O .rodata	00000018 TIM16_CCMR1_Input_fields
08016f10 g     O .rodata	00000008 Flash_KEYR_fields
08007298 g     F .text	00000254 .hidden __aeabi_dmul
0800c65a g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0801b578 g     O .rodata	00000060 TIM8_CCMR2_Output_fields
08018850 g     O .rodata	00000028 PWR_CSR_fields
080191a8 g     O .rodata	00000010 RTC_ALRMASSR_fields
20000b04 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
08019c80 g     O .rodata	00000020 SYSCFG_EXTICR4_fields
08007d34 g     F .text	00000038 _myTest
08018050 g     O .rodata	00000008 NVIC_IABR0_fields
0800d3f0 g     O .rodata	00000004 _global_impure_ptr
08016dd8 g     O .rodata	00000040 FPU_MVFR0_fields
0801a2d8 g     O .rodata	00000008 TIM16_RCR_fields
080054f8 g     F .text	0000036c _realloc_r
080009f0 g     F .text	00000048 __libc_init_array
0800b954 g     F .text	00000010 USBD_CtlContinueRx
08019250 g     O .rodata	00000008 RTC_BKP12R_fields
0801c2d8 g     O .rodata	00000010 USART1_GTPR_fields
08009aa8 g     F .text	0000031c HAL_PCD_EP_Open
0800ce24  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800ce24  w    F .text	00000002 DMA1_Channel4_IRQHandler
0801ab70 g     O .rodata	00000010 TIM1_OR_fields
08017b60 g     O .rodata	00000080 GPIOB_PUPDR_fields
0800a21c g     F .text	00000486 HAL_PCD_IRQHandler
080080b0 g     F .text	00000020 CmdR
080068e0 g     F .text	00000026 _fputwc_r
0800d518 g     O .rodata	00000028 __mprec_bigtens
0801a998 g     O .rodata	00000008 TIM1_CCR4_fields
08004ba0 g     F .text	000000ac __s2b
08006d88 g     F .text	0000000e abort
080071a4 g     F .text	0000001e .hidden __floatunsidf
08015220 g     O .rodata	00000020 CAN_TDL1R_fields
08004fc8 g     F .text	00000038 __mcmp
080182e0 g     O .rodata	00000020 NVIC_IPR7_fields
08007ec8 g     F .text	00000028 testTick
0800c814 g     F .text	0000002e L3GD20_FilterCmd
0801a5a0 g     O .rodata	00000008 TIM17_DMAR_fields
0800aba8 g     F .text	0000002e HAL_I2C_DeInit
08019e68 g     O .rodata	00000010 TIM15_CNT_fields
08003af8 g     F .text	00000014 __fp_lock_all
0800af1c g     F .text	000000a4 HAL_SPI_Init
08019240 g     O .rodata	00000008 RTC_BKP10R_fields
08015028 g     O .rodata	00000048 CAN_MSR_fields
08019068 g     O .rodata	000000d0 RCC_registers
0800ce3c g     F .text	00000000 _init
08015200 g     O .rodata	00000020 CAN_TDL0R_fields
08015d70 g     O .rodata	00000008 DAC_DHR8R2_fields
08018d38 g     O .rodata	00000090 RCC_APB1RSTR_fields
0800c484 g     F .text	00000010 BSP_GYRO_GetXYZ
08019238 g     O .rodata	00000008 RTC_BKP0R_fields
080153d0 g     O .rodata	00000590 CAN_registers
0801d838 g       .parsetable	00000000 _parsetable_start
08016130 g     O .rodata	00000060 DMA1_CCR5_fields
08019328 g     O .rodata	00000008 RTC_BKP8R_fields
0800c9ca g     F .text	0000005e I3G4250D_INT1InterruptConfig
0801bfe8 g     O .rodata	00000110 TSC_registers
0801aef0 g     O .rodata	00000030 TIM2_CCMR2_Input_fields
0800bd64 g     F .text	0000000e USBD_LL_StallEP
08018070 g     O .rodata	00000008 NVIC_ICER1_fields
0801a2a8 g     O .rodata	00000028 TIM16_EGR_fields
0801d8f8 g     O .parsetable	0000000c CmdRE
0800af1a  w    F .text	00000002 HAL_SPI_MspInit
080147d8 g     O .rodata	00000100 CAN_F8R1_fields
0800ce24  w    F .text	00000002 USART3_IRQHandler
08012dd8 g     O .rodata	00000100 CAN_F21R1_fields
08019018 g     O .rodata	00000050 RCC_CSR_fields
0800be2c g     F .text	00000040 USBD_VCP_SerialStrDescriptor
080174a8 g     O .rodata	00000080 GPIOA_OTYPER_fields
08015d38 g     O .rodata	00000010 DAC_DHR12LD_fields
0801a2e0 g     O .rodata	00000030 TIM16_SR_fields
0801ac50 g     O .rodata	000001a0 TIM1_registers
080009bc g     F .text	00000034 __libc_fini_array
08010fe8 g     O .rodata	00000038 ADC1_JSQR_fields
0800cb00 g     F .text	000000f0 I3G4250D_ReadXYZAngRate
20001f08 g       .bss	00000000 _ebss
08008064 g     F .text	00000030 CmdTest
0800c3a4 g     F .text	00000040 COMPASSACCELERO_IO_Read
20000bf8 g     O .data	00000034 L3gd20Drv
08016d18 g     O .rodata	00000050 FPU_CPACR_fields
0800ce24  w    F .text	00000002 DMA1_Channel7_IRQHandler
08015240 g     O .rodata	00000020 CAN_TDL2R_fields
0800acda g     F .text	0000010e HAL_I2C_Mem_Read
08017060 g     O .rodata	00000040 GPIOA_AFRL_fields
0800cdd4  w    F .text	00000038 Reset_Handler
20000a70 g     O .data	00000043 USBD_CDC_CfgFSDesc
080192e0 g     O .rodata	00000008 RTC_BKP29R_fields
0800c434 g     F .text	00000050 BSP_GYRO_Init
080180a0 g     O .rodata	00000020 NVIC_IPR0_fields
080173a8 g     O .rodata	00000080 GPIOA_ODR_fields
08004c4c g     F .text	00000040 __hi0bits
08018160 g     O .rodata	00000020 NVIC_IPR15_fields
0801a988 g     O .rodata	00000008 TIM1_CCR2_fields
08016a98 g     O .rodata	000000d0 EXTI_RTSR1_fields
08015d90 g     O .rodata	00000008 DAC_DOR2_fields
08015c38 g     O .rodata	00000008 CRC_DR_fields
080077f8 g     F .text	0000004e .hidden __fixdfsi
08017a60 g     O .rodata	00000080 GPIOB_OSPEEDR_fields
08000388 g     F .text	00000000 _bb_a5_button_handler
0801d8d4 g     O .parsetable	0000000c CmdLEDE
0800ce24  w    F .text	00000002 UART5_IRQHandler
080089c4 g     F .text	00000054 DecodePeripheral
08019c20 g     O .rodata	00000020 SYSCFG_EXTICR1_fields
080118d8 g     O .rodata	00000100 CAN_F11R2_fields
0800ce24  w    F .text	00000002 ADC3_IRQHandler
080195d8 g     O .rodata	00000038 RTC_TSTR_fields
0801afd8 g     O .rodata	00000048 TIM2_CR1_fields
080096f0 g     F .text	00000024 HAL_Init
08012ad8 g     O .rodata	00000100 CAN_F1R2_fields
08005444 g     F .text	00000054 _putc_r
0801d8bc g     O .parsetable	0000000c _bb_lab7E
0800b93a g     F .text	0000001a USBD_CtlPrepareRx
08019278 g     O .rodata	00000008 RTC_BKP17R_fields
080150d0 g     O .rodata	00000020 CAN_RDL1R_fields
080131d8 g     O .rodata	00000100 CAN_F23R1_fields
0800afc2 g     F .text	0000002a HAL_SPI_DeInit
0800ce24  w    F .text	00000002 TIM4_IRQHandler
080125d8 g     O .rodata	00000100 CAN_F18R1_fields
0801c898 g     O .rodata	000000d0 USB_FS_registers
08006f2c g     F .text	00000276 .hidden __aeabi_dadd
0801b638 g     O .rodata	00000008 TIM8_CCR3_fields
080076c4 g     F .text	00000082 .hidden __ledf2
08011cd8 g     O .rodata	00000100 CAN_F13R2_fields
0800d72e g     O .rodata	00000008 LEDs
0801ae60 g     O .rodata	00000030 TIM2_CCMR1_Input_fields
08015d48 g     O .rodata	00000008 DAC_DHR12R1_fields
08017e70 g     O .rodata	00000028 I2C1_OAR1_fields
0800bddc g     F .text	00000008 USBD_static_malloc
08015120 g     O .rodata	00000020 CAN_RF0R_fields
0800ce24  w    F .text	00000002 CAN_RX1_IRQHandler
0800ce24  w    F .text	00000002 DMA2_Channel1_IRQHandler
08019320 g     O .rodata	00000008 RTC_BKP7R_fields
08004e64 g     F .text	00000098 __pow5mult
08011198 g     O .rodata	00000010 ADC1_TR1_fields
080162b8 g     O .rodata	00000008 DMA1_CNDTR7_fields
0800722c g     F .text	0000006a .hidden __aeabi_ul2d
0800bb70 g     F .text	0000002e USBD_CDC_TransmitPacket
20000b9c g     O .data	00000004 I2cxTimeout
0801bd38 g     O .rodata	00000008 TSC_IOG5CR_fields
08015d50 g     O .rodata	00000008 DAC_DHR12R2_fields
08019280 g     O .rodata	00000008 RTC_BKP18R_fields
08000970 g     F .text	00000014 mytest
08016278 g     O .rodata	00000008 DMA1_CMAR6_fields
08007e10 g     F .text	00000028 bb_random_led_function
08019dd8 g     O .rodata	00000030 TIM15_CCMR1_Input_fields
08007c34 g     F .text	0000002c CmdButton
080099c2  w    F .text	00000002 HAL_GPIO_EXTI_Callback
0800b97a g     F .text	00000016 USBD_CtlReceiveStatus
0801afb0 g     O .rodata	00000010 TIM2_CCR4_fields
20001f08 g       ._user_heap_stack	00000000 end
20000b80 g     O .data	00000008 LineCoding
08019940 g     O .rodata	00000070 SPI1_CR1_fields
0800ce24  w    F .text	00000002 I2C1_EV_IRQHandler
08019ae0 g     O .rodata	00000090 SPI1_registers
08007e90 g     F .text	00000038 _bb_lab7
0800bd42 g     F .text	00000014 USBD_LL_OpenEP
0801b740 g     O .rodata	00000010 TIM8_DCR_fields
08008a6c g     F .text	00000060 DecodePrintRegisters
0801c5b0 g     O .rodata	00000068 USB_FS_USB_CNTR_fields
0801c440 g     O .rodata	000000b0 USART1_registers
0800c7aa g     F .text	0000003c L3GD20_DisableIT
0801c438 g     O .rodata	00000008 USART1_TDR_fields
08018cc0 g     O .rodata	00000078 RCC_APB1ENR_fields
0800afc0  w    F .text	00000002 HAL_SPI_MspDeInit
08016290 g     O .rodata	00000008 DMA1_CNDTR2_fields
08014f68 g     O .rodata	00000070 CAN_IER_fields
08015fb0 g     O .rodata	00000060 DMA1_CCR1_fields
08018068 g     O .rodata	00000008 NVIC_ICER0_fields
08018348 g     O .rodata	00000008 NVIC_ISER1_fields
0800b4e6 g     F .text	0000008c USBD_LL_DataInStage
080192f8 g     O .rodata	00000008 RTC_BKP31R_fields
0801ab28 g     O .rodata	00000048 TIM1_EGR_fields
0801ae90 g     O .rodata	00000060 TIM2_CCMR1_Output_fields
08015d98 g     O .rodata	00000010 DAC_SR_fields
0801af90 g     O .rodata	00000010 TIM2_CCR2_fields
0800bcb8 g     F .text	0000007c USBD_LL_Init
08019300 g     O .rodata	00000008 RTC_BKP3R_fields
0800cd72 g     F .text	00000044 LSM303AGR_AccClickITEnable
0800c0f8 g     F .text	0000001c BSP_LED_On
0800c678 g     F .text	00000034 L3GD20_Init
080077b8 g     F .text	00000012 .hidden __aeabi_dcmpgt
0800ce24  w    F .text	00000002 DMA1_Channel6_IRQHandler
20000a38 g     O .data	00000038 USBD_CDC
0800b41e g     F .text	0000000e USBD_ClrClassConfig
08019310 g     O .rodata	00000008 RTC_BKP5R_fields
0800ce24  w    F .text	00000002 UART4_IRQHandler
0800c6ac g     F .text	00000018 L3GD20_LowPower
0800ce24  w    F .text	00000002 DMA2_Channel4_IRQHandler
0800bb46 g     F .text	0000000e USBD_CDC_RegisterInterface
08003ae8 g     F .text	00000002 __sfp_lock_acquire
080047f0 g     F .text	00000000 memchr
20001f08 g       .bss	00000000 __bss_end__
08003bc0 g     F .text	000001f4 _free_r
0800ce24  w    F .text	00000002 TIM3_IRQHandler
0800ce24  w    F .text	00000002 RCC_IRQHandler
08019338 g     O .rodata	00000020 RTC_CALR_fields
08006988 g     F .text	0000000c __locale_mb_cur_max
080077a4 g     F .text	00000012 .hidden __aeabi_dcmpge
08015d28 g     O .rodata	00000008 DAC_DHR12L1_fields
0801a5e0 g     O .rodata	00000030 TIM17_SR_fields
20000c2c g     O .data	00000034 I3g4250Drv
080008cc g     F .text	00000016 bb_led_demo_a2
00001000 g       *ABS*	00000000 _Min_Heap_Size
08017ae0 g     O .rodata	00000080 GPIOB_OTYPER_fields
0800ce24  w    F .text	00000002 DMA1_Channel1_IRQHandler
08019330 g     O .rodata	00000008 RTC_BKP9R_fields
08011ed8 g     O .rodata	00000100 CAN_F14R2_fields
08006f28 g     F .text	0000027a .hidden __aeabi_dsub
0800bc70 g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800ce24 g       .text	00000002 Default_Handler
200008b0 g     O .data	00000004 __malloc_sbrk_base
0800be88 g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800cc40 g     F .text	00000020 LSM303AGR_AccFilterConfig
080172a0 g     O .rodata	00000088 GPIOA_LCKR_fields
080194e0 g     O .rodata	00000090 RTC_TAFCR_fields
20000b88 g     O .data	00000010 USBD_CDC_fops
080175a8 g     O .rodata	000000b0 GPIOA_registers
08018368 g     O .rodata	00000008 NVIC_ISPR2_fields
0800ce24  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
0801af20 g     O .rodata	00000060 TIM2_CCMR2_Output_fields
080178d8 g     O .rodata	00000088 GPIOB_LCKR_fields
0801b6c8 g     O .rodata	00000078 TIM8_CR2_fields
0800a098 g     F .text	00000010 HAL_PCD_EP_GetRxCount
08011378 g     O .rodata	00000030 CAN_BTR_fields
0800722c g     F .text	0000006a .hidden __floatundidf
080160d0 g     O .rodata	00000060 DMA1_CCR4_fields
080180c0 g     O .rodata	00000020 NVIC_IPR10_fields
0801a420 g     O .rodata	00000008 TIM17_ARR_fields
08011ad8 g     O .rodata	00000100 CAN_F12R2_fields
08004efc g     F .text	000000cc __lshift
0801c400 g     O .rodata	00000028 USART1_RQR_fields
0801a558 g     O .rodata	00000048 TIM17_DIER_fields
08006ec0 g     F .text	00000010 signal
08000466 g     F .text	0000007a a4_game_time_logic
080192a8 g     O .rodata	00000008 RTC_BKP22R_fields
080151e0 g     O .rodata	00000020 CAN_TDH2R_fields
0801ab88 g     O .rodata	00000008 TIM1_RCR_fields
0800bd72 g     F .text	0000000e USBD_LL_ClearStallEP
080182a0 g     O .rodata	00000020 NVIC_IPR5_fields
08016f18 g     O .rodata	00000058 Flash_OBR_fields
0800ce24  w    F .text	00000002 EXTI15_10_IRQHandler
08015278 g     O .rodata	00000018 CAN_TDT1R_fields
0800c844 g     F .text	000000f0 L3GD20_ReadXYZAngRate
08019570 g     O .rodata	00000038 RTC_TR_fields
080181a0 g     O .rodata	00000020 NVIC_IPR17_fields
08002760 g     F .text	00000068 __register_exitproc
08016eb8 g     O .rodata	00000058 Flash_CR_fields
08019a80 g     O .rodata	00000058 SPI1_SR_fields
0801c4f8 g     O .rodata	00000040 USB_FS_DADDR_fields
08016c48 g     O .rodata	00000010 EXTI_SWIER2_fields
08009a7a g     F .text	0000002c HAL_PCD_SetAddress
080181e0 g     O .rodata	00000020 NVIC_IPR19_fields
0801b330 g     O .rodata	00000008 TIM6_SR_fields
080129d8 g     O .rodata	00000100 CAN_F1R1_fields
0801a5d0 g     O .rodata	00000008 TIM17_PSC_fields
08019c40 g     O .rodata	00000020 SYSCFG_EXTICR2_fields
08004d18 g     F .text	0000014c __multiply
08019a10 g     O .rodata	00000008 SPI1_CRCPR_fields
0800c4e4 g     F .text	00000020 LSM303DLHC_AccFilterConfig
08009370 g     F .text	000002b0 HAL_RCC_ClockConfig
0800974c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
20000a24 g     O .data	00000004 Commands
080111a8 g     O .rodata	00000010 ADC1_TR2_fields
20000cb4 g     O .bss	00000028 __malloc_current_mallinfo
0800c5da g     F .text	00000020 LSM303DLHC_AccFilterClickCmd
080195d0 g     O .rodata	00000008 RTC_TSSSR_fields
080081c8 g     F .text	0000013c TaskInput
0801b308 g     O .rodata	00000008 TIM6_CR2_fields
08018fc8 g     O .rodata	00000050 RCC_CR_fields
08014d98 g     O .rodata	000000e0 CAN_FM1R_fields
0801a9c0 g     O .rodata	00000008 TIM1_CCR6_fields
08005230 g     F .text	000000d4 __d2b
0801c1a8 g     O .rodata	00000098 USART1_CR2_fields
0801a718 g     O .rodata	00000060 TIM1_BDTR_fields
08000d08 g     F .text	00000048 strcasecmp
08017ff8 g     O .rodata	00000008 IWDG_WINR_fields
08011080 g     O .rodata	00000048 ADC1_SMPR1_fields
0800c274 g     F .text	00000048 GYRO_IO_Read
0800099c g     F .text	00000002 my_Init
08017e98 g     O .rodata	00000018 I2C1_OAR2_fields
080137d8 g     O .rodata	00000100 CAN_F26R1_fields
0800b262  w    F .text	00000002 HAL_IWDG_MspInit
080010dc g     F .text	00000002 _strtoul_r
08015c50 g     O .rodata	00000008 CRC_POL_fields
08016268 g     O .rodata	00000008 DMA1_CMAR4_fields
0800ce24  w    F .text	00000002 TIM7_IRQHandler
0800c70c g     F .text	0000005e L3GD20_INT1InterruptConfig
0800bcb4 g     F .text	00000002 HAL_PCD_SuspendCallback
080162d0 g     O .rodata	00000008 DMA1_CPAR3_fields
0801d8e0 g     O .parsetable	0000000c _bb_A2E
08019260 g     O .rodata	00000008 RTC_BKP14R_fields
0800b9f0 g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
08008484 g     F .text	00000006 _close_r
08019a18 g     O .rodata	00000008 SPI1_DR_fields
08018e80 g     O .rodata	00000018 RCC_CFGR2_fields
080071c4 g     F .text	00000022 .hidden __aeabi_i2d
08019ef0 g     O .rodata	00000010 TIM15_DCR_fields
08016e98 g     O .rodata	00000018 Flash_ACR_fields
08015c40 g     O .rodata	00000008 CRC_IDR_fields
20000bc4 g     O .data	00000034 Lsm303dlhcDrv
080162e0 g     O .rodata	00000008 DMA1_CPAR5_fields
080126d8 g     O .rodata	00000100 CAN_F18R2_fields
08018000 g     O .rodata	00000050 IWDG_registers
08000f1c g     F .text	00000010 strtok
0801d8a4 g     O .parsetable	0000000c CmdGyroE
08017fd0 g     O .rodata	00000008 IWDG_PR_fields
080180e0 g     O .rodata	00000020 NVIC_IPR11_fields
08015b58 g     O .rodata	00000050 COMP_COMP7_CSR_fields
0800042a g     F .text	00000000 bbTilt
08015140 g     O .rodata	00000020 CAN_RF1R_fields
08008564 g     F .text	0000007c TerminalInit
08002690 g     F .text	000000d0 __swsetup_r
0801b3b8 g     O .rodata	00000008 TIM8_ARR_fields
08007b3c  w    F .text	00000002 .hidden __aeabi_ldiv0
0800ce24  w    F .text	00000002 EXTI9_5_IRQHandler
0800b25c g     F .text	00000006 HAL_SPI_GetState
080074ec g     F .text	000001d0 .hidden __divdf3
08010f10 g     O .rodata	00000008 ADC1_DR_fields
08003a44 g     F .text	00000088 __sfp
080053a4 g     F .text	00000046 __copybits
08007de8 g     F .text	00000028 bb_lab_8
0800ce24  w    F .text	00000002 RTC_WKUP_IRQHandler
0801c0f8 g     O .rodata	00000010 USART1_BRR_fields
08019e08 g     O .rodata	00000050 TIM15_CCMR1_Output_fields
200004a8 g     O .data	00000408 __malloc_av_
08019b70 g     O .rodata	00000088 SYSCFG_CFGR1_fields
08003af4 g     F .text	00000002 __sinit_lock_release
08008636 g     F .text	00000010 TerminalReadNonBlock
08007298 g     F .text	00000254 .hidden __muldf3
08015260 g     O .rodata	00000018 CAN_TDT0R_fields
08008400 g     F .text	00000054 CmdDump
08005864 g     F .text	00000022 __sread
0801a1a8 g     O .rodata	00000028 TIM16_CCMR1_Output_fields
0801c968 g     O .rodata	00000018 WWDG_CFR_fields
08018898 g     O .rodata	00000370 Peripherals
080179e0 g     O .rodata	00000080 GPIOB_ODR_fields
08009724  w    F .text	0000000c HAL_GetTick
0801c7a8 g     O .rodata	00000050 USB_FS_USB_EP5R_fields
080117d8 g     O .rodata	00000100 CAN_F11R1_fields
08004a94 g     F .text	00000002 __malloc_lock
08018358 g     O .rodata	00000008 NVIC_ISPR0_fields
08010f70 g     O .rodata	00000058 ADC1_ISR_fields
08016d70 g     O .rodata	00000048 FPU_FPCCR_fields
0801baf8 g     O .rodata	00000010 TSC_ICR_fields
0800c524 g     F .text	000000b6 LSM303DLHC_AccReadXYZ
08018060 g     O .rodata	00000008 NVIC_IABR2_fields
080038d4 g     F .text	00000032 _fflush_r
08008646 g     F .text	00000012 TerminalReadAnyNonBlock
0800be6c g     F .text	0000001c USBD_VCP_ProductStrDescriptor
080066fc g     F .text	0000005e _calloc_r
08017528 g     O .rodata	00000080 GPIOA_PUPDR_fields
0800ce24  w    F .text	00000002 SPI2_IRQHandler
080192a0 g     O .rodata	00000008 RTC_BKP21R_fields
080002fc g     F .text	00000000 _bbWatch
0801ca49 g     O .rodata	00000012 hUSBDDeviceDesc
080195a8 g     O .rodata	00000028 RTC_TSDR_fields
080087e4 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
08018e98 g     O .rodata	00000048 RCC_CFGR3_fields
08000a38 g     F .text	000000a0 memset
0800ce24  w    F .text	00000002 MemManage_Handler
08007c6c g     F .text	0000009c main
0801bed8 g     O .rodata	00000100 TSC_IOSCR_fields
080164b8 g     O .rodata	000001e0 DMA1_registers
0800c1bc g     F .text	00000014 BSP_PB_GetState
08019c60 g     O .rodata	00000020 SYSCFG_EXTICR3_fields
20000ce0 g     O .bss	00000004 __malloc_max_total_mem
0800074e g     F .text	00000082 lab6_test
08010fd8 g     O .rodata	00000008 ADC1_JDR3_fields
08019ad8 g     O .rodata	00000008 SPI1_TXCRCR_fields
080066a4 g     F .text	00000010 __swbuf
0800afec g     F .text	00000270 HAL_SPI_TransmitReceive
20000bc0 g     O .data	00000004 SpixTimeout
0801d838 g       *ABS*	00000000 _siccmram
08015a08 g     O .rodata	00000050 COMP_COMP3_CSR_fields
08018320 g     O .rodata	00000020 NVIC_IPR9_fields
08015f70 g     O .rodata	00000040 DBGMCU_registers
08000324 g       .text	00000000 _bb_a5_tick_handler
08018180 g     O .rodata	00000020 NVIC_IPR16_fields
08013cd8 g     O .rodata	00000100 CAN_F2R2_fields
0800ce24  w    F .text	00000002 SVC_Handler
080058ec g     F .text	00000008 __sclose
0800ce24  w    F .text	00000002 DMA2_Channel5_IRQHandler
080162f8 g     O .rodata	000000e0 DMA1_IFCR_fields
080067e4 g     F .text	00000010 fclose
0801bd58 g     O .rodata	00000080 TSC_IOGCSR_fields
08008780 g     F .text	00000064 TerminalInputBufferWrite
080162c0 g     O .rodata	00000008 DMA1_CPAR1_fields
080028ec g     F .text	00000e9c _dtoa_r
08004280 g     F .text	00000562 _malloc_r
08017698 g     O .rodata	00000040 GPIOB_AFRL_fields
08006d6c g     F .text	0000001a __ascii_wctomb
08010f18 g     O .rodata	00000058 ADC1_IER_fields
0800723c g     F .text	0000005a .hidden __aeabi_l2d
08015d68 g     O .rodata	00000008 DAC_DHR8R1_fields
0801a810 g     O .rodata	00000030 TIM1_CCMR1_Input_fields
080067f4 g     F .text	0000001c _fiprintf_r
08006ed0 g     F .text	00000014 _init_signal
0801bb18 g     O .rodata	00000100 TSC_IOASCR_fields
08018220 g     O .rodata	00000020 NVIC_IPR20_fields
080040bc g     F .text	0000004a _fwalk
0800b572 g     F .text	0000003e USBD_LL_Reset
08015108 g     O .rodata	00000018 CAN_RDT1R_fields
080170a0 g     O .rodata	00000080 GPIOA_BRR_fields
08012cd8 g     O .rodata	00000100 CAN_F20R2_fields
0801bfd8 g     O .rodata	00000010 TSC_ISR_fields
0800bdd0 g     F .text	0000000c USBD_LL_GetRxDataSize
0800ce24  w    F .text	00000002 DMA1_Channel5_IRQHandler
0800c496 g     F .text	00000020 LSM303DLHC_AccInit
080003c6 g     F .text	00000000 random_led_function
0800ce24  w    F .text	00000002 USB_LP_IRQHandler
200016c8 g     O .bss	00000800 UserRxBuffer
080069a4 g     F .text	00000014 _mbtowc_r
08019a20 g     O .rodata	00000040 SPI1_I2SCFGR_fields
0801ca45 g     O .rodata	00000004 USBD_LangIDDesc
080120d8 g     O .rodata	00000100 CAN_F15R2_fields
0800ce24  w    F .text	00000002 EXTI4_IRQHandler
0801c6b8 g     O .rodata	00000050 USB_FS_USB_EP2R_fields
08005498 g     F .text	00000060 putc
20000ba0 g     O .data	00000020 LED_PORT
0801b668 g     O .rodata	00000008 TIM8_CCR6_fields
0800cd36 g     F .text	00000020 LSM303AGR_AccFilterClickCmd
0800c616 g     F .text	00000044 LSM303DLHC_AccClickITEnable
0800b486 g     F .text	00000060 USBD_LL_DataOutStage
08019308 g     O .rodata	00000008 RTC_BKP4R_fields
08003b20 g     F .text	000000a0 _malloc_trim_r
0801bd48 g     O .rodata	00000008 TSC_IOG7CR_fields
08019270 g     O .rodata	00000008 RTC_BKP16R_fields
08015f38 g     O .rodata	00000028 DBGMCU_CR_fields
080150f0 g     O .rodata	00000018 CAN_RDT0R_fields
08010df8 g     O .rodata	00000008 ADC1_AWD2CR_fields
08016270 g     O .rodata	00000008 DMA1_CMAR5_fields
080150b0 g     O .rodata	00000020 CAN_RDL0R_fields
080162d8 g     O .rodata	00000008 DMA1_CPAR4_fields
08006a08 g     F .text	000002dc strcmp
0801b338 g     O .rodata	00000080 TIM6_registers
0801d85c g     O .parsetable	0000000c bb_tilt_gameE
08007bc0 g     F .text	00000028 CmdAccel
08006570 g     F .text	00000018 vfiprintf
08019248 g     O .rodata	00000008 RTC_BKP11R_fields
0800ade8 g     F .text	00000006 HAL_I2C_GetState
08008d3c g     F .text	00000068 SystemInit
080010e0 g     F .text	00000018 strtoul_l
0801a128 g     O .rodata	00000048 TIM16_BDTR_fields
080076cc g     F .text	0000007a .hidden __nedf2
080191b8 g     O .rodata	00000070 RTC_ALRMBR_fields
0801b038 g     O .rodata	00000010 TIM2_DCR_fields
08010eb0 g     O .rodata	00000050 ADC1_CR_fields
0800ce48 g     F .text	00000000 _fini
08008094 g     F .text	0000001c CmdW
08009a6e g     F .text	0000000c HAL_PCD_Start
0800ce24  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
08016798 g     O .rodata	00000020 EXTI_EMR2_fields
0800c4b6 g     F .text	00000012 LSM303DLHC_AccReadID
08019618 g     O .rodata	00000008 RTC_WUTR_fields
080162e8 g     O .rodata	00000008 DMA1_CPAR6_fields
08015c48 g     O .rodata	00000008 CRC_INIT_fields
08019430 g     O .rodata	00000088 RTC_ISR_fields
0801aa98 g     O .rodata	00000010 TIM1_DCR_fields
08018818 g     O .rodata	00000038 PWR_CR_fields
0801b0b0 g     O .rodata	00000030 TIM2_EGR_fields
08000668 g     F .text	00000084 _test_function
080009a4 g     F .text	0000000c atexit
080185d8 g     O .rodata	00000080 OPAMP_OPAMP1_CR_fields
08016e38 g     O .rodata	00000060 FPU_registers
08016898 g     O .rodata	00000100 EXTI_IMR1_fields
08008740 g     F .text	00000040 _write_r
08011188 g     O .rodata	00000010 ADC1_SQR4_fields
10000000 g       .ccmram	00000000 _eccmram
08011160 g     O .rodata	00000028 ADC1_SQR3_fields
0800ce24  w    F .text	00000002 DMA1_Channel3_IRQHandler
08015e98 g     O .rodata	00000080 DBGMCU_APB1FZ_fields
08006994 g     F .text	00000010 setlocale
080199b0 g     O .rodata	00000060 SPI1_CR2_fields
08010e08 g     O .rodata	00000010 ADC1_CALFACT_fields
080192d8 g     O .rodata	00000008 RTC_BKP28R_fields
080096c6  w    F .text	00000028 HAL_InitTick
0800cd56 g     F .text	0000001c LSM303AGR_AccIT1Enable
0801a9a0 g     O .rodata	00000020 TIM1_CCR5_fields
0800bda6 g     F .text	0000000e USBD_LL_SetUSBAddress
08018100 g     O .rodata	00000020 NVIC_IPR12_fields
0801ca5c g     O .rodata	00000010 LED_PIN
20000078 g     O .data	00000004 _impure_ptr
08015290 g     O .rodata	00000018 CAN_TDT2R_fields
08010fe0 g     O .rodata	00000008 ADC1_JDR4_fields
08019eb0 g     O .rodata	00000040 TIM15_CR2_fields
08003788 g     F .text	0000014a __sflush_r
08018ee0 g     O .rodata	00000060 RCC_CFGR_fields
08009714  w    F .text	00000010 HAL_IncTick
0801a5a8 g     O .rodata	00000028 TIM17_EGR_fields
0800bd56 g     F .text	0000000e USBD_LL_CloseEP
0800ce24  w    F .text	00000002 ADC4_IRQHandler
08019358 g     O .rodata	000000a0 RTC_CR_fields
0800b92a g     F .text	00000010 USBD_CtlContinueSendData
080007d0 g     F .text	0000006e bb_game_a3
080163d8 g     O .rodata	000000e0 DMA1_ISR_fields
080143d8 g     O .rodata	00000100 CAN_F6R1_fields
0800c6c4 g     F .text	0000001c L3GD20_ReadID
0800ce24  w    F .text	00000002 WWDG_IRQHandler
0800ab14  w    F .text	00000002 HAL_I2C_MspInit
08016698 g     O .rodata	00000100 EXTI_EMR1_fields
080182c0 g     O .rodata	00000020 NVIC_IPR6_fields
0801afa0 g     O .rodata	00000010 TIM2_CCR3_fields
08016190 g     O .rodata	00000060 DMA1_CCR6_fields
080069b8 g     F .text	0000002a __ascii_mbtowc
08017328 g     O .rodata	00000080 GPIOA_MODER_fields
08018658 g     O .rodata	00000080 OPAMP_OPAMP2_CR_fields
08005128 g     F .text	00000050 __ulp
08003b0c g     F .text	00000014 __fp_unlock_all
0800ca68 g     F .text	0000003c I3G4250D_DisableIT
0801aa20 g     O .rodata	00000078 TIM1_CR2_fields
080194b8 g     O .rodata	00000010 RTC_PRER_fields
0800bdb4 g     F .text	0000000e USBD_LL_Transmit
0800ce24  w    F .text	00000002 TIM2_IRQHandler
08000998 g     F .text	00000004 my_Loop
0801a170 g     O .rodata	00000020 TIM16_CCER_fields
080099dc g     F .text	00000092 HAL_PCD_Init
20000ab4 g     O .data	00000043 USBD_CDC_CfgHSDesc
0801d898 g     O .parsetable	0000000c CmdDecodeE
0800b302 g     F .text	00000074 HAL_IWDG_Start
080138d8 g     O .rodata	00000100 CAN_F26R2_fields
080144d8 g     O .rodata	00000100 CAN_F6R2_fields
2000006e g       .data	00000000 myTickCount
08007f3c g     F .text	0000002c _lab_5
080121d8 g     O .rodata	00000100 CAN_F16R1_fields
080192d0 g     O .rodata	00000008 RTC_BKP27R_fields
08016b68 g     O .rodata	00000010 EXTI_RTSR2_fields
0801a220 g     O .rodata	00000028 TIM16_CR2_fields
08019138 g     O .rodata	00000070 RTC_ALRMAR_fields
0801a710 g     O .rodata	00000008 TIM1_ARR_fields
0800b8d8 g     F .text	00000038 USBD_GetString
0800c130 g     F .text	00000018 BSP_LED_Toggle
080130d8 g     O .rodata	00000100 CAN_F22R2_fields
080133d8 g     O .rodata	00000100 CAN_F24R1_fields
08004168 g     F .text	00000008 localeconv
0800bc64 g     F .text	0000000c HAL_PCD_SetupStageCallback
080141d8 g     O .rodata	00000100 CAN_F5R1_fields
08007fb4 g     F .text	0000003c lab6
0800ce24  w    F .text	00000002 COMP7_IRQHandler
08004170 g     F .text	0000005c __swhatbuf_r
20008000 g       *ABS*	00000000 _estack
080080d0 g     F .text	000000f8 parse
080192e8 g     O .rodata	00000008 RTC_BKP2R_fields
0800ce24  w    F .text	00000002 COMP1_2_3_IRQHandler
080123d8 g     O .rodata	00000100 CAN_F17R1_fields
0800ce24  w    F .text	00000002 EXTI1_IRQHandler
0801b3c0 g     O .rodata	00000060 TIM8_BDTR_fields
08007768 g     F .text	00000012 .hidden __aeabi_dcmpeq
08007dc4 g     F .text	00000022 bb_watchdog
0800cc12 g     F .text	00000012 LSM303AGR_AccReadID
0801c668 g     O .rodata	00000050 USB_FS_USB_EP1R_fields
08010d18 g     O .rodata	000000b0 ADC1_2_CSR_fields
08016d68 g     O .rodata	00000008 FPU_FPCAR_fields
20000c94 g       .data	00000000 _edata
0801b8f8 g     O .rodata	000001a0 TIM8_registers
080192f0 g     O .rodata	00000008 RTC_BKP30R_fields
0801a490 g     O .rodata	00000018 TIM17_CCMR1_Input_fields
10000000 g       .ccmram	00000000 _sccmram
0801a1e8 g     O .rodata	00000038 TIM16_CR1_fields
080124d8 g     O .rodata	00000100 CAN_F17R2_fields
080005de g     F .text	00000064 _bb_lab_setup
08019e78 g     O .rodata	00000038 TIM15_CR1_fields
08006838 g     F .text	000000a6 __fputwc
08000642 g     F .text	00000000 _bb_lab_tick
08008acc g     F .text	00000270 CmdDecode
08019f98 g     O .rodata	00000008 TIM15_RCR_fields
08017858 g     O .rodata	00000080 GPIOB_IDR_fields
0801a930 g     O .rodata	00000050 TIM1_CCMR3_Output_fields
0801b7c8 g     O .rodata	00000008 TIM8_DMAR_fields
08016fa0 g     O .rodata	00000080 Flash_registers
0801a248 g     O .rodata	00000010 TIM16_DCR_fields
0800ca28 g     F .text	00000040 I3G4250D_EnableIT
08018e08 g     O .rodata	00000040 RCC_APB2RSTR_fields
08008304 g     F .text	00000028 fetch_uint32_arg
08019228 g     O .rodata	00000010 RTC_ALRMBSSR_fields
08019ca0 g     O .rodata	00000040 SYSCFG_RCR_fields
0800ce24  w    F .text	00000002 USART2_IRQHandler
0801a4e8 g     O .rodata	00000038 TIM17_CR1_fields
08018378 g     O .rodata	00000260 NVIC_registers
0800ce24  w    F .text	00000002 COMP4_5_6_IRQHandler
0800588c g     F .text	0000003e __swrite
08008da4 g     F .text	000005cc HAL_RCC_OscConfig
200008b4 g     O .data	00000004 __malloc_trim_threshold
0801a4d0 g     O .rodata	00000008 TIM17_CCR1_fields
08017ee8 g     O .rodata	00000028 I2C1_TIMINGR_fields
0801c4f0 g     O .rodata	00000008 USB_FS_BTABLE_fields
080151c0 g     O .rodata	00000020 CAN_TDH1R_fields
08006810 g     F .text	00000028 fiprintf
08017c90 g     O .rodata	000000a8 I2C1_CR1_fields
08005980 g     F .text	00000bf0 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
0800b910 g     F .text	0000001a USBD_CtlSendData
08011fd8 g     O .rodata	00000100 CAN_F15R1_fields
08010d08 g     O .rodata	00000010 ADC1_2_CDR_fields
08004108 g     F .text	00000052 _fwalk_reent
08005000 g     F .text	00000128 __mdiff
0801b328 g     O .rodata	00000008 TIM6_PSC_fields
080077f8 g     F .text	0000004e .hidden __aeabi_d2iz
08019268 g     O .rodata	00000008 RTC_BKP15R_fields
08018878 g     O .rodata	00000020 PWR_registers
08016f78 g     O .rodata	00000020 Flash_SR_fields
08010fd0 g     O .rodata	00000008 ADC1_JDR2_fields
08007b50 g     F .text	00000010 _kill
08019298 g     O .rodata	00000008 RTC_BKP20R_fields
080162b0 g     O .rodata	00000008 DMA1_CNDTR6_fields
080128d8 g     O .rodata	00000100 CAN_F19R2_fields
0800ce24  w    F .text	00000002 I2C2_ER_IRQHandler
08010cc8 g     O .rodata	00000040 ADC1_2_CCR_fields
0800ce24  w    F .text	00000002 DMA1_Channel2_IRQHandler
08015db8 g     O .rodata	000000e0 DAC_registers
08017428 g     O .rodata	00000080 GPIOA_OSPEEDR_fields
0801b548 g     O .rodata	00000030 TIM8_CCMR2_Input_fields
08003aec g     F .text	00000002 __sfp_lock_release
0801a428 g     O .rodata	00000048 TIM17_BDTR_fields
08015090 g     O .rodata	00000020 CAN_RDH1R_fields
0800c99e g     F .text	0000002c I3G4250D_RebootCmd
0801ae00 g     O .rodata	00000060 TIM2_CCER_fields
08015d78 g     O .rodata	00000010 DAC_DHR8RD_fields
0800832c g     F .text	00000020 fetch_string_arg
0800c08c g     F .text	0000006c BSP_LED_Init
08017960 g     O .rodata	00000080 GPIOB_MODER_fields
0801d88c g     O .parsetable	0000000c CmdDumpE
0801c9d8 g     O .rodata	00000010 PLLMULFactorTable
0801c240 g     O .rodata	00000098 USART1_CR3_fields
08008914 g     F .text	00000050 DecodeField
08015160 g     O .rodata	00000020 CAN_RI0R_fields
0800ce24  w    F .text	00000002 TIM8_BRK_IRQHandler
08015f18 g     O .rodata	00000020 DBGMCU_APB2FZ_fields
0801ab80 g     O .rodata	00000008 TIM1_PSC_fields
08008a18 g     F .text	00000054 DecodePrintPeripherals
08019da0 g     O .rodata	00000038 TIM15_CCER_fields
08016280 g     O .rodata	00000008 DMA1_CMAR7_fields
0800d2ec g     O .rodata	00000101 _ctype_
08007b3c  w    F .text	00000002 .hidden __aeabi_idiv0
080077cc g     F .text	0000002c .hidden __unorddf2
0800cc80 g     F .text	000000b6 LSM303AGR_AccReadXYZ
0800c494 g     F .text	00000002 LSM303DLHC_AccDeInit
08015180 g     O .rodata	00000020 CAN_RI1R_fields
08019bf8 g     O .rodata	00000028 SYSCFG_CFGR2_fields
08018f40 g     O .rodata	00000088 RCC_CIR_fields
0801d910 g     O .parsetable	0000000c CmdStatsE
0800ce24  w    F .text	00000002 FLASH_IRQHandler
08019f58 g     O .rodata	00000008 TIM15_DMAR_fields
08016888 g     O .rodata	00000010 EXTI_FTSR2_fields
0801d8b0 g     O .parsetable	0000000c _lab_5E
080116d8 g     O .rodata	00000100 CAN_F10R2_fields
08007b60 g     F .text	00000002 _exit
08018260 g     O .rodata	00000020 NVIC_IPR3_fields
08016288 g     O .rodata	00000008 DMA1_CNDTR1_fields
08017ec0 g     O .rodata	00000028 I2C1_TIMEOUTR_fields
08019d58 g     O .rodata	00000048 TIM15_BDTR_fields
0800bdf4 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
20001558 g     O .bss	00000100 USBD_StrDesc
08008658 g     F .text	000000e8 TerminalOutputBufferWrite
0800ce24  w    F .text	00000002 BusFault_Handler
0800ce24  w    F .text	00000002 USART1_IRQHandler
08015960 g     O .rodata	00000050 COMP_COMP1_CSR_fields
0801b7d0 g     O .rodata	00000048 TIM8_EGR_fields
080041cc g     F .text	00000094 __smakebuf_r
08019fc0 g     O .rodata	00000040 TIM15_SR_fields
08000e40 g     F .text	000000dc strlen
08018dc8 g     O .rodata	00000040 RCC_APB2ENR_fields
0800ce24  w    F .text	00000002 SPI3_IRQHandler
0800cc24 g     F .text	0000001c LSM303AGR_AccRebootCmd
08006dc0 g     F .text	0000000c _init_signal_r
08007758 g     F .text	00000010 .hidden __aeabi_cdcmpeq
080076bc g     F .text	0000008a .hidden __gedf2
20001ec8 g     O .bss	0000003c TimHandle
08016070 g     O .rodata	00000060 DMA1_CCR3_fields
08007f68 g     F .text	0000004c _bb_A2
0801a9d8 g     O .rodata	00000048 TIM1_CR1_fields
08017fe0 g     O .rodata	00000018 IWDG_SR_fields
0801c7f8 g     O .rodata	00000050 USB_FS_USB_EP6R_fields
0801a310 g     O .rodata	00000110 TIM16_registers
0800a87e  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0801a610 g     O .rodata	00000100 TIM17_registers
0800abd6 g     F .text	00000104 HAL_I2C_Mem_Write
080066f0 g     F .text	0000000a __assert
0801a778 g     O .rodata	00000098 TIM1_CCER_fields
08013ed8 g     O .rodata	00000100 CAN_F3R2_fields
08015ca8 g     O .rodata	00000080 DAC_CR_fields
0800ce24  w    F .text	00000002 I2C1_ER_IRQHandler
0800596c g     F .text	00000012 __sprint_r
0801c848 g     O .rodata	00000050 USB_FS_USB_EP7R_fields
08017de8 g     O .rodata	00000088 I2C1_ISR_fields
0801a8d0 g     O .rodata	00000060 TIM1_CCMR2_Output_fields
08018300 g     O .rodata	00000020 NVIC_IPR8_fields
0801c9e8 g     O .rodata	00000010 PredivFactorTable
0801bd28 g     O .rodata	00000008 TSC_IOG3CR_fields
080071e8 g     F .text	00000042 .hidden __aeabi_f2d
0800bdc2 g     F .text	0000000e USBD_LL_PrepareReceive
08016298 g     O .rodata	00000008 DMA1_CNDTR3_fields
0800c6e0 g     F .text	0000002c L3GD20_RebootCmd
080139d8 g     O .rodata	00000100 CAN_F27R1_fields
0801bb08 g     O .rodata	00000010 TSC_IER_fields
080005d8 g     F .text	00000000 test_tick
0800cdb6 g     F .text	0000001c LSM303AGR_AccZClickITConfig
08014cb8 g     O .rodata	000000e0 CAN_FFA1R_fields
0801b670 g     O .rodata	00000010 TIM8_CNT_fields
08006d58 g     F .text	00000014 _wctomb_r
08010e00 g     O .rodata	00000008 ADC1_AWD3CR_fields
080192c0 g     O .rodata	00000008 RTC_BKP25R_fields
0801bc18 g     O .rodata	00000100 TSC_IOCCR_fields
080186d8 g     O .rodata	00000080 OPAMP_OPAMP3_CR_fields
0800bb64 g     F .text	0000000c USBD_CDC_SetRxBuffer
08016b78 g     O .rodata	000000d0 EXTI_SWIER1_fields
08006f28 g     F .text	0000027a .hidden __subdf3
0801a120 g     O .rodata	00000008 TIM16_ARR_fields
08015f60 g     O .rodata	00000010 DBGMCU_IDCODE_fields
08001110 g     F .text	000014fc _vfprintf_r
20000c60 g     O .data	00000034 Lsm303agrDrv
08004c8c g     F .text	00000060 __lo0bits
08016998 g     O .rodata	00000020 EXTI_IMR2_fields
0801b320 g     O .rodata	00000008 TIM6_EGR_fields
08019a78 g     O .rodata	00000008 SPI1_RXCRCR_fields
0801d8c8 g     O .parsetable	0000000c bb_lab_8E
08017eb0 g     O .rodata	00000008 I2C1_PECR_fields
08009f9c g     F .text	000000fc HAL_PCD_EP_Receive
08011050 g     O .rodata	00000018 ADC1_OFR3_fields
08015b00 g     O .rodata	00000058 COMP_COMP6_CSR_fields
08019290 g     O .rodata	00000008 RTC_BKP1R_fields
0801b4e8 g     O .rodata	00000060 TIM8_CCMR1_Output_fields
08017be0 g     O .rodata	000000b0 GPIOB_registers
08008964 g     F .text	00000060 DecodeRegister
08006ee4 g     F .text	00000010 __sigtramp
0801b838 g     O .rodata	00000048 TIM8_SMCR_fields
0800886c g     F .text	00000054 DecodeReadRegister
08014fd8 g     O .rodata	00000050 CAN_MCR_fields
08006d10 g     F .text	00000048 wcrtomb
08015d88 g     O .rodata	00000008 DAC_DOR1_fields
080085e0 g     F .text	0000004c TerminalRead
0801ba98 g     O .rodata	00000060 TSC_CR_fields
0801b0a8 g     O .rodata	00000008 TIM2_DMAR_fields
200008b8 g     O .data	0000016c __global_locale
0801b4b8 g     O .rodata	00000030 TIM8_CCMR1_Input_fields
0800c5fa g     F .text	0000001c LSM303DLHC_AccIT1Enable
080119d8 g     O .rodata	00000100 CAN_F12R1_fields
0800ce24  w    F .text	00000002 USBWakeUp_IRQHandler
0801a2d0 g     O .rodata	00000008 TIM16_PSC_fields
0801c3f8 g     O .rodata	00000008 USART1_RDR_fields
08018e48 g     O .rodata	00000038 RCC_BDCR_fields
0800260c g     F .text	00000018 vfprintf
0801a548 g     O .rodata	00000010 TIM17_DCR_fields
08018360 g     O .rodata	00000008 NVIC_ISPR1_fields
08008024 g     F .text	00000020 mes_IWDGStart
08018090 g     O .rodata	00000008 NVIC_ICPR2_fields
0801d844 g     O .parsetable	0000000c CmdAccelE
08012ed8 g     O .rodata	00000100 CAN_F21R2_fields
0800bb54 g     F .text	00000010 USBD_CDC_SetTxBuffer
08006908 g     F .text	00000040 fputwc
08019ce0 g     O .rodata	00000070 SYSCFG_registers
08006eb0 g     F .text	00000010 raise
08018758 g     O .rodata	00000080 OPAMP_OPAMP4_CR_fields
0801d8ec g     O .parsetable	0000000c _myTestE
08004270 g     F .text	00000010 free
08003af0 g     F .text	00000002 __sinit_lock_acquire
0800ce24  w    F .text	00000002 DMA2_Channel3_IRQHandler
080167b8 g     O .rodata	000000d0 EXTI_FTSR1_fields
0800bec0 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
080145d8 g     O .rodata	00000100 CAN_F7R1_fields
08004afc g     F .text	000000a4 __multadd
0800b42c g     F .text	0000005a USBD_LL_SetupStage
08004ae8 g     F .text	00000012 _Bfree
08007c60 g     F .text	0000000a Error_Handler
0801c980 g     O .rodata	00000010 WWDG_CR_fields
0800ce24  w    F .text	00000002 EXTI2_TSC_IRQHandler
08018370 g     O .rodata	00000008 NVIC_STIR_fields
0800ce24  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
0801b5d8 g     O .rodata	00000050 TIM8_CCMR3_Output_fields



Disassembly of section .text:

080001c0 <deregister_tm_clones>:
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <deregister_tm_clones+0x10>)
 80001c2:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <deregister_tm_clones+0x14>)
 80001c4:	4283      	cmp	r3, r0
 80001c6:	d002      	beq.n	80001ce <deregister_tm_clones+0xe>
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <deregister_tm_clones+0x18>)
 80001ca:	b103      	cbz	r3, 80001ce <deregister_tm_clones+0xe>
 80001cc:	4718      	bx	r3
 80001ce:	4770      	bx	lr
 80001d0:	20000c94 	.word	0x20000c94
 80001d4:	20000c94 	.word	0x20000c94
 80001d8:	00000000 	.word	0x00000000

080001dc <register_tm_clones>:
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <register_tm_clones+0x18>)
 80001de:	4906      	ldr	r1, [pc, #24]	; (80001f8 <register_tm_clones+0x1c>)
 80001e0:	1a0b      	subs	r3, r1, r0
 80001e2:	0fd9      	lsrs	r1, r3, #31
 80001e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001e8:	1049      	asrs	r1, r1, #1
 80001ea:	d002      	beq.n	80001f2 <register_tm_clones+0x16>
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <register_tm_clones+0x20>)
 80001ee:	b103      	cbz	r3, 80001f2 <register_tm_clones+0x16>
 80001f0:	4718      	bx	r3
 80001f2:	4770      	bx	lr
 80001f4:	20000c94 	.word	0x20000c94
 80001f8:	20000c94 	.word	0x20000c94
 80001fc:	00000000 	.word	0x00000000

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c06      	ldr	r4, [pc, #24]	; (800021c <__do_global_dtors_aux+0x1c>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b943      	cbnz	r3, 800021a <__do_global_dtors_aux+0x1a>
 8000208:	f7ff ffda 	bl	80001c0 <deregister_tm_clones>
 800020c:	4b04      	ldr	r3, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	b113      	cbz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000210:	4804      	ldr	r0, [pc, #16]	; (8000224 <__do_global_dtors_aux+0x24>)
 8000212:	f3af 8000 	nop.w
 8000216:	2301      	movs	r3, #1
 8000218:	7023      	strb	r3, [r4, #0]
 800021a:	bd10      	pop	{r4, pc}
 800021c:	20000c94 	.word	0x20000c94
 8000220:	00000000 	.word	0x00000000
 8000224:	0800ce3c 	.word	0x0800ce3c

08000228 <frame_dummy>:
 8000228:	b508      	push	{r3, lr}
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <frame_dummy+0x14>)
 800022c:	b11b      	cbz	r3, 8000236 <frame_dummy+0xe>
 800022e:	4904      	ldr	r1, [pc, #16]	; (8000240 <frame_dummy+0x18>)
 8000230:	4804      	ldr	r0, [pc, #16]	; (8000244 <frame_dummy+0x1c>)
 8000232:	f3af 8000 	nop.w
 8000236:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800023a:	e7cf      	b.n	80001dc <register_tm_clones>
 800023c:	00000000 	.word	0x00000000
 8000240:	20000c98 	.word	0x20000c98
 8000244:	0800ce3c 	.word	0x0800ce3c

08000248 <myTest>:

@@=================== my test=============

myTest:

    push {r4-r9,lr}
 8000248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

    mov r4, r0      @ move delay value in r4
 800024c:	4604      	mov	r4, r0
    mov r5, r1      @ move target value in r5
 800024e:	460d      	mov	r5, r1

    ldr r6,=0x1EEAC @ load the constant value in r6
 8000250:	f8df 66d4 	ldr.w	r6, [pc, #1748]	; 8000928 <delay_loop+0xc>
    mov r9, #0          @ holds counter
 8000254:	f04f 0900 	mov.w	r9, #0

08000258 <myTestLoop>:

    myTestLoop:

        sub r6, r6, #1   @ count down the constant value in r6
 8000258:	f1a6 0601 	sub.w	r6, r6, #1
        cmp r6, #0       @ compare if reached 0
 800025c:	2e00      	cmp	r6, #0
        IT EQ
 800025e:	bf08      	it	eq
        beq exit_func
 8000260:	e048      	beq.n	80002f4 <exit_func>

            mov r0, r6
 8000262:	4630      	mov	r0, r6

08000264 <sub_hun_thousand>:

            sub_hun_thousand:
                ldr r1, =#100000
 8000264:	f8df 16c4 	ldr.w	r1, [pc, #1732]	; 800092c <delay_loop+0x10>
                cmp r0, r1
 8000268:	4288      	cmp	r0, r1
                IT GT
 800026a:	bfc8      	it	gt
                subgt r0, r0, r1
 800026c:	1a40      	subgt	r0, r0, r1
                cmp r0, r1
 800026e:	4288      	cmp	r0, r1
                IT GT 
 8000270:	bfc8      	it	gt
                bgt sub_hun_thousand 
 8000272:	e7f7      	bgt.n	8000264 <sub_hun_thousand>

08000274 <sub_ten_thousand>:

            sub_ten_thousand:
                mov r1, #10000
 8000274:	f242 7110 	movw	r1, #10000	; 0x2710
                cmp r0, r1
 8000278:	4288      	cmp	r0, r1
                IT GT
 800027a:	bfc8      	it	gt
                subgt r0, r0, r1
 800027c:	1a40      	subgt	r0, r0, r1
                cmp r0, r1
 800027e:	4288      	cmp	r0, r1
                IT GT
 8000280:	bfc8      	it	gt
                bgt sub_ten_thousand
 8000282:	e7f7      	bgt.n	8000274 <sub_ten_thousand>

08000284 <sub_one_thousand>:

            sub_one_thousand:
                mov r1, #1000
 8000284:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
                cmp r0, r1
 8000288:	4288      	cmp	r0, r1
                IT GT
 800028a:	bfc8      	it	gt
                subgt r0,r0,r1
 800028c:	1a40      	subgt	r0, r0, r1
                cmp r0, r1
 800028e:	4288      	cmp	r0, r1
                IT GT
 8000290:	bfc8      	it	gt
                bgt sub_one_thousand
 8000292:	e7f7      	bgt.n	8000284 <sub_one_thousand>

            @@ ==========================================
            mov r7, r0 @ storing last 3 values
 8000294:	4607      	mov	r7, r0

08000296 <sub_one_hundred>:
            @@ ==========================================

            sub_one_hundred:
                mov r1, #100
 8000296:	f04f 0164 	mov.w	r1, #100	; 0x64
                cmp r0, r1
 800029a:	4288      	cmp	r0, r1
                IT GT
 800029c:	bfc8      	it	gt
                subgt r0, r0, r1
 800029e:	1a40      	subgt	r0, r0, r1
                cmp r0, r1
 80002a0:	4288      	cmp	r0, r1
                IT GT
 80002a2:	bfc8      	it	gt
                bgt sub_one_hundred
 80002a4:	e7f7      	bgt.n	8000296 <sub_one_hundred>

080002a6 <sub_ten>:

            sub_ten:
                mov r1, #10
 80002a6:	f04f 010a 	mov.w	r1, #10
                cmp r0, r1
 80002aa:	4288      	cmp	r0, r1
                IT GT
 80002ac:	bfc8      	it	gt
                subgt r0, r0, r1
 80002ae:	1a40      	subgt	r0, r0, r1
                cmp r0, r1
 80002b0:	4288      	cmp	r0, r1
                IT GT
 80002b2:	bfc8      	it	gt
                bgt sub_ten
 80002b4:	e7f7      	bgt.n	80002a6 <sub_ten>

            mov r8, r0  @ saving last bit
 80002b6:	4680      	mov	r8, r0

            @ ============================================

            cmp r8, #7
 80002b8:	f1b8 0f07 	cmp.w	r8, #7
            IT GT
 80002bc:	bfc8      	it	gt
            bgt is_invalid
 80002be:	e019      	bgt.n	80002f4 <exit_func>

            cmp r8, #0
 80002c0:	f1b8 0f00 	cmp.w	r8, #0
            IT lt
 80002c4:	bfb8      	it	lt
            blt is_invalid
 80002c6:	e015      	blt.n	80002f4 <exit_func>

            cmp r8, r5
 80002c8:	45a8      	cmp	r8, r5
            ITTT EQ
 80002ca:	bf02      	ittt	eq
            addeq r9, r9, #1
 80002cc:	f109 0901 	addeq.w	r9, r9, #1
            moveq r0, r8
 80002d0:	4640      	moveq	r0, r8
            bleq BSP_LED_Toggle
 80002d2:	f00b ff2d 	bleq	800c130 <BSP_LED_Toggle>

            cmp r8, r5
 80002d6:	45a8      	cmp	r8, r5
            ITT EQ
 80002d8:	bf04      	itt	eq
            moveq r0, r4
 80002da:	4620      	moveq	r0, r4
            bleq busy_delay
 80002dc:	f000 fb1c 	bleq	8000918 <busy_delay>

            cmp r8, r5
 80002e0:	45a8      	cmp	r8, r5
            ITT EQ
 80002e2:	bf04      	itt	eq
            moveq r0, r8
 80002e4:	4640      	moveq	r0, r8
            bleq BSP_LED_Toggle
 80002e6:	f00b ff23 	bleq	800c130 <BSP_LED_Toggle>

            cmp r8, r5
 80002ea:	45a8      	cmp	r8, r5
            ITT EQ
 80002ec:	bf04      	itt	eq
            moveq r0, r4
 80002ee:	4620      	moveq	r0, r4
            bleq busy_delay
 80002f0:	f000 fb12 	bleq	8000918 <busy_delay>

080002f4 <exit_func>:
            is_invalid:
                @bal myTestLoop

    exit_func:

        mov r0, r9 @ moving counter into r0 as return value
 80002f4:	4648      	mov	r0, r9

    pop {r4-r9,lr}
 80002f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

bx lr
 80002fa:	4770      	bx	lr

080002fc <_bbWatch>:
@
@ Returns: r0 (Address of A5_watch_ticks)
@
_bbWatch:

    push {lr}                               @ pushing link register onto the stack to preserve
 80002fc:	b500      	push	{lr}

        ldr r0, =A5_delay                   @ loading the address of A5_delay into r2
 80002fe:	f8df 0630 	ldr.w	r0, [pc, #1584]	; 8000930 <delay_loop+0x14>
        str r1, [r0]                        @ storing r1 (delay parameter) into the address of r2 (A5_delay)
 8000302:	6001      	str	r1, [r0, #0]

        ldr r0, =A5_updated_delay           @ loading the address of A5_updated delay into r2
 8000304:	f8df 062c 	ldr.w	r0, [pc, #1580]	; 8000934 <delay_loop+0x18>
        str r1, [r0]                        @ again storing r1 (delay parameter), but into the address of r2 (A5_updated_delay)
 8000308:	6001      	str	r1, [r0, #0]

        ldr r0, =A5_refresh_status          @ loading the address of A5_refresh_status into r0
 800030a:	f8df 062c 	ldr.w	r0, [pc, #1580]	; 8000938 <delay_loop+0x1c>
        mov r1, #A5_REFRESH_TRUE            @ moving A5_REFRESH_TRUE (0) into r1
 800030e:	f04f 0100 	mov.w	r1, #0
        str r1, [r0]                        @ storing r1 (A5_REFRESH_TRUE) into the address of r0 (A5_refresh_status)
 8000312:	6001      	str	r1, [r0, #0]

        ldr r0, =A5_watch_ticks             @ loading the address of A5_watch_ticks into r0
 8000314:	f8df 0624 	ldr.w	r0, [pc, #1572]	; 800093c <delay_loop+0x20>
        mov r1, #A5_TICKS                   @ moving A5_TICKS (2) into r1
 8000318:	f04f 0102 	mov.w	r1, #2
        str r1, [r0]                        @ storing r1 (A5_TICKS) into the address of r0 (A5_watch_ticks)
 800031c:	6001      	str	r1, [r0, #0]

    pop {lr}                                @ popping preserved link register
 800031e:	f85d eb04 	ldr.w	lr, [sp], #4

bx lr                                       @ exiting function
 8000322:	4770      	bx	lr

08000324 <_bb_a5_tick_handler>:
@
@ Returns: r0 (scaled game_time)
@
_bb_a5_tick_handler:

    push {r4, lr}                           @ pushing values to preserve
 8000324:	b510      	push	{r4, lr}

    ldr r1, =A5_watch_ticks                 @ loading the address of A5_watch_ticks into regitser 1
 8000326:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 800093c <delay_loop+0x20>
    ldr r0, [r1]                            @ loading the values found within r1 (A5_watch_ticks) into r0
 800032a:	6808      	ldr	r0, [r1, #0]

    subs r0, r0, #DEC_INC                   @ subtracting DEC_INC (1) from r0 and storing back into r0 with status flag
 800032c:	3801      	subs	r0, #1
    blt _bbWatch_exit                       @ branching to exit label (_bbWatch_exit) if r0 (A5_watch_ticks) is less than #1
 800032e:	db28      	blt.n	8000382 <_bbWatch_exit>

        mov r0, #A5_TICKS                   @ moving A5_TCIKS (2) into r0 (resetting the A5_watch_tick value) to run rest of function forever
 8000330:	f04f 0002 	mov.w	r0, #2
        str r0, [r1]                        @ storing the value back into address of r1 (A5_watch_ticks) so function will continue forever
 8000334:	6008      	str	r0, [r1, #0]

        ldr r1, =A5_updated_delay           @ loading the address of A5_updated_delay into r1
 8000336:	f8df 15fc 	ldr.w	r1, [pc, #1532]	; 8000934 <delay_loop+0x18>
        ldr r0, [r1]                        @ loading the value found within the address of r1 into r0
 800033a:	6808      	ldr	r0, [r1, #0]
        subs r0, r0, #DEC_INC               @ subtracting DEC_INC (1) from delay value (r0) and storing back into r0 with status flag
 800033c:	3801      	subs	r0, #1
        str r0, [r1]                        @ storing the subtracted delay value (r0) and storing back into the address of r1 (A5_updated_delay)
 800033e:	6008      	str	r0, [r1, #0]

        bgt _bbWatch_exit                   @ branching to exit label (_bbWatch_exit) if r0 is greater than 1
 8000340:	dc1f      	bgt.n	8000382 <_bbWatch_exit>

            ldr r1, =LEDaddress             @ Loading the GPIO address needed for LEDs
 8000342:	f8df 15fc 	ldr.w	r1, [pc, #1532]	; 8000940 <delay_loop+0x24>
            ldr r1, [r1]                    @ Dereference r1 to get correct value
 8000346:	6809      	ldr	r1, [r1, #0]
            ldrh r0, [r1]                   @ Get the current state of that GPIO (half word only)
 8000348:	8808      	ldrh	r0, [r1, #0]
            orr r0, r0, #A5_TRIGGER_ON      @ Using OR operation on A5_TRIGGER_ON (0xff00) to get value to trigger all leds and putting back in r0
 800034a:	f440 407f 	orr.w	r0, r0, #65280	; 0xff00

            ldr r2, =A5_on_or_off           @ loading the address of A5_on_or_off into r2
 800034e:	f8df 25f4 	ldr.w	r2, [pc, #1524]	; 8000944 <delay_loop+0x28>
            ldr r3, [r2]                    @ loading the value within the address of A5_on_or_off (r2) into r3
 8000352:	6813      	ldr	r3, [r2, #0]

            cmp r3, #A5_OFF_STATUS          @ comparing on_or_off to zero (zero means leds are currently off)
 8000354:	2b00      	cmp	r3, #0
            ITTE EQ                         @ ITTE block. Executes next 2 instructions if r3 (A5_on_or_off) is equal to 0. Last instruction if not equal
 8000356:	bf06      	itte	eq
            strheq r0, [r1]                 @ storing half word that turns LEDs on back into memory of LEDaddress (r1)
 8000358:	8008      	strheq	r0, [r1, #0]
            moveq r0, #A5_ON_STATUS         @ if leds are off, moving 1 (A5_ON_STATUS) into r0 (signify leds will be on in next loop)
 800035a:	2001      	moveq	r0, #1
            movne r0, #A5_OFF_STATUS        @ if r3 (A5_on_or_off) is not 0; leds are currently on (when function started). move 0 into r0, signify leds to be off
 800035c:	2000      	movne	r0, #0

            cmp r3, #A5_ON_STATUS           @ comparing r3 (value of A5_on_or_tick) to 1
 800035e:	2b01      	cmp	r3, #1
            ITT EQ                          @ ITT block. Executing the next 2 statements if r3 (value of A5_on_or_tick) is equal to 1 (cmp is successful)
 8000360:	bf04      	itt	eq
            moveq r4, #A5_TRIGGER_OFF       @ Moving #0 into r4 (0 meaning set the leds off)
 8000362:	2400      	moveq	r4, #0
            strheq r4, [r1]                 @ storing half-word that turns leds off back into memory of LEDaddress (r1)
 8000364:	800c      	strheq	r4, [r1, #0]

            str r0, [r2]                    @ storing the value of r0 (value which is either A5_ON_STATUS or A5_OFF_STATUS) into the address of r2 (A5_on_or_off)
 8000366:	6010      	str	r0, [r2, #0]

            ldr r0, =A5_updated_delay       @ loading the address of A5_updated_delay into r0
 8000368:	f8df 05c8 	ldr.w	r0, [pc, #1480]	; 8000934 <delay_loop+0x18>
            ldr r1, =A5_delay               @ loading the address of A5_delay into r0
 800036c:	f8df 15c0 	ldr.w	r1, [pc, #1472]	; 8000930 <delay_loop+0x14>
            ldr r1, [r1]                    @ loading the value within the address of r1 (A5_delay) into r1
 8000370:	6809      	ldr	r1, [r1, #0]
            str r1, [r0]                    @ storing the value of r1 (default delay value) into the address of r0 (A5_updated_delay)
 8000372:	6001      	str	r1, [r0, #0]

            ldr r1, =A5_refresh_status      @ loading the address of A5_refresh_status into r1 
 8000374:	f8df 15c0 	ldr.w	r1, [pc, #1472]	; 8000938 <delay_loop+0x1c>
            ldr r0, [r1]                    @ loading the value within the address of A5_refresh_status (r1) into r0
 8000378:	6808      	ldr	r0, [r1, #0]

            cmp r0, #A5_REFRESH_TRUE        @ comparing r0 (value of A5_refresh_status) to A5_REFRESH_TRUE (0)
 800037a:	2800      	cmp	r0, #0
            IT EQ                           @ IT block. Executes the next statements if r0 is equal to A5_REFRESH_TRUE (0)
 800037c:	bf08      	it	eq
            bleq mes_IWDGRefresh            @ branching with link to mes_ISDGRefresh function
 800037e:	f007 fe61 	bleq	8008044 <mes_IWDGRefresh>

08000382 <_bbWatch_exit>:

    _bbWatch_exit:

    pop {r4, lr}                            @ popping preserved values off of the stack
 8000382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bx lr                                       @ exiting function
 8000386:	4770      	bx	lr

08000388 <_bb_a5_button_handler>:
@
@ Returns: r0 (scaled game_time)
@
_bb_a5_button_handler:

    push {lr}                               @ pushing link register onto the stack to preserve
 8000388:	b500      	push	{lr}

        ldr r1, =A5_refresh_status          @ loading the address of A5_refresh_status into r1
 800038a:	f8df 15ac 	ldr.w	r1, [pc, #1452]	; 8000938 <delay_loop+0x1c>
        mov r0, #A5_REFRESH_FALSE           @ moving A5_REFRESH_FALSE (1) into r0
 800038e:	f04f 0001 	mov.w	r0, #1
        str r0, [r1]                        @ storing r0 (A5_REFRESH_FALSE) into the address of r1 (A5_refresh_status)
 8000392:	6008      	str	r0, [r1, #0]

    pop {lr}                                @ popping link regitser off the stack to preserve
 8000394:	f85d eb04 	ldr.w	lr, [sp], #4

bx lr                                       @ exiting function
 8000398:	4770      	bx	lr

0800039a <lab8>:

lab8:

    @ This code turns on only one light – can you make it turn them all on at once?

    ldr r1, =LEDaddress @ Load the GPIO address we need
 800039a:	f8df 15a4 	ldr.w	r1, [pc, #1444]	; 8000940 <delay_loop+0x24>
    ldr r1, [r1] @ Dereference r1 to get the value we want
 800039e:	6809      	ldr	r1, [r1, #0]
    ldrh r0, [r1] @ Get the current state of that GPIO (half word only)
 80003a0:	8808      	ldrh	r0, [r1, #0]

    orr r2, r0, #0xff00
 80003a2:	f440 427f 	orr.w	r2, r0, #65280	; 0xff00
    @@ orr r0, r0, #0x0100 @ Use bitwise OR (ORR) to set the bit at 0x0100

    strh r2, [r1] @ Write the half word back to the memory address for the GPIO
 80003a6:	800a      	strh	r2, [r1, #0]

        push {lr}
 80003a8:	b500      	push	{lr}
        mov r0, #0xffffff
 80003aa:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
        bl busy_delay
 80003ae:	f000 fab3 	bl	8000918 <busy_delay>
        pop {lr}
 80003b2:	f85d eb04 	ldr.w	lr, [sp], #4

    ldr r1, =LEDaddress  @ Load the GPIO address we need
 80003b6:	f8df 1588 	ldr.w	r1, [pc, #1416]	; 8000940 <delay_loop+0x24>
    ldr r1, [r1]         @ Dereference r1 to get the value we want
 80003ba:	6809      	ldr	r1, [r1, #0]
    ldrh r0, [r1]        @ Get the current state of that GPIO (half word only)
 80003bc:	8808      	ldrh	r0, [r1, #0]

    mov r2, #0x0
 80003be:	f04f 0200 	mov.w	r2, #0
    @orr r2, r0, #0x000f

    strh r2, [r1]        @ Write the half word back to the memory address for the GPIO
 80003c2:	800a      	strh	r2, [r1, #0]

bx lr
 80003c4:	4770      	bx	lr

080003c6 <random_led_function>:
@@==============================================================================================================================
@@=============== RANDOM LED LOOP ==============================================================================================

random_led_function:

    push {r4-r6, lr}                @ pushing values onto the stack in order to preserve
 80003c6:	b570      	push	{r4, r5, r6, lr}

    mov r0, #1000
 80003c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bl mes_InitIWDG
 80003cc:	f007 fe10 	bl	8007ff0 <mes_InitIWDG>
    bl mes_IWDGStart
 80003d0:	f007 fe28 	bl	8008024 <mes_IWDGStart>

080003d4 <loop_led_start>:

    loop_led_start:   

        mov r4, #WIN_LOOP_COUNTER_A4    @ moving #2 into register 1. holds the loop amount for win led blink
 80003d4:	f04f 0402 	mov.w	r4, #2
        ldr r5, =#WIN_DELAY             @ moving constant value for delay into r5
 80003d8:	f8df 556c 	ldr.w	r5, [pc, #1388]	; 8000948 <delay_loop+0x2c>

080003dc <rand_led_loop>:

        rand_led_loop:

            mov r6, #MAX_LED_A4         @ moving MAX_LED_A4 (#8) into r0. The total led amount (pre-subtraction)
 80003dc:	f04f 0608 	mov.w	r6, #8

080003e0 <rand_on_loop>:

            rand_on_loop:
                    
                sub r6, r6, #1          @ subtracting 1 from r0, storing back into r1. r0 is current LED value
 80003e0:	f1a6 0601 	sub.w	r6, r6, #1

                mov r0, r6              @ moving r6 (led) into r0 to prepare for function call
 80003e4:	4630      	mov	r0, r6
                bl BSP_LED_Toggle       @ calling function to trigger LED on
 80003e6:	f00b fea3 	bl	800c130 <BSP_LED_Toggle>

                cmp r6, #0              @ comparing r0, current led, to zero
 80003ea:	2e00      	cmp	r6, #0
                bgt rand_on_loop        @ branching back to win_on_loop if current led  
 80003ec:	dcf8      	bgt.n	80003e0 <rand_on_loop>

            mov r0, r5                  @ moving delay value into r0 to prepare for function call
 80003ee:	4628      	mov	r0, r5
            bl busy_delay               @ calling delay function
 80003f0:	f000 fa92 	bl	8000918 <busy_delay>

            mov r6, #MAX_LED_A4         @ moving MAX_LED_A4 (#8, max led value) into register r6 to prepare for a4_win_off_loop
 80003f4:	f04f 0608 	mov.w	r6, #8

080003f8 <rand_off_loop>:

            rand_off_loop:

                sub r6, r6, #1          @ subtracting 1 from r6 (led value) 
 80003f8:	f1a6 0601 	sub.w	r6, r6, #1

                mov r0, r6              @ moving r6 (led) into r0 to prepare for function call
 80003fc:	4630      	mov	r0, r6
                bl BSP_LED_Toggle       @ calling function to trigger current LED
 80003fe:	f00b fe97 	bl	800c130 <BSP_LED_Toggle>

                cmp r6, #0              @ comparing r6, the current led value, to zero
 8000402:	2e00      	cmp	r6, #0
                bgt rand_off_loop       @ branching back to a4_win_off_loop if r6 is greater than 0
 8000404:	dcf8      	bgt.n	80003f8 <rand_off_loop>
                
            mov r0, r5                  @ moving delay value in r5 into r0 to prepare for function call
 8000406:	4628      	mov	r0, r5
            bl busy_delay               @ calling delay function
 8000408:	f000 fa86 	bl	8000918 <busy_delay>

            sub r4, r4, #1              @ subtracting 1 from r4 (loop counter for win blink). Storing back in r4
 800040c:	f1a4 0401 	sub.w	r4, r4, #1
            cmp r4, #0                  @ comparing #0 to r4 (loop counter for win blink)
 8000410:	2c00      	cmp	r4, #0
            bgt rand_led_loop           @ branching back to win_loop if r4, loop counter, is greater than 0
 8000412:	dce3      	bgt.n	80003dc <rand_led_loop>
    
        ldr r1, =A5_refresh_status
 8000414:	f8df 1520 	ldr.w	r1, [pc, #1312]	; 8000938 <delay_loop+0x1c>
        ldr r0, [r1]
 8000418:	6808      	ldr	r0, [r1, #0]

        cmp r0, #0
 800041a:	2800      	cmp	r0, #0
        IT EQ
 800041c:	bf08      	it	eq
        bleq mes_IWDGRefresh              @------------------------- LAB 8 -------------------------------
 800041e:	f007 fe11 	bleq	8008044 <mes_IWDGRefresh>

        bal loop_led_start
 8000422:	e7d7      	b.n	80003d4 <loop_led_start>

    pop {r4-r6, lr}                 @ popping values off of the stack
 8000424:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

bx lr
 8000428:	4770      	bx	lr

0800042a <bbTilt>:
@
@ Returns: r0 (scaled game_time)
@
bbTilt:

    push {r4-r6, lr}            @ pushing values onto stack to preserve
 800042a:	b570      	push	{r4, r5, r6, lr}

    mov r4, r0                  @ putting delay in r0, into r4
 800042c:	4604      	mov	r4, r0
    mov r5, r1                  @ moving taret in r1, into r5
 800042e:	460d      	mov	r5, r1
    mov r6, r2                  @ moving game_time in r2, into r6
 8000430:	4616      	mov	r6, r2

    bl turn_off_leds            @ Calling function to turn off any leds if any are on
 8000432:	f000 f8c4 	bl	80005be <turn_off_leds>

    ldr r1, =A4_delay           @ loading the address of A4_delay into r1
 8000436:	f8df 1514 	ldr.w	r1, [pc, #1300]	; 800094c <delay_loop+0x30>

    lsr r4, r4, #MS_SHFT_VAL_A4 @ shifting to the right by 9 the value of delay in order to scale value to miliseconds
 800043a:	ea4f 2454 	mov.w	r4, r4, lsr #9
    cmp r4, #0                  @ comparing r4 (scaled delay) to 0. 0 is an invalid delay value.
 800043e:	2c00      	cmp	r4, #0
    it le                       @ IT block which executes if r4 (delay) is equal to or less than 0 (0 is invalid)
 8000440:	bfd8      	it	le
    movle r4, #MIN_DELAY        @ moving MIN_DELAY (minimum delay amount) into r4 if r4 is invalid (0 or less than 0) 
 8000442:	2401      	movle	r4, #1

    str r4, [r1]                @ storing the value of r4 (delay) into the address of r1 (A4_delay)
 8000444:	600c      	str	r4, [r1, #0]
    ldr r1, =A4_updated_delay   @ loading the address of A4_updated_delay into r1
 8000446:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000950 <delay_loop+0x34>
    str r4, [r1]                @ storing the value of r4 (delay) into the address of r1 (A4_updated_delay)
 800044a:	600c      	str	r4, [r1, #0]

    ldr r1, =A4_target          @ loading the address of A4_target into r1
 800044c:	f8df 1504 	ldr.w	r1, [pc, #1284]	; 8000954 <delay_loop+0x38>
    str r5, [r1]                @ storing the value of r5 (target) into the address of r1 (A4_target)
 8000450:	600d      	str	r5, [r1, #0]

    mov r1, #SEC_MUL_VAL_A4     @ moving multiple (25) into r0
 8000452:	f04f 0119 	mov.w	r1, #25
    mul r0, r6, r1              @ multiplying the game_time value to get accurate conversion into seconds
 8000456:	fb06 f001 	mul.w	r0, r6, r1
    ldr r2, =A4_game_time       @ getting address of register 1
 800045a:	f8df 24fc 	ldr.w	r2, [pc, #1276]	; 8000958 <delay_loop+0x3c>
    str r0, [r2]                @ storing value of r1, converted game time, into the address of r2 (A4_game_time)
 800045e:	6010      	str	r0, [r2, #0]

    pop {r4-r6, lr}             @ popping values off of the stack
 8000460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

bx lr                           @ exiting function
 8000464:	4770      	bx	lr

08000466 <a4_game_time_logic>:
@
@ Returns: r0
@
a4_game_time_logic:

    push {r4-r7, lr}                        @ pushing values onto stack to preserve 
 8000466:	b5f0      	push	{r4, r5, r6, r7, lr}

    ldr r1, =A4_game_time                   @ loading the address of A4_game_time into r1
 8000468:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000958 <delay_loop+0x3c>
    ldr r0, [r1]                            @ loading the value found in the r1 address into r0 
 800046c:	6808      	ldr	r0, [r1, #0]
    subs r0, r0, #1                         @ subtracting 1 from r0 (A4_game_time) and storing back in r0 with status flag
 800046e:	3801      	subs	r0, #1

    blt a4_game_time_exit                   @ branching to exit label if that value of r0 (A4_game_time), is less than 1
 8000470:	db33      	blt.n	80004da <a4_game_time_exit>

        str r0, [r1]                        @ storing the value of r0 (decremented game_time), back into the address of r1
 8000472:	6008      	str	r0, [r1, #0]

        cmp r0, #0                          @ comparing the value of r0 (A4_game_time), to the value of 0
 8000474:	2800      	cmp	r0, #0
        it eq                               @ IT block which exicutes if values are equal
 8000476:	bf08      	it	eq
        bleq a4_loose                       @ branching with link to a4_loose if r0 is equal to 0 (timer has run out and user looses)
 8000478:	f000 f832 	bleq	80004e0 <a4_loose>

        ldr r1, =A4_led_call_delay          @ loading the address of A4_led_call_delay into r1
 800047c:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 800095c <delay_loop+0x40>
        ldr r0, [r1]                        @ loading the values found within r1 (A4_led_call_delay), into r0
 8000480:	6808      	ldr	r0, [r1, #0]
        subs r0, r0, #1                     @ subtracting 1 from r0 and storing back into r0 with status flag
 8000482:	3801      	subs	r0, #1
        str r0, [r1]                        @ storing the value of r0 back into the address of r1 (A4_led_call_delay)
 8000484:	6008      	str	r0, [r1, #0]

        bgt a4_game_time_exit               @ branching to exit label if r0 is greater than 0
 8000486:	dc28      	bgt.n	80004da <a4_game_time_exit>

            bl a4_led_logic                 @ calling function which handels accelermotor and LED. Returns current LED value
 8000488:	f000 f857 	bl	800053a <a4_led_logic>

            ldr r1, =A4_curr_target         @ Getting address of A4_curr_target and storing in r1
 800048c:	f8df 14d0 	ldr.w	r1, [pc, #1232]	; 8000960 <delay_loop+0x44>
            str r0, [r1]                    @ Storing the return value (r0) of a4_led_logic (current led), into the address of r1 (A4_curr_target)
 8000490:	6008      	str	r0, [r1, #0]
            
            ldr r1, =A4_target              @ getting address of A4_target and loading into r1
 8000492:	f8df 14c0 	ldr.w	r1, [pc, #1216]	; 8000954 <delay_loop+0x38>
            ldr r0, [r1]                    @ storing the contents of in the address of (r1) A4_target into r0
 8000496:	6808      	ldr	r0, [r1, #0]
            ldr r1, =A4_curr_target         @ getting address of A4_curr_target and loading into r1
 8000498:	f8df 14c4 	ldr.w	r1, [pc, #1220]	; 8000960 <delay_loop+0x44>
            ldr r2, [r1]                    @ storing the contents of in the address of (r1) A4_curr_target into r2
 800049c:	680a      	ldr	r2, [r1, #0]

            ldr r1, =A4_delay               @ loading the address of A4_delay into r1
 800049e:	f8df 14ac 	ldr.w	r1, [pc, #1196]	; 800094c <delay_loop+0x30>
            ldr r4, [r1]                    @ loading the value in the address of r1 (A4_delay) into r4
 80004a2:	680c      	ldr	r4, [r1, #0]
            ldr r5, =A4_updated_delay       @ loading the address of A4_updated_delay into r5
 80004a4:	f8df 54a8 	ldr.w	r5, [pc, #1192]	; 8000950 <delay_loop+0x34>
            ldr r3, [r5]                    @ loading the value in the address of r5 (A4_updated_delay) into r3
 80004a8:	682b      	ldr	r3, [r5, #0]

            cmp r2, r0                      @ comparing the current led (r2) to the larget led (r0)
 80004aa:	4282      	cmp	r2, r0
            itte eq                         @ ITTE block which exicute the first 2 if r2 and r0 are equal, and exicutes the last if not equal
 80004ac:	bf06      	itte	eq
            subeq r3, r3, #1                @ if target led (r0) is equal to current led (r2), subtract 1 from A4_updated_delay (r3) and store back in r3
 80004ae:	3b01      	subeq	r3, #1
            streq r3, [r5]                  @ store the decremented delay value in the address of A4_updated_delay (r5) if target and current led is equal
 80004b0:	602b      	streq	r3, [r5, #0]
            strne r4, [r5]                  @ if not equal, store the original delay value back in a4_updated_delay (r5)
 80004b2:	602c      	strne	r4, [r5, #0]

            ldr r1, =A4_game_time           @ loading the address of A4_game_time into r1
 80004b4:	f8df 14a0 	ldr.w	r1, [pc, #1184]	; 8000958 <delay_loop+0x3c>
            ldr r0, [r1]                    @ loading the values found in the address of r1 (A4_game_time) into r0
 80004b8:	6808      	ldr	r0, [r1, #0]

            ldr r6, =A4_target              @ loading the address of A4_target into r6
 80004ba:	f8df 6498 	ldr.w	r6, [pc, #1176]	; 8000954 <delay_loop+0x38>
            ldr r7, [r6]                    @ loading the values found within the address of r6 (A4_target) into r7
 80004be:	6837      	ldr	r7, [r6, #0]

            mov r2, #0                      @ move 0 into r2
 80004c0:	f04f 0200 	mov.w	r2, #0
            
            cmp r3, #0                      @ compare r3 (A4_updated_delay) to 0
 80004c4:	2b00      	cmp	r3, #0
            itt eq                          @ ITT block which exicuted if r3 and 0 are equal
 80004c6:	bf04      	itt	eq
            streq r2, [r1]                  @ storing r2 (0) into the address of r1 (A4_game_time) if r3 and 0 are equal. An r3 of 0 means that player has
 80004c8:	600a      	streq	r2, [r1, #0]
            bleq a4_win                     @ held the board on the target for A4_delay period of time, meaning user wins. Branching to a4_win if values equal
 80004ca:	f000 f812 	bleq	80004f2 <a4_win>

            ldr r1, =A4_led_call_delay      @ loading the address of A4_led_call_delay into r1
 80004ce:	f8df 148c 	ldr.w	r1, [pc, #1164]	; 800095c <delay_loop+0x40>
            ldr r0, [r1]                    @ loading the contents within the address of r1 (A4_led_call_delay) into r0
 80004d2:	6808      	ldr	r0, [r1, #0]
            mov r0, #TICKS_TO_CALL          @ Moving the value of 15 (TICKS_TO_CALL) into r0
 80004d4:	f04f 000f 	mov.w	r0, #15
            str r0, [r1]                    @ storing r0 (15) into the address of r1 (A4_led_call_delay)
 80004d8:	6008      	str	r0, [r1, #0]

080004da <a4_game_time_exit>:

    a4_game_time_exit:                      @ exit label

    pop {r4-r7, lr}                         @ popping preserved values off of the stack
 80004da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

bx lr                                       @ exiting function
 80004de:	4770      	bx	lr

080004e0 <a4_loose>:
@
@ Returns: no returns
@
a4_loose:

    push {lr}               @ pushing the link register to preserve
 80004e0:	b500      	push	{lr}

    ldr r1, =A4_target      @ loading the address of A4_target into r1
 80004e2:	f8df 1470 	ldr.w	r1, [pc, #1136]	; 8000954 <delay_loop+0x38>
    ldr r0, [r1]            @ loading the value within the address of r1 (A4_target) into r0
 80004e6:	6808      	ldr	r0, [r1, #0]
    bl BSP_LED_Toggle       @ calling function to toggle led
 80004e8:	f00b fe22 	bl	800c130 <BSP_LED_Toggle>

    pop {lr}                @ popping link register off the stack
 80004ec:	f85d eb04 	ldr.w	lr, [sp], #4

bx lr                       @ exiting function
 80004f0:	4770      	bx	lr

080004f2 <a4_win>:
@
@ Returns: no returns
@
a4_win:

    push {r4-r6, lr}                @ pushing values onto the stack in order to preserve
 80004f2:	b570      	push	{r4, r5, r6, lr}

    mov r4, #WIN_LOOP_COUNTER_A4    @ moving #2 into register 1. holds the loop amount for win led blink
 80004f4:	f04f 0402 	mov.w	r4, #2
    ldr r5, =#WIN_DELAY             @ moving constant value for delay into r5
 80004f8:	f8df 544c 	ldr.w	r5, [pc, #1100]	; 8000948 <delay_loop+0x2c>

080004fc <win_loop>:

    win_loop:

        mov r6, #MAX_LED_A4         @ moving MAX_LED_A4 (#8) into r0. The total led amount (pre-subtraction)
 80004fc:	f04f 0608 	mov.w	r6, #8

08000500 <a4_win_on_loop>:

        a4_win_on_loop:
                
            sub r6, r6, #1          @ subtracting 1 from r0, storing back into r1. r0 is current LED value
 8000500:	f1a6 0601 	sub.w	r6, r6, #1

            mov r0, r6              @ moving r6 (led) into r0 to prepare for function call
 8000504:	4630      	mov	r0, r6
            bl BSP_LED_Toggle       @ calling function to trigger LED on
 8000506:	f00b fe13 	bl	800c130 <BSP_LED_Toggle>

            cmp r6, #0              @ comparing r0, current led, to zero
 800050a:	2e00      	cmp	r6, #0
            bgt a4_win_on_loop      @ branching back to win_on_loop if current led  
 800050c:	dcf8      	bgt.n	8000500 <a4_win_on_loop>

        mov r0, r5                  @ moving delay value into r0 to prepare for function call
 800050e:	4628      	mov	r0, r5
        bl busy_delay               @ calling delay function
 8000510:	f000 fa02 	bl	8000918 <busy_delay>

        mov r6, #MAX_LED_A4         @ moving MAX_LED_A4 (#8, max led value) into register r6 to prepare for a4_win_off_loop
 8000514:	f04f 0608 	mov.w	r6, #8

08000518 <a4_win_off_loop>:

        a4_win_off_loop:

            sub r6, r6, #1          @ subtracting 1 from r6 (led value) 
 8000518:	f1a6 0601 	sub.w	r6, r6, #1

            mov r0, r6              @ moving r6 (led) into r0 to prepare for function call
 800051c:	4630      	mov	r0, r6
            bl BSP_LED_Toggle       @ calling function to trigger current LED
 800051e:	f00b fe07 	bl	800c130 <BSP_LED_Toggle>

            cmp r6, #0              @ comparing r6, the current led value, to zero
 8000522:	2e00      	cmp	r6, #0
            bgt a4_win_off_loop     @ branching back to a4_win_off_loop if r6 is greater than 0
 8000524:	dcf8      	bgt.n	8000518 <a4_win_off_loop>
            
        mov r0, r5                  @ moving delay value in r5 into r0 to prepare for function call
 8000526:	4628      	mov	r0, r5
        bl busy_delay               @ calling delay function
 8000528:	f000 f9f6 	bl	8000918 <busy_delay>

        sub r4, r4, #1              @ subtracting 1 from r4 (loop counter for win blink). Storing back in r4
 800052c:	f1a4 0401 	sub.w	r4, r4, #1
        cmp r4, #0                  @ comparing #0 to r4 (loop counter for win blink)
 8000530:	2c00      	cmp	r4, #0
        bgt win_loop                @ branching back to win_loop if r4, loop counter, is greater than 0
 8000532:	dce3      	bgt.n	80004fc <win_loop>

08000534 <a4_win_exit>:

    a4_win_exit:

    pop {r4-r6, lr}                 @ popping values off of the stack
 8000534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

bx lr                               @ exiting function
 8000538:	4770      	bx	lr

0800053a <a4_led_logic>:
@
@ Returns: r0 (the current LED value)
@
a4_led_logic:

    push {r4-r6, lr}                @ pushing values onto the stack to preserve
 800053a:	b570      	push	{r4, r5, r6, lr}

    mov r0, #ACC_I2C_ADDRESS        @ moving the I2C address into r0 to prepare for function call
 800053c:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov r1, #X_H_A                  @ moving the X High value into r1 to prepare for function call
 8000540:	f04f 0129 	mov.w	r1, #41	; 0x29
    bl COMPASSACCELERO_IO_Read      @ calling function which will return the accelerometer value of X
 8000544:	f00b ff2e 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
    sxtb r5, r0                     @ convert r0, the X return value, into 32-bit and store in r5
 8000548:	b245      	sxtb	r5, r0

    mov r0, #ACC_I2C_ADDRESS        @ moving I2C address into r0 to prepare for function call
 800054a:	f04f 0032 	mov.w	r0, #50	; 0x32
    mov r1, #Y_H_A                  @ moving Y High values into r1 to prepare for function call
 800054e:	f04f 012b 	mov.w	r1, #43	; 0x2b
    bl COMPASSACCELERO_IO_Read      @ calling function which will return accelerometer value of Y
 8000552:	f00b ff27 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
    sxtb r6, r0                     @ convert r0, the Y return value, into 32-bit and store in r6
 8000556:	b246      	sxtb	r6, r0

    cmp r5, #POS_VALUE              @ comparing r5 (X value) with 16. (Acceletometer is from -64 to 64. 16 is 32 divided by 2)
 8000558:	2d10      	cmp	r5, #16
    bgt is_positive                 @ branching to is_positive label if r5 is greater than 16.
 800055a:	dc03      	bgt.n	8000564 <is_positive>

    cmp r5, #NEG_VALUE              @ comparing r5 (X value) with -16. (Acceletometer is from -64 to 64. 16 is 32 divided by 2)
 800055c:	f115 0f0a 	cmn.w	r5, #10
    blt is_negative                 @ branching to is_negative lable if r5 (X value), is less than -16.
 8000560:	db0c      	blt.n	800057c <is_negative>

    bal is_zero                     @ Always branching to is_zero (other comparisons with X failed)
 8000562:	e017      	b.n	8000594 <is_zero>

08000564 <is_positive>:

    is_positive:        

        cmp r6, #POS_VALUE          @ comparing r6 (Y value) to 16. (Acceletometer is from -64 to 64. 16 is 32 divided by 2)
 8000564:	2e10      	cmp	r6, #16
        itt gt                      @ ITT block which exicutes if r6 (Y) is greater than 16.
 8000566:	bfc4      	itt	gt
        movgt r0, #LED_6            @ moving #6 (corresponding LED) into r0 to prepare for function call
 8000568:	2006      	movgt	r0, #6
        bgt is_accel_end            @ branching to is_accel_end to exit comparisons since led is now set and ready.
 800056a:	e01b      	bgt.n	80005a4 <is_accel_end>

        cmp r6, #NEG_VALUE          @ comparing r6 (Y value) to -16. (Acceletometer is from -64 to 64. 16 is 32 divided by 2)
 800056c:	f116 0f0a 	cmn.w	r6, #10
        itt le                      @ ITT block which exicutes if r6 (Y) is less than -16.
 8000570:	bfdc      	itt	le
        movle r0, #LED_2            @ moving #2 (corresponding LED) into r0 to prepare for function call if r6 is less than -16
 8000572:	2002      	movle	r0, #2
        ble is_accel_end            @ branching to is_accel_end to exit comparisons since led is now set and ready.
 8000574:	e016      	ble.n	80005a4 <is_accel_end>

        mov r0, #LED_4              @ moving 4 (corresponding LED) into r0 (other comparisons failed, meaning r6 (Y) is between 16 and -16)
 8000576:	f04f 0004 	mov.w	r0, #4
        bal is_accel_end            @ always branching to is_accel_end to leave comparisons since led is set and ready.
 800057a:	e013      	b.n	80005a4 <is_accel_end>

0800057c <is_negative>:

    is_negative:

        cmp r6, #POS_VALUE          @ comparing r6 (Y value) to 16. (Acceletometer is from -64 to 64. 16 is 32 divided by 2)
 800057c:	2e10      	cmp	r6, #16
        itt gt                      @ ITT block which executes if r6 (Y) is greater than 16.
 800057e:	bfc4      	itt	gt
        movgt r0, #LED_5            @ moving 5 (corresponding LED) into r0 to prepare for function call if r6 (Y) is greater than 16
 8000580:	2005      	movgt	r0, #5
        bgt is_accel_end            @ branching to is_accel_end if r6 (Y) is greater than 16 in order to exit comparisons since led is set and ready.
 8000582:	e00f      	bgt.n	80005a4 <is_accel_end>

        cmp r6, #NEG_VALUE          @ comparing r6 (Y value) to -16. (Acceletometer is from -64 to 64. 16 is 32 divided by 2)
 8000584:	f116 0f0a 	cmn.w	r6, #10
        itt le                      @ ITT block which executes if r6 (Y) is less than or equal to -16.
 8000588:	bfdc      	itt	le
        movle r0, #LED_1            @ moving 1 into r0 (corresponding LED) into r0 to prepare for function call if r6 (Y) is greater than 16
 800058a:	2001      	movle	r0, #1
        ble is_accel_end            @ branching to is_accel_end to exit comparisons since led is set and ready
 800058c:	e00a      	ble.n	80005a4 <is_accel_end>

        mov r0, #LED_3              @ moving 3 (corresponding LED) into r0 (other comparisons failed, meaning r6 (Y) is between 16 and -16)
 800058e:	f04f 0003 	mov.w	r0, #3
        bal is_accel_end            @ always branching to is_accel_end to leave comparisons since led is set and ready.
 8000592:	e007      	b.n	80005a4 <is_accel_end>

08000594 <is_zero>:

    is_zero:

        cmp r6, #0                  @ comparing r6 (Y value) to 0. (Acceletometer is from -64 to 64. Greater than 0 is quadrant 1 and 2, meaning South led)
 8000594:	2e00      	cmp	r6, #0
        itt gt                      @ ITT block which executes if r6 (Y) is greater than 0.
 8000596:	bfc4      	itt	gt
        movgt r0, #LED_7            @ moving 7 (corresponding LED) into r0 if r6 (Y) is greater than 0
 8000598:	2007      	movgt	r0, #7
        bgt is_accel_end            @ branching to is_accel_end to exit comparisons since led is set and ready.
 800059a:	e003      	bgt.n	80005a4 <is_accel_end>

        cmp r6, #0                  @ comparing r6 (Y value) to 0. (Acceletometer is from -64 to 64. Less than 0 is quadrant 3 and 4, meaning North led)
 800059c:	2e00      	cmp	r6, #0
        itt le                      @ ITT block which executes if r6 (Y) is less than or equal to 0.
 800059e:	bfdc      	itt	le
        movle r0, #LED_0                @ moving 0 (corresponding LED) into r0 if r6 (Y) is less than or equal to 0.
 80005a0:	2000      	movle	r0, #0
        ble is_accel_end            @ branching to is_accel_end to exit comparisons since led is set and ready.
 80005a2:	e7ff      	ble.n	80005a4 <is_accel_end>

080005a4 <is_accel_end>:

    is_accel_end:

    mov r4, r0                      @ moving r0 (current LED) into r4 to preserve 
 80005a4:	4604      	mov	r4, r0

    bl BSP_LED_Toggle               @ Calling function to trigger on LED light (r0 is already set to LED)
 80005a6:	f00b fdc3 	bl	800c130 <BSP_LED_Toggle>

    ldr r0, =DELAY                  @ loading the value of DELAY into r0 to prepare for function call
 80005aa:	48ee      	ldr	r0, [pc, #952]	; (8000964 <delay_loop+0x48>)
    bl busy_delay                   @ calling function to delay in order to give illusion led is constantly on
 80005ac:	f000 f9b4 	bl	8000918 <busy_delay>

    mov r0, r4                      @ moving r4 (preserved LED) into r0 to prepare for function call
 80005b0:	4620      	mov	r0, r4
    bl BSP_LED_Toggle               @ calling function to trigger LED off
 80005b2:	f00b fdbd 	bl	800c130 <BSP_LED_Toggle>

    mov r0, r4                      @ moving r4 (preserved LED) into r0 in order to return value back to calling function
 80005b6:	4620      	mov	r0, r4

    pop {r4-r6, lr}                 @ popping preserved values off of the stack 
 80005b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

bx lr                               @ exiting function
 80005bc:	4770      	bx	lr

080005be <turn_off_leds>:
@
@ Returns: no returns
@
turn_off_leds:

    push {r4, lr}          @ pushing values onto stack to preserve
 80005be:	b510      	push	{r4, lr}

    mov r4, #MAX_LED_A4    @ loading into r4 #8, number of leds pre-subtraction
 80005c0:	f04f 0408 	mov.w	r4, #8

080005c4 <off_loop>:

    off_loop:

        sub r4, r4, #1     @ subtracting 1 from r0, storing back into r1. r0 is current LED value
 80005c4:	f1a4 0401 	sub.w	r4, r4, #1
        mov r0, r4
 80005c8:	4620      	mov	r0, r4
        bl BSP_LED_Off     @ calling function to trigger LED on
 80005ca:	f00b fda3 	bl	800c114 <BSP_LED_Off>
        cmp r4, #0         @ comparing r0, current led, to zero
 80005ce:	2c00      	cmp	r4, #0
        bgt off_loop       @ branching back to win_on_loop if current led  
 80005d0:	dcf8      	bgt.n	80005c4 <off_loop>

    pop {r4, lr}           @ popping values off of the stack
 80005d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

bx lr                      @ exiting function
 80005d6:	4770      	bx	lr

080005d8 <test_tick>:
@@=============== ASSIGNMENT 4 END ==============================================================================================
@@=========================================================== Lab 7 =============================================================

test_tick:

    ldr r1, =lab_ticks          @ getting address of register 1
 80005d8:	49e3      	ldr	r1, [pc, #908]	; (8000968 <delay_loop+0x4c>)
    str r0, [r1]                @ storing value of r3, converted game time, into lab_ticks
 80005da:	6008      	str	r0, [r1, #0]

bx lr
 80005dc:	4770      	bx	lr

080005de <_bb_lab_setup>:

_bb_lab_setup:

    push {lr}
 80005de:	b500      	push	{lr}

    ldr r1, =A4_game_time
 80005e0:	49dd      	ldr	r1, [pc, #884]	; (8000958 <delay_loop+0x3c>)
    ldr r0, [r1]
 80005e2:	6808      	ldr	r0, [r1, #0]
    subs r0, r0, #1
 80005e4:	3801      	subs	r0, #1

    ble game_time_exit
 80005e6:	dd28      	ble.n	800063a <game_time_exit>

        str r0, [r1]
 80005e8:	6008      	str	r0, [r1, #0]
        ldr r1, =A4_led_call_delay
 80005ea:	49dc      	ldr	r1, [pc, #880]	; (800095c <delay_loop+0x40>)
        ldr r0, [r1]
 80005ec:	6808      	ldr	r0, [r1, #0]
        subs r0, r0, #1
 80005ee:	3801      	subs	r0, #1
        str r0, [r1]
 80005f0:	6008      	str	r0, [r1, #0]

        bgt game_time_exit
 80005f2:	dc22      	bgt.n	800063a <game_time_exit>

            bl a4_led_logic                 @ calling function which handels accelermotor and LED. Returns current LED value
 80005f4:	f7ff ffa1 	bl	800053a <a4_led_logic>

            ldr r1, =A4_curr_target         @ Getting address of constant and storing in r1
 80005f8:	49d9      	ldr	r1, [pc, #868]	; (8000960 <delay_loop+0x44>)
            str r0, [r1]                    @ Storing the return value (r0) of a4_led_logic (current led), into the address of r1 (A4_curr_target)
 80005fa:	6008      	str	r0, [r1, #0]
            @@-------------------------------------------------------------------------------------------------------------------------------------------------------
            
            ldr r1, =A4_target          @ getting address of A4_target and storing in r0
 80005fc:	49d5      	ldr	r1, [pc, #852]	; (8000954 <delay_loop+0x38>)
            ldr r0, [r1]                @ storing the contents of in the address of (r1) A4_target into r0
 80005fe:	6808      	ldr	r0, [r1, #0]
            ldr r1, =A4_curr_target     @ getting address of A4_curr_target and storing in r0
 8000600:	49d7      	ldr	r1, [pc, #860]	; (8000960 <delay_loop+0x44>)
            ldr r2, [r1]                @ storing the contents of in the address of (r1) A4_curr_target into r2
 8000602:	680a      	ldr	r2, [r1, #0]

            ldr r1, =A4_delay
 8000604:	49d1      	ldr	r1, [pc, #836]	; (800094c <delay_loop+0x30>)
            ldr r4, [r1]
 8000606:	680c      	ldr	r4, [r1, #0]
            ldr r5, =A4_updated_delay
 8000608:	4dd1      	ldr	r5, [pc, #836]	; (8000950 <delay_loop+0x34>)
            ldr r3, [r5]
 800060a:	682b      	ldr	r3, [r5, #0]

                cmp r2, r0                  @ comparing the current led (r2) to the larget led (r0)
 800060c:	4282      	cmp	r2, r0
                itte eq                     @ if equal than, than, else
 800060e:	bf06      	itte	eq
                subeq r3, r3, #1            @ if the target led (r0) is equal to the current led (r2), subtract 1 from A4_updated_delay (r3) and store it back in r3
 8000610:	3b01      	subeq	r3, #1
                streq r3, [r5]              @ store the decremented delay value in the address of A4_updated_delay (r5) if target and current led is equal
 8000612:	602b      	streq	r3, [r5, #0]
                strne r4, [r5]              @ if not equal, store the original delay value back in a4_updated_delay (r5)
 8000614:	602c      	strne	r4, [r5, #0]

            ldr r1, =A4_game_time
 8000616:	49d0      	ldr	r1, [pc, #832]	; (8000958 <delay_loop+0x3c>)
            ldr r0, [r1]
 8000618:	6808      	ldr	r0, [r1, #0]

            push {r1-r3, lr}
 800061a:	b50e      	push	{r1, r2, r3, lr}
            cmp r0, #1
 800061c:	2801      	cmp	r0, #1
            it eq
 800061e:	bf08      	it	eq
            bleq a4_loose
 8000620:	f7ff ff5e 	bleq	80004e0 <a4_loose>
            pop {r1-r3, lr}
 8000624:	e8bd 400e 	ldmia.w	sp!, {r1, r2, r3, lr}

            cmp r3, #0
 8000628:	2b00      	cmp	r3, #0
            it eq
 800062a:	bf08      	it	eq
            bleq a4_win
 800062c:	f7ff ff61 	bleq	80004f2 <a4_win>

            @@-------------------------------------------------------------------------------------------------------------------------------------------------------
            ldr r1, =A4_led_call_delay
 8000630:	49ca      	ldr	r1, [pc, #808]	; (800095c <delay_loop+0x40>)
            ldr r0, [r1]
 8000632:	6808      	ldr	r0, [r1, #0]
            mov r0, #1
 8000634:	f04f 0001 	mov.w	r0, #1
            str r0, [r1]
 8000638:	6008      	str	r0, [r1, #0]

0800063a <game_time_exit>:

    game_time_exit:

    mov r0, r3
 800063a:	4618      	mov	r0, r3

    pop {lr}
 800063c:	f85d eb04 	ldr.w	lr, [sp], #4

bx lr
 8000640:	4770      	bx	lr

08000642 <_bb_lab_tick>:

    .size _bb_lab_setup, .-_bb_lab_setup

_bb_lab_tick:

    push {lr}
 8000642:	b500      	push	{lr}

    ldr r1, =lab_ticks
 8000644:	49c8      	ldr	r1, [pc, #800]	; (8000968 <delay_loop+0x4c>)
    ldr r0, [r1]
 8000646:	6808      	ldr	r0, [r1, #0]

    subs r0, r0, #1
 8000648:	3801      	subs	r0, #1

    ble _bb_lab_exit
 800064a:	dd0a      	ble.n	8000662 <_bb_lab_exit>

        str r0, [r1]
 800064c:	6008      	str	r0, [r1, #0]
        ldr r1, =lab_ticks_blinks
 800064e:	49c7      	ldr	r1, [pc, #796]	; (800096c <delay_loop+0x50>)
        ldr r0, [r1]
 8000650:	6808      	ldr	r0, [r1, #0]
        subs r0, r0, #1
 8000652:	3801      	subs	r0, #1
        str r0, [r1]
 8000654:	6008      	str	r0, [r1, #0]

        bgt _bb_lab_exit
 8000656:	dc04      	bgt.n	8000662 <_bb_lab_exit>

            @mov r0, #0
            @bl BSP_LED_Toggle

            ldr r1, =lab_ticks_blinks
 8000658:	49c4      	ldr	r1, [pc, #784]	; (800096c <delay_loop+0x50>)
            ldr r0, [r1]
 800065a:	6808      	ldr	r0, [r1, #0]
            mov r0, #1
 800065c:	f04f 0001 	mov.w	r0, #1
            str r0, [r1]
 8000660:	6008      	str	r0, [r1, #0]

08000662 <_bb_lab_exit>:

    _bb_lab_exit:

    pop {lr}
 8000662:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000666:	4770      	bx	lr

08000668 <_test_function>:

@@========================================================== Lab 7 END ===========================================================

_test_function:
     
        push {r4-r6, lr}
 8000668:	b570      	push	{r4, r5, r6, lr}

    @ble loop_lab_exit

        @@--------

        mov r0, #ACC_I2C_ADDRESS
 800066a:	f04f 0032 	mov.w	r0, #50	; 0x32
        mov r1, #X_H_A
 800066e:	f04f 0129 	mov.w	r1, #41	; 0x29
        bl COMPASSACCELERO_IO_Read
 8000672:	f00b fe97 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
        sxtb r5, r0                     @ r5 holds 32-bit value of X
 8000676:	b245      	sxtb	r5, r0

        mov r0, #ACC_I2C_ADDRESS
 8000678:	f04f 0032 	mov.w	r0, #50	; 0x32
        mov r1, #Y_H_A
 800067c:	f04f 012b 	mov.w	r1, #43	; 0x2b
        bl COMPASSACCELERO_IO_Read
 8000680:	f00b fe90 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
        sxtb r6, r0                     @ r6 holds 32-bit value of Y
 8000684:	b246      	sxtb	r6, r0

        @------------------------------------NEW 4:30 VERSION--------------------------------------

        cmp r5, #16
 8000686:	2d10      	cmp	r5, #16
        bgt test_is_positive
 8000688:	dc03      	bgt.n	8000692 <test_is_positive>

        cmp r5, #-16
 800068a:	f115 0f10 	cmn.w	r5, #16
        blt test_is_negative
 800068e:	db0c      	blt.n	80006aa <test_is_negative>

        bal test_is_zero
 8000690:	e017      	b.n	80006c2 <test_is_zero>

08000692 <test_is_positive>:

        test_is_positive:

            cmp r6, #16
 8000692:	2e10      	cmp	r6, #16
            itt gt
 8000694:	bfc4      	itt	gt
            movgt r0, #6
 8000696:	2006      	movgt	r0, #6
            bgt test_is_accel_end
 8000698:	e01b      	bgt.n	80006d2 <test_is_accel_end>

            cmp r6, #-16
 800069a:	f116 0f10 	cmn.w	r6, #16
            itt le
 800069e:	bfdc      	itt	le
            movle r0, #2
 80006a0:	2002      	movle	r0, #2
            ble test_is_accel_end
 80006a2:	e016      	ble.n	80006d2 <test_is_accel_end>

            mov r0, #4
 80006a4:	f04f 0004 	mov.w	r0, #4
            bal test_is_accel_end
 80006a8:	e013      	b.n	80006d2 <test_is_accel_end>

080006aa <test_is_negative>:

        test_is_negative:

            cmp r6, #16
 80006aa:	2e10      	cmp	r6, #16
            itt gt
 80006ac:	bfc4      	itt	gt
            movgt r0, #5
 80006ae:	2005      	movgt	r0, #5
            bgt test_is_accel_end
 80006b0:	e00f      	bgt.n	80006d2 <test_is_accel_end>

            cmp r6, #-16
 80006b2:	f116 0f10 	cmn.w	r6, #16
            itt le
 80006b6:	bfdc      	itt	le
            movle r0, #1
 80006b8:	2001      	movle	r0, #1
            ble test_is_accel_end
 80006ba:	e00a      	ble.n	80006d2 <test_is_accel_end>

            mov r0, #3
 80006bc:	f04f 0003 	mov.w	r0, #3
            bal test_is_accel_end
 80006c0:	e007      	b.n	80006d2 <test_is_accel_end>

080006c2 <test_is_zero>:

        test_is_zero:

            cmp r6, #0
 80006c2:	2e00      	cmp	r6, #0
            itt gt
 80006c4:	bfc4      	itt	gt
            movgt r0, #7
 80006c6:	2007      	movgt	r0, #7
            bgt test_is_accel_end
 80006c8:	e003      	bgt.n	80006d2 <test_is_accel_end>

            cmp r6, #0
 80006ca:	2e00      	cmp	r6, #0
            itt le
 80006cc:	bfdc      	itt	le
            movle r0, #0
 80006ce:	2000      	movle	r0, #0
            ble test_is_accel_end
 80006d0:	e7ff      	ble.n	80006d2 <test_is_accel_end>

080006d2 <test_is_accel_end>:

        test_is_accel_end:

        mov r4, r0
 80006d2:	4604      	mov	r4, r0
        bl BSP_LED_Toggle
 80006d4:	f00b fd2c 	bl	800c130 <BSP_LED_Toggle>

        ldr r0, =DELAY
 80006d8:	48a2      	ldr	r0, [pc, #648]	; (8000964 <delay_loop+0x48>)
        bl busy_delay
 80006da:	f000 f91d 	bl	8000918 <busy_delay>

        mov r0, r4
 80006de:	4620      	mov	r0, r4
        bl BSP_LED_Toggle
 80006e0:	f00b fd26 	bl	800c130 <BSP_LED_Toggle>

        mov r0, r4
 80006e4:	4620      	mov	r0, r4
        @loop_lab_exit:

        pop {r4-r6, lr}
 80006e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

bx lr
 80006ea:	4770      	bx	lr

080006ec <tilt_win_or_loose>:

       .size _test_function, .-_test_function

tilt_win_or_loose:

    push {r0-r4, lr}                    @ pushing values onto stack to preserve for later
 80006ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    @sub r3, r4, #48                     @ subtracting 48 from r4 (current led value) to get proper ascii int

    mov r3, r0 @putting led in thing
 80006ee:	4603      	mov	r3, r0

    cmp r3, r2                          @ comparing r3 (current led) to r2 (target led)
 80006f0:	4293      	cmp	r3, r2
    bne tilt_game_loose                   @ branching to bb_game_loose if r3 and r2 are not equal
 80006f2:	d126      	bne.n	8000742 <tilt_game_loose>
    mov r1, #2                          @ moving #2 into register 1. holds the loop amount for win led blink
 80006f4:	f04f 0102 	mov.w	r1, #2
    @mov r3, #7000                      @ moving delay mutiple into r3.
    @mul r4, r0, r3                      @ mutiplying 7000 by delay in r0 to get scaled delay amount.
    mov r4, #0xffffff
 80006f8:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000

080006fc <tilt_game_win>:

    tilt_game_win:

        mov r0, #8                      @ moving #8 into r0. The total led amount (pre-subtraction)
 80006fc:	f04f 0008 	mov.w	r0, #8

08000700 <tilt_win_on_loop>:

        tilt_win_on_loop:
            
            sub r0, r0, #1              @ subtracting 1 from r0, storing back into r1. r0 is current LED value
 8000700:	f1a0 0001 	sub.w	r0, r0, #1
            push {r0, r1}                @ pushing values to prepare for function call
 8000704:	b403      	push	{r0, r1}
            bl BSP_LED_Toggle           @ calling function to trigger LED on
 8000706:	f00b fd13 	bl	800c130 <BSP_LED_Toggle>
            pop {r0, r1}                @ popping preserved values off the stack
 800070a:	bc03      	pop	{r0, r1}
            cmp r0, #0                  @ comparing r0, current led, to zero
 800070c:	2800      	cmp	r0, #0
            bgt tilt_win_on_loop         @ branching back to win_on_loop if current led  
 800070e:	dcf7      	bgt.n	8000700 <tilt_win_on_loop>

        push {r0, r1}                   @ pushing values onto stack to preserve
 8000710:	b403      	push	{r0, r1}
        mov r0, r4                      @ moving delay value into r0 to prepare for function call
 8000712:	4620      	mov	r0, r4
        bl busy_delay                   @ calling delay function
 8000714:	f000 f900 	bl	8000918 <busy_delay>
        pop {r0, r1}                    @ popping values off of stack
 8000718:	bc03      	pop	{r0, r1}
        mov r0, #8                      @ moving #8 (max led value) into register 0 to prepare for win_off_loop
 800071a:	f04f 0008 	mov.w	r0, #8

0800071e <tilt_win_off_loop>:

        tilt_win_off_loop:

            sub r0, r0, #1              @ subtracting 1 from r0 (led value) 
 800071e:	f1a0 0001 	sub.w	r0, r0, #1
            push {r0, r1}               @ pushing values to prepare for function call
 8000722:	b403      	push	{r0, r1}
            bl BSP_LED_Toggle           @ calling function to trigger current LED
 8000724:	f00b fd04 	bl	800c130 <BSP_LED_Toggle>
            pop {r0, r1}                @ popping values off of the stack
 8000728:	bc03      	pop	{r0, r1}
            cmp r0, #0                  @ comparing r0, current led value, to zero
 800072a:	2800      	cmp	r0, #0
            bgt tilt_win_off_loop            @ branching back to win_off_loop if r0 is greater than 0
 800072c:	dcf7      	bgt.n	800071e <tilt_win_off_loop>
        
        push {r0, r1}                   @ pushing values to prepare for function call
 800072e:	b403      	push	{r0, r1}
        mov r0, r4                      @ moving delay value into r0 to prepare for function call
 8000730:	4620      	mov	r0, r4
        bl busy_delay                   @ calling delay function
 8000732:	f000 f8f1 	bl	8000918 <busy_delay>
        pop {r0, r1}                    @ popping preserved values off of the stack
 8000736:	bc03      	pop	{r0, r1}
        sub r1, r1, #1                  @ subtracting 1 from r2 (loop counter for win blink). Storing back in r2
 8000738:	f1a1 0101 	sub.w	r1, r1, #1
        cmp r1, #0                      @ comparing #0 to r2 (loop counter for win blink)
 800073c:	2900      	cmp	r1, #0
        bgt tilt_game_win                 @ branching back to bb_game_win if r2, loop counter, is greater than 0
 800073e:	dcdd      	bgt.n	80006fc <tilt_game_win>
        b tilt_win_or_loose_exit     @ loop over. Branching to bb_game_win_or_loose_exit
 8000740:	e002      	b.n	8000748 <tilt_win_or_loose_exit>

08000742 <tilt_game_loose>:

    tilt_game_loose:

        mov r0, r2                      @ moving r2, target LED, into r0 to prepare for function call
 8000742:	4610      	mov	r0, r2
        bl BSP_LED_Toggle               @ calling function to trigger target LED
 8000744:	f00b fcf4 	bl	800c130 <BSP_LED_Toggle>

08000748 <tilt_win_or_loose_exit>:

    tilt_win_or_loose_exit:

    pop {r0-r4, lr}                     @ popping originally pushed values off the stack
 8000748:	e8bd 401f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, lr}
    bx lr                               @ branching back to link register address
 800074c:	4770      	bx	lr

0800074e <lab6_test>:
@@---------------------------------------------------------------------------------------------------------

@@-----------------------------------------------Lab 6-----------------------------------------------------

lab6_test:
        push {r4-r6, lr}
 800074e:	b570      	push	{r4, r5, r6, lr}

        mov r0, #ACC_I2C_ADDRESS
 8000750:	f04f 0032 	mov.w	r0, #50	; 0x32
        mov r1, #X_H_A
 8000754:	f04f 0129 	mov.w	r1, #41	; 0x29
        bl COMPASSACCELERO_IO_Read
 8000758:	f00b fe24 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
        sxtb r5, r0                     @ r5 holds 32-bit value of X
 800075c:	b245      	sxtb	r5, r0

        mov r0, #ACC_I2C_ADDRESS
 800075e:	f04f 0032 	mov.w	r0, #50	; 0x32
        mov r1, #Y_H_A
 8000762:	f04f 012b 	mov.w	r1, #43	; 0x2b
        bl COMPASSACCELERO_IO_Read
 8000766:	f00b fe1d 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
        sxtb r6, r0                     @ r6 holds 32-bit value of Y
 800076a:	b246      	sxtb	r6, r0

        @------------------------------------NEW 4:30 VERSION--------------------------------------

        cmp r5, #16
 800076c:	2d10      	cmp	r5, #16
        bgt lab6_is_positive
 800076e:	dc03      	bgt.n	8000778 <lab6_is_positive>

        cmp r5, #-16
 8000770:	f115 0f10 	cmn.w	r5, #16
        blt lab6_is_negative
 8000774:	db0c      	blt.n	8000790 <lab6_is_negative>

        bal lab6_is_zero
 8000776:	e017      	b.n	80007a8 <lab6_is_zero>

08000778 <lab6_is_positive>:

        lab6_is_positive:

            cmp r6, #16
 8000778:	2e10      	cmp	r6, #16
            itt gt
 800077a:	bfc4      	itt	gt
            movgt r0, #6
 800077c:	2006      	movgt	r0, #6
            bgt lab6_is_accel_end
 800077e:	e01b      	bgt.n	80007b8 <lab6_is_accel_end>

            cmp r6, #-16
 8000780:	f116 0f10 	cmn.w	r6, #16
            itt le
 8000784:	bfdc      	itt	le
            movle r0, #2
 8000786:	2002      	movle	r0, #2
            ble lab6_is_accel_end
 8000788:	e016      	ble.n	80007b8 <lab6_is_accel_end>

            mov r0, #4
 800078a:	f04f 0004 	mov.w	r0, #4
            bal lab6_is_accel_end
 800078e:	e013      	b.n	80007b8 <lab6_is_accel_end>

08000790 <lab6_is_negative>:

        lab6_is_negative:

            cmp r6, #16
 8000790:	2e10      	cmp	r6, #16
            itt gt
 8000792:	bfc4      	itt	gt
            movgt r0, #5
 8000794:	2005      	movgt	r0, #5
            bgt lab6_is_accel_end
 8000796:	e00f      	bgt.n	80007b8 <lab6_is_accel_end>

            cmp r6, #-16
 8000798:	f116 0f10 	cmn.w	r6, #16
            itt le
 800079c:	bfdc      	itt	le
            movle r0, #1
 800079e:	2001      	movle	r0, #1
            ble lab6_is_accel_end
 80007a0:	e00a      	ble.n	80007b8 <lab6_is_accel_end>

            mov r0, #3
 80007a2:	f04f 0003 	mov.w	r0, #3
            bal lab6_is_accel_end
 80007a6:	e007      	b.n	80007b8 <lab6_is_accel_end>

080007a8 <lab6_is_zero>:

        lab6_is_zero:

            cmp r6, #0
 80007a8:	2e00      	cmp	r6, #0
            itt gt
 80007aa:	bfc4      	itt	gt
            movgt r0, #7
 80007ac:	2007      	movgt	r0, #7
            bgt lab6_is_accel_end
 80007ae:	e003      	bgt.n	80007b8 <lab6_is_accel_end>

            cmp r6, #0
 80007b0:	2e00      	cmp	r6, #0
            itt le
 80007b2:	bfdc      	itt	le
            movle r0, #0
 80007b4:	2000      	movle	r0, #0
            ble lab6_is_accel_end
 80007b6:	e7ff      	ble.n	80007b8 <lab6_is_accel_end>

080007b8 <lab6_is_accel_end>:

        lab6_is_accel_end:

        @------------------------------------------------------------------------------------------

        mov r4, r0
 80007b8:	4604      	mov	r4, r0
        @add r0, r0, #32
        @lsr r4, r0, #3

        @lsr r4, r0, #5
        @mov r0, r4
        bl BSP_LED_Toggle
 80007ba:	f00b fcb9 	bl	800c130 <BSP_LED_Toggle>

        ldr r0, =DELAY
 80007be:	4869      	ldr	r0, [pc, #420]	; (8000964 <delay_loop+0x48>)
        bl busy_delay
 80007c0:	f000 f8aa 	bl	8000918 <busy_delay>

        mov r0, r4
 80007c4:	4620      	mov	r0, r4
        bl BSP_LED_Toggle
 80007c6:	f00b fcb3 	bl	800c130 <BSP_LED_Toggle>

        pop {r4-r6, lr}
 80007ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bx lr
 80007ce:	4770      	bx	lr

080007d0 <bb_game_a3>:
@
@ Returns: r0
@
bb_game_a3:

    push {lr}                           @ pushing link regitser onto stack to preserve
 80007d0:	b500      	push	{lr}

080007d2 <bb_game_repeat_loop>:

    bb_game_repeat_loop:

        push {r0-r3}                    @ r0-r3 contain parameters, pushing values to preserve
 80007d2:	b40f      	push	{r0, r1, r2, r3}
        ldrb r4, [r1], #1               @ increments through r1, where the pattern is located
 80007d4:	f811 4b01 	ldrb.w	r4, [r1], #1

080007d8 <bb_led_loop>:
                                        @ and storing the incremented pattern in r4

        bb_led_loop:

            push {r0-r3}                @ pushing values onto the stack to prepare for function call
 80007d8:	b40f      	push	{r0, r1, r2, r3}
            mov r0, r4                  @ moving r3 (current led value) into r0 to prepare for function call
 80007da:	4620      	mov	r0, r4
            sub r0, r0, #48             @ subtracking 48 from the current pattern value in order to
 80007dc:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
                                        @ get the accurate ascii value which contains the LED value
            bl BSP_LED_Toggle           @ calling function to trigger led
 80007e0:	f00b fca6 	bl	800c130 <BSP_LED_Toggle>
            pop {r0-r3}                 @ popping values off of the stack  
 80007e4:	bc0f      	pop	{r0, r1, r2, r3}
            push {r0-r3}                @ pushing values onto stack to prepare for function call
 80007e6:	b40f      	push	{r0, r1, r2, r3}
            mov r2, #7000               @ moving 7000 into r2. r2 contains the mutiple to scale delay
 80007e8:	f641 3258 	movw	r2, #7000	; 0x1b58
            mul r0, r0, r2              @ mutiplying the delay value by r2(7000) to get aprox delay
 80007ec:	fb00 f002 	mul.w	r0, r0, r2
                                        @ and storing value within r0 to prepare for function call
            bl busy_delay               @ calling the delay function
 80007f0:	f000 f892 	bl	8000918 <busy_delay>
            pop {r0-r3}                 @ popping the values off of the stack
 80007f4:	bc0f      	pop	{r0, r1, r2, r3}
            push {r0-r3}                @ pushing values to prepare for function call
 80007f6:	b40f      	push	{r0, r1, r2, r3}
            mov r0, r3                  @ moving r3 (BUTTON_USER) into r0 to prepare for function call
 80007f8:	4618      	mov	r0, r3
            bl BSP_PB_GetState          @ calling function to check if button is currently pressed
 80007fa:	f00b fcdf 	bl	800c1bc <BSP_PB_GetState>
            mov r5, r0                  @ moving the return value of the button state in r0, into r5
 80007fe:	4605      	mov	r5, r0
                                        @ to store for a comparison later 
            pop {r0-r3}                 @ popping values off of the stack
 8000800:	bc0f      	pop	{r0, r1, r2, r3}
            push {r0-r3}                @ pushing values onto the stack to prepare for function call
 8000802:	b40f      	push	{r0, r1, r2, r3}
            mov r0, r4                  @ moving r4 (current led value) into r0 to prepare for function call
 8000804:	4620      	mov	r0, r4
            sub r0, r0, #48             @ subtracking 48 in order to get accurate ascii value
 8000806:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30
            bl BSP_LED_Toggle           @ calling function to trigger led off
 800080a:	f00b fc91 	bl	800c130 <BSP_LED_Toggle>
            pop {r0-r3}                 @ popping values off of the stack  
 800080e:	bc0f      	pop	{r0, r1, r2, r3}
            push {r0-r3}                @ pushing values onto stack to prepare for function call
 8000810:	b40f      	push	{r0, r1, r2, r3}
            mov r2, #7000               @ moving 7000 into r2. r2 contains the mutiple to scale delay
 8000812:	f641 3258 	movw	r2, #7000	; 0x1b58
            mul r0, r0, r2              @ mutiplying the delay value by r2(7000) to get aprox delay
 8000816:	fb00 f002 	mul.w	r0, r0, r2
                                        @ and storing value within r0 to prepare for function call
            bl busy_delay               @ calling the delay function
 800081a:	f000 f87d 	bl	8000918 <busy_delay>
            pop {r0-r3}                 @ popping values off of the stack
 800081e:	bc0f      	pop	{r0, r1, r2, r3}
            cmp r5, #1                  @ comparing r5 (button state) to #1 (#1 represents if button pressed)
 8000820:	2d01      	cmp	r5, #1
            beq bb_game_exit            @ branching to bb_exit_loop if r5 and #1 are equal. (button pressed)
 8000822:	d005      	beq.n	8000830 <bb_game_exit>
            ldrb r4, [r1], #1           @ increments r1, where the pattern is located, by #1. Stores in r4.
 8000824:	f811 4b01 	ldrb.w	r4, [r1], #1
            cmp r4, #0x0                @ comparing r4 (current pattern value) to 0x0, null.
 8000828:	2c00      	cmp	r4, #0
            bne bb_led_loop             @ branching to bb_loop if r3 is not equal to null (string has not ended)
 800082a:	d1d5      	bne.n	80007d8 <bb_led_loop>

        pop {r0-r3}                     @ popping original parameters off of the stack
 800082c:	bc0f      	pop	{r0, r1, r2, r3}
        bal bb_game_repeat_loop         @ always branching to bb_game_repeat loop (looping pattern forever)
 800082e:	e7d0      	b.n	80007d2 <bb_game_repeat_loop>

08000830 <bb_game_exit>:

    bb_game_exit:

        push {r0-r3}                    @ pushing values to prepare for function call
 8000830:	b40f      	push	{r0, r1, r2, r3}
        bl bb_game_win_or_loose         @ calling function to show win or loose led pattern
 8000832:	f000 f804 	bl	800083e <bb_game_win_or_loose>
        pop {r0-r3}                     @ popping values off the stack
 8000836:	bc0f      	pop	{r0, r1, r2, r3}
        pop {r0-r3, lr}                 @ popping original parameters off of the stack
 8000838:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}

    bx lr                               @ exiting function
 800083c:	4770      	bx	lr

0800083e <bb_game_win_or_loose>:
@
@ Returns: r0
@
bb_game_win_or_loose:

    push {r0-r3, lr}                    @ pushing values onto stack to preserve for later
 800083e:	b50f      	push	{r0, r1, r2, r3, lr}
    sub r3, r4, #48                     @ subtracting 48 from r4 (current led value) to get proper ascii int
 8000840:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    cmp r3, r2                          @ comparing r3 (current led) to r2 (target led)
 8000844:	4293      	cmp	r3, r2
    bne bb_game_loose                   @ branching to bb_game_loose if r3 and r2 are not equal
 8000846:	d128      	bne.n	800089a <bb_game_loose>
    mov r1, #2                          @ moving #2 into register 1. holds the loop amount for win led blink
 8000848:	f04f 0102 	mov.w	r1, #2
    mov r3, #7000                       @ moving delay mutiple into r3.
 800084c:	f641 3358 	movw	r3, #7000	; 0x1b58
    mul r4, r0, r3                      @ mutiplying 7000 by delay in r0 to get scaled delay amount.
 8000850:	fb00 f403 	mul.w	r4, r0, r3

08000854 <bb_game_win>:

    bb_game_win:

        mov r0, #8                      @ moving #8 into r0. The total led amount (pre-subtraction)
 8000854:	f04f 0008 	mov.w	r0, #8

08000858 <win_on_loop>:

        win_on_loop:
            
            sub r0, r0, #1              @ subtracting 1 from r0, storing back into r1. r0 is current LED value
 8000858:	f1a0 0001 	sub.w	r0, r0, #1
            push {r0, r1}                @ pushing values to prepare for function call
 800085c:	b403      	push	{r0, r1}
            bl BSP_LED_Toggle           @ calling function to trigger LED on
 800085e:	f00b fc67 	bl	800c130 <BSP_LED_Toggle>
            pop {r0, r1}                @ popping preserved values off the stack
 8000862:	bc03      	pop	{r0, r1}
            cmp r0, #0                  @ comparing r0, current led, to zero
 8000864:	2800      	cmp	r0, #0
            bgt win_on_loop             @ branching back to win_on_loop if current led  
 8000866:	dcf7      	bgt.n	8000858 <win_on_loop>

        push {r0, r1}                   @ pushing values onto stack to preserve
 8000868:	b403      	push	{r0, r1}
        mov r0, r4                      @ moving delay value into r0 to prepare for function call
 800086a:	4620      	mov	r0, r4
        bl busy_delay                   @ calling delay function
 800086c:	f000 f854 	bl	8000918 <busy_delay>
        pop {r0, r1}                    @ popping values off of stack
 8000870:	bc03      	pop	{r0, r1}
        mov r0, #8                      @ moving #8 (max led value) into register 0 to prepare for win_off_loop
 8000872:	f04f 0008 	mov.w	r0, #8

08000876 <win_off_loop>:

        win_off_loop:

            sub r0, r0, #1              @ subtracting 1 from r0 (led value) 
 8000876:	f1a0 0001 	sub.w	r0, r0, #1
            push {r0, r1}               @ pushing values to prepare for function call
 800087a:	b403      	push	{r0, r1}
            bl BSP_LED_Toggle           @ calling function to trigger current LED
 800087c:	f00b fc58 	bl	800c130 <BSP_LED_Toggle>
            pop {r0, r1}                @ popping values off of the stack
 8000880:	bc03      	pop	{r0, r1}
            cmp r0, #0                  @ comparing r0, current led value, to zero
 8000882:	2800      	cmp	r0, #0
            bgt win_off_loop            @ branching back to win_off_loop if r0 is greater than 0
 8000884:	dcf7      	bgt.n	8000876 <win_off_loop>
        
        push {r0, r1}                   @ pushing values to prepare for function call
 8000886:	b403      	push	{r0, r1}
        mov r0, r4                      @ moving delay value into r0 to prepare for function call
 8000888:	4620      	mov	r0, r4
        bl busy_delay                   @ calling delay function
 800088a:	f000 f845 	bl	8000918 <busy_delay>
        pop {r0, r1}                    @ popping preserved values off of the stack
 800088e:	bc03      	pop	{r0, r1}
        sub r1, r1, #1                  @ subtracting 1 from r2 (loop counter for win blink). Storing back in r2
 8000890:	f1a1 0101 	sub.w	r1, r1, #1
        cmp r1, #0                      @ comparing #0 to r2 (loop counter for win blink)
 8000894:	2900      	cmp	r1, #0
        bgt bb_game_win                 @ branching back to bb_game_win if r2, loop counter, is greater than 0
 8000896:	dcdd      	bgt.n	8000854 <bb_game_win>
        b bb_game_win_or_loose_exit     @ loop over. Branching to bb_game_win_or_loose_exit
 8000898:	e002      	b.n	80008a0 <bb_game_win_or_loose_exit>

0800089a <bb_game_loose>:

    bb_game_loose:

        mov r0, r2                      @ moving r2, target LED, into r0 to prepare for function call
 800089a:	4610      	mov	r0, r2
        bl BSP_LED_Toggle               @ calling function to trigger target LED
 800089c:	f00b fc48 	bl	800c130 <BSP_LED_Toggle>

080008a0 <bb_game_win_or_loose_exit>:

    bb_game_win_or_loose_exit:

    pop {r0-r3, lr}                     @ popping originally pushed values off the stack
 80008a0:	e8bd 400f 	ldmia.w	sp!, {r0, r1, r2, r3, lr}
    bx lr                               @ branching back to link register address
 80008a4:	4770      	bx	lr

080008a6 <string_test>:
@ Returns: r0
@
@ Here is the actual function
string_test:

    push {lr}
 80008a6:	b500      	push	{lr}

080008a8 <loop>:

    @ everything in loop and exit loop work as intended - triggers all led within string and exits when null is found
    @ i just neeed to modify to add delay based on first parameter, then, the whole button thing.
    loop:

        ldrb r1, [r0], #1           @ putting this here causes 0x0 t0 continue through loop
 80008a8:	f810 1b01 	ldrb.w	r1, [r0], #1

        cmp r1, #0x0
 80008ac:	2900      	cmp	r1, #0

        beq exit_loop
 80008ae:	d009      	beq.n	80008c4 <exit_loop>

        push {r0, r1, lr}
 80008b0:	b503      	push	{r0, r1, lr}

        mov r0, r1
 80008b2:	4608      	mov	r0, r1

        sub r0, r0, #48
 80008b4:	f1a0 0030 	sub.w	r0, r0, #48	; 0x30

        bl BSP_LED_Toggle
 80008b8:	f00b fc3a 	bl	800c130 <BSP_LED_Toggle>

        pop {r0, r1, lr}
 80008bc:	e8bd 4003 	ldmia.w	sp!, {r0, r1, lr}

        @ldrb r1, [r0], #1                    

        cmp r1, #0x0
 80008c0:	2900      	cmp	r1, #0

        bne loop
 80008c2:	d1f1      	bne.n	80008a8 <loop>

080008c4 <exit_loop>:

    exit_loop:

        pop {lr}
 80008c4:	f85d eb04 	ldr.w	lr, [sp], #4

        mov r0, r1
 80008c8:	4608      	mov	r0, r1

    bx lr
 80008ca:	4770      	bx	lr

080008cc <bb_led_demo_a2>:
    @ldr r0, [r2]
    @ldr r2, =huge
    @ldrd r0, r1, [r2]


    mov r2, r1                      @ moving contents of r1 into r2 to prepare for function call
 80008cc:	460a      	mov	r2, r1
    mov r3, r0                      @ moving contents of r0 into r3 to prepare for function call
 80008ce:	4603      	mov	r3, r0
    push {r0-r2, lr}                @ Put aside registers we want to restore later
 80008d0:	b507      	push	{r0, r1, r2, lr}
    mov r0, r2                      @ placing the r2 (delay value) into r0
 80008d2:	4610      	mov	r0, r2
    add r3, r3, #1                  @ adding 1 to the total count amount to adjust for subs loop
 80008d4:	f103 0301 	add.w	r3, r3, #1
    bl repeat_loop                  @ calling loop function
 80008d8:	f000 f803 	bl	80008e2 <repeat_loop>
    pop {r0-r2, lr}                 @ popping saved values off the stack
 80008dc:	e8bd 4007 	ldmia.w	sp!, {r0, r1, r2, lr}

    bx lr                           @ Return (Branch eXchange) to the address in the link register (lr)
 80008e0:	4770      	bx	lr

080008e2 <repeat_loop>:
@

@ Here is the actual function
repeat_loop:

    mov r1, #8              @ putting value of 8 (Max led value) into register 1
 80008e2:	f04f 0108 	mov.w	r1, #8

    subs r3, r3, #1         @ loop which deducts 1 from the total count amount each time untill 0
 80008e6:	3b01      	subs	r3, #1

    bgt led_loop            @ branch to led_loop function aslong as count amount is greater than or equal to 1
 80008e8:	dc04      	bgt.n	80008f4 <led_loop>

    pop {lr}                @ popping lr value off the stack to return to bb_led_demo_a2
 80008ea:	f85d eb04 	ldr.w	lr, [sp], #4

    pop {lr}
 80008ee:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr                   @ returning to lr value
 80008f2:	4770      	bx	lr

080008f4 <led_loop>:

led_loop:


    subs r1, r1, #1         @ loop which deducts 1 from the total led values each time untill 0
 80008f4:	3901      	subs	r1, #1

    bgt heavy_loop          @ branch to heavy_loop as long as led value is greater than or equal to 1
 80008f6:	dc00      	bgt.n	80008fa <heavy_loop>

    b repeat_loop           @ branching back to repeat_loop after all leds have been toggled
 80008f8:	e7f3      	b.n	80008e2 <repeat_loop>

080008fa <heavy_loop>:

heavy_loop:

    mov r10, r3             @ moving the contents of r3 into r10 to retreive later
 80008fa:	469a      	mov	sl, r3

    mov r4, #0              @ setting value of r0 to 0 incase a value already exists
 80008fc:	f04f 0400 	mov.w	r4, #0

    push {lr}               @ pushing lr value onto the stack
 8000900:	b500      	push	{lr}

    bl busy_delay           @ branch to delay function to cause delay in led toggle
 8000902:	f000 f809 	bl	8000918 <busy_delay>

    mov r4, r1              @ moving contents of r1 (led value) into r4 to retrive later
 8000906:	460c      	mov	r4, r1

    mov r0, r1              @ moving contents of r1 (led value) into r0 to prepare for next function call
 8000908:	4608      	mov	r0, r1
    
    push {lr}               @ pushing lr value onto the stack
 800090a:	b500      	push	{lr}

    bl BSP_LED_Toggle       @ calling BSP_LED_Toggle to trigger the led 
 800090c:	f00b fc10 	bl	800c130 <BSP_LED_Toggle>

    mov r1, r4              @ putting back r4 value back into r1 to prepare for another loop
 8000910:	4621      	mov	r1, r4

    mov r0, r2              @ putting back r2 value back into r0 to prepare for another loop
 8000912:	4610      	mov	r0, r2

    mov r3, r10             @ putting value of counts stored in r10 back into r3
 8000914:	4653      	mov	r3, sl

    b led_loop              @ branch back to led_loop
 8000916:	e7ed      	b.n	80008f4 <led_loop>

08000918 <busy_delay>:
@

@ Here is the actual function
busy_delay:

    push {r4}
 8000918:	b410      	push	{r4}

    mov r4, r0
 800091a:	4604      	mov	r4, r0

0800091c <delay_loop>:

delay_loop:

    subs r4, r4, #1
 800091c:	3c01      	subs	r4, #1

    bgt delay_loop
 800091e:	dcfd      	bgt.n	800091c <delay_loop>

    mov r0, #0              @ Return zero (always successful)
 8000920:	f04f 0000 	mov.w	r0, #0

    pop {r4}
 8000924:	bc10      	pop	{r4}

    bx lr                   @ Return (Branch eXchange) to the address in the link register (lr)
 8000926:	4770      	bx	lr
    ldr r6,=0x1EEAC @ load the constant value in r6
 8000928:	0001eeac 	.word	0x0001eeac
                ldr r1, =#100000
 800092c:	000186a0 	.word	0x000186a0
        ldr r0, =A5_delay                   @ loading the address of A5_delay into r2
 8000930:	20000034 	.word	0x20000034
        ldr r0, =A5_updated_delay           @ loading the address of A5_updated delay into r2
 8000934:	20000038 	.word	0x20000038
        ldr r0, =A5_refresh_status          @ loading the address of A5_refresh_status into r0
 8000938:	2000002c 	.word	0x2000002c
        ldr r0, =A5_watch_ticks             @ loading the address of A5_watch_ticks into r0
 800093c:	2000003c 	.word	0x2000003c
            ldr r1, =LEDaddress             @ Loading the GPIO address needed for LEDs
 8000940:	20000028 	.word	0x20000028
            ldr r2, =A5_on_or_off           @ loading the address of A5_on_or_off into r2
 8000944:	20000040 	.word	0x20000040
        ldr r5, =#WIN_DELAY             @ moving constant value for delay into r5
 8000948:	0090f560 	.word	0x0090f560
    ldr r1, =A4_delay           @ loading the address of A4_delay into r1
 800094c:	20000004 	.word	0x20000004
    ldr r1, =A4_updated_delay   @ loading the address of A4_updated_delay into r1
 8000950:	20000008 	.word	0x20000008
    ldr r1, =A4_target          @ loading the address of A4_target into r1
 8000954:	20000010 	.word	0x20000010
    ldr r2, =A4_game_time       @ getting address of register 1
 8000958:	2000000c 	.word	0x2000000c
        ldr r1, =A4_led_call_delay          @ loading the address of A4_led_call_delay into r1
 800095c:	20000000 	.word	0x20000000
            ldr r1, =A4_curr_target         @ Getting address of A4_curr_target and storing in r1
 8000960:	20000014 	.word	0x20000014
    ldr r0, =DELAY                  @ loading the value of DELAY into r0 to prepare for function call
 8000964:	004c4b40 	.word	0x004c4b40
    ldr r1, =lab_ticks          @ getting address of register 1
 8000968:	20000018 	.word	0x20000018
        ldr r1, =lab_ticks_blinks
 800096c:	2000001c 	.word	0x2000001c

08000970 <mytest>:
@ 

@ Here is the actual function
mytest:

    push {r4-r7, lr}                @ Put aside registers we want to restore later
 8000970:	b5f0      	push	{r4, r5, r6, r7, lr}

    mov  r0, #1                     @ r0 holds our argument for the LED toggle function
 8000972:	f04f 0001 	mov.w	r0, #1
                                    @ So pass it a value

    bl   BSP_LED_Toggle             @ call BSP C function using Branch with Link (bl)
 8000976:	f00b fbdb 	bl	800c130 <BSP_LED_Toggle>
    
    ldr  r1, =myTickCount
 800097a:	4909      	ldr	r1, [pc, #36]	; (80009a0 <my_Init+0x4>)
    ldr  r0, [r1]
 800097c:	6808      	ldr	r0, [r1, #0]

    pop  {r4-r7, lr}                @ Bring all the register values back
 800097e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}

    bx lr                           @ Return (Branch eXchange) to the address held in the link register (lr) 
 8000982:	4770      	bx	lr

08000984 <my_Tick>:
@@ Declaration : void my_Tick( void )
@@ Uses nothing

my_Tick:
    
    push {lr}
 8000984:	b500      	push	{lr}

    ldr  r1, =myTickCount   @@ Address of myTickCount stored in r1
 8000986:	4906      	ldr	r1, [pc, #24]	; (80009a0 <my_Init+0x4>)
    ldr  r0, [r1]           @@ Load r0 with the address pointed at by r1 (myTickCount address)
 8000988:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1         @@ Increment r0
 800098a:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]           @@ Store the current r0 value back to the address pointed at by r1
 800098e:	6008      	str	r0, [r1, #0]

    pop {lr}
 8000990:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr                  @@ Return to the address stored in lr
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 8000998:	b500      	push	{lr}
    pop  {pc}
 800099a:	bd00      	pop	{pc}

0800099c <my_Init>:
    .type   my_Init, %function   @@ - symbol type (not req)

@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    bx lr
 800099c:	4770      	bx	lr
 800099e:	0000      	.short	0x0000
    ldr  r1, =myTickCount
 80009a0:	2000006e 	.word	0x2000006e

080009a4 <atexit>:
 80009a4:	2300      	movs	r3, #0
 80009a6:	4601      	mov	r1, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 bed8 	b.w	8002760 <__register_exitproc>

080009b0 <__errno>:
 80009b0:	4b01      	ldr	r3, [pc, #4]	; (80009b8 <__errno+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000078 	.word	0x20000078

080009bc <__libc_fini_array>:
 80009bc:	b538      	push	{r3, r4, r5, lr}
 80009be:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <__libc_fini_array+0x2c>)
 80009c0:	4d0a      	ldr	r5, [pc, #40]	; (80009ec <__libc_fini_array+0x30>)
 80009c2:	1b64      	subs	r4, r4, r5
 80009c4:	10a4      	asrs	r4, r4, #2
 80009c6:	d00a      	beq.n	80009de <__libc_fini_array+0x22>
 80009c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80009cc:	3b01      	subs	r3, #1
 80009ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80009d2:	3c01      	subs	r4, #1
 80009d4:	f855 3904 	ldr.w	r3, [r5], #-4
 80009d8:	4798      	blx	r3
 80009da:	2c00      	cmp	r4, #0
 80009dc:	d1f9      	bne.n	80009d2 <__libc_fini_array+0x16>
 80009de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009e2:	f00c ba31 	b.w	800ce48 <_fini>
 80009e6:	bf00      	nop
 80009e8:	0801cba4 	.word	0x0801cba4
 80009ec:	0801cba0 	.word	0x0801cba0

080009f0 <__libc_init_array>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	4e0d      	ldr	r6, [pc, #52]	; (8000a28 <__libc_init_array+0x38>)
 80009f4:	4d0d      	ldr	r5, [pc, #52]	; (8000a2c <__libc_init_array+0x3c>)
 80009f6:	1b76      	subs	r6, r6, r5
 80009f8:	10b6      	asrs	r6, r6, #2
 80009fa:	d006      	beq.n	8000a0a <__libc_init_array+0x1a>
 80009fc:	2400      	movs	r4, #0
 80009fe:	3401      	adds	r4, #1
 8000a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a04:	4798      	blx	r3
 8000a06:	42a6      	cmp	r6, r4
 8000a08:	d1f9      	bne.n	80009fe <__libc_init_array+0xe>
 8000a0a:	4e09      	ldr	r6, [pc, #36]	; (8000a30 <__libc_init_array+0x40>)
 8000a0c:	4d09      	ldr	r5, [pc, #36]	; (8000a34 <__libc_init_array+0x44>)
 8000a0e:	1b76      	subs	r6, r6, r5
 8000a10:	f00c fa14 	bl	800ce3c <_init>
 8000a14:	10b6      	asrs	r6, r6, #2
 8000a16:	d006      	beq.n	8000a26 <__libc_init_array+0x36>
 8000a18:	2400      	movs	r4, #0
 8000a1a:	3401      	adds	r4, #1
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	42a6      	cmp	r6, r4
 8000a24:	d1f9      	bne.n	8000a1a <__libc_init_array+0x2a>
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	0801cb98 	.word	0x0801cb98
 8000a2c:	0801cb98 	.word	0x0801cb98
 8000a30:	0801cba0 	.word	0x0801cba0
 8000a34:	0801cb98 	.word	0x0801cb98

08000a38 <memset>:
 8000a38:	b4f0      	push	{r4, r5, r6, r7}
 8000a3a:	0786      	lsls	r6, r0, #30
 8000a3c:	d046      	beq.n	8000acc <memset+0x94>
 8000a3e:	1e54      	subs	r4, r2, #1
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d03c      	beq.n	8000abe <memset+0x86>
 8000a44:	b2ca      	uxtb	r2, r1
 8000a46:	4603      	mov	r3, r0
 8000a48:	e002      	b.n	8000a50 <memset+0x18>
 8000a4a:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8000a4e:	d336      	bcc.n	8000abe <memset+0x86>
 8000a50:	f803 2b01 	strb.w	r2, [r3], #1
 8000a54:	079d      	lsls	r5, r3, #30
 8000a56:	d1f8      	bne.n	8000a4a <memset+0x12>
 8000a58:	2c03      	cmp	r4, #3
 8000a5a:	d929      	bls.n	8000ab0 <memset+0x78>
 8000a5c:	b2cd      	uxtb	r5, r1
 8000a5e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8000a62:	2c0f      	cmp	r4, #15
 8000a64:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8000a68:	d933      	bls.n	8000ad2 <memset+0x9a>
 8000a6a:	f1a4 0610 	sub.w	r6, r4, #16
 8000a6e:	0936      	lsrs	r6, r6, #4
 8000a70:	f103 0720 	add.w	r7, r3, #32
 8000a74:	eb07 1706 	add.w	r7, r7, r6, lsl #4
 8000a78:	f103 0210 	add.w	r2, r3, #16
 8000a7c:	e942 5504 	strd	r5, r5, [r2, #-16]
 8000a80:	e942 5502 	strd	r5, r5, [r2, #-8]
 8000a84:	3210      	adds	r2, #16
 8000a86:	42ba      	cmp	r2, r7
 8000a88:	d1f8      	bne.n	8000a7c <memset+0x44>
 8000a8a:	1c72      	adds	r2, r6, #1
 8000a8c:	f014 0f0c 	tst.w	r4, #12
 8000a90:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8000a94:	f004 060f 	and.w	r6, r4, #15
 8000a98:	d013      	beq.n	8000ac2 <memset+0x8a>
 8000a9a:	1f33      	subs	r3, r6, #4
 8000a9c:	f023 0303 	bic.w	r3, r3, #3
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	4413      	add	r3, r2
 8000aa4:	f842 5b04 	str.w	r5, [r2], #4
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d1fb      	bne.n	8000aa4 <memset+0x6c>
 8000aac:	f006 0403 	and.w	r4, r6, #3
 8000ab0:	b12c      	cbz	r4, 8000abe <memset+0x86>
 8000ab2:	b2c9      	uxtb	r1, r1
 8000ab4:	441c      	add	r4, r3
 8000ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8000aba:	429c      	cmp	r4, r3
 8000abc:	d1fb      	bne.n	8000ab6 <memset+0x7e>
 8000abe:	bcf0      	pop	{r4, r5, r6, r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	4634      	mov	r4, r6
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	2c00      	cmp	r4, #0
 8000ac8:	d1f3      	bne.n	8000ab2 <memset+0x7a>
 8000aca:	e7f8      	b.n	8000abe <memset+0x86>
 8000acc:	4614      	mov	r4, r2
 8000ace:	4603      	mov	r3, r0
 8000ad0:	e7c2      	b.n	8000a58 <memset+0x20>
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4626      	mov	r6, r4
 8000ad6:	e7e0      	b.n	8000a9a <memset+0x62>

08000ad8 <_printf_r>:
 8000ad8:	b40e      	push	{r1, r2, r3}
 8000ada:	b500      	push	{lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	ab03      	add	r3, sp, #12
 8000ae0:	6881      	ldr	r1, [r0, #8]
 8000ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	f000 fb12 	bl	8001110 <_vfprintf_r>
 8000aec:	b002      	add	sp, #8
 8000aee:	f85d eb04 	ldr.w	lr, [sp], #4
 8000af2:	b003      	add	sp, #12
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <printf>:
 8000af8:	b40f      	push	{r0, r1, r2, r3}
 8000afa:	b500      	push	{lr}
 8000afc:	4907      	ldr	r1, [pc, #28]	; (8000b1c <printf+0x24>)
 8000afe:	b083      	sub	sp, #12
 8000b00:	ab04      	add	r3, sp, #16
 8000b02:	6808      	ldr	r0, [r1, #0]
 8000b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b08:	6881      	ldr	r1, [r0, #8]
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	f000 fb00 	bl	8001110 <_vfprintf_r>
 8000b10:	b003      	add	sp, #12
 8000b12:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b16:	b004      	add	sp, #16
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000078 	.word	0x20000078

08000b20 <_putchar_r>:
 8000b20:	6882      	ldr	r2, [r0, #8]
 8000b22:	f004 bc8f 	b.w	8005444 <_putc_r>
 8000b26:	bf00      	nop

08000b28 <putchar>:
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <putchar+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	689a      	ldr	r2, [r3, #8]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 bc87 	b.w	8005444 <_putc_r>
 8000b36:	bf00      	nop
 8000b38:	20000078 	.word	0x20000078

08000b3c <_puts_r>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4605      	mov	r5, r0
 8000b40:	b088      	sub	sp, #32
 8000b42:	4608      	mov	r0, r1
 8000b44:	460c      	mov	r4, r1
 8000b46:	f000 f97b 	bl	8000e40 <strlen>
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <_puts_r+0x64>)
 8000b4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000b4e:	9404      	str	r4, [sp, #16]
 8000b50:	2601      	movs	r6, #1
 8000b52:	1c44      	adds	r4, r0, #1
 8000b54:	a904      	add	r1, sp, #16
 8000b56:	9206      	str	r2, [sp, #24]
 8000b58:	2202      	movs	r2, #2
 8000b5a:	9403      	str	r4, [sp, #12]
 8000b5c:	9005      	str	r0, [sp, #20]
 8000b5e:	68ac      	ldr	r4, [r5, #8]
 8000b60:	9607      	str	r6, [sp, #28]
 8000b62:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8000b66:	b1b3      	cbz	r3, 8000b96 <_puts_r+0x5a>
 8000b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b6c:	049a      	lsls	r2, r3, #18
 8000b6e:	d406      	bmi.n	8000b7e <_puts_r+0x42>
 8000b70:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b7a:	81a3      	strh	r3, [r4, #12]
 8000b7c:	6662      	str	r2, [r4, #100]	; 0x64
 8000b7e:	4621      	mov	r1, r4
 8000b80:	4628      	mov	r0, r5
 8000b82:	aa01      	add	r2, sp, #4
 8000b84:	f003 f916 	bl	8003db4 <__sfvwrite_r>
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	bf14      	ite	ne
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b90:	200a      	moveq	r0, #10
 8000b92:	b008      	add	sp, #32
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
 8000b96:	4628      	mov	r0, r5
 8000b98:	f002 ffa2 	bl	8003ae0 <__sinit>
 8000b9c:	e7e4      	b.n	8000b68 <_puts_r+0x2c>
 8000b9e:	bf00      	nop
 8000ba0:	0801ca6c 	.word	0x0801ca6c

08000ba4 <puts>:
 8000ba4:	4b02      	ldr	r3, [pc, #8]	; (8000bb0 <puts+0xc>)
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	f7ff bfc7 	b.w	8000b3c <_puts_r>
 8000bae:	bf00      	nop
 8000bb0:	20000078 	.word	0x20000078

08000bb4 <setvbuf>:
 8000bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bb8:	4c52      	ldr	r4, [pc, #328]	; (8000d04 <setvbuf+0x150>)
 8000bba:	6825      	ldr	r5, [r4, #0]
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	4604      	mov	r4, r0
 8000bc0:	460f      	mov	r7, r1
 8000bc2:	4690      	mov	r8, r2
 8000bc4:	461e      	mov	r6, r3
 8000bc6:	b115      	cbz	r5, 8000bce <setvbuf+0x1a>
 8000bc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d065      	beq.n	8000c9a <setvbuf+0xe6>
 8000bce:	f1b8 0f02 	cmp.w	r8, #2
 8000bd2:	d006      	beq.n	8000be2 <setvbuf+0x2e>
 8000bd4:	f1b8 0f01 	cmp.w	r8, #1
 8000bd8:	f200 8091 	bhi.w	8000cfe <setvbuf+0x14a>
 8000bdc:	2e00      	cmp	r6, #0
 8000bde:	f2c0 808e 	blt.w	8000cfe <setvbuf+0x14a>
 8000be2:	4621      	mov	r1, r4
 8000be4:	4628      	mov	r0, r5
 8000be6:	f002 fe75 	bl	80038d4 <_fflush_r>
 8000bea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000bec:	b141      	cbz	r1, 8000c00 <setvbuf+0x4c>
 8000bee:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d002      	beq.n	8000bfc <setvbuf+0x48>
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	f002 ffe2 	bl	8003bc0 <_free_r>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	6323      	str	r3, [r4, #48]	; 0x30
 8000c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c04:	2200      	movs	r2, #0
 8000c06:	61a2      	str	r2, [r4, #24]
 8000c08:	6062      	str	r2, [r4, #4]
 8000c0a:	061a      	lsls	r2, r3, #24
 8000c0c:	d44d      	bmi.n	8000caa <setvbuf+0xf6>
 8000c0e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8000c12:	f023 0303 	bic.w	r3, r3, #3
 8000c16:	f1b8 0f02 	cmp.w	r8, #2
 8000c1a:	81a3      	strh	r3, [r4, #12]
 8000c1c:	d04c      	beq.n	8000cb8 <setvbuf+0x104>
 8000c1e:	ab01      	add	r3, sp, #4
 8000c20:	466a      	mov	r2, sp
 8000c22:	4621      	mov	r1, r4
 8000c24:	4628      	mov	r0, r5
 8000c26:	f003 faa3 	bl	8004170 <__swhatbuf_r>
 8000c2a:	89a3      	ldrh	r3, [r4, #12]
 8000c2c:	4318      	orrs	r0, r3
 8000c2e:	81a0      	strh	r0, [r4, #12]
 8000c30:	b316      	cbz	r6, 8000c78 <setvbuf+0xc4>
 8000c32:	b317      	cbz	r7, 8000c7a <setvbuf+0xc6>
 8000c34:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000c36:	b363      	cbz	r3, 8000c92 <setvbuf+0xde>
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8000c3e:	6027      	str	r7, [r4, #0]
 8000c40:	42b3      	cmp	r3, r6
 8000c42:	bf1c      	itt	ne
 8000c44:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
 8000c48:	81a0      	strhne	r0, [r4, #12]
 8000c4a:	f1b8 0f01 	cmp.w	r8, #1
 8000c4e:	bf08      	it	eq
 8000c50:	f040 0001 	orreq.w	r0, r0, #1
 8000c54:	b283      	uxth	r3, r0
 8000c56:	bf08      	it	eq
 8000c58:	81a0      	strheq	r0, [r4, #12]
 8000c5a:	f013 0008 	ands.w	r0, r3, #8
 8000c5e:	e9c4 7604 	strd	r7, r6, [r4, #16]
 8000c62:	d01e      	beq.n	8000ca2 <setvbuf+0xee>
 8000c64:	f013 0001 	ands.w	r0, r3, #1
 8000c68:	d035      	beq.n	8000cd6 <setvbuf+0x122>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	4276      	negs	r6, r6
 8000c6e:	61a6      	str	r6, [r4, #24]
 8000c70:	60a0      	str	r0, [r4, #8]
 8000c72:	b003      	add	sp, #12
 8000c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000c78:	9e00      	ldr	r6, [sp, #0]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	f003 faf0 	bl	8004260 <malloc>
 8000c80:	4607      	mov	r7, r0
 8000c82:	b360      	cbz	r0, 8000cde <setvbuf+0x12a>
 8000c84:	89a3      	ldrh	r3, [r4, #12]
 8000c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c8a:	81a3      	strh	r3, [r4, #12]
 8000c8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1d2      	bne.n	8000c38 <setvbuf+0x84>
 8000c92:	4628      	mov	r0, r5
 8000c94:	f002 ff24 	bl	8003ae0 <__sinit>
 8000c98:	e7ce      	b.n	8000c38 <setvbuf+0x84>
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f002 ff20 	bl	8003ae0 <__sinit>
 8000ca0:	e795      	b.n	8000bce <setvbuf+0x1a>
 8000ca2:	60a0      	str	r0, [r4, #8]
 8000ca4:	b003      	add	sp, #12
 8000ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000caa:	6921      	ldr	r1, [r4, #16]
 8000cac:	4628      	mov	r0, r5
 8000cae:	f002 ff87 	bl	8003bc0 <_free_r>
 8000cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cb6:	e7aa      	b.n	8000c0e <setvbuf+0x5a>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	81a3      	strh	r3, [r4, #12]
 8000cc8:	60a5      	str	r5, [r4, #8]
 8000cca:	6022      	str	r2, [r4, #0]
 8000ccc:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8000cd0:	b003      	add	sp, #12
 8000cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cd6:	60a6      	str	r6, [r4, #8]
 8000cd8:	b003      	add	sp, #12
 8000cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cde:	f8dd 9000 	ldr.w	r9, [sp]
 8000ce2:	45b1      	cmp	r9, r6
 8000ce4:	d006      	beq.n	8000cf4 <setvbuf+0x140>
 8000ce6:	4648      	mov	r0, r9
 8000ce8:	f003 faba 	bl	8004260 <malloc>
 8000cec:	4607      	mov	r7, r0
 8000cee:	b108      	cbz	r0, 8000cf4 <setvbuf+0x140>
 8000cf0:	464e      	mov	r6, r9
 8000cf2:	e7c7      	b.n	8000c84 <setvbuf+0xd0>
 8000cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cfc:	e7dd      	b.n	8000cba <setvbuf+0x106>
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d02:	e7cf      	b.n	8000ca4 <setvbuf+0xf0>
 8000d04:	20000078 	.word	0x20000078

08000d08 <strcasecmp>:
 8000d08:	b430      	push	{r4, r5}
 8000d0a:	4d10      	ldr	r5, [pc, #64]	; (8000d4c <strcasecmp+0x44>)
 8000d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d10:	5cab      	ldrb	r3, [r5, r2]
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d1c:	5cec      	ldrb	r4, [r5, r3]
 8000d1e:	f004 0403 	and.w	r4, r4, #3
 8000d22:	bf08      	it	eq
 8000d24:	3220      	addeq	r2, #32
 8000d26:	2c01      	cmp	r4, #1
 8000d28:	d006      	beq.n	8000d38 <strcasecmp+0x30>
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	d10a      	bne.n	8000d44 <strcasecmp+0x3c>
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1ec      	bne.n	8000d0c <strcasecmp+0x4>
 8000d32:	4618      	mov	r0, r3
 8000d34:	bc30      	pop	{r4, r5}
 8000d36:	4770      	bx	lr
 8000d38:	3320      	adds	r3, #32
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	d0e6      	beq.n	8000d0c <strcasecmp+0x4>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bc30      	pop	{r4, r5}
 8000d42:	4770      	bx	lr
 8000d44:	4613      	mov	r3, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	bc30      	pop	{r4, r5}
 8000d4a:	4770      	bx	lr
 8000d4c:	0800d2ed 	.word	0x0800d2ed

08000d50 <strcpy>:
 8000d50:	ea80 0201 	eor.w	r2, r0, r1
 8000d54:	4684      	mov	ip, r0
 8000d56:	f012 0f03 	tst.w	r2, #3
 8000d5a:	d14f      	bne.n	8000dfc <strcpy+0xac>
 8000d5c:	f011 0f03 	tst.w	r1, #3
 8000d60:	d132      	bne.n	8000dc8 <strcpy+0x78>
 8000d62:	f84d 4d04 	str.w	r4, [sp, #-4]!
 8000d66:	f011 0f04 	tst.w	r1, #4
 8000d6a:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d6e:	d00b      	beq.n	8000d88 <strcpy+0x38>
 8000d70:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000d74:	439a      	bics	r2, r3
 8000d76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000d7a:	bf04      	itt	eq
 8000d7c:	f84c 3b04 	streq.w	r3, [ip], #4
 8000d80:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000d84:	d116      	bne.n	8000db4 <strcpy+0x64>
 8000d86:	bf00      	nop
 8000d88:	f851 4b04 	ldr.w	r4, [r1], #4
 8000d8c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8000d90:	439a      	bics	r2, r3
 8000d92:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000d96:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 8000d9a:	d10b      	bne.n	8000db4 <strcpy+0x64>
 8000d9c:	f84c 3b04 	str.w	r3, [ip], #4
 8000da0:	43a2      	bics	r2, r4
 8000da2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8000da6:	bf04      	itt	eq
 8000da8:	f851 3b04 	ldreq.w	r3, [r1], #4
 8000dac:	f84c 4b04 	streq.w	r4, [ip], #4
 8000db0:	d0ea      	beq.n	8000d88 <strcpy+0x38>
 8000db2:	4623      	mov	r3, r4
 8000db4:	f80c 3b01 	strb.w	r3, [ip], #1
 8000db8:	f013 0fff 	tst.w	r3, #255	; 0xff
 8000dbc:	ea4f 2333 	mov.w	r3, r3, ror #8
 8000dc0:	d1f8      	bne.n	8000db4 <strcpy+0x64>
 8000dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	f011 0f01 	tst.w	r1, #1
 8000dcc:	d006      	beq.n	8000ddc <strcpy+0x8c>
 8000dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000dd2:	f80c 2b01 	strb.w	r2, [ip], #1
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f011 0f02 	tst.w	r1, #2
 8000de0:	d0bf      	beq.n	8000d62 <strcpy+0x12>
 8000de2:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000de6:	f012 0fff 	tst.w	r2, #255	; 0xff
 8000dea:	bf16      	itet	ne
 8000dec:	f82c 2b02 	strhne.w	r2, [ip], #2
 8000df0:	f88c 2000 	strbeq.w	r2, [ip]
 8000df4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8000df8:	d1b3      	bne.n	8000d62 <strcpy+0x12>
 8000dfa:	4770      	bx	lr
 8000dfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e00:	f80c 2b01 	strb.w	r2, [ip], #1
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	d1f9      	bne.n	8000dfc <strcpy+0xac>
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
	...

08000e40 <strlen>:
 8000e40:	f890 f000 	pld	[r0]
 8000e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000e48:	f020 0107 	bic.w	r1, r0, #7
 8000e4c:	f06f 0c00 	mvn.w	ip, #0
 8000e50:	f010 0407 	ands.w	r4, r0, #7
 8000e54:	f891 f020 	pld	[r1, #32]
 8000e58:	f040 8049 	bne.w	8000eee <strlen+0xae>
 8000e5c:	f04f 0400 	mov.w	r4, #0
 8000e60:	f06f 0007 	mvn.w	r0, #7
 8000e64:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000e68:	f891 f040 	pld	[r1, #64]	; 0x40
 8000e6c:	f100 0008 	add.w	r0, r0, #8
 8000e70:	fa82 f24c 	uadd8	r2, r2, ip
 8000e74:	faa4 f28c 	sel	r2, r4, ip
 8000e78:	fa83 f34c 	uadd8	r3, r3, ip
 8000e7c:	faa2 f38c 	sel	r3, r2, ip
 8000e80:	bb4b      	cbnz	r3, 8000ed6 <strlen+0x96>
 8000e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000e86:	fa82 f24c 	uadd8	r2, r2, ip
 8000e8a:	f100 0008 	add.w	r0, r0, #8
 8000e8e:	faa4 f28c 	sel	r2, r4, ip
 8000e92:	fa83 f34c 	uadd8	r3, r3, ip
 8000e96:	faa2 f38c 	sel	r3, r2, ip
 8000e9a:	b9e3      	cbnz	r3, 8000ed6 <strlen+0x96>
 8000e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000ea0:	fa82 f24c 	uadd8	r2, r2, ip
 8000ea4:	f100 0008 	add.w	r0, r0, #8
 8000ea8:	faa4 f28c 	sel	r2, r4, ip
 8000eac:	fa83 f34c 	uadd8	r3, r3, ip
 8000eb0:	faa2 f38c 	sel	r3, r2, ip
 8000eb4:	b97b      	cbnz	r3, 8000ed6 <strlen+0x96>
 8000eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000eba:	f101 0120 	add.w	r1, r1, #32
 8000ebe:	fa82 f24c 	uadd8	r2, r2, ip
 8000ec2:	f100 0008 	add.w	r0, r0, #8
 8000ec6:	faa4 f28c 	sel	r2, r4, ip
 8000eca:	fa83 f34c 	uadd8	r3, r3, ip
 8000ece:	faa2 f38c 	sel	r3, r2, ip
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0c6      	beq.n	8000e64 <strlen+0x24>
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	bf04      	itt	eq
 8000eda:	3004      	addeq	r0, #4
 8000edc:	461a      	moveq	r2, r3
 8000ede:	ba12      	rev	r2, r2
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000eec:	4770      	bx	lr
 8000eee:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000ef2:	f004 0503 	and.w	r5, r4, #3
 8000ef6:	f1c4 0000 	rsb	r0, r4, #0
 8000efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000efe:	f014 0f04 	tst.w	r4, #4
 8000f02:	f891 f040 	pld	[r1, #64]	; 0x40
 8000f06:	fa0c f505 	lsl.w	r5, ip, r5
 8000f0a:	ea62 0205 	orn	r2, r2, r5
 8000f0e:	bf1c      	itt	ne
 8000f10:	ea63 0305 	ornne	r3, r3, r5
 8000f14:	4662      	movne	r2, ip
 8000f16:	f04f 0400 	mov.w	r4, #0
 8000f1a:	e7a9      	b.n	8000e70 <strlen+0x30>

08000f1c <strtok>:
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <strtok+0xc>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	325c      	adds	r2, #92	; 0x5c
 8000f24:	f000 b802 	b.w	8000f2c <__strtok_r>
 8000f28:	20000078 	.word	0x20000078

08000f2c <__strtok_r>:
 8000f2c:	b4f0      	push	{r4, r5, r6, r7}
 8000f2e:	b318      	cbz	r0, 8000f78 <__strtok_r+0x4c>
 8000f30:	4607      	mov	r7, r0
 8000f32:	460d      	mov	r5, r1
 8000f34:	f817 6b01 	ldrb.w	r6, [r7], #1
 8000f38:	e001      	b.n	8000f3e <__strtok_r+0x12>
 8000f3a:	42a6      	cmp	r6, r4
 8000f3c:	d017      	beq.n	8000f6e <__strtok_r+0x42>
 8000f3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000f42:	2c00      	cmp	r4, #0
 8000f44:	d1f9      	bne.n	8000f3a <__strtok_r+0xe>
 8000f46:	b1e6      	cbz	r6, 8000f82 <__strtok_r+0x56>
 8000f48:	f817 5b01 	ldrb.w	r5, [r7], #1
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	e001      	b.n	8000f54 <__strtok_r+0x28>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f9      	beq.n	8000f48 <__strtok_r+0x1c>
 8000f54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8000f58:	429d      	cmp	r5, r3
 8000f5a:	d1f9      	bne.n	8000f50 <__strtok_r+0x24>
 8000f5c:	b155      	cbz	r5, 8000f74 <__strtok_r+0x48>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f807 3c01 	strb.w	r3, [r7, #-1]
 8000f64:	6017      	str	r7, [r2, #0]
 8000f66:	4606      	mov	r6, r0
 8000f68:	4630      	mov	r0, r6
 8000f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	b163      	cbz	r3, 8000f8a <__strtok_r+0x5e>
 8000f70:	4638      	mov	r0, r7
 8000f72:	e7dd      	b.n	8000f30 <__strtok_r+0x4>
 8000f74:	462f      	mov	r7, r5
 8000f76:	e7f5      	b.n	8000f64 <__strtok_r+0x38>
 8000f78:	6810      	ldr	r0, [r2, #0]
 8000f7a:	2800      	cmp	r0, #0
 8000f7c:	d1d8      	bne.n	8000f30 <__strtok_r+0x4>
 8000f7e:	4606      	mov	r6, r0
 8000f80:	e7f2      	b.n	8000f68 <__strtok_r+0x3c>
 8000f82:	4630      	mov	r0, r6
 8000f84:	6016      	str	r6, [r2, #0]
 8000f86:	bcf0      	pop	{r4, r5, r6, r7}
 8000f88:	4770      	bx	lr
 8000f8a:	6017      	str	r7, [r2, #0]
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	7003      	strb	r3, [r0, #0]
 8000f90:	e7ea      	b.n	8000f68 <__strtok_r+0x3c>
 8000f92:	bf00      	nop

08000f94 <strtok_r>:
 8000f94:	2301      	movs	r3, #1
 8000f96:	f7ff bfc9 	b.w	8000f2c <__strtok_r>
 8000f9a:	bf00      	nop

08000f9c <_strtoul_l.isra.0>:
 8000f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fa0:	460f      	mov	r7, r1
 8000fa2:	4d4c      	ldr	r5, [pc, #304]	; (80010d4 <_strtoul_l.isra.0+0x138>)
 8000fa4:	e000      	b.n	8000fa8 <_strtoul_l.isra.0+0xc>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	46bc      	mov	ip, r7
 8000faa:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8000fae:	5d2e      	ldrb	r6, [r5, r4]
 8000fb0:	f016 0608 	ands.w	r6, r6, #8
 8000fb4:	d1f7      	bne.n	8000fa6 <_strtoul_l.isra.0+0xa>
 8000fb6:	2c2d      	cmp	r4, #45	; 0x2d
 8000fb8:	d058      	beq.n	800106c <_strtoul_l.isra.0+0xd0>
 8000fba:	2c2b      	cmp	r4, #43	; 0x2b
 8000fbc:	bf0a      	itet	eq
 8000fbe:	f89c 5000 	ldrbeq.w	r5, [ip]
 8000fc2:	4625      	movne	r5, r4
 8000fc4:	f107 0c02 	addeq.w	ip, r7, #2
 8000fc8:	b3f3      	cbz	r3, 8001048 <_strtoul_l.isra.0+0xac>
 8000fca:	2b10      	cmp	r3, #16
 8000fcc:	d054      	beq.n	8001078 <_strtoul_l.isra.0+0xdc>
 8000fce:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8000fd2:	fbb8 f8f3 	udiv	r8, r8, r3
 8000fd6:	fb03 fa08 	mul.w	sl, r3, r8
 8000fda:	ea6f 0a0a 	mvn.w	sl, sl
 8000fde:	4699      	mov	r9, r3
 8000fe0:	2700      	movs	r7, #0
 8000fe2:	46be      	mov	lr, r7
 8000fe4:	e007      	b.n	8000ff6 <_strtoul_l.isra.0+0x5a>
 8000fe6:	45c6      	cmp	lr, r8
 8000fe8:	d813      	bhi.n	8001012 <_strtoul_l.isra.0+0x76>
 8000fea:	d028      	beq.n	800103e <_strtoul_l.isra.0+0xa2>
 8000fec:	fb09 4e0e 	mla	lr, r9, lr, r4
 8000ff0:	2701      	movs	r7, #1
 8000ff2:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8000ff6:	f1a5 0430 	sub.w	r4, r5, #48	; 0x30
 8000ffa:	2c09      	cmp	r4, #9
 8000ffc:	d905      	bls.n	800100a <_strtoul_l.isra.0+0x6e>
 8000ffe:	f1a5 0441 	sub.w	r4, r5, #65	; 0x41
 8001002:	2c19      	cmp	r4, #25
 8001004:	d808      	bhi.n	8001018 <_strtoul_l.isra.0+0x7c>
 8001006:	f1a5 0437 	sub.w	r4, r5, #55	; 0x37
 800100a:	42a3      	cmp	r3, r4
 800100c:	dd0c      	ble.n	8001028 <_strtoul_l.isra.0+0x8c>
 800100e:	2f00      	cmp	r7, #0
 8001010:	dae9      	bge.n	8000fe6 <_strtoul_l.isra.0+0x4a>
 8001012:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001016:	e7ec      	b.n	8000ff2 <_strtoul_l.isra.0+0x56>
 8001018:	f1a5 0461 	sub.w	r4, r5, #97	; 0x61
 800101c:	2c19      	cmp	r4, #25
 800101e:	d803      	bhi.n	8001028 <_strtoul_l.isra.0+0x8c>
 8001020:	f1a5 0457 	sub.w	r4, r5, #87	; 0x57
 8001024:	42a3      	cmp	r3, r4
 8001026:	dcf2      	bgt.n	800100e <_strtoul_l.isra.0+0x72>
 8001028:	2f00      	cmp	r7, #0
 800102a:	db16      	blt.n	800105a <_strtoul_l.isra.0+0xbe>
 800102c:	b10e      	cbz	r6, 8001032 <_strtoul_l.isra.0+0x96>
 800102e:	f1ce 0e00 	rsb	lr, lr, #0
 8001032:	b10a      	cbz	r2, 8001038 <_strtoul_l.isra.0+0x9c>
 8001034:	b9bf      	cbnz	r7, 8001066 <_strtoul_l.isra.0+0xca>
 8001036:	6011      	str	r1, [r2, #0]
 8001038:	4670      	mov	r0, lr
 800103a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800103e:	4554      	cmp	r4, sl
 8001040:	ddd4      	ble.n	8000fec <_strtoul_l.isra.0+0x50>
 8001042:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001046:	e7d4      	b.n	8000ff2 <_strtoul_l.isra.0+0x56>
 8001048:	2d30      	cmp	r5, #48	; 0x30
 800104a:	d029      	beq.n	80010a0 <_strtoul_l.isra.0+0x104>
 800104c:	230a      	movs	r3, #10
 800104e:	4699      	mov	r9, r3
 8001050:	f04f 0a05 	mov.w	sl, #5
 8001054:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80010d8 <_strtoul_l.isra.0+0x13c>
 8001058:	e7c2      	b.n	8000fe0 <_strtoul_l.isra.0+0x44>
 800105a:	2322      	movs	r3, #34	; 0x22
 800105c:	6003      	str	r3, [r0, #0]
 800105e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001062:	2a00      	cmp	r2, #0
 8001064:	d0e8      	beq.n	8001038 <_strtoul_l.isra.0+0x9c>
 8001066:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800106a:	e7e4      	b.n	8001036 <_strtoul_l.isra.0+0x9a>
 800106c:	f89c 5000 	ldrb.w	r5, [ip]
 8001070:	2601      	movs	r6, #1
 8001072:	f107 0c02 	add.w	ip, r7, #2
 8001076:	e7a7      	b.n	8000fc8 <_strtoul_l.isra.0+0x2c>
 8001078:	2d30      	cmp	r5, #48	; 0x30
 800107a:	d124      	bne.n	80010c6 <_strtoul_l.isra.0+0x12a>
 800107c:	f89c 4000 	ldrb.w	r4, [ip]
 8001080:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8001084:	2c58      	cmp	r4, #88	; 0x58
 8001086:	d118      	bne.n	80010ba <_strtoul_l.isra.0+0x11e>
 8001088:	f04f 0910 	mov.w	r9, #16
 800108c:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8001090:	464b      	mov	r3, r9
 8001092:	f04f 0a0f 	mov.w	sl, #15
 8001096:	f10c 0c02 	add.w	ip, ip, #2
 800109a:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 800109e:	e79f      	b.n	8000fe0 <_strtoul_l.isra.0+0x44>
 80010a0:	f89c 3000 	ldrb.w	r3, [ip]
 80010a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80010a8:	2b58      	cmp	r3, #88	; 0x58
 80010aa:	d0ed      	beq.n	8001088 <_strtoul_l.isra.0+0xec>
 80010ac:	2308      	movs	r3, #8
 80010ae:	4699      	mov	r9, r3
 80010b0:	f04f 0a07 	mov.w	sl, #7
 80010b4:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 80010b8:	e792      	b.n	8000fe0 <_strtoul_l.isra.0+0x44>
 80010ba:	4699      	mov	r9, r3
 80010bc:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 80010c0:	f04f 0a0f 	mov.w	sl, #15
 80010c4:	e78c      	b.n	8000fe0 <_strtoul_l.isra.0+0x44>
 80010c6:	f04f 0a0f 	mov.w	sl, #15
 80010ca:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 80010ce:	4699      	mov	r9, r3
 80010d0:	e786      	b.n	8000fe0 <_strtoul_l.isra.0+0x44>
 80010d2:	bf00      	nop
 80010d4:	0800d2ed 	.word	0x0800d2ed
 80010d8:	19999999 	.word	0x19999999

080010dc <_strtoul_r>:
 80010dc:	e75e      	b.n	8000f9c <_strtoul_l.isra.0>
 80010de:	bf00      	nop

080010e0 <strtoul_l>:
 80010e0:	b410      	push	{r4}
 80010e2:	4c04      	ldr	r4, [pc, #16]	; (80010f4 <strtoul_l+0x14>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	460a      	mov	r2, r1
 80010e8:	4601      	mov	r1, r0
 80010ea:	6820      	ldr	r0, [r4, #0]
 80010ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010f0:	e754      	b.n	8000f9c <_strtoul_l.isra.0>
 80010f2:	bf00      	nop
 80010f4:	20000078 	.word	0x20000078

080010f8 <strtoul>:
 80010f8:	b410      	push	{r4}
 80010fa:	4c04      	ldr	r4, [pc, #16]	; (800110c <strtoul+0x14>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	460a      	mov	r2, r1
 8001100:	4601      	mov	r1, r0
 8001102:	6820      	ldr	r0, [r4, #0]
 8001104:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001108:	e748      	b.n	8000f9c <_strtoul_l.isra.0>
 800110a:	bf00      	nop
 800110c:	20000078 	.word	0x20000078

08001110 <_vfprintf_r>:
 8001110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001114:	b0bf      	sub	sp, #252	; 0xfc
 8001116:	461c      	mov	r4, r3
 8001118:	9104      	str	r1, [sp, #16]
 800111a:	4691      	mov	r9, r2
 800111c:	4605      	mov	r5, r0
 800111e:	9008      	str	r0, [sp, #32]
 8001120:	f003 f81e 	bl	8004160 <_localeconv_r>
 8001124:	6803      	ldr	r3, [r0, #0]
 8001126:	9311      	str	r3, [sp, #68]	; 0x44
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe89 	bl	8000e40 <strlen>
 800112e:	9409      	str	r4, [sp, #36]	; 0x24
 8001130:	900f      	str	r0, [sp, #60]	; 0x3c
 8001132:	b11d      	cbz	r5, 800113c <_vfprintf_r+0x2c>
 8001134:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 8367 	beq.w	800180a <_vfprintf_r+0x6fa>
 800113c:	9904      	ldr	r1, [sp, #16]
 800113e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001142:	b293      	uxth	r3, r2
 8001144:	049e      	lsls	r6, r3, #18
 8001146:	4608      	mov	r0, r1
 8001148:	d407      	bmi.n	800115a <_vfprintf_r+0x4a>
 800114a:	6e49      	ldr	r1, [r1, #100]	; 0x64
 800114c:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
 8001150:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001154:	8183      	strh	r3, [r0, #12]
 8001156:	6641      	str	r1, [r0, #100]	; 0x64
 8001158:	b29b      	uxth	r3, r3
 800115a:	071d      	lsls	r5, r3, #28
 800115c:	f140 80d0 	bpl.w	8001300 <_vfprintf_r+0x1f0>
 8001160:	9a04      	ldr	r2, [sp, #16]
 8001162:	6912      	ldr	r2, [r2, #16]
 8001164:	2a00      	cmp	r2, #0
 8001166:	f000 80cb 	beq.w	8001300 <_vfprintf_r+0x1f0>
 800116a:	f003 031a 	and.w	r3, r3, #26
 800116e:	2b0a      	cmp	r3, #10
 8001170:	f000 80d4 	beq.w	800131c <_vfprintf_r+0x20c>
 8001174:	ed9f 7b9a 	vldr	d7, [pc, #616]	; 80013e0 <_vfprintf_r+0x2d0>
 8001178:	2300      	movs	r3, #0
 800117a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800117e:	930e      	str	r3, [sp, #56]	; 0x38
 8001180:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
 8001184:	9310      	str	r3, [sp, #64]	; 0x40
 8001186:	9312      	str	r3, [sp, #72]	; 0x48
 8001188:	9305      	str	r3, [sp, #20]
 800118a:	ab2e      	add	r3, sp, #184	; 0xb8
 800118c:	9321      	str	r3, [sp, #132]	; 0x84
 800118e:	469a      	mov	sl, r3
 8001190:	f899 3000 	ldrb.w	r3, [r9]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80dd 	beq.w	8001354 <_vfprintf_r+0x244>
 800119a:	2b25      	cmp	r3, #37	; 0x25
 800119c:	f000 86be 	beq.w	8001f1c <_vfprintf_r+0xe0c>
 80011a0:	464d      	mov	r5, r9
 80011a2:	e003      	b.n	80011ac <_vfprintf_r+0x9c>
 80011a4:	2b25      	cmp	r3, #37	; 0x25
 80011a6:	f000 80c7 	beq.w	8001338 <_vfprintf_r+0x228>
 80011aa:	4625      	mov	r5, r4
 80011ac:	786b      	ldrb	r3, [r5, #1]
 80011ae:	1c6c      	adds	r4, r5, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f7      	bne.n	80011a4 <_vfprintf_r+0x94>
 80011b4:	ebb4 0609 	subs.w	r6, r4, r9
 80011b8:	f000 80cc 	beq.w	8001354 <_vfprintf_r+0x244>
 80011bc:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 80011c0:	3301      	adds	r3, #1
 80011c2:	4432      	add	r2, r6
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	f8ca 9000 	str.w	r9, [sl]
 80011ca:	f8ca 6004 	str.w	r6, [sl, #4]
 80011ce:	e9cd 3222 	strd	r3, r2, [sp, #136]	; 0x88
 80011d2:	f300 80b6 	bgt.w	8001342 <_vfprintf_r+0x232>
 80011d6:	f10a 0a08 	add.w	sl, sl, #8
 80011da:	9a05      	ldr	r2, [sp, #20]
 80011dc:	786b      	ldrb	r3, [r5, #1]
 80011de:	4432      	add	r2, r6
 80011e0:	9205      	str	r2, [sp, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 80b6 	beq.w	8001354 <_vfprintf_r+0x244>
 80011e8:	2300      	movs	r3, #0
 80011ea:	7867      	ldrb	r7, [r4, #1]
 80011ec:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80011f0:	461a      	mov	r2, r3
 80011f2:	4619      	mov	r1, r3
 80011f4:	9306      	str	r3, [sp, #24]
 80011f6:	469b      	mov	fp, r3
 80011f8:	f104 0901 	add.w	r9, r4, #1
 80011fc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8001200:	f109 0901 	add.w	r9, r9, #1
 8001204:	f1a7 0320 	sub.w	r3, r7, #32
 8001208:	2b58      	cmp	r3, #88	; 0x58
 800120a:	f200 8302 	bhi.w	8001812 <_vfprintf_r+0x702>
 800120e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001212:	02da      	.short	0x02da
 8001214:	03000300 	.word	0x03000300
 8001218:	030002e2 	.word	0x030002e2
 800121c:	03000300 	.word	0x03000300
 8001220:	03000300 	.word	0x03000300
 8001224:	02290300 	.word	0x02290300
 8001228:	030002bc 	.word	0x030002bc
 800122c:	02c102b7 	.word	0x02c102b7
 8001230:	00c00300 	.word	0x00c00300
 8001234:	00b100b1 	.word	0x00b100b1
 8001238:	00b100b1 	.word	0x00b100b1
 800123c:	00b100b1 	.word	0x00b100b1
 8001240:	00b100b1 	.word	0x00b100b1
 8001244:	030000b1 	.word	0x030000b1
 8001248:	03000300 	.word	0x03000300
 800124c:	03000300 	.word	0x03000300
 8001250:	03000300 	.word	0x03000300
 8001254:	03000300 	.word	0x03000300
 8001258:	029d0300 	.word	0x029d0300
 800125c:	03000251 	.word	0x03000251
 8001260:	03000251 	.word	0x03000251
 8001264:	03000300 	.word	0x03000300
 8001268:	024c0300 	.word	0x024c0300
 800126c:	03000300 	.word	0x03000300
 8001270:	03000068 	.word	0x03000068
 8001274:	03000300 	.word	0x03000300
 8001278:	03000300 	.word	0x03000300
 800127c:	03000059 	.word	0x03000059
 8001280:	02340300 	.word	0x02340300
 8001284:	03000300 	.word	0x03000300
 8001288:	03000300 	.word	0x03000300
 800128c:	03000300 	.word	0x03000300
 8001290:	03000300 	.word	0x03000300
 8001294:	03000300 	.word	0x03000300
 8001298:	017401ae 	.word	0x017401ae
 800129c:	02510251 	.word	0x02510251
 80012a0:	016f0251 	.word	0x016f0251
 80012a4:	03000174 	.word	0x03000174
 80012a8:	01620300 	.word	0x01620300
 80012ac:	014c0300 	.word	0x014c0300
 80012b0:	011c006a 	.word	0x011c006a
 80012b4:	03000117 	.word	0x03000117
 80012b8:	030000ed 	.word	0x030000ed
 80012bc:	0300005b 	.word	0x0300005b
 80012c0:	00c50300 	.word	0x00c50300
 80012c4:	f04b 0b10 	orr.w	fp, fp, #16
 80012c8:	f01b 0f20 	tst.w	fp, #32
 80012cc:	f000 8292 	beq.w	80017f4 <_vfprintf_r+0x6e4>
 80012d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80012d2:	3407      	adds	r4, #7
 80012d4:	f024 0307 	bic.w	r3, r4, #7
 80012d8:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 80012dc:	9309      	str	r3, [sp, #36]	; 0x24
 80012de:	2301      	movs	r3, #1
 80012e0:	e0c3      	b.n	800146a <_vfprintf_r+0x35a>
 80012e2:	f04b 0b10 	orr.w	fp, fp, #16
 80012e6:	f01b 0320 	ands.w	r3, fp, #32
 80012ea:	f000 8279 	beq.w	80017e0 <_vfprintf_r+0x6d0>
 80012ee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80012f0:	3407      	adds	r4, #7
 80012f2:	f024 0307 	bic.w	r3, r4, #7
 80012f6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 80012fa:	9309      	str	r3, [sp, #36]	; 0x24
 80012fc:	2300      	movs	r3, #0
 80012fe:	e0b4      	b.n	800146a <_vfprintf_r+0x35a>
 8001300:	9904      	ldr	r1, [sp, #16]
 8001302:	9808      	ldr	r0, [sp, #32]
 8001304:	f001 f9c4 	bl	8002690 <__swsetup_r>
 8001308:	2800      	cmp	r0, #0
 800130a:	f041 8113 	bne.w	8002534 <_vfprintf_r+0x1424>
 800130e:	9b04      	ldr	r3, [sp, #16]
 8001310:	899b      	ldrh	r3, [r3, #12]
 8001312:	f003 031a 	and.w	r3, r3, #26
 8001316:	2b0a      	cmp	r3, #10
 8001318:	f47f af2c 	bne.w	8001174 <_vfprintf_r+0x64>
 800131c:	9b04      	ldr	r3, [sp, #16]
 800131e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f6ff af26 	blt.w	8001174 <_vfprintf_r+0x64>
 8001328:	4623      	mov	r3, r4
 800132a:	464a      	mov	r2, r9
 800132c:	9904      	ldr	r1, [sp, #16]
 800132e:	9808      	ldr	r0, [sp, #32]
 8001330:	f001 f978 	bl	8002624 <__sbprintf>
 8001334:	9005      	str	r0, [sp, #20]
 8001336:	e019      	b.n	800136c <_vfprintf_r+0x25c>
 8001338:	ebb4 0609 	subs.w	r6, r4, r9
 800133c:	f43f af54 	beq.w	80011e8 <_vfprintf_r+0xd8>
 8001340:	e73c      	b.n	80011bc <_vfprintf_r+0xac>
 8001342:	aa21      	add	r2, sp, #132	; 0x84
 8001344:	9904      	ldr	r1, [sp, #16]
 8001346:	9808      	ldr	r0, [sp, #32]
 8001348:	f004 fb10 	bl	800596c <__sprint_r>
 800134c:	b948      	cbnz	r0, 8001362 <_vfprintf_r+0x252>
 800134e:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001352:	e742      	b.n	80011da <_vfprintf_r+0xca>
 8001354:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001356:	b123      	cbz	r3, 8001362 <_vfprintf_r+0x252>
 8001358:	9808      	ldr	r0, [sp, #32]
 800135a:	9904      	ldr	r1, [sp, #16]
 800135c:	aa21      	add	r2, sp, #132	; 0x84
 800135e:	f004 fb05 	bl	800596c <__sprint_r>
 8001362:	9b04      	ldr	r3, [sp, #16]
 8001364:	899b      	ldrh	r3, [r3, #12]
 8001366:	065a      	lsls	r2, r3, #25
 8001368:	f101 80e4 	bmi.w	8002534 <_vfprintf_r+0x1424>
 800136c:	9805      	ldr	r0, [sp, #20]
 800136e:	b03f      	add	sp, #252	; 0xfc
 8001370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001374:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8001378:	2000      	movs	r0, #0
 800137a:	f819 7b01 	ldrb.w	r7, [r9], #1
 800137e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001382:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001386:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800138a:	2b09      	cmp	r3, #9
 800138c:	d9f5      	bls.n	800137a <_vfprintf_r+0x26a>
 800138e:	9006      	str	r0, [sp, #24]
 8001390:	e738      	b.n	8001204 <_vfprintf_r+0xf4>
 8001392:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8001396:	f899 7000 	ldrb.w	r7, [r9]
 800139a:	e731      	b.n	8001200 <_vfprintf_r+0xf0>
 800139c:	2a00      	cmp	r2, #0
 800139e:	f041 80b1 	bne.w	8002504 <_vfprintf_r+0x13f4>
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_vfprintf_r+0x2d8>)
 80013a4:	9310      	str	r3, [sp, #64]	; 0x40
 80013a6:	f01b 0f20 	tst.w	fp, #32
 80013aa:	f000 816f 	beq.w	800168c <_vfprintf_r+0x57c>
 80013ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80013b0:	3407      	adds	r4, #7
 80013b2:	f024 0307 	bic.w	r3, r4, #7
 80013b6:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 80013ba:	9309      	str	r3, [sp, #36]	; 0x24
 80013bc:	f01b 0f01 	tst.w	fp, #1
 80013c0:	f000 8238 	beq.w	8001834 <_vfprintf_r+0x724>
 80013c4:	ea54 0305 	orrs.w	r3, r4, r5
 80013c8:	f000 8234 	beq.w	8001834 <_vfprintf_r+0x724>
 80013cc:	2330      	movs	r3, #48	; 0x30
 80013ce:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80013d2:	f88d 7069 	strb.w	r7, [sp, #105]	; 0x69
 80013d6:	f04b 0b02 	orr.w	fp, fp, #2
 80013da:	2302      	movs	r3, #2
 80013dc:	e045      	b.n	800146a <_vfprintf_r+0x35a>
 80013de:	bf00      	nop
	...
 80013e8:	0801ca94 	.word	0x0801ca94
 80013ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80013ee:	f854 3b04 	ldr.w	r3, [r4], #4
 80013f2:	930a      	str	r3, [sp, #40]	; 0x28
 80013f4:	2500      	movs	r5, #0
 80013f6:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 867f 	beq.w	80020fe <_vfprintf_r+0xfee>
 8001400:	1c71      	adds	r1, r6, #1
 8001402:	f000 8753 	beq.w	80022ac <_vfprintf_r+0x119c>
 8001406:	4632      	mov	r2, r6
 8001408:	4629      	mov	r1, r5
 800140a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800140c:	f003 f9f0 	bl	80047f0 <memchr>
 8001410:	2800      	cmp	r0, #0
 8001412:	f001 8059 	beq.w	80024c8 <_vfprintf_r+0x13b8>
 8001416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001418:	1ac3      	subs	r3, r0, r3
 800141a:	9307      	str	r3, [sp, #28]
 800141c:	462e      	mov	r6, r5
 800141e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001422:	f89d 8067 	ldrb.w	r8, [sp, #103]	; 0x67
 8001426:	9409      	str	r4, [sp, #36]	; 0x24
 8001428:	f8cd b008 	str.w	fp, [sp, #8]
 800142c:	9303      	str	r3, [sp, #12]
 800142e:	960b      	str	r6, [sp, #44]	; 0x2c
 8001430:	f1b8 0f00 	cmp.w	r8, #0
 8001434:	f000 80ad 	beq.w	8001592 <_vfprintf_r+0x482>
 8001438:	9b03      	ldr	r3, [sp, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	9303      	str	r3, [sp, #12]
 800143e:	e0a8      	b.n	8001592 <_vfprintf_r+0x482>
 8001440:	f04b 0b20 	orr.w	fp, fp, #32
 8001444:	f899 7000 	ldrb.w	r7, [r9]
 8001448:	e6da      	b.n	8001200 <_vfprintf_r+0xf0>
 800144a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800144c:	f854 3b04 	ldr.w	r3, [r4], #4
 8001450:	9409      	str	r4, [sp, #36]	; 0x24
 8001452:	f647 0230 	movw	r2, #30768	; 0x7830
 8001456:	461c      	mov	r4, r3
 8001458:	4bb7      	ldr	r3, [pc, #732]	; (8001738 <_vfprintf_r+0x628>)
 800145a:	9310      	str	r3, [sp, #64]	; 0x40
 800145c:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
 8001460:	f04b 0b02 	orr.w	fp, fp, #2
 8001464:	2500      	movs	r5, #0
 8001466:	2302      	movs	r3, #2
 8001468:	2778      	movs	r7, #120	; 0x78
 800146a:	f04f 0800 	mov.w	r8, #0
 800146e:	f88d 8067 	strb.w	r8, [sp, #103]	; 0x67
 8001472:	1c72      	adds	r2, r6, #1
 8001474:	f000 81e2 	beq.w	800183c <_vfprintf_r+0x72c>
 8001478:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	ea54 0205 	orrs.w	r2, r4, r5
 8001482:	f040 81d9 	bne.w	8001838 <_vfprintf_r+0x728>
 8001486:	2e00      	cmp	r6, #0
 8001488:	f040 8412 	bne.w	8001cb0 <_vfprintf_r+0xba0>
 800148c:	2b00      	cmp	r3, #0
 800148e:	f040 84dc 	bne.w	8001e4a <_vfprintf_r+0xd3a>
 8001492:	f01b 0301 	ands.w	r3, fp, #1
 8001496:	9307      	str	r3, [sp, #28]
 8001498:	f000 8549 	beq.w	8001f2e <_vfprintf_r+0xe1e>
 800149c:	2330      	movs	r3, #48	; 0x30
 800149e:	f88d 30b7 	strb.w	r3, [sp, #183]	; 0xb7
 80014a2:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 80014a6:	930a      	str	r3, [sp, #40]	; 0x28
 80014a8:	e059      	b.n	800155e <_vfprintf_r+0x44e>
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	f041 8032 	bne.w	8002514 <_vfprintf_r+0x1404>
 80014b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014b2:	f01b 0f20 	tst.w	fp, #32
 80014b6:	f852 3b04 	ldr.w	r3, [r2], #4
 80014ba:	9209      	str	r2, [sp, #36]	; 0x24
 80014bc:	f040 853b 	bne.w	8001f36 <_vfprintf_r+0xe26>
 80014c0:	f01b 0f10 	tst.w	fp, #16
 80014c4:	f040 8654 	bne.w	8002170 <_vfprintf_r+0x1060>
 80014c8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80014cc:	f000 8650 	beq.w	8002170 <_vfprintf_r+0x1060>
 80014d0:	9a05      	ldr	r2, [sp, #20]
 80014d2:	801a      	strh	r2, [r3, #0]
 80014d4:	e65c      	b.n	8001190 <_vfprintf_r+0x80>
 80014d6:	f899 7000 	ldrb.w	r7, [r9]
 80014da:	2f6c      	cmp	r7, #108	; 0x6c
 80014dc:	bf03      	ittte	eq
 80014de:	f899 7001 	ldrbeq.w	r7, [r9, #1]
 80014e2:	f04b 0b20 	orreq.w	fp, fp, #32
 80014e6:	f109 0901 	addeq.w	r9, r9, #1
 80014ea:	f04b 0b10 	orrne.w	fp, fp, #16
 80014ee:	e687      	b.n	8001200 <_vfprintf_r+0xf0>
 80014f0:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
 80014f4:	f899 7000 	ldrb.w	r7, [r9]
 80014f8:	e682      	b.n	8001200 <_vfprintf_r+0xf0>
 80014fa:	2a00      	cmp	r2, #0
 80014fc:	f041 8012 	bne.w	8002524 <_vfprintf_r+0x1414>
 8001500:	f01b 0f20 	tst.w	fp, #32
 8001504:	f000 812b 	beq.w	800175e <_vfprintf_r+0x64e>
 8001508:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800150a:	3407      	adds	r4, #7
 800150c:	f024 0307 	bic.w	r3, r4, #7
 8001510:	4619      	mov	r1, r3
 8001512:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8001516:	9109      	str	r1, [sp, #36]	; 0x24
 8001518:	4614      	mov	r4, r2
 800151a:	461d      	mov	r5, r3
 800151c:	2a00      	cmp	r2, #0
 800151e:	f173 0300 	sbcs.w	r3, r3, #0
 8001522:	f2c0 84f1 	blt.w	8001f08 <_vfprintf_r+0xdf8>
 8001526:	1c73      	adds	r3, r6, #1
 8001528:	f89d 8067 	ldrb.w	r8, [sp, #103]	; 0x67
 800152c:	d008      	beq.n	8001540 <_vfprintf_r+0x430>
 800152e:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	ea54 0305 	orrs.w	r3, r4, r5
 8001538:	f000 8484 	beq.w	8001e44 <_vfprintf_r+0xd34>
 800153c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001540:	2d00      	cmp	r5, #0
 8001542:	bf08      	it	eq
 8001544:	2c0a      	cmpeq	r4, #10
 8001546:	f080 8454 	bcs.w	8001df2 <_vfprintf_r+0xce2>
 800154a:	2301      	movs	r3, #1
 800154c:	3430      	adds	r4, #48	; 0x30
 800154e:	9307      	str	r3, [sp, #28]
 8001550:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 8001554:	f88d 40b7 	strb.w	r4, [sp, #183]	; 0xb7
 8001558:	f8cd b008 	str.w	fp, [sp, #8]
 800155c:	930a      	str	r3, [sp, #40]	; 0x28
 800155e:	9b07      	ldr	r3, [sp, #28]
 8001560:	42b3      	cmp	r3, r6
 8001562:	bfb8      	it	lt
 8001564:	4633      	movlt	r3, r6
 8001566:	9303      	str	r3, [sp, #12]
 8001568:	2300      	movs	r3, #0
 800156a:	930b      	str	r3, [sp, #44]	; 0x2c
 800156c:	e760      	b.n	8001430 <_vfprintf_r+0x320>
 800156e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001570:	2300      	movs	r3, #0
 8001572:	f854 2b04 	ldr.w	r2, [r4], #4
 8001576:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 800157a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800157e:	2201      	movs	r2, #1
 8001580:	ab24      	add	r3, sp, #144	; 0x90
 8001582:	9203      	str	r2, [sp, #12]
 8001584:	9409      	str	r4, [sp, #36]	; 0x24
 8001586:	9207      	str	r2, [sp, #28]
 8001588:	930a      	str	r3, [sp, #40]	; 0x28
 800158a:	2600      	movs	r6, #0
 800158c:	f8cd b008 	str.w	fp, [sp, #8]
 8001590:	960b      	str	r6, [sp, #44]	; 0x2c
 8001592:	9b02      	ldr	r3, [sp, #8]
 8001594:	f013 0302 	ands.w	r3, r3, #2
 8001598:	d002      	beq.n	80015a0 <_vfprintf_r+0x490>
 800159a:	9a03      	ldr	r2, [sp, #12]
 800159c:	3202      	adds	r2, #2
 800159e:	9203      	str	r2, [sp, #12]
 80015a0:	9a02      	ldr	r2, [sp, #8]
 80015a2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80015a4:	f012 0b84 	ands.w	fp, r2, #132	; 0x84
 80015a8:	d105      	bne.n	80015b6 <_vfprintf_r+0x4a6>
 80015aa:	9a06      	ldr	r2, [sp, #24]
 80015ac:	9903      	ldr	r1, [sp, #12]
 80015ae:	1a55      	subs	r5, r2, r1
 80015b0:	2d00      	cmp	r5, #0
 80015b2:	f300 82e8 	bgt.w	8001b86 <_vfprintf_r+0xa76>
 80015b6:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
 80015ba:	b172      	cbz	r2, 80015da <_vfprintf_r+0x4ca>
 80015bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80015be:	3201      	adds	r2, #1
 80015c0:	3401      	adds	r4, #1
 80015c2:	f10d 0067 	add.w	r0, sp, #103	; 0x67
 80015c6:	2101      	movs	r1, #1
 80015c8:	2a07      	cmp	r2, #7
 80015ca:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 80015ce:	e9ca 0100 	strd	r0, r1, [sl]
 80015d2:	f300 831a 	bgt.w	8001c0a <_vfprintf_r+0xafa>
 80015d6:	f10a 0a08 	add.w	sl, sl, #8
 80015da:	b16b      	cbz	r3, 80015f8 <_vfprintf_r+0x4e8>
 80015dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80015de:	3301      	adds	r3, #1
 80015e0:	3402      	adds	r4, #2
 80015e2:	a91a      	add	r1, sp, #104	; 0x68
 80015e4:	2202      	movs	r2, #2
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 80015ec:	e9ca 1200 	strd	r1, r2, [sl]
 80015f0:	f300 8319 	bgt.w	8001c26 <_vfprintf_r+0xb16>
 80015f4:	f10a 0a08 	add.w	sl, sl, #8
 80015f8:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 80015fc:	f000 81a8 	beq.w	8001950 <_vfprintf_r+0x840>
 8001600:	9b07      	ldr	r3, [sp, #28]
 8001602:	1af6      	subs	r6, r6, r3
 8001604:	2e00      	cmp	r6, #0
 8001606:	f300 81ec 	bgt.w	80019e2 <_vfprintf_r+0x8d2>
 800160a:	9b02      	ldr	r3, [sp, #8]
 800160c:	05db      	lsls	r3, r3, #23
 800160e:	f100 8142 	bmi.w	8001896 <_vfprintf_r+0x786>
 8001612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001614:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001616:	f8ca 2000 	str.w	r2, [sl]
 800161a:	9a07      	ldr	r2, [sp, #28]
 800161c:	f8ca 2004 	str.w	r2, [sl, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	4414      	add	r4, r2
 8001624:	2b07      	cmp	r3, #7
 8001626:	9423      	str	r4, [sp, #140]	; 0x8c
 8001628:	9322      	str	r3, [sp, #136]	; 0x88
 800162a:	f300 824e 	bgt.w	8001aca <_vfprintf_r+0x9ba>
 800162e:	f10a 0a08 	add.w	sl, sl, #8
 8001632:	9b02      	ldr	r3, [sp, #8]
 8001634:	0759      	lsls	r1, r3, #29
 8001636:	d505      	bpl.n	8001644 <_vfprintf_r+0x534>
 8001638:	9b06      	ldr	r3, [sp, #24]
 800163a:	9a03      	ldr	r2, [sp, #12]
 800163c:	1a9d      	subs	r5, r3, r2
 800163e:	2d00      	cmp	r5, #0
 8001640:	f300 82fd 	bgt.w	8001c3e <_vfprintf_r+0xb2e>
 8001644:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 8001648:	9903      	ldr	r1, [sp, #12]
 800164a:	428a      	cmp	r2, r1
 800164c:	bfac      	ite	ge
 800164e:	189b      	addge	r3, r3, r2
 8001650:	185b      	addlt	r3, r3, r1
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	2c00      	cmp	r4, #0
 8001656:	f040 81fe 	bne.w	8001a56 <_vfprintf_r+0x946>
 800165a:	2300      	movs	r3, #0
 800165c:	9322      	str	r3, [sp, #136]	; 0x88
 800165e:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001662:	e595      	b.n	8001190 <_vfprintf_r+0x80>
 8001664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001666:	f899 7000 	ldrb.w	r7, [r9]
 800166a:	f853 0b04 	ldr.w	r0, [r3], #4
 800166e:	9006      	str	r0, [sp, #24]
 8001670:	2800      	cmp	r0, #0
 8001672:	f2c0 8516 	blt.w	80020a2 <_vfprintf_r+0xf92>
 8001676:	9309      	str	r3, [sp, #36]	; 0x24
 8001678:	e5c2      	b.n	8001200 <_vfprintf_r+0xf0>
 800167a:	2a00      	cmp	r2, #0
 800167c:	f040 8756 	bne.w	800252c <_vfprintf_r+0x141c>
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <_vfprintf_r+0x62c>)
 8001682:	9310      	str	r3, [sp, #64]	; 0x40
 8001684:	f01b 0f20 	tst.w	fp, #32
 8001688:	f47f ae91 	bne.w	80013ae <_vfprintf_r+0x29e>
 800168c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800168e:	f01b 0f10 	tst.w	fp, #16
 8001692:	f853 4b04 	ldr.w	r4, [r3], #4
 8001696:	9309      	str	r3, [sp, #36]	; 0x24
 8001698:	f040 842b 	bne.w	8001ef2 <_vfprintf_r+0xde2>
 800169c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80016a0:	f000 8427 	beq.w	8001ef2 <_vfprintf_r+0xde2>
 80016a4:	b2a4      	uxth	r4, r4
 80016a6:	2500      	movs	r5, #0
 80016a8:	e688      	b.n	80013bc <_vfprintf_r+0x2ac>
 80016aa:	f04b 0b08 	orr.w	fp, fp, #8
 80016ae:	f899 7000 	ldrb.w	r7, [r9]
 80016b2:	e5a5      	b.n	8001200 <_vfprintf_r+0xf0>
 80016b4:	2a00      	cmp	r2, #0
 80016b6:	f040 8729 	bne.w	800250c <_vfprintf_r+0x13fc>
 80016ba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80016bc:	3407      	adds	r4, #7
 80016be:	f024 0307 	bic.w	r3, r4, #7
 80016c2:	ecb3 7b02 	vldmia	r3!, {d7}
 80016c6:	ec55 4b17 	vmov	r4, r5, d7
 80016ca:	9309      	str	r3, [sp, #36]	; 0x24
 80016cc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80016d0:	9315      	str	r3, [sp, #84]	; 0x54
 80016d2:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
 80016d6:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80016da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <_vfprintf_r+0x630>)
 80016e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80016e4:	f006 f872 	bl	80077cc <__aeabi_dcmpun>
 80016e8:	2800      	cmp	r0, #0
 80016ea:	f040 842b 	bne.w	8001f44 <_vfprintf_r+0xe34>
 80016ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <_vfprintf_r+0x630>)
 80016f4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80016f8:	f006 f84a 	bl	8007790 <__aeabi_dcmple>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	f040 8421 	bne.w	8001f44 <_vfprintf_r+0xe34>
 8001702:	2200      	movs	r2, #0
 8001704:	2300      	movs	r3, #0
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f006 f837 	bl	800777c <__aeabi_dcmplt>
 800170e:	2800      	cmp	r0, #0
 8001710:	f040 863e 	bne.w	8002390 <_vfprintf_r+0x1280>
 8001714:	f89d 8067 	ldrb.w	r8, [sp, #103]	; 0x67
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <_vfprintf_r+0x634>)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <_vfprintf_r+0x638>)
 800171c:	2103      	movs	r1, #3
 800171e:	2600      	movs	r6, #0
 8001720:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
 8001724:	2f47      	cmp	r7, #71	; 0x47
 8001726:	bfc8      	it	gt
 8001728:	461a      	movgt	r2, r3
 800172a:	9103      	str	r1, [sp, #12]
 800172c:	9002      	str	r0, [sp, #8]
 800172e:	920a      	str	r2, [sp, #40]	; 0x28
 8001730:	9107      	str	r1, [sp, #28]
 8001732:	960b      	str	r6, [sp, #44]	; 0x2c
 8001734:	e67c      	b.n	8001430 <_vfprintf_r+0x320>
 8001736:	bf00      	nop
 8001738:	0801ca94 	.word	0x0801ca94
 800173c:	0801ca80 	.word	0x0801ca80
 8001740:	7fefffff 	.word	0x7fefffff
 8001744:	0801ca70 	.word	0x0801ca70
 8001748:	0801ca74 	.word	0x0801ca74
 800174c:	2a00      	cmp	r2, #0
 800174e:	f040 86e5 	bne.w	800251c <_vfprintf_r+0x140c>
 8001752:	f04b 0b10 	orr.w	fp, fp, #16
 8001756:	f01b 0f20 	tst.w	fp, #32
 800175a:	f47f aed5 	bne.w	8001508 <_vfprintf_r+0x3f8>
 800175e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001760:	f01b 0f10 	tst.w	fp, #16
 8001764:	f853 4b04 	ldr.w	r4, [r3], #4
 8001768:	9309      	str	r3, [sp, #36]	; 0x24
 800176a:	f040 83c5 	bne.w	8001ef8 <_vfprintf_r+0xde8>
 800176e:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8001772:	f000 83c1 	beq.w	8001ef8 <_vfprintf_r+0xde8>
 8001776:	b224      	sxth	r4, r4
 8001778:	17e5      	asrs	r5, r4, #31
 800177a:	4622      	mov	r2, r4
 800177c:	462b      	mov	r3, r5
 800177e:	e6cd      	b.n	800151c <_vfprintf_r+0x40c>
 8001780:	f899 7000 	ldrb.w	r7, [r9]
 8001784:	f04b 0b04 	orr.w	fp, fp, #4
 8001788:	e53a      	b.n	8001200 <_vfprintf_r+0xf0>
 800178a:	f899 7000 	ldrb.w	r7, [r9]
 800178e:	2201      	movs	r2, #1
 8001790:	212b      	movs	r1, #43	; 0x2b
 8001792:	e535      	b.n	8001200 <_vfprintf_r+0xf0>
 8001794:	4648      	mov	r0, r9
 8001796:	f810 7b01 	ldrb.w	r7, [r0], #1
 800179a:	2f2a      	cmp	r7, #42	; 0x2a
 800179c:	f000 8723 	beq.w	80025e6 <_vfprintf_r+0x14d6>
 80017a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80017a4:	2b09      	cmp	r3, #9
 80017a6:	4681      	mov	r9, r0
 80017a8:	f04f 0600 	mov.w	r6, #0
 80017ac:	f63f ad2a 	bhi.w	8001204 <_vfprintf_r+0xf4>
 80017b0:	f819 7b01 	ldrb.w	r7, [r9], #1
 80017b4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80017b8:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80017bc:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d9f5      	bls.n	80017b0 <_vfprintf_r+0x6a0>
 80017c4:	e51e      	b.n	8001204 <_vfprintf_r+0xf4>
 80017c6:	f899 7000 	ldrb.w	r7, [r9]
 80017ca:	2900      	cmp	r1, #0
 80017cc:	f47f ad18 	bne.w	8001200 <_vfprintf_r+0xf0>
 80017d0:	2201      	movs	r2, #1
 80017d2:	2120      	movs	r1, #32
 80017d4:	e514      	b.n	8001200 <_vfprintf_r+0xf0>
 80017d6:	f04b 0b01 	orr.w	fp, fp, #1
 80017da:	f899 7000 	ldrb.w	r7, [r9]
 80017de:	e50f      	b.n	8001200 <_vfprintf_r+0xf0>
 80017e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017e2:	f852 4b04 	ldr.w	r4, [r2], #4
 80017e6:	9209      	str	r2, [sp, #36]	; 0x24
 80017e8:	f01b 0210 	ands.w	r2, fp, #16
 80017ec:	f000 8451 	beq.w	8002092 <_vfprintf_r+0xf82>
 80017f0:	2500      	movs	r5, #0
 80017f2:	e63a      	b.n	800146a <_vfprintf_r+0x35a>
 80017f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f6:	f01b 0f10 	tst.w	fp, #16
 80017fa:	f853 4b04 	ldr.w	r4, [r3], #4
 80017fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001800:	f000 843f 	beq.w	8002082 <_vfprintf_r+0xf72>
 8001804:	2500      	movs	r5, #0
 8001806:	2301      	movs	r3, #1
 8001808:	e62f      	b.n	800146a <_vfprintf_r+0x35a>
 800180a:	9808      	ldr	r0, [sp, #32]
 800180c:	f002 f968 	bl	8003ae0 <__sinit>
 8001810:	e494      	b.n	800113c <_vfprintf_r+0x2c>
 8001812:	2a00      	cmp	r2, #0
 8001814:	f040 85d6 	bne.w	80023c4 <_vfprintf_r+0x12b4>
 8001818:	2f00      	cmp	r7, #0
 800181a:	f43f ad9b 	beq.w	8001354 <_vfprintf_r+0x244>
 800181e:	2300      	movs	r3, #0
 8001820:	2201      	movs	r2, #1
 8001822:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8001826:	ab24      	add	r3, sp, #144	; 0x90
 8001828:	9203      	str	r2, [sp, #12]
 800182a:	f88d 7090 	strb.w	r7, [sp, #144]	; 0x90
 800182e:	9207      	str	r2, [sp, #28]
 8001830:	930a      	str	r3, [sp, #40]	; 0x28
 8001832:	e6aa      	b.n	800158a <_vfprintf_r+0x47a>
 8001834:	2302      	movs	r3, #2
 8001836:	e618      	b.n	800146a <_vfprintf_r+0x35a>
 8001838:	f8dd b008 	ldr.w	fp, [sp, #8]
 800183c:	2b01      	cmp	r3, #1
 800183e:	f43f ae7f 	beq.w	8001540 <_vfprintf_r+0x430>
 8001842:	2b02      	cmp	r3, #2
 8001844:	f000 823c 	beq.w	8001cc0 <_vfprintf_r+0xbb0>
 8001848:	a92e      	add	r1, sp, #184	; 0xb8
 800184a:	e000      	b.n	800184e <_vfprintf_r+0x73e>
 800184c:	4611      	mov	r1, r2
 800184e:	08e2      	lsrs	r2, r4, #3
 8001850:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8001854:	08e8      	lsrs	r0, r5, #3
 8001856:	f004 0307 	and.w	r3, r4, #7
 800185a:	4605      	mov	r5, r0
 800185c:	4614      	mov	r4, r2
 800185e:	3330      	adds	r3, #48	; 0x30
 8001860:	ea54 0005 	orrs.w	r0, r4, r5
 8001864:	f801 3c01 	strb.w	r3, [r1, #-1]
 8001868:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 800186c:	d1ee      	bne.n	800184c <_vfprintf_r+0x73c>
 800186e:	f01b 0f01 	tst.w	fp, #1
 8001872:	920a      	str	r2, [sp, #40]	; 0x28
 8001874:	f000 82df 	beq.w	8001e36 <_vfprintf_r+0xd26>
 8001878:	2b30      	cmp	r3, #48	; 0x30
 800187a:	f000 844b 	beq.w	8002114 <_vfprintf_r+0x1004>
 800187e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001880:	f8cd b008 	str.w	fp, [sp, #8]
 8001884:	2330      	movs	r3, #48	; 0x30
 8001886:	3902      	subs	r1, #2
 8001888:	f802 3c01 	strb.w	r3, [r2, #-1]
 800188c:	ab2e      	add	r3, sp, #184	; 0xb8
 800188e:	1a5b      	subs	r3, r3, r1
 8001890:	9307      	str	r3, [sp, #28]
 8001892:	910a      	str	r1, [sp, #40]	; 0x28
 8001894:	e663      	b.n	800155e <_vfprintf_r+0x44e>
 8001896:	2f65      	cmp	r7, #101	; 0x65
 8001898:	f340 8123 	ble.w	8001ae2 <_vfprintf_r+0x9d2>
 800189c:	2200      	movs	r2, #0
 800189e:	2300      	movs	r3, #0
 80018a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80018a4:	f005 ff60 	bl	8007768 <__aeabi_dcmpeq>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f000 8222 	beq.w	8001cf2 <_vfprintf_r+0xbe2>
 80018ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018b0:	4abc      	ldr	r2, [pc, #752]	; (8001ba4 <_vfprintf_r+0xa94>)
 80018b2:	f8ca 2000 	str.w	r2, [sl]
 80018b6:	3301      	adds	r3, #1
 80018b8:	3401      	adds	r4, #1
 80018ba:	2201      	movs	r2, #1
 80018bc:	2b07      	cmp	r3, #7
 80018be:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 80018c2:	f8ca 2004 	str.w	r2, [sl, #4]
 80018c6:	f300 849d 	bgt.w	8002204 <_vfprintf_r+0x10f4>
 80018ca:	f10a 0a08 	add.w	sl, sl, #8
 80018ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80018d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80018d2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80018d4:	4293      	cmp	r3, r2
 80018d6:	f280 8324 	bge.w	8001f22 <_vfprintf_r+0xe12>
 80018da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80018dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80018de:	f8ca 2000 	str.w	r2, [sl]
 80018e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80018e4:	f8ca 2004 	str.w	r2, [sl, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	4414      	add	r4, r2
 80018ec:	2b07      	cmp	r3, #7
 80018ee:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 80018f2:	f300 83f7 	bgt.w	80020e4 <_vfprintf_r+0xfd4>
 80018f6:	f10a 0a08 	add.w	sl, sl, #8
 80018fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80018fc:	1e5d      	subs	r5, r3, #1
 80018fe:	2d00      	cmp	r5, #0
 8001900:	f77f ae97 	ble.w	8001632 <_vfprintf_r+0x522>
 8001904:	2d10      	cmp	r5, #16
 8001906:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001908:	f8df b29c 	ldr.w	fp, [pc, #668]	; 8001ba8 <_vfprintf_r+0xa98>
 800190c:	f340 8470 	ble.w	80021f0 <_vfprintf_r+0x10e0>
 8001910:	2610      	movs	r6, #16
 8001912:	9f08      	ldr	r7, [sp, #32]
 8001914:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001918:	e005      	b.n	8001926 <_vfprintf_r+0x816>
 800191a:	f10a 0a08 	add.w	sl, sl, #8
 800191e:	3d10      	subs	r5, #16
 8001920:	2d10      	cmp	r5, #16
 8001922:	f340 8465 	ble.w	80021f0 <_vfprintf_r+0x10e0>
 8001926:	3201      	adds	r2, #1
 8001928:	3410      	adds	r4, #16
 800192a:	2a07      	cmp	r2, #7
 800192c:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8001930:	e9ca b600 	strd	fp, r6, [sl]
 8001934:	ddf1      	ble.n	800191a <_vfprintf_r+0x80a>
 8001936:	aa21      	add	r2, sp, #132	; 0x84
 8001938:	4641      	mov	r1, r8
 800193a:	4638      	mov	r0, r7
 800193c:	f004 f816 	bl	800596c <__sprint_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	f47f ad0e 	bne.w	8001362 <_vfprintf_r+0x252>
 8001946:	e9dd 2422 	ldrd	r2, r4, [sp, #136]	; 0x88
 800194a:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 800194e:	e7e6      	b.n	800191e <_vfprintf_r+0x80e>
 8001950:	9b06      	ldr	r3, [sp, #24]
 8001952:	9a03      	ldr	r2, [sp, #12]
 8001954:	1a9d      	subs	r5, r3, r2
 8001956:	2d00      	cmp	r5, #0
 8001958:	f77f ae52 	ble.w	8001600 <_vfprintf_r+0x4f0>
 800195c:	2d10      	cmp	r5, #16
 800195e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001960:	f8df b244 	ldr.w	fp, [pc, #580]	; 8001ba8 <_vfprintf_r+0xa98>
 8001964:	dd2d      	ble.n	80019c2 <_vfprintf_r+0x8b2>
 8001966:	4658      	mov	r0, fp
 8001968:	4653      	mov	r3, sl
 800196a:	4621      	mov	r1, r4
 800196c:	46ca      	mov	sl, r9
 800196e:	46bb      	mov	fp, r7
 8001970:	46b1      	mov	r9, r6
 8001972:	f04f 0810 	mov.w	r8, #16
 8001976:	9c08      	ldr	r4, [sp, #32]
 8001978:	9e04      	ldr	r6, [sp, #16]
 800197a:	4607      	mov	r7, r0
 800197c:	e004      	b.n	8001988 <_vfprintf_r+0x878>
 800197e:	3d10      	subs	r5, #16
 8001980:	2d10      	cmp	r5, #16
 8001982:	f103 0308 	add.w	r3, r3, #8
 8001986:	dd15      	ble.n	80019b4 <_vfprintf_r+0x8a4>
 8001988:	3201      	adds	r2, #1
 800198a:	3110      	adds	r1, #16
 800198c:	2a07      	cmp	r2, #7
 800198e:	e9cd 2122 	strd	r2, r1, [sp, #136]	; 0x88
 8001992:	e9c3 7800 	strd	r7, r8, [r3]
 8001996:	ddf2      	ble.n	800197e <_vfprintf_r+0x86e>
 8001998:	aa21      	add	r2, sp, #132	; 0x84
 800199a:	4631      	mov	r1, r6
 800199c:	4620      	mov	r0, r4
 800199e:	f003 ffe5 	bl	800596c <__sprint_r>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	f47f acdd 	bne.w	8001362 <_vfprintf_r+0x252>
 80019a8:	3d10      	subs	r5, #16
 80019aa:	2d10      	cmp	r5, #16
 80019ac:	e9dd 2122 	ldrd	r2, r1, [sp, #136]	; 0x88
 80019b0:	ab2e      	add	r3, sp, #184	; 0xb8
 80019b2:	dce9      	bgt.n	8001988 <_vfprintf_r+0x878>
 80019b4:	464e      	mov	r6, r9
 80019b6:	46d1      	mov	r9, sl
 80019b8:	469a      	mov	sl, r3
 80019ba:	463b      	mov	r3, r7
 80019bc:	460c      	mov	r4, r1
 80019be:	465f      	mov	r7, fp
 80019c0:	469b      	mov	fp, r3
 80019c2:	3201      	adds	r2, #1
 80019c4:	442c      	add	r4, r5
 80019c6:	2a07      	cmp	r2, #7
 80019c8:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 80019cc:	e9ca b500 	strd	fp, r5, [sl]
 80019d0:	f300 8424 	bgt.w	800221c <_vfprintf_r+0x110c>
 80019d4:	9b07      	ldr	r3, [sp, #28]
 80019d6:	1af6      	subs	r6, r6, r3
 80019d8:	2e00      	cmp	r6, #0
 80019da:	f10a 0a08 	add.w	sl, sl, #8
 80019de:	f77f ae14 	ble.w	800160a <_vfprintf_r+0x4fa>
 80019e2:	2e10      	cmp	r6, #16
 80019e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80019e6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; 8001ba8 <_vfprintf_r+0xa98>
 80019ea:	dd28      	ble.n	8001a3e <_vfprintf_r+0x92e>
 80019ec:	4659      	mov	r1, fp
 80019ee:	4623      	mov	r3, r4
 80019f0:	46bb      	mov	fp, r7
 80019f2:	2510      	movs	r5, #16
 80019f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019f8:	9c04      	ldr	r4, [sp, #16]
 80019fa:	460f      	mov	r7, r1
 80019fc:	e004      	b.n	8001a08 <_vfprintf_r+0x8f8>
 80019fe:	3e10      	subs	r6, #16
 8001a00:	2e10      	cmp	r6, #16
 8001a02:	f10a 0a08 	add.w	sl, sl, #8
 8001a06:	dd16      	ble.n	8001a36 <_vfprintf_r+0x926>
 8001a08:	3201      	adds	r2, #1
 8001a0a:	3310      	adds	r3, #16
 8001a0c:	2a07      	cmp	r2, #7
 8001a0e:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8001a12:	e9ca 7500 	strd	r7, r5, [sl]
 8001a16:	ddf2      	ble.n	80019fe <_vfprintf_r+0x8ee>
 8001a18:	aa21      	add	r2, sp, #132	; 0x84
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	4640      	mov	r0, r8
 8001a1e:	f003 ffa5 	bl	800596c <__sprint_r>
 8001a22:	2800      	cmp	r0, #0
 8001a24:	f47f ac9d 	bne.w	8001362 <_vfprintf_r+0x252>
 8001a28:	3e10      	subs	r6, #16
 8001a2a:	2e10      	cmp	r6, #16
 8001a2c:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 8001a30:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001a34:	dce8      	bgt.n	8001a08 <_vfprintf_r+0x8f8>
 8001a36:	461c      	mov	r4, r3
 8001a38:	463b      	mov	r3, r7
 8001a3a:	465f      	mov	r7, fp
 8001a3c:	469b      	mov	fp, r3
 8001a3e:	3201      	adds	r2, #1
 8001a40:	4434      	add	r4, r6
 8001a42:	2a07      	cmp	r2, #7
 8001a44:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8001a48:	e9ca b600 	strd	fp, r6, [sl]
 8001a4c:	f300 8244 	bgt.w	8001ed8 <_vfprintf_r+0xdc8>
 8001a50:	f10a 0a08 	add.w	sl, sl, #8
 8001a54:	e5d9      	b.n	800160a <_vfprintf_r+0x4fa>
 8001a56:	aa21      	add	r2, sp, #132	; 0x84
 8001a58:	9904      	ldr	r1, [sp, #16]
 8001a5a:	9808      	ldr	r0, [sp, #32]
 8001a5c:	f003 ff86 	bl	800596c <__sprint_r>
 8001a60:	2800      	cmp	r0, #0
 8001a62:	f43f adfa 	beq.w	800165a <_vfprintf_r+0x54a>
 8001a66:	e47c      	b.n	8001362 <_vfprintf_r+0x252>
 8001a68:	aa21      	add	r2, sp, #132	; 0x84
 8001a6a:	9904      	ldr	r1, [sp, #16]
 8001a6c:	9808      	ldr	r0, [sp, #32]
 8001a6e:	f003 ff7d 	bl	800596c <__sprint_r>
 8001a72:	2800      	cmp	r0, #0
 8001a74:	f47f ac75 	bne.w	8001362 <_vfprintf_r+0x252>
 8001a78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001a7a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001a7c:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f040 83d8 	bne.w	8002236 <_vfprintf_r+0x1126>
 8001a86:	9b02      	ldr	r3, [sp, #8]
 8001a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f43f adcf 	beq.w	8001632 <_vfprintf_r+0x522>
 8001a94:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001a96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001a98:	f8ca 3000 	str.w	r3, [sl]
 8001a9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001a9e:	f8ca 3004 	str.w	r3, [sl, #4]
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	441c      	add	r4, r3
 8001aa6:	2a07      	cmp	r2, #7
 8001aa8:	9423      	str	r4, [sp, #140]	; 0x8c
 8001aaa:	9222      	str	r2, [sp, #136]	; 0x88
 8001aac:	f300 849e 	bgt.w	80023ec <_vfprintf_r+0x12dc>
 8001ab0:	f10a 0a08 	add.w	sl, sl, #8
 8001ab4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001ab8:	3201      	adds	r2, #1
 8001aba:	441c      	add	r4, r3
 8001abc:	2a07      	cmp	r2, #7
 8001abe:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8001ac2:	e9ca 1300 	strd	r1, r3, [sl]
 8001ac6:	f77f adb2 	ble.w	800162e <_vfprintf_r+0x51e>
 8001aca:	aa21      	add	r2, sp, #132	; 0x84
 8001acc:	9904      	ldr	r1, [sp, #16]
 8001ace:	9808      	ldr	r0, [sp, #32]
 8001ad0:	f003 ff4c 	bl	800596c <__sprint_r>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	f47f ac44 	bne.w	8001362 <_vfprintf_r+0x252>
 8001ada:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001adc:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001ae0:	e5a7      	b.n	8001632 <_vfprintf_r+0x522>
 8001ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001ae6:	2a01      	cmp	r2, #1
 8001ae8:	f104 0401 	add.w	r4, r4, #1
 8001aec:	f103 0501 	add.w	r5, r3, #1
 8001af0:	f10a 0608 	add.w	r6, sl, #8
 8001af4:	f340 81af 	ble.w	8001e56 <_vfprintf_r+0xd46>
 8001af8:	2301      	movs	r3, #1
 8001afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001afc:	f8ca 2000 	str.w	r2, [sl]
 8001b00:	2d07      	cmp	r5, #7
 8001b02:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
 8001b06:	f8ca 3004 	str.w	r3, [sl, #4]
 8001b0a:	f300 8345 	bgt.w	8002198 <_vfprintf_r+0x1088>
 8001b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001b10:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001b12:	3501      	adds	r5, #1
 8001b14:	441c      	add	r4, r3
 8001b16:	2d07      	cmp	r5, #7
 8001b18:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
 8001b1c:	e9c6 2300 	strd	r2, r3, [r6]
 8001b20:	f300 832e 	bgt.w	8002180 <_vfprintf_r+0x1070>
 8001b24:	3608      	adds	r6, #8
 8001b26:	1c6b      	adds	r3, r5, #1
 8001b28:	461f      	mov	r7, r3
 8001b2a:	46b8      	mov	r8, r7
 8001b2c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8001b2e:	9307      	str	r3, [sp, #28]
 8001b30:	2200      	movs	r2, #0
 8001b32:	2300      	movs	r3, #0
 8001b34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001b38:	f106 0a08 	add.w	sl, r6, #8
 8001b3c:	3f01      	subs	r7, #1
 8001b3e:	f005 fe13 	bl	8007768 <__aeabi_dcmpeq>
 8001b42:	2800      	cmp	r0, #0
 8001b44:	f040 819b 	bne.w	8001e7e <_vfprintf_r+0xd6e>
 8001b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b4a:	6077      	str	r7, [r6, #4]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	443c      	add	r4, r7
 8001b50:	f1b8 0f07 	cmp.w	r8, #7
 8001b54:	6033      	str	r3, [r6, #0]
 8001b56:	9423      	str	r4, [sp, #140]	; 0x8c
 8001b58:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8001b5c:	f300 82b2 	bgt.w	80020c4 <_vfprintf_r+0xfb4>
 8001b60:	f106 0310 	add.w	r3, r6, #16
 8001b64:	f105 0802 	add.w	r8, r5, #2
 8001b68:	4656      	mov	r6, sl
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001b6e:	6072      	str	r2, [r6, #4]
 8001b70:	4414      	add	r4, r2
 8001b72:	ab1d      	add	r3, sp, #116	; 0x74
 8001b74:	f1b8 0f07 	cmp.w	r8, #7
 8001b78:	9423      	str	r4, [sp, #140]	; 0x8c
 8001b7a:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 8001b7e:	6033      	str	r3, [r6, #0]
 8001b80:	f77f ad57 	ble.w	8001632 <_vfprintf_r+0x522>
 8001b84:	e7a1      	b.n	8001aca <_vfprintf_r+0x9ba>
 8001b86:	2d10      	cmp	r5, #16
 8001b88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001b8a:	dd31      	ble.n	8001bf0 <_vfprintf_r+0xae0>
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	4620      	mov	r0, r4
 8001b90:	46ca      	mov	sl, r9
 8001b92:	f04f 0810 	mov.w	r8, #16
 8001b96:	46b1      	mov	r9, r6
 8001b98:	9313      	str	r3, [sp, #76]	; 0x4c
 8001b9a:	462e      	mov	r6, r5
 8001b9c:	9c08      	ldr	r4, [sp, #32]
 8001b9e:	9d04      	ldr	r5, [sp, #16]
 8001ba0:	e009      	b.n	8001bb6 <_vfprintf_r+0xaa6>
 8001ba2:	bf00      	nop
 8001ba4:	0801cab0 	.word	0x0801cab0
 8001ba8:	0800d404 	.word	0x0800d404
 8001bac:	3e10      	subs	r6, #16
 8001bae:	2e10      	cmp	r6, #16
 8001bb0:	f101 0108 	add.w	r1, r1, #8
 8001bb4:	dd16      	ble.n	8001be4 <_vfprintf_r+0xad4>
 8001bb6:	3201      	adds	r2, #1
 8001bb8:	4bc5      	ldr	r3, [pc, #788]	; (8001ed0 <_vfprintf_r+0xdc0>)
 8001bba:	3010      	adds	r0, #16
 8001bbc:	2a07      	cmp	r2, #7
 8001bbe:	e9cd 2022 	strd	r2, r0, [sp, #136]	; 0x88
 8001bc2:	e9c1 3800 	strd	r3, r8, [r1]
 8001bc6:	ddf1      	ble.n	8001bac <_vfprintf_r+0xa9c>
 8001bc8:	aa21      	add	r2, sp, #132	; 0x84
 8001bca:	4629      	mov	r1, r5
 8001bcc:	4620      	mov	r0, r4
 8001bce:	f003 fecd 	bl	800596c <__sprint_r>
 8001bd2:	2800      	cmp	r0, #0
 8001bd4:	f47f abc5 	bne.w	8001362 <_vfprintf_r+0x252>
 8001bd8:	3e10      	subs	r6, #16
 8001bda:	2e10      	cmp	r6, #16
 8001bdc:	e9dd 2022 	ldrd	r2, r0, [sp, #136]	; 0x88
 8001be0:	a92e      	add	r1, sp, #184	; 0xb8
 8001be2:	dce8      	bgt.n	8001bb6 <_vfprintf_r+0xaa6>
 8001be4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001be6:	4635      	mov	r5, r6
 8001be8:	4604      	mov	r4, r0
 8001bea:	464e      	mov	r6, r9
 8001bec:	46d1      	mov	r9, sl
 8001bee:	468a      	mov	sl, r1
 8001bf0:	3201      	adds	r2, #1
 8001bf2:	49b7      	ldr	r1, [pc, #732]	; (8001ed0 <_vfprintf_r+0xdc0>)
 8001bf4:	442c      	add	r4, r5
 8001bf6:	2a07      	cmp	r2, #7
 8001bf8:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8001bfc:	e9ca 1500 	strd	r1, r5, [sl]
 8001c00:	f300 82d6 	bgt.w	80021b0 <_vfprintf_r+0x10a0>
 8001c04:	f10a 0a08 	add.w	sl, sl, #8
 8001c08:	e4d5      	b.n	80015b6 <_vfprintf_r+0x4a6>
 8001c0a:	aa21      	add	r2, sp, #132	; 0x84
 8001c0c:	9904      	ldr	r1, [sp, #16]
 8001c0e:	9808      	ldr	r0, [sp, #32]
 8001c10:	9313      	str	r3, [sp, #76]	; 0x4c
 8001c12:	f003 feab 	bl	800596c <__sprint_r>
 8001c16:	2800      	cmp	r0, #0
 8001c18:	f47f aba3 	bne.w	8001362 <_vfprintf_r+0x252>
 8001c1c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001c1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001c20:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001c24:	e4d9      	b.n	80015da <_vfprintf_r+0x4ca>
 8001c26:	aa21      	add	r2, sp, #132	; 0x84
 8001c28:	9904      	ldr	r1, [sp, #16]
 8001c2a:	9808      	ldr	r0, [sp, #32]
 8001c2c:	f003 fe9e 	bl	800596c <__sprint_r>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	f47f ab96 	bne.w	8001362 <_vfprintf_r+0x252>
 8001c36:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001c38:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001c3c:	e4dc      	b.n	80015f8 <_vfprintf_r+0x4e8>
 8001c3e:	2d10      	cmp	r5, #16
 8001c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001c42:	dd21      	ble.n	8001c88 <_vfprintf_r+0xb78>
 8001c44:	2610      	movs	r6, #16
 8001c46:	9f08      	ldr	r7, [sp, #32]
 8001c48:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001c4c:	e004      	b.n	8001c58 <_vfprintf_r+0xb48>
 8001c4e:	3d10      	subs	r5, #16
 8001c50:	2d10      	cmp	r5, #16
 8001c52:	f10a 0a08 	add.w	sl, sl, #8
 8001c56:	dd17      	ble.n	8001c88 <_vfprintf_r+0xb78>
 8001c58:	3301      	adds	r3, #1
 8001c5a:	4a9d      	ldr	r2, [pc, #628]	; (8001ed0 <_vfprintf_r+0xdc0>)
 8001c5c:	3410      	adds	r4, #16
 8001c5e:	2b07      	cmp	r3, #7
 8001c60:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 8001c64:	e9ca 2600 	strd	r2, r6, [sl]
 8001c68:	ddf1      	ble.n	8001c4e <_vfprintf_r+0xb3e>
 8001c6a:	aa21      	add	r2, sp, #132	; 0x84
 8001c6c:	4641      	mov	r1, r8
 8001c6e:	4638      	mov	r0, r7
 8001c70:	f003 fe7c 	bl	800596c <__sprint_r>
 8001c74:	2800      	cmp	r0, #0
 8001c76:	f47f ab74 	bne.w	8001362 <_vfprintf_r+0x252>
 8001c7a:	3d10      	subs	r5, #16
 8001c7c:	2d10      	cmp	r5, #16
 8001c7e:	e9dd 3422 	ldrd	r3, r4, [sp, #136]	; 0x88
 8001c82:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001c86:	dce7      	bgt.n	8001c58 <_vfprintf_r+0xb48>
 8001c88:	3301      	adds	r3, #1
 8001c8a:	4a91      	ldr	r2, [pc, #580]	; (8001ed0 <_vfprintf_r+0xdc0>)
 8001c8c:	442c      	add	r4, r5
 8001c8e:	2b07      	cmp	r3, #7
 8001c90:	e9cd 3422 	strd	r3, r4, [sp, #136]	; 0x88
 8001c94:	e9ca 2500 	strd	r2, r5, [sl]
 8001c98:	f77f acd4 	ble.w	8001644 <_vfprintf_r+0x534>
 8001c9c:	aa21      	add	r2, sp, #132	; 0x84
 8001c9e:	9904      	ldr	r1, [sp, #16]
 8001ca0:	9808      	ldr	r0, [sp, #32]
 8001ca2:	f003 fe63 	bl	800596c <__sprint_r>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	f47f ab5b 	bne.w	8001362 <_vfprintf_r+0x252>
 8001cac:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001cae:	e4c9      	b.n	8001644 <_vfprintf_r+0x534>
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	f000 83b5 	beq.w	8002420 <_vfprintf_r+0x1310>
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001cbc:	f47f adc4 	bne.w	8001848 <_vfprintf_r+0x738>
 8001cc0:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001cc4:	aa2e      	add	r2, sp, #184	; 0xb8
 8001cc6:	0923      	lsrs	r3, r4, #4
 8001cc8:	f004 000f 	and.w	r0, r4, #15
 8001ccc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8001cd0:	0929      	lsrs	r1, r5, #4
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	f81c 3000 	ldrb.w	r3, [ip, r0]
 8001cda:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8001cde:	ea54 0305 	orrs.w	r3, r4, r5
 8001ce2:	d1f0      	bne.n	8001cc6 <_vfprintf_r+0xbb6>
 8001ce4:	ab2e      	add	r3, sp, #184	; 0xb8
 8001ce6:	1a9b      	subs	r3, r3, r2
 8001ce8:	920a      	str	r2, [sp, #40]	; 0x28
 8001cea:	f8cd b008 	str.w	fp, [sp, #8]
 8001cee:	9307      	str	r3, [sp, #28]
 8001cf0:	e435      	b.n	800155e <_vfprintf_r+0x44e>
 8001cf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f340 826a 	ble.w	80021ce <_vfprintf_r+0x10be>
 8001cfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001cfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	bfa8      	it	ge
 8001d02:	4613      	movge	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	461d      	mov	r5, r3
 8001d08:	dd0e      	ble.n	8001d28 <_vfprintf_r+0xc18>
 8001d0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001d0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001d0e:	f8ca 2000 	str.w	r2, [sl]
 8001d12:	3301      	adds	r3, #1
 8001d14:	442c      	add	r4, r5
 8001d16:	2b07      	cmp	r3, #7
 8001d18:	9423      	str	r4, [sp, #140]	; 0x8c
 8001d1a:	f8ca 5004 	str.w	r5, [sl, #4]
 8001d1e:	9322      	str	r3, [sp, #136]	; 0x88
 8001d20:	f300 83b5 	bgt.w	800248e <_vfprintf_r+0x137e>
 8001d24:	f10a 0a08 	add.w	sl, sl, #8
 8001d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	bfa8      	it	ge
 8001d2e:	1b5b      	subge	r3, r3, r5
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	461d      	mov	r5, r3
 8001d34:	f300 81f6 	bgt.w	8002124 <_vfprintf_r+0x1014>
 8001d38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	f280 81b5 	bge.w	80020ac <_vfprintf_r+0xf9c>
 8001d42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001d44:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001d46:	f8ca 1000 	str.w	r1, [sl]
 8001d4a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001d4c:	f8ca 1004 	str.w	r1, [sl, #4]
 8001d50:	3301      	adds	r3, #1
 8001d52:	440c      	add	r4, r1
 8001d54:	2b07      	cmp	r3, #7
 8001d56:	9423      	str	r4, [sp, #140]	; 0x8c
 8001d58:	9322      	str	r3, [sp, #136]	; 0x88
 8001d5a:	f300 8326 	bgt.w	80023aa <_vfprintf_r+0x129a>
 8001d5e:	f10a 0a08 	add.w	sl, sl, #8
 8001d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001d66:	4291      	cmp	r1, r2
 8001d68:	eba3 0302 	sub.w	r3, r3, r2
 8001d6c:	f280 8204 	bge.w	8002178 <_vfprintf_r+0x1068>
 8001d70:	461d      	mov	r5, r3
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	dd10      	ble.n	8001d98 <_vfprintf_r+0xc88>
 8001d76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001d78:	f8ca 5004 	str.w	r5, [sl, #4]
 8001d7c:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
 8001d80:	3201      	adds	r2, #1
 8001d82:	4401      	add	r1, r0
 8001d84:	442c      	add	r4, r5
 8001d86:	2a07      	cmp	r2, #7
 8001d88:	f8ca 1000 	str.w	r1, [sl]
 8001d8c:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8001d90:	f300 838b 	bgt.w	80024aa <_vfprintf_r+0x139a>
 8001d94:	f10a 0a08 	add.w	sl, sl, #8
 8001d98:	2d00      	cmp	r5, #0
 8001d9a:	bfac      	ite	ge
 8001d9c:	1b5d      	subge	r5, r3, r5
 8001d9e:	461d      	movlt	r5, r3
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	f77f ac46 	ble.w	8001632 <_vfprintf_r+0x522>
 8001da6:	2d10      	cmp	r5, #16
 8001da8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001daa:	f8df b128 	ldr.w	fp, [pc, #296]	; 8001ed4 <_vfprintf_r+0xdc4>
 8001dae:	f340 821f 	ble.w	80021f0 <_vfprintf_r+0x10e0>
 8001db2:	2610      	movs	r6, #16
 8001db4:	9f08      	ldr	r7, [sp, #32]
 8001db6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8001dba:	e005      	b.n	8001dc8 <_vfprintf_r+0xcb8>
 8001dbc:	f10a 0a08 	add.w	sl, sl, #8
 8001dc0:	3d10      	subs	r5, #16
 8001dc2:	2d10      	cmp	r5, #16
 8001dc4:	f340 8214 	ble.w	80021f0 <_vfprintf_r+0x10e0>
 8001dc8:	3201      	adds	r2, #1
 8001dca:	3410      	adds	r4, #16
 8001dcc:	2a07      	cmp	r2, #7
 8001dce:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8001dd2:	e9ca b600 	strd	fp, r6, [sl]
 8001dd6:	ddf1      	ble.n	8001dbc <_vfprintf_r+0xcac>
 8001dd8:	aa21      	add	r2, sp, #132	; 0x84
 8001dda:	4641      	mov	r1, r8
 8001ddc:	4638      	mov	r0, r7
 8001dde:	f003 fdc5 	bl	800596c <__sprint_r>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	f47f aabd 	bne.w	8001362 <_vfprintf_r+0x252>
 8001de8:	e9dd 2422 	ldrd	r2, r4, [sp, #136]	; 0x88
 8001dec:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001df0:	e7e6      	b.n	8001dc0 <_vfprintf_r+0xcb0>
 8001df2:	ab2e      	add	r3, sp, #184	; 0xb8
 8001df4:	f8cd 9008 	str.w	r9, [sp, #8]
 8001df8:	46c1      	mov	r9, r8
 8001dfa:	46b0      	mov	r8, r6
 8001dfc:	461e      	mov	r6, r3
 8001dfe:	e001      	b.n	8001e04 <_vfprintf_r+0xcf4>
 8001e00:	4604      	mov	r4, r0
 8001e02:	460d      	mov	r5, r1
 8001e04:	220a      	movs	r2, #10
 8001e06:	2300      	movs	r3, #0
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f005 fd1c 	bl	8007848 <__aeabi_uldivmod>
 8001e10:	3230      	adds	r2, #48	; 0x30
 8001e12:	f806 2d01 	strb.w	r2, [r6, #-1]!
 8001e16:	2300      	movs	r3, #0
 8001e18:	220a      	movs	r2, #10
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	4629      	mov	r1, r5
 8001e1e:	f005 fd13 	bl	8007848 <__aeabi_uldivmod>
 8001e22:	2d00      	cmp	r5, #0
 8001e24:	bf08      	it	eq
 8001e26:	2c0a      	cmpeq	r4, #10
 8001e28:	d2ea      	bcs.n	8001e00 <_vfprintf_r+0xcf0>
 8001e2a:	4632      	mov	r2, r6
 8001e2c:	960a      	str	r6, [sp, #40]	; 0x28
 8001e2e:	4646      	mov	r6, r8
 8001e30:	46c8      	mov	r8, r9
 8001e32:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8001e36:	f8cd b008 	str.w	fp, [sp, #8]
 8001e3a:	ab2e      	add	r3, sp, #184	; 0xb8
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	9307      	str	r3, [sp, #28]
 8001e40:	f7ff bb8d 	b.w	800155e <_vfprintf_r+0x44e>
 8001e44:	2e00      	cmp	r6, #0
 8001e46:	f040 82eb 	bne.w	8002420 <_vfprintf_r+0x1310>
 8001e4a:	2600      	movs	r6, #0
 8001e4c:	ab2e      	add	r3, sp, #184	; 0xb8
 8001e4e:	9607      	str	r6, [sp, #28]
 8001e50:	930a      	str	r3, [sp, #40]	; 0x28
 8001e52:	f7ff bb84 	b.w	800155e <_vfprintf_r+0x44e>
 8001e56:	9a02      	ldr	r2, [sp, #8]
 8001e58:	07d0      	lsls	r0, r2, #31
 8001e5a:	f53f ae4d 	bmi.w	8001af8 <_vfprintf_r+0x9e8>
 8001e5e:	2201      	movs	r2, #1
 8001e60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e62:	f8ca 1000 	str.w	r1, [sl]
 8001e66:	2d07      	cmp	r5, #7
 8001e68:	e9cd 5422 	strd	r5, r4, [sp, #136]	; 0x88
 8001e6c:	f8ca 2004 	str.w	r2, [sl, #4]
 8001e70:	f300 8128 	bgt.w	80020c4 <_vfprintf_r+0xfb4>
 8001e74:	f103 0802 	add.w	r8, r3, #2
 8001e78:	f10a 0a10 	add.w	sl, sl, #16
 8001e7c:	e676      	b.n	8001b6c <_vfprintf_r+0xa5c>
 8001e7e:	2f00      	cmp	r7, #0
 8001e80:	f77f ae74 	ble.w	8001b6c <_vfprintf_r+0xa5c>
 8001e84:	2f10      	cmp	r7, #16
 8001e86:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8001ed4 <_vfprintf_r+0xdc4>
 8001e8a:	f340 83aa 	ble.w	80025e2 <_vfprintf_r+0x14d2>
 8001e8e:	4623      	mov	r3, r4
 8001e90:	f04f 0810 	mov.w	r8, #16
 8001e94:	f8dd a020 	ldr.w	sl, [sp, #32]
 8001e98:	9c04      	ldr	r4, [sp, #16]
 8001e9a:	9d07      	ldr	r5, [sp, #28]
 8001e9c:	e005      	b.n	8001eaa <_vfprintf_r+0xd9a>
 8001e9e:	3608      	adds	r6, #8
 8001ea0:	3f10      	subs	r7, #16
 8001ea2:	2f10      	cmp	r7, #16
 8001ea4:	f340 820a 	ble.w	80022bc <_vfprintf_r+0x11ac>
 8001ea8:	3501      	adds	r5, #1
 8001eaa:	3310      	adds	r3, #16
 8001eac:	2d07      	cmp	r5, #7
 8001eae:	e9cd 5322 	strd	r5, r3, [sp, #136]	; 0x88
 8001eb2:	e9c6 b800 	strd	fp, r8, [r6]
 8001eb6:	ddf2      	ble.n	8001e9e <_vfprintf_r+0xd8e>
 8001eb8:	aa21      	add	r2, sp, #132	; 0x84
 8001eba:	4621      	mov	r1, r4
 8001ebc:	4650      	mov	r0, sl
 8001ebe:	f003 fd55 	bl	800596c <__sprint_r>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	f47f aa4d 	bne.w	8001362 <_vfprintf_r+0x252>
 8001ec8:	e9dd 5322 	ldrd	r5, r3, [sp, #136]	; 0x88
 8001ecc:	ae2e      	add	r6, sp, #184	; 0xb8
 8001ece:	e7e7      	b.n	8001ea0 <_vfprintf_r+0xd90>
 8001ed0:	0800d3f4 	.word	0x0800d3f4
 8001ed4:	0800d404 	.word	0x0800d404
 8001ed8:	aa21      	add	r2, sp, #132	; 0x84
 8001eda:	9904      	ldr	r1, [sp, #16]
 8001edc:	9808      	ldr	r0, [sp, #32]
 8001ede:	f003 fd45 	bl	800596c <__sprint_r>
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	f47f aa3d 	bne.w	8001362 <_vfprintf_r+0x252>
 8001ee8:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8001eea:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8001eee:	f7ff bb8c 	b.w	800160a <_vfprintf_r+0x4fa>
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	f7ff ba62 	b.w	80013bc <_vfprintf_r+0x2ac>
 8001ef8:	17e5      	asrs	r5, r4, #31
 8001efa:	4622      	mov	r2, r4
 8001efc:	462b      	mov	r3, r5
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	f173 0300 	sbcs.w	r3, r3, #0
 8001f04:	f6bf ab0f 	bge.w	8001526 <_vfprintf_r+0x416>
 8001f08:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8001f0c:	4264      	negs	r4, r4
 8001f0e:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8001f12:	f88d 8067 	strb.w	r8, [sp, #103]	; 0x67
 8001f16:	2301      	movs	r3, #1
 8001f18:	f7ff baab 	b.w	8001472 <_vfprintf_r+0x362>
 8001f1c:	464c      	mov	r4, r9
 8001f1e:	f7ff b963 	b.w	80011e8 <_vfprintf_r+0xd8>
 8001f22:	9b02      	ldr	r3, [sp, #8]
 8001f24:	07de      	lsls	r6, r3, #31
 8001f26:	f53f acd8 	bmi.w	80018da <_vfprintf_r+0x7ca>
 8001f2a:	f7ff bb82 	b.w	8001632 <_vfprintf_r+0x522>
 8001f2e:	ab2e      	add	r3, sp, #184	; 0xb8
 8001f30:	930a      	str	r3, [sp, #40]	; 0x28
 8001f32:	f7ff bb14 	b.w	800155e <_vfprintf_r+0x44e>
 8001f36:	9a05      	ldr	r2, [sp, #20]
 8001f38:	4610      	mov	r0, r2
 8001f3a:	17d1      	asrs	r1, r2, #31
 8001f3c:	e9c3 0100 	strd	r0, r1, [r3]
 8001f40:	f7ff b926 	b.w	8001190 <_vfprintf_r+0x80>
 8001f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	f005 fc3e 	bl	80077cc <__aeabi_dcmpun>
 8001f50:	2800      	cmp	r0, #0
 8001f52:	f040 832c 	bne.w	80025ae <_vfprintf_r+0x149e>
 8001f56:	1c74      	adds	r4, r6, #1
 8001f58:	f027 0520 	bic.w	r5, r7, #32
 8001f5c:	f000 82a3 	beq.w	80024a6 <_vfprintf_r+0x1396>
 8001f60:	2d47      	cmp	r5, #71	; 0x47
 8001f62:	f000 823f 	beq.w	80023e4 <_vfprintf_r+0x12d4>
 8001f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001f6a:	f44b 7280 	orr.w	r2, fp, #256	; 0x100
 8001f6e:	2900      	cmp	r1, #0
 8001f70:	9202      	str	r2, [sp, #8]
 8001f72:	f2c0 8213 	blt.w	800239c <_vfprintf_r+0x128c>
 8001f76:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8001f7a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8001f7e:	2300      	movs	r3, #0
 8001f80:	9313      	str	r3, [sp, #76]	; 0x4c
 8001f82:	2f66      	cmp	r7, #102	; 0x66
 8001f84:	f000 81b8 	beq.w	80022f8 <_vfprintf_r+0x11e8>
 8001f88:	2f46      	cmp	r7, #70	; 0x46
 8001f8a:	f000 81b5 	beq.w	80022f8 <_vfprintf_r+0x11e8>
 8001f8e:	2d45      	cmp	r5, #69	; 0x45
 8001f90:	f000 824a 	beq.w	8002428 <_vfprintf_r+0x1318>
 8001f94:	aa1f      	add	r2, sp, #124	; 0x7c
 8001f96:	ab1c      	add	r3, sp, #112	; 0x70
 8001f98:	e9cd 3200 	strd	r3, r2, [sp]
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	ab1b      	add	r3, sp, #108	; 0x6c
 8001fa0:	4632      	mov	r2, r6
 8001fa2:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8001fa6:	9808      	ldr	r0, [sp, #32]
 8001fa8:	f000 fca0 	bl	80028ec <_dtoa_r>
 8001fac:	2f67      	cmp	r7, #103	; 0x67
 8001fae:	900a      	str	r0, [sp, #40]	; 0x28
 8001fb0:	4634      	mov	r4, r6
 8001fb2:	f040 8247 	bne.w	8002444 <_vfprintf_r+0x1334>
 8001fb6:	f01b 0f01 	tst.w	fp, #1
 8001fba:	f040 8246 	bne.w	800244a <_vfprintf_r+0x133a>
 8001fbe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001fc0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001fc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8001fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fc6:	2d47      	cmp	r5, #71	; 0x47
 8001fc8:	eba3 0302 	sub.w	r3, r3, r2
 8001fcc:	930e      	str	r3, [sp, #56]	; 0x38
 8001fce:	d106      	bne.n	8001fde <_vfprintf_r+0xece>
 8001fd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fd2:	1cd8      	adds	r0, r3, #3
 8001fd4:	db02      	blt.n	8001fdc <_vfprintf_r+0xecc>
 8001fd6:	429e      	cmp	r6, r3
 8001fd8:	f280 824b 	bge.w	8002472 <_vfprintf_r+0x1362>
 8001fdc:	3f02      	subs	r7, #2
 8001fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001fe0:	f88d 7074 	strb.w	r7, [sp, #116]	; 0x74
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	2a00      	cmp	r2, #0
 8001fe8:	921b      	str	r2, [sp, #108]	; 0x6c
 8001fea:	bfb6      	itet	lt
 8001fec:	f1c3 0201 	rsblt	r2, r3, #1
 8001ff0:	232b      	movge	r3, #43	; 0x2b
 8001ff2:	232d      	movlt	r3, #45	; 0x2d
 8001ff4:	2a09      	cmp	r2, #9
 8001ff6:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
 8001ffa:	f340 82b8 	ble.w	800256e <_vfprintf_r+0x145e>
 8001ffe:	f10d 0483 	add.w	r4, sp, #131	; 0x83
 8002002:	4620      	mov	r0, r4
 8002004:	4db8      	ldr	r5, [pc, #736]	; (80022e8 <_vfprintf_r+0x11d8>)
 8002006:	e001      	b.n	800200c <_vfprintf_r+0xefc>
 8002008:	4608      	mov	r0, r1
 800200a:	461a      	mov	r2, r3
 800200c:	fb85 3102 	smull	r3, r1, r5, r2
 8002010:	17d3      	asrs	r3, r2, #31
 8002012:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002016:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800201a:	eba2 0141 	sub.w	r1, r2, r1, lsl #1
 800201e:	3130      	adds	r1, #48	; 0x30
 8002020:	2a63      	cmp	r2, #99	; 0x63
 8002022:	f800 1c01 	strb.w	r1, [r0, #-1]
 8002026:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800202a:	dced      	bgt.n	8002008 <_vfprintf_r+0xef8>
 800202c:	3330      	adds	r3, #48	; 0x30
 800202e:	1e82      	subs	r2, r0, #2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4294      	cmp	r4, r2
 8002034:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002038:	f240 82e0 	bls.w	80025fc <_vfprintf_r+0x14ec>
 800203c:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8002040:	e001      	b.n	8002046 <_vfprintf_r+0xf36>
 8002042:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002046:	f802 3b01 	strb.w	r3, [r2], #1
 800204a:	428c      	cmp	r4, r1
 800204c:	d1f9      	bne.n	8002042 <_vfprintf_r+0xf32>
 800204e:	f10d 0385 	add.w	r3, sp, #133	; 0x85
 8002052:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8002056:	1a1b      	subs	r3, r3, r0
 8002058:	4413      	add	r3, r2
 800205a:	aa1d      	add	r2, sp, #116	; 0x74
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	9312      	str	r3, [sp, #72]	; 0x48
 8002060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002062:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002064:	2a01      	cmp	r2, #1
 8002066:	4413      	add	r3, r2
 8002068:	9307      	str	r3, [sp, #28]
 800206a:	f340 8292 	ble.w	8002592 <_vfprintf_r+0x1482>
 800206e:	9b07      	ldr	r3, [sp, #28]
 8002070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002072:	4413      	add	r3, r2
 8002074:	9307      	str	r3, [sp, #28]
 8002076:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800207a:	9303      	str	r3, [sp, #12]
 800207c:	2300      	movs	r3, #0
 800207e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002080:	e172      	b.n	8002368 <_vfprintf_r+0x1258>
 8002082:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8002086:	bf18      	it	ne
 8002088:	b2a4      	uxthne	r4, r4
 800208a:	2500      	movs	r5, #0
 800208c:	2301      	movs	r3, #1
 800208e:	f7ff b9ec 	b.w	800146a <_vfprintf_r+0x35a>
 8002092:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8002096:	bf1c      	itt	ne
 8002098:	4613      	movne	r3, r2
 800209a:	b2a4      	uxthne	r4, r4
 800209c:	2500      	movs	r5, #0
 800209e:	f7ff b9e4 	b.w	800146a <_vfprintf_r+0x35a>
 80020a2:	4240      	negs	r0, r0
 80020a4:	9006      	str	r0, [sp, #24]
 80020a6:	9309      	str	r3, [sp, #36]	; 0x24
 80020a8:	f7ff bb6c 	b.w	8001784 <_vfprintf_r+0x674>
 80020ac:	9b02      	ldr	r3, [sp, #8]
 80020ae:	07dd      	lsls	r5, r3, #31
 80020b0:	f53f ae47 	bmi.w	8001d42 <_vfprintf_r+0xc32>
 80020b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80020b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80020b8:	428a      	cmp	r2, r1
 80020ba:	eba3 0302 	sub.w	r3, r3, r2
 80020be:	dd5b      	ble.n	8002178 <_vfprintf_r+0x1068>
 80020c0:	461d      	mov	r5, r3
 80020c2:	e669      	b.n	8001d98 <_vfprintf_r+0xc88>
 80020c4:	aa21      	add	r2, sp, #132	; 0x84
 80020c6:	9904      	ldr	r1, [sp, #16]
 80020c8:	9808      	ldr	r0, [sp, #32]
 80020ca:	f003 fc4f 	bl	800596c <__sprint_r>
 80020ce:	2800      	cmp	r0, #0
 80020d0:	f47f a947 	bne.w	8001362 <_vfprintf_r+0x252>
 80020d4:	e9dd 3422 	ldrd	r3, r4, [sp, #136]	; 0x88
 80020d8:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 80020dc:	f103 0801 	add.w	r8, r3, #1
 80020e0:	ae2e      	add	r6, sp, #184	; 0xb8
 80020e2:	e543      	b.n	8001b6c <_vfprintf_r+0xa5c>
 80020e4:	aa21      	add	r2, sp, #132	; 0x84
 80020e6:	9904      	ldr	r1, [sp, #16]
 80020e8:	9808      	ldr	r0, [sp, #32]
 80020ea:	f003 fc3f 	bl	800596c <__sprint_r>
 80020ee:	2800      	cmp	r0, #0
 80020f0:	f47f a937 	bne.w	8001362 <_vfprintf_r+0x252>
 80020f4:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80020f6:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80020fa:	f7ff bbfe 	b.w	80018fa <_vfprintf_r+0x7ea>
 80020fe:	2e06      	cmp	r6, #6
 8002100:	4633      	mov	r3, r6
 8002102:	bf28      	it	cs
 8002104:	2306      	movcs	r3, #6
 8002106:	9307      	str	r3, [sp, #28]
 8002108:	9303      	str	r3, [sp, #12]
 800210a:	4b78      	ldr	r3, [pc, #480]	; (80022ec <_vfprintf_r+0x11dc>)
 800210c:	9409      	str	r4, [sp, #36]	; 0x24
 800210e:	930a      	str	r3, [sp, #40]	; 0x28
 8002110:	f7ff ba3b 	b.w	800158a <_vfprintf_r+0x47a>
 8002114:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002116:	f8cd b008 	str.w	fp, [sp, #8]
 800211a:	ab2e      	add	r3, sp, #184	; 0xb8
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	9307      	str	r3, [sp, #28]
 8002120:	f7ff ba1d 	b.w	800155e <_vfprintf_r+0x44e>
 8002124:	2b10      	cmp	r3, #16
 8002126:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002128:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 80022f4 <_vfprintf_r+0x11e4>
 800212c:	f340 8125 	ble.w	800237a <_vfprintf_r+0x126a>
 8002130:	2610      	movs	r6, #16
 8002132:	9f08      	ldr	r7, [sp, #32]
 8002134:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002138:	e005      	b.n	8002146 <_vfprintf_r+0x1036>
 800213a:	f10a 0a08 	add.w	sl, sl, #8
 800213e:	3d10      	subs	r5, #16
 8002140:	2d10      	cmp	r5, #16
 8002142:	f340 811a 	ble.w	800237a <_vfprintf_r+0x126a>
 8002146:	3201      	adds	r2, #1
 8002148:	3410      	adds	r4, #16
 800214a:	2a07      	cmp	r2, #7
 800214c:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8002150:	e9ca b600 	strd	fp, r6, [sl]
 8002154:	ddf1      	ble.n	800213a <_vfprintf_r+0x102a>
 8002156:	aa21      	add	r2, sp, #132	; 0x84
 8002158:	4641      	mov	r1, r8
 800215a:	4638      	mov	r0, r7
 800215c:	f003 fc06 	bl	800596c <__sprint_r>
 8002160:	2800      	cmp	r0, #0
 8002162:	f47f a8fe 	bne.w	8001362 <_vfprintf_r+0x252>
 8002166:	e9dd 2422 	ldrd	r2, r4, [sp, #136]	; 0x88
 800216a:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 800216e:	e7e6      	b.n	800213e <_vfprintf_r+0x102e>
 8002170:	9a05      	ldr	r2, [sp, #20]
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f7ff b80c 	b.w	8001190 <_vfprintf_r+0x80>
 8002178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800217a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800217c:	1a55      	subs	r5, r2, r1
 800217e:	e5f8      	b.n	8001d72 <_vfprintf_r+0xc62>
 8002180:	aa21      	add	r2, sp, #132	; 0x84
 8002182:	9904      	ldr	r1, [sp, #16]
 8002184:	9808      	ldr	r0, [sp, #32]
 8002186:	f003 fbf1 	bl	800596c <__sprint_r>
 800218a:	2800      	cmp	r0, #0
 800218c:	f47f a8e9 	bne.w	8001362 <_vfprintf_r+0x252>
 8002190:	e9dd 5422 	ldrd	r5, r4, [sp, #136]	; 0x88
 8002194:	ae2e      	add	r6, sp, #184	; 0xb8
 8002196:	e4c6      	b.n	8001b26 <_vfprintf_r+0xa16>
 8002198:	aa21      	add	r2, sp, #132	; 0x84
 800219a:	9904      	ldr	r1, [sp, #16]
 800219c:	9808      	ldr	r0, [sp, #32]
 800219e:	f003 fbe5 	bl	800596c <__sprint_r>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f47f a8dd 	bne.w	8001362 <_vfprintf_r+0x252>
 80021a8:	e9dd 5422 	ldrd	r5, r4, [sp, #136]	; 0x88
 80021ac:	ae2e      	add	r6, sp, #184	; 0xb8
 80021ae:	e4ae      	b.n	8001b0e <_vfprintf_r+0x9fe>
 80021b0:	aa21      	add	r2, sp, #132	; 0x84
 80021b2:	9904      	ldr	r1, [sp, #16]
 80021b4:	9808      	ldr	r0, [sp, #32]
 80021b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80021b8:	f003 fbd8 	bl	800596c <__sprint_r>
 80021bc:	2800      	cmp	r0, #0
 80021be:	f47f a8d0 	bne.w	8001362 <_vfprintf_r+0x252>
 80021c2:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80021c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80021c6:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80021ca:	f7ff b9f4 	b.w	80015b6 <_vfprintf_r+0x4a6>
 80021ce:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80021d0:	4947      	ldr	r1, [pc, #284]	; (80022f0 <_vfprintf_r+0x11e0>)
 80021d2:	f8ca 1000 	str.w	r1, [sl]
 80021d6:	3201      	adds	r2, #1
 80021d8:	3401      	adds	r4, #1
 80021da:	2101      	movs	r1, #1
 80021dc:	2a07      	cmp	r2, #7
 80021de:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 80021e2:	f8ca 1004 	str.w	r1, [sl, #4]
 80021e6:	f73f ac3f 	bgt.w	8001a68 <_vfprintf_r+0x958>
 80021ea:	f10a 0a08 	add.w	sl, sl, #8
 80021ee:	e447      	b.n	8001a80 <_vfprintf_r+0x970>
 80021f0:	3201      	adds	r2, #1
 80021f2:	442c      	add	r4, r5
 80021f4:	2a07      	cmp	r2, #7
 80021f6:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 80021fa:	e9ca b500 	strd	fp, r5, [sl]
 80021fe:	f77f aa16 	ble.w	800162e <_vfprintf_r+0x51e>
 8002202:	e462      	b.n	8001aca <_vfprintf_r+0x9ba>
 8002204:	aa21      	add	r2, sp, #132	; 0x84
 8002206:	9904      	ldr	r1, [sp, #16]
 8002208:	9808      	ldr	r0, [sp, #32]
 800220a:	f003 fbaf 	bl	800596c <__sprint_r>
 800220e:	2800      	cmp	r0, #0
 8002210:	f47f a8a7 	bne.w	8001362 <_vfprintf_r+0x252>
 8002214:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8002218:	f7ff bb59 	b.w	80018ce <_vfprintf_r+0x7be>
 800221c:	aa21      	add	r2, sp, #132	; 0x84
 800221e:	9904      	ldr	r1, [sp, #16]
 8002220:	9808      	ldr	r0, [sp, #32]
 8002222:	f003 fba3 	bl	800596c <__sprint_r>
 8002226:	2800      	cmp	r0, #0
 8002228:	f47f a89b 	bne.w	8001362 <_vfprintf_r+0x252>
 800222c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800222e:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8002232:	f7ff b9e5 	b.w	8001600 <_vfprintf_r+0x4f0>
 8002236:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002238:	9911      	ldr	r1, [sp, #68]	; 0x44
 800223a:	f8ca 1000 	str.w	r1, [sl]
 800223e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002240:	f8ca 1004 	str.w	r1, [sl, #4]
 8002244:	3201      	adds	r2, #1
 8002246:	440c      	add	r4, r1
 8002248:	2a07      	cmp	r2, #7
 800224a:	9423      	str	r4, [sp, #140]	; 0x8c
 800224c:	9222      	str	r2, [sp, #136]	; 0x88
 800224e:	f300 80cd 	bgt.w	80023ec <_vfprintf_r+0x12dc>
 8002252:	f10a 0a08 	add.w	sl, sl, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	f6bf ac2c 	bge.w	8001ab4 <_vfprintf_r+0x9a4>
 800225c:	425d      	negs	r5, r3
 800225e:	3310      	adds	r3, #16
 8002260:	f8df b090 	ldr.w	fp, [pc, #144]	; 80022f4 <_vfprintf_r+0x11e4>
 8002264:	f280 816c 	bge.w	8002540 <_vfprintf_r+0x1430>
 8002268:	465f      	mov	r7, fp
 800226a:	2610      	movs	r6, #16
 800226c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8002270:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002274:	e005      	b.n	8002282 <_vfprintf_r+0x1172>
 8002276:	f10a 0a08 	add.w	sl, sl, #8
 800227a:	3d10      	subs	r5, #16
 800227c:	2d10      	cmp	r5, #16
 800227e:	f340 815e 	ble.w	800253e <_vfprintf_r+0x142e>
 8002282:	3201      	adds	r2, #1
 8002284:	3410      	adds	r4, #16
 8002286:	2a07      	cmp	r2, #7
 8002288:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 800228c:	e9ca 7600 	strd	r7, r6, [sl]
 8002290:	ddf1      	ble.n	8002276 <_vfprintf_r+0x1166>
 8002292:	aa21      	add	r2, sp, #132	; 0x84
 8002294:	4641      	mov	r1, r8
 8002296:	4658      	mov	r0, fp
 8002298:	f003 fb68 	bl	800596c <__sprint_r>
 800229c:	2800      	cmp	r0, #0
 800229e:	f47f a860 	bne.w	8001362 <_vfprintf_r+0x252>
 80022a2:	e9dd 2422 	ldrd	r2, r4, [sp, #136]	; 0x88
 80022a6:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80022aa:	e7e6      	b.n	800227a <_vfprintf_r+0x116a>
 80022ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022ae:	f7fe fdc7 	bl	8000e40 <strlen>
 80022b2:	462e      	mov	r6, r5
 80022b4:	4603      	mov	r3, r0
 80022b6:	9007      	str	r0, [sp, #28]
 80022b8:	f7ff b8b1 	b.w	800141e <_vfprintf_r+0x30e>
 80022bc:	461c      	mov	r4, r3
 80022be:	f105 0801 	add.w	r8, r5, #1
 80022c2:	f106 0208 	add.w	r2, r6, #8
 80022c6:	443c      	add	r4, r7
 80022c8:	f1b8 0f07 	cmp.w	r8, #7
 80022cc:	9423      	str	r4, [sp, #140]	; 0x8c
 80022ce:	e9c6 b700 	strd	fp, r7, [r6]
 80022d2:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80022d6:	f73f aef5 	bgt.w	80020c4 <_vfprintf_r+0xfb4>
 80022da:	f108 0801 	add.w	r8, r8, #1
 80022de:	f102 0a08 	add.w	sl, r2, #8
 80022e2:	4616      	mov	r6, r2
 80022e4:	e442      	b.n	8001b6c <_vfprintf_r+0xa5c>
 80022e6:	bf00      	nop
 80022e8:	66666667 	.word	0x66666667
 80022ec:	0801caa8 	.word	0x0801caa8
 80022f0:	0801cab0 	.word	0x0801cab0
 80022f4:	0800d404 	.word	0x0800d404
 80022f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80022fa:	ab1c      	add	r3, sp, #112	; 0x70
 80022fc:	e9cd 3200 	strd	r3, r2, [sp]
 8002300:	2103      	movs	r1, #3
 8002302:	ab1b      	add	r3, sp, #108	; 0x6c
 8002304:	4632      	mov	r2, r6
 8002306:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 800230a:	9808      	ldr	r0, [sp, #32]
 800230c:	f000 faee 	bl	80028ec <_dtoa_r>
 8002310:	900a      	str	r0, [sp, #40]	; 0x28
 8002312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b30      	cmp	r3, #48	; 0x30
 8002318:	eb00 0406 	add.w	r4, r0, r6
 800231c:	d056      	beq.n	80023cc <_vfprintf_r+0x12bc>
 800231e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002320:	441c      	add	r4, r3
 8002322:	2200      	movs	r2, #0
 8002324:	2300      	movs	r3, #0
 8002326:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800232a:	f005 fa1d 	bl	8007768 <__aeabi_dcmpeq>
 800232e:	2800      	cmp	r0, #0
 8002330:	f000 808e 	beq.w	8002450 <_vfprintf_r+0x1340>
 8002334:	4623      	mov	r3, r4
 8002336:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	930e      	str	r3, [sp, #56]	; 0x38
 800233c:	2d47      	cmp	r5, #71	; 0x47
 800233e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002340:	930b      	str	r3, [sp, #44]	; 0x2c
 8002342:	f43f ae45 	beq.w	8001fd0 <_vfprintf_r+0xec0>
 8002346:	2f66      	cmp	r7, #102	; 0x66
 8002348:	f47f ae49 	bne.w	8001fde <_vfprintf_r+0xece>
 800234c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800234e:	f00b 0301 	and.w	r3, fp, #1
 8002352:	2a00      	cmp	r2, #0
 8002354:	ea43 0306 	orr.w	r3, r3, r6
 8002358:	f340 8136 	ble.w	80025c8 <_vfprintf_r+0x14b8>
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 8121 	bne.w	80025a4 <_vfprintf_r+0x1494>
 8002362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002364:	9303      	str	r3, [sp, #12]
 8002366:	9307      	str	r3, [sp, #28]
 8002368:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d07c      	beq.n	8002468 <_vfprintf_r+0x1358>
 800236e:	232d      	movs	r3, #45	; 0x2d
 8002370:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002374:	2600      	movs	r6, #0
 8002376:	f7ff b85f 	b.w	8001438 <_vfprintf_r+0x328>
 800237a:	3201      	adds	r2, #1
 800237c:	442c      	add	r4, r5
 800237e:	2a07      	cmp	r2, #7
 8002380:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 8002384:	e9ca b500 	strd	fp, r5, [sl]
 8002388:	dc3e      	bgt.n	8002408 <_vfprintf_r+0x12f8>
 800238a:	f10a 0a08 	add.w	sl, sl, #8
 800238e:	e4d3      	b.n	8001d38 <_vfprintf_r+0xc28>
 8002390:	f04f 082d 	mov.w	r8, #45	; 0x2d
 8002394:	f88d 8067 	strb.w	r8, [sp, #103]	; 0x67
 8002398:	f7ff b9be 	b.w	8001718 <_vfprintf_r+0x608>
 800239c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80023a0:	9317      	str	r3, [sp, #92]	; 0x5c
 80023a2:	232d      	movs	r3, #45	; 0x2d
 80023a4:	9016      	str	r0, [sp, #88]	; 0x58
 80023a6:	9313      	str	r3, [sp, #76]	; 0x4c
 80023a8:	e5eb      	b.n	8001f82 <_vfprintf_r+0xe72>
 80023aa:	aa21      	add	r2, sp, #132	; 0x84
 80023ac:	9904      	ldr	r1, [sp, #16]
 80023ae:	9808      	ldr	r0, [sp, #32]
 80023b0:	f003 fadc 	bl	800596c <__sprint_r>
 80023b4:	2800      	cmp	r0, #0
 80023b6:	f47e afd4 	bne.w	8001362 <_vfprintf_r+0x252>
 80023ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80023bc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80023be:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80023c2:	e4ce      	b.n	8001d62 <_vfprintf_r+0xc52>
 80023c4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 80023c8:	f7ff ba26 	b.w	8001818 <_vfprintf_r+0x708>
 80023cc:	2200      	movs	r2, #0
 80023ce:	2300      	movs	r3, #0
 80023d0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 80023d4:	f005 f9c8 	bl	8007768 <__aeabi_dcmpeq>
 80023d8:	2800      	cmp	r0, #0
 80023da:	d1a0      	bne.n	800231e <_vfprintf_r+0x120e>
 80023dc:	f1c6 0301 	rsb	r3, r6, #1
 80023e0:	931b      	str	r3, [sp, #108]	; 0x6c
 80023e2:	e79d      	b.n	8002320 <_vfprintf_r+0x1210>
 80023e4:	2e00      	cmp	r6, #0
 80023e6:	bf08      	it	eq
 80023e8:	2601      	moveq	r6, #1
 80023ea:	e5bc      	b.n	8001f66 <_vfprintf_r+0xe56>
 80023ec:	aa21      	add	r2, sp, #132	; 0x84
 80023ee:	9904      	ldr	r1, [sp, #16]
 80023f0:	9808      	ldr	r0, [sp, #32]
 80023f2:	f003 fabb 	bl	800596c <__sprint_r>
 80023f6:	2800      	cmp	r0, #0
 80023f8:	f47e afb3 	bne.w	8001362 <_vfprintf_r+0x252>
 80023fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80023fe:	e9dd 2422 	ldrd	r2, r4, [sp, #136]	; 0x88
 8002402:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 8002406:	e726      	b.n	8002256 <_vfprintf_r+0x1146>
 8002408:	aa21      	add	r2, sp, #132	; 0x84
 800240a:	9904      	ldr	r1, [sp, #16]
 800240c:	9808      	ldr	r0, [sp, #32]
 800240e:	f003 faad 	bl	800596c <__sprint_r>
 8002412:	2800      	cmp	r0, #0
 8002414:	f47e afa5 	bne.w	8001362 <_vfprintf_r+0x252>
 8002418:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800241a:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 800241e:	e48b      	b.n	8001d38 <_vfprintf_r+0xc28>
 8002420:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002424:	f7ff b891 	b.w	800154a <_vfprintf_r+0x43a>
 8002428:	a91f      	add	r1, sp, #124	; 0x7c
 800242a:	ab1c      	add	r3, sp, #112	; 0x70
 800242c:	1c74      	adds	r4, r6, #1
 800242e:	e9cd 3100 	strd	r3, r1, [sp]
 8002432:	4622      	mov	r2, r4
 8002434:	ab1b      	add	r3, sp, #108	; 0x6c
 8002436:	2102      	movs	r1, #2
 8002438:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 800243c:	9808      	ldr	r0, [sp, #32]
 800243e:	f000 fa55 	bl	80028ec <_dtoa_r>
 8002442:	900a      	str	r0, [sp, #40]	; 0x28
 8002444:	2f47      	cmp	r7, #71	; 0x47
 8002446:	f43f adb6 	beq.w	8001fb6 <_vfprintf_r+0xea6>
 800244a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800244c:	441c      	add	r4, r3
 800244e:	e768      	b.n	8002322 <_vfprintf_r+0x1212>
 8002450:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002452:	42a3      	cmp	r3, r4
 8002454:	f4bf af6f 	bcs.w	8002336 <_vfprintf_r+0x1226>
 8002458:	2130      	movs	r1, #48	; 0x30
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	921f      	str	r2, [sp, #124]	; 0x7c
 800245e:	7019      	strb	r1, [r3, #0]
 8002460:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002462:	429c      	cmp	r4, r3
 8002464:	d8f9      	bhi.n	800245a <_vfprintf_r+0x134a>
 8002466:	e766      	b.n	8002336 <_vfprintf_r+0x1226>
 8002468:	f89d 8067 	ldrb.w	r8, [sp, #103]	; 0x67
 800246c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800246e:	f7fe bfdf 	b.w	8001430 <_vfprintf_r+0x320>
 8002472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002474:	4619      	mov	r1, r3
 8002476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002478:	4299      	cmp	r1, r3
 800247a:	dc30      	bgt.n	80024de <_vfprintf_r+0x13ce>
 800247c:	f01b 0f01 	tst.w	fp, #1
 8002480:	d17e      	bne.n	8002580 <_vfprintf_r+0x1470>
 8002482:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8002486:	9203      	str	r2, [sp, #12]
 8002488:	9307      	str	r3, [sp, #28]
 800248a:	2767      	movs	r7, #103	; 0x67
 800248c:	e76c      	b.n	8002368 <_vfprintf_r+0x1258>
 800248e:	aa21      	add	r2, sp, #132	; 0x84
 8002490:	9904      	ldr	r1, [sp, #16]
 8002492:	9808      	ldr	r0, [sp, #32]
 8002494:	f003 fa6a 	bl	800596c <__sprint_r>
 8002498:	2800      	cmp	r0, #0
 800249a:	f47e af62 	bne.w	8001362 <_vfprintf_r+0x252>
 800249e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80024a0:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80024a4:	e440      	b.n	8001d28 <_vfprintf_r+0xc18>
 80024a6:	2606      	movs	r6, #6
 80024a8:	e55d      	b.n	8001f66 <_vfprintf_r+0xe56>
 80024aa:	aa21      	add	r2, sp, #132	; 0x84
 80024ac:	9904      	ldr	r1, [sp, #16]
 80024ae:	9808      	ldr	r0, [sp, #32]
 80024b0:	f003 fa5c 	bl	800596c <__sprint_r>
 80024b4:	2800      	cmp	r0, #0
 80024b6:	f47e af54 	bne.w	8001362 <_vfprintf_r+0x252>
 80024ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80024bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024be:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 80024c6:	e467      	b.n	8001d98 <_vfprintf_r+0xc88>
 80024c8:	9603      	str	r6, [sp, #12]
 80024ca:	9607      	str	r6, [sp, #28]
 80024cc:	9409      	str	r4, [sp, #36]	; 0x24
 80024ce:	4606      	mov	r6, r0
 80024d0:	f8cd b008 	str.w	fp, [sp, #8]
 80024d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80024d6:	f89d 8067 	ldrb.w	r8, [sp, #103]	; 0x67
 80024da:	f7fe bfa9 	b.w	8001430 <_vfprintf_r+0x320>
 80024de:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80024e2:	4413      	add	r3, r2
 80024e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80024e6:	9307      	str	r3, [sp, #28]
 80024e8:	2a00      	cmp	r2, #0
 80024ea:	dc06      	bgt.n	80024fa <_vfprintf_r+0x13ea>
 80024ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80024ee:	9a07      	ldr	r2, [sp, #28]
 80024f0:	f1c3 0301 	rsb	r3, r3, #1
 80024f4:	441a      	add	r2, r3
 80024f6:	4613      	mov	r3, r2
 80024f8:	9207      	str	r2, [sp, #28]
 80024fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80024fe:	9303      	str	r3, [sp, #12]
 8002500:	2767      	movs	r7, #103	; 0x67
 8002502:	e731      	b.n	8002368 <_vfprintf_r+0x1258>
 8002504:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002508:	f7fe bf4b 	b.w	80013a2 <_vfprintf_r+0x292>
 800250c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002510:	f7ff b8d3 	b.w	80016ba <_vfprintf_r+0x5aa>
 8002514:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002518:	f7fe bfca 	b.w	80014b0 <_vfprintf_r+0x3a0>
 800251c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002520:	f7ff b917 	b.w	8001752 <_vfprintf_r+0x642>
 8002524:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002528:	f7fe bfea 	b.w	8001500 <_vfprintf_r+0x3f0>
 800252c:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
 8002530:	f7ff b8a6 	b.w	8001680 <_vfprintf_r+0x570>
 8002534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002538:	9305      	str	r3, [sp, #20]
 800253a:	f7fe bf17 	b.w	800136c <_vfprintf_r+0x25c>
 800253e:	46bb      	mov	fp, r7
 8002540:	3201      	adds	r2, #1
 8002542:	442c      	add	r4, r5
 8002544:	2a07      	cmp	r2, #7
 8002546:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 800254a:	e9ca b500 	strd	fp, r5, [sl]
 800254e:	f77f aaaf 	ble.w	8001ab0 <_vfprintf_r+0x9a0>
 8002552:	aa21      	add	r2, sp, #132	; 0x84
 8002554:	9904      	ldr	r1, [sp, #16]
 8002556:	9808      	ldr	r0, [sp, #32]
 8002558:	f003 fa08 	bl	800596c <__sprint_r>
 800255c:	2800      	cmp	r0, #0
 800255e:	f47e af00 	bne.w	8001362 <_vfprintf_r+0x252>
 8002562:	e9dd 2422 	ldrd	r2, r4, [sp, #136]	; 0x88
 8002566:	f10d 0ab8 	add.w	sl, sp, #184	; 0xb8
 800256a:	f7ff baa3 	b.w	8001ab4 <_vfprintf_r+0x9a4>
 800256e:	2330      	movs	r3, #48	; 0x30
 8002570:	3230      	adds	r2, #48	; 0x30
 8002572:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
 8002576:	2304      	movs	r3, #4
 8002578:	f88d 2077 	strb.w	r2, [sp, #119]	; 0x77
 800257c:	9312      	str	r3, [sp, #72]	; 0x48
 800257e:	e56f      	b.n	8002060 <_vfprintf_r+0xf50>
 8002580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002584:	4413      	add	r3, r2
 8002586:	9307      	str	r3, [sp, #28]
 8002588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800258c:	9303      	str	r3, [sp, #12]
 800258e:	2767      	movs	r7, #103	; 0x67
 8002590:	e6ea      	b.n	8002368 <_vfprintf_r+0x1258>
 8002592:	f01b 0201 	ands.w	r2, fp, #1
 8002596:	920b      	str	r2, [sp, #44]	; 0x2c
 8002598:	f47f ad69 	bne.w	800206e <_vfprintf_r+0xf5e>
 800259c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025a0:	9303      	str	r3, [sp, #12]
 80025a2:	e6e1      	b.n	8002368 <_vfprintf_r+0x1258>
 80025a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025a6:	18d3      	adds	r3, r2, r3
 80025a8:	4433      	add	r3, r6
 80025aa:	9307      	str	r3, [sp, #28]
 80025ac:	e7f6      	b.n	800259c <_vfprintf_r+0x148c>
 80025ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <_vfprintf_r+0x14f4>)
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bfb6      	itet	lt
 80025b6:	f04f 082d 	movlt.w	r8, #45	; 0x2d
 80025ba:	f89d 8067 	ldrbge.w	r8, [sp, #103]	; 0x67
 80025be:	f88d 8067 	strblt.w	r8, [sp, #103]	; 0x67
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <_vfprintf_r+0x14f8>)
 80025c4:	f7ff b8aa 	b.w	800171c <_vfprintf_r+0x60c>
 80025c8:	b91b      	cbnz	r3, 80025d2 <_vfprintf_r+0x14c2>
 80025ca:	2301      	movs	r3, #1
 80025cc:	9303      	str	r3, [sp, #12]
 80025ce:	9307      	str	r3, [sp, #28]
 80025d0:	e6ca      	b.n	8002368 <_vfprintf_r+0x1258>
 80025d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025d4:	3301      	adds	r3, #1
 80025d6:	4433      	add	r3, r6
 80025d8:	9307      	str	r3, [sp, #28]
 80025da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80025de:	9303      	str	r3, [sp, #12]
 80025e0:	e6c2      	b.n	8002368 <_vfprintf_r+0x1258>
 80025e2:	4652      	mov	r2, sl
 80025e4:	e66f      	b.n	80022c6 <_vfprintf_r+0x11b6>
 80025e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e8:	f899 7001 	ldrb.w	r7, [r9, #1]
 80025ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80025f0:	9309      	str	r3, [sp, #36]	; 0x24
 80025f2:	4681      	mov	r9, r0
 80025f4:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80025f8:	f7fe be02 	b.w	8001200 <_vfprintf_r+0xf0>
 80025fc:	2302      	movs	r3, #2
 80025fe:	9312      	str	r3, [sp, #72]	; 0x48
 8002600:	e52e      	b.n	8002060 <_vfprintf_r+0xf50>
 8002602:	bf00      	nop
 8002604:	0801ca78 	.word	0x0801ca78
 8002608:	0801ca7c 	.word	0x0801ca7c

0800260c <vfprintf>:
 800260c:	b410      	push	{r4}
 800260e:	4c04      	ldr	r4, [pc, #16]	; (8002620 <vfprintf+0x14>)
 8002610:	4613      	mov	r3, r2
 8002612:	460a      	mov	r2, r1
 8002614:	4601      	mov	r1, r0
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800261c:	f7fe bd78 	b.w	8001110 <_vfprintf_r>
 8002620:	20000078 	.word	0x20000078

08002624 <__sbprintf>:
 8002624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002626:	460c      	mov	r4, r1
 8002628:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800262c:	8989      	ldrh	r1, [r1, #12]
 800262e:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8002630:	89e5      	ldrh	r5, [r4, #14]
 8002632:	9619      	str	r6, [sp, #100]	; 0x64
 8002634:	f021 0102 	bic.w	r1, r1, #2
 8002638:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800263a:	f8ad 500e 	strh.w	r5, [sp, #14]
 800263e:	2500      	movs	r5, #0
 8002640:	69e7      	ldr	r7, [r4, #28]
 8002642:	f8ad 100c 	strh.w	r1, [sp, #12]
 8002646:	9609      	str	r6, [sp, #36]	; 0x24
 8002648:	9506      	str	r5, [sp, #24]
 800264a:	ae1a      	add	r6, sp, #104	; 0x68
 800264c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8002650:	4669      	mov	r1, sp
 8002652:	9600      	str	r6, [sp, #0]
 8002654:	9604      	str	r6, [sp, #16]
 8002656:	9502      	str	r5, [sp, #8]
 8002658:	9505      	str	r5, [sp, #20]
 800265a:	9707      	str	r7, [sp, #28]
 800265c:	4606      	mov	r6, r0
 800265e:	f7fe fd57 	bl	8001110 <_vfprintf_r>
 8002662:	1e05      	subs	r5, r0, #0
 8002664:	db07      	blt.n	8002676 <__sbprintf+0x52>
 8002666:	4630      	mov	r0, r6
 8002668:	4669      	mov	r1, sp
 800266a:	f001 f933 	bl	80038d4 <_fflush_r>
 800266e:	2800      	cmp	r0, #0
 8002670:	bf18      	it	ne
 8002672:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8002676:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800267a:	065b      	lsls	r3, r3, #25
 800267c:	d503      	bpl.n	8002686 <__sbprintf+0x62>
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002684:	81a3      	strh	r3, [r4, #12]
 8002686:	4628      	mov	r0, r5
 8002688:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800268c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268e:	bf00      	nop

08002690 <__swsetup_r>:
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <__swsetup_r+0xcc>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4605      	mov	r5, r0
 8002698:	460c      	mov	r4, r1
 800269a:	b10b      	cbz	r3, 80026a0 <__swsetup_r+0x10>
 800269c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800269e:	b312      	cbz	r2, 80026e6 <__swsetup_r+0x56>
 80026a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026a4:	b293      	uxth	r3, r2
 80026a6:	0718      	lsls	r0, r3, #28
 80026a8:	d525      	bpl.n	80026f6 <__swsetup_r+0x66>
 80026aa:	6920      	ldr	r0, [r4, #16]
 80026ac:	2800      	cmp	r0, #0
 80026ae:	d02d      	beq.n	800270c <__swsetup_r+0x7c>
 80026b0:	f013 0201 	ands.w	r2, r3, #1
 80026b4:	d007      	beq.n	80026c6 <__swsetup_r+0x36>
 80026b6:	6963      	ldr	r3, [r4, #20]
 80026b8:	2200      	movs	r2, #0
 80026ba:	425b      	negs	r3, r3
 80026bc:	61a3      	str	r3, [r4, #24]
 80026be:	60a2      	str	r2, [r4, #8]
 80026c0:	b138      	cbz	r0, 80026d2 <__swsetup_r+0x42>
 80026c2:	2000      	movs	r0, #0
 80026c4:	bd38      	pop	{r3, r4, r5, pc}
 80026c6:	0799      	lsls	r1, r3, #30
 80026c8:	bf58      	it	pl
 80026ca:	6962      	ldrpl	r2, [r4, #20]
 80026cc:	60a2      	str	r2, [r4, #8]
 80026ce:	2800      	cmp	r0, #0
 80026d0:	d1f7      	bne.n	80026c2 <__swsetup_r+0x32>
 80026d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026d6:	061a      	lsls	r2, r3, #24
 80026d8:	d5f4      	bpl.n	80026c4 <__swsetup_r+0x34>
 80026da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026de:	81a3      	strh	r3, [r4, #12]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e4:	bd38      	pop	{r3, r4, r5, pc}
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f9fa 	bl	8003ae0 <__sinit>
 80026ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026f0:	b293      	uxth	r3, r2
 80026f2:	0718      	lsls	r0, r3, #28
 80026f4:	d4d9      	bmi.n	80026aa <__swsetup_r+0x1a>
 80026f6:	06d9      	lsls	r1, r3, #27
 80026f8:	d528      	bpl.n	800274c <__swsetup_r+0xbc>
 80026fa:	0758      	lsls	r0, r3, #29
 80026fc:	d412      	bmi.n	8002724 <__swsetup_r+0x94>
 80026fe:	6920      	ldr	r0, [r4, #16]
 8002700:	f042 0308 	orr.w	r3, r2, #8
 8002704:	81a3      	strh	r3, [r4, #12]
 8002706:	b29b      	uxth	r3, r3
 8002708:	2800      	cmp	r0, #0
 800270a:	d1d1      	bne.n	80026b0 <__swsetup_r+0x20>
 800270c:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8002710:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002714:	d0cc      	beq.n	80026b0 <__swsetup_r+0x20>
 8002716:	4628      	mov	r0, r5
 8002718:	4621      	mov	r1, r4
 800271a:	f001 fd57 	bl	80041cc <__smakebuf_r>
 800271e:	89a3      	ldrh	r3, [r4, #12]
 8002720:	6920      	ldr	r0, [r4, #16]
 8002722:	e7c5      	b.n	80026b0 <__swsetup_r+0x20>
 8002724:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002726:	b151      	cbz	r1, 800273e <__swsetup_r+0xae>
 8002728:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800272c:	4299      	cmp	r1, r3
 800272e:	d004      	beq.n	800273a <__swsetup_r+0xaa>
 8002730:	4628      	mov	r0, r5
 8002732:	f001 fa45 	bl	8003bc0 <_free_r>
 8002736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800273a:	2300      	movs	r3, #0
 800273c:	6323      	str	r3, [r4, #48]	; 0x30
 800273e:	2300      	movs	r3, #0
 8002740:	6920      	ldr	r0, [r4, #16]
 8002742:	6063      	str	r3, [r4, #4]
 8002744:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8002748:	6020      	str	r0, [r4, #0]
 800274a:	e7d9      	b.n	8002700 <__swsetup_r+0x70>
 800274c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002750:	2309      	movs	r3, #9
 8002752:	602b      	str	r3, [r5, #0]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002758:	81a2      	strh	r2, [r4, #12]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	20000078 	.word	0x20000078

08002760 <__register_exitproc>:
 8002760:	b4f0      	push	{r4, r5, r6, r7}
 8002762:	4c18      	ldr	r4, [pc, #96]	; (80027c4 <__register_exitproc+0x64>)
 8002764:	6825      	ldr	r5, [r4, #0]
 8002766:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 800276a:	b314      	cbz	r4, 80027b2 <__register_exitproc+0x52>
 800276c:	6865      	ldr	r5, [r4, #4]
 800276e:	2d1f      	cmp	r5, #31
 8002770:	dc24      	bgt.n	80027bc <__register_exitproc+0x5c>
 8002772:	b938      	cbnz	r0, 8002784 <__register_exitproc+0x24>
 8002774:	1cab      	adds	r3, r5, #2
 8002776:	3501      	adds	r5, #1
 8002778:	6065      	str	r5, [r4, #4]
 800277a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800277e:	2000      	movs	r0, #0
 8002780:	bcf0      	pop	{r4, r5, r6, r7}
 8002782:	4770      	bx	lr
 8002784:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8002788:	2701      	movs	r7, #1
 800278a:	f8c6 2088 	str.w	r2, [r6, #136]	; 0x88
 800278e:	fa07 f205 	lsl.w	r2, r7, r5
 8002792:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8002796:	2802      	cmp	r0, #2
 8002798:	ea47 0702 	orr.w	r7, r7, r2
 800279c:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80027a0:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
 80027a4:	d1e6      	bne.n	8002774 <__register_exitproc+0x14>
 80027a6:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 80027aa:	431a      	orrs	r2, r3
 80027ac:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80027b0:	e7e0      	b.n	8002774 <__register_exitproc+0x14>
 80027b2:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80027b6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80027ba:	e7d7      	b.n	800276c <__register_exitproc+0xc>
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c0:	e7de      	b.n	8002780 <__register_exitproc+0x20>
 80027c2:	bf00      	nop
 80027c4:	0800d3f0 	.word	0x0800d3f0

080027c8 <quorem>:
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	6903      	ldr	r3, [r0, #16]
 80027ce:	690f      	ldr	r7, [r1, #16]
 80027d0:	42bb      	cmp	r3, r7
 80027d2:	b083      	sub	sp, #12
 80027d4:	f2c0 8086 	blt.w	80028e4 <quorem+0x11c>
 80027d8:	3f01      	subs	r7, #1
 80027da:	f101 0614 	add.w	r6, r1, #20
 80027de:	f100 0a14 	add.w	sl, r0, #20
 80027e2:	f856 3027 	ldr.w	r3, [r6, r7, lsl #2]
 80027e6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 80027ea:	00bc      	lsls	r4, r7, #2
 80027ec:	3301      	adds	r3, #1
 80027ee:	9400      	str	r4, [sp, #0]
 80027f0:	eb06 0904 	add.w	r9, r6, r4
 80027f4:	429a      	cmp	r2, r3
 80027f6:	4454      	add	r4, sl
 80027f8:	fbb2 f8f3 	udiv	r8, r2, r3
 80027fc:	9401      	str	r4, [sp, #4]
 80027fe:	d33a      	bcc.n	8002876 <quorem+0xae>
 8002800:	2500      	movs	r5, #0
 8002802:	462a      	mov	r2, r5
 8002804:	46b6      	mov	lr, r6
 8002806:	46d4      	mov	ip, sl
 8002808:	f85e 4b04 	ldr.w	r4, [lr], #4
 800280c:	f8dc 3000 	ldr.w	r3, [ip]
 8002810:	fa1f fb84 	uxth.w	fp, r4
 8002814:	fb08 550b 	mla	r5, r8, fp, r5
 8002818:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 800281c:	0c24      	lsrs	r4, r4, #16
 800281e:	fb08 b404 	mla	r4, r8, r4, fp
 8002822:	b2ad      	uxth	r5, r5
 8002824:	1b55      	subs	r5, r2, r5
 8002826:	b2a2      	uxth	r2, r4
 8002828:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800282c:	fa15 f383 	uxtah	r3, r5, r3
 8002830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002834:	b29b      	uxth	r3, r3
 8002836:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800283a:	45f1      	cmp	r9, lr
 800283c:	ea4f 4514 	mov.w	r5, r4, lsr #16
 8002840:	f84c 3b04 	str.w	r3, [ip], #4
 8002844:	ea4f 4222 	mov.w	r2, r2, asr #16
 8002848:	d2de      	bcs.n	8002808 <quorem+0x40>
 800284a:	9b00      	ldr	r3, [sp, #0]
 800284c:	f85a 3003 	ldr.w	r3, [sl, r3]
 8002850:	b98b      	cbnz	r3, 8002876 <quorem+0xae>
 8002852:	9a01      	ldr	r2, [sp, #4]
 8002854:	1f13      	subs	r3, r2, #4
 8002856:	459a      	cmp	sl, r3
 8002858:	d20c      	bcs.n	8002874 <quorem+0xac>
 800285a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800285e:	b94b      	cbnz	r3, 8002874 <quorem+0xac>
 8002860:	f1a2 0308 	sub.w	r3, r2, #8
 8002864:	e002      	b.n	800286c <quorem+0xa4>
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	3b04      	subs	r3, #4
 800286a:	b91a      	cbnz	r2, 8002874 <quorem+0xac>
 800286c:	459a      	cmp	sl, r3
 800286e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002872:	d3f8      	bcc.n	8002866 <quorem+0x9e>
 8002874:	6107      	str	r7, [r0, #16]
 8002876:	4604      	mov	r4, r0
 8002878:	f002 fba6 	bl	8004fc8 <__mcmp>
 800287c:	2800      	cmp	r0, #0
 800287e:	db2d      	blt.n	80028dc <quorem+0x114>
 8002880:	f108 0801 	add.w	r8, r8, #1
 8002884:	4650      	mov	r0, sl
 8002886:	2300      	movs	r3, #0
 8002888:	f856 1b04 	ldr.w	r1, [r6], #4
 800288c:	6805      	ldr	r5, [r0, #0]
 800288e:	b28a      	uxth	r2, r1
 8002890:	1a9a      	subs	r2, r3, r2
 8002892:	0c0b      	lsrs	r3, r1, #16
 8002894:	fa12 f285 	uxtah	r2, r2, r5
 8002898:	ebc3 4315 	rsb	r3, r3, r5, lsr #16
 800289c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80028a0:	b292      	uxth	r2, r2
 80028a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80028a6:	45b1      	cmp	r9, r6
 80028a8:	f840 2b04 	str.w	r2, [r0], #4
 80028ac:	ea4f 4323 	mov.w	r3, r3, asr #16
 80028b0:	d2ea      	bcs.n	8002888 <quorem+0xc0>
 80028b2:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 80028b6:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 80028ba:	b97a      	cbnz	r2, 80028dc <quorem+0x114>
 80028bc:	1f1a      	subs	r2, r3, #4
 80028be:	4592      	cmp	sl, r2
 80028c0:	d20b      	bcs.n	80028da <quorem+0x112>
 80028c2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80028c6:	b942      	cbnz	r2, 80028da <quorem+0x112>
 80028c8:	3b08      	subs	r3, #8
 80028ca:	e002      	b.n	80028d2 <quorem+0x10a>
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	3b04      	subs	r3, #4
 80028d0:	b91a      	cbnz	r2, 80028da <quorem+0x112>
 80028d2:	459a      	cmp	sl, r3
 80028d4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 80028d8:	d3f8      	bcc.n	80028cc <quorem+0x104>
 80028da:	6127      	str	r7, [r4, #16]
 80028dc:	4640      	mov	r0, r8
 80028de:	b003      	add	sp, #12
 80028e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e4:	2000      	movs	r0, #0
 80028e6:	b003      	add	sp, #12
 80028e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080028ec <_dtoa_r>:
 80028ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f0:	ec57 6b10 	vmov	r6, r7, d0
 80028f4:	b097      	sub	sp, #92	; 0x5c
 80028f6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80028f8:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80028fa:	9103      	str	r1, [sp, #12]
 80028fc:	4682      	mov	sl, r0
 80028fe:	920a      	str	r2, [sp, #40]	; 0x28
 8002900:	9307      	str	r3, [sp, #28]
 8002902:	e9cd 6700 	strd	r6, r7, [sp]
 8002906:	b155      	cbz	r5, 800291e <_dtoa_r+0x32>
 8002908:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800290a:	606a      	str	r2, [r5, #4]
 800290c:	2301      	movs	r3, #1
 800290e:	4093      	lsls	r3, r2
 8002910:	60ab      	str	r3, [r5, #8]
 8002912:	4629      	mov	r1, r5
 8002914:	f002 f8e8 	bl	8004ae8 <_Bfree>
 8002918:	2300      	movs	r3, #0
 800291a:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 800291e:	1e3e      	subs	r6, r7, #0
 8002920:	bfb4      	ite	lt
 8002922:	2301      	movlt	r3, #1
 8002924:	2300      	movge	r3, #0
 8002926:	6023      	str	r3, [r4, #0]
 8002928:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <_dtoa_r+0x214>)
 800292a:	bfbc      	itt	lt
 800292c:	f026 4600 	biclt.w	r6, r6, #2147483648	; 0x80000000
 8002930:	9601      	strlt	r6, [sp, #4]
 8002932:	43b3      	bics	r3, r6
 8002934:	f000 80ae 	beq.w	8002a94 <_dtoa_r+0x1a8>
 8002938:	ed9d 7b00 	vldr	d7, [sp]
 800293c:	2200      	movs	r2, #0
 800293e:	2300      	movs	r3, #0
 8002940:	ec51 0b17 	vmov	r0, r1, d7
 8002944:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002948:	f004 ff0e 	bl	8007768 <__aeabi_dcmpeq>
 800294c:	4605      	mov	r5, r0
 800294e:	b178      	cbz	r0, 8002970 <_dtoa_r+0x84>
 8002950:	9a07      	ldr	r2, [sp, #28]
 8002952:	2301      	movs	r3, #1
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8310 	beq.w	8002f7e <_dtoa_r+0x692>
 800295e:	4b69      	ldr	r3, [pc, #420]	; (8002b04 <_dtoa_r+0x218>)
 8002960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	9302      	str	r3, [sp, #8]
 8002968:	9802      	ldr	r0, [sp, #8]
 800296a:	b017      	add	sp, #92	; 0x5c
 800296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002970:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
 8002974:	aa14      	add	r2, sp, #80	; 0x50
 8002976:	a915      	add	r1, sp, #84	; 0x54
 8002978:	ec48 7b10 	vmov	d0, r7, r8
 800297c:	4650      	mov	r0, sl
 800297e:	f002 fc57 	bl	8005230 <__d2b>
 8002982:	0d34      	lsrs	r4, r6, #20
 8002984:	4683      	mov	fp, r0
 8002986:	f040 809b 	bne.w	8002ac0 <_dtoa_r+0x1d4>
 800298a:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	; 0x50
 800298e:	442c      	add	r4, r5
 8002990:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002994:	2b20      	cmp	r3, #32
 8002996:	f340 83ba 	ble.w	800310e <_dtoa_r+0x822>
 800299a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800299e:	409e      	lsls	r6, r3
 80029a0:	9b00      	ldr	r3, [sp, #0]
 80029a2:	f204 4012 	addw	r0, r4, #1042	; 0x412
 80029a6:	fa23 f000 	lsr.w	r0, r3, r0
 80029aa:	4330      	orrs	r0, r6
 80029ac:	f004 fbfa 	bl	80071a4 <__aeabi_ui2d>
 80029b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80029b4:	2101      	movs	r1, #1
 80029b6:	4602      	mov	r2, r0
 80029b8:	3c01      	subs	r4, #1
 80029ba:	910e      	str	r1, [sp, #56]	; 0x38
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	2200      	movs	r2, #0
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <_dtoa_r+0x21c>)
 80029c4:	f004 fab0 	bl	8006f28 <__aeabi_dsub>
 80029c8:	a347      	add	r3, pc, #284	; (adr r3, 8002ae8 <_dtoa_r+0x1fc>)
 80029ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ce:	f004 fc63 	bl	8007298 <__aeabi_dmul>
 80029d2:	a347      	add	r3, pc, #284	; (adr r3, 8002af0 <_dtoa_r+0x204>)
 80029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d8:	f004 faa8 	bl	8006f2c <__adddf3>
 80029dc:	4606      	mov	r6, r0
 80029de:	4620      	mov	r0, r4
 80029e0:	460f      	mov	r7, r1
 80029e2:	f004 fbef 	bl	80071c4 <__aeabi_i2d>
 80029e6:	a344      	add	r3, pc, #272	; (adr r3, 8002af8 <_dtoa_r+0x20c>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f004 fc54 	bl	8007298 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4630      	mov	r0, r6
 80029f6:	4639      	mov	r1, r7
 80029f8:	f004 fa98 	bl	8006f2c <__adddf3>
 80029fc:	4606      	mov	r6, r0
 80029fe:	460f      	mov	r7, r1
 8002a00:	f004 fefa 	bl	80077f8 <__aeabi_d2iz>
 8002a04:	2200      	movs	r2, #0
 8002a06:	4681      	mov	r9, r0
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	f004 feb5 	bl	800777c <__aeabi_dcmplt>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	f040 82a6 	bne.w	8002f64 <_dtoa_r+0x678>
 8002a18:	1b2c      	subs	r4, r5, r4
 8002a1a:	f1b9 0f16 	cmp.w	r9, #22
 8002a1e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 8002a22:	f200 8293 	bhi.w	8002f4c <_dtoa_r+0x660>
 8002a26:	4b39      	ldr	r3, [pc, #228]	; (8002b0c <_dtoa_r+0x220>)
 8002a28:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002a34:	f004 fea2 	bl	800777c <__aeabi_dcmplt>
 8002a38:	2800      	cmp	r0, #0
 8002a3a:	d06d      	beq.n	8002b18 <_dtoa_r+0x22c>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f1b8 0f00 	cmp.w	r8, #0
 8002a42:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002a46:	930d      	str	r3, [sp, #52]	; 0x34
 8002a48:	f2c0 8286 	blt.w	8002f58 <_dtoa_r+0x66c>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a50:	f1b9 0f00 	cmp.w	r9, #0
 8002a54:	da66      	bge.n	8002b24 <_dtoa_r+0x238>
 8002a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a58:	f8cd 9018 	str.w	r9, [sp, #24]
 8002a5c:	eba3 0309 	sub.w	r3, r3, r9
 8002a60:	9309      	str	r3, [sp, #36]	; 0x24
 8002a62:	f1c9 0300 	rsb	r3, r9, #0
 8002a66:	930c      	str	r3, [sp, #48]	; 0x30
 8002a68:	9b03      	ldr	r3, [sp, #12]
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	f04f 0900 	mov.w	r9, #0
 8002a70:	d860      	bhi.n	8002b34 <_dtoa_r+0x248>
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	f340 8349 	ble.w	800310a <_dtoa_r+0x81e>
 8002a78:	3b04      	subs	r3, #4
 8002a7a:	9303      	str	r3, [sp, #12]
 8002a7c:	2400      	movs	r4, #0
 8002a7e:	9b03      	ldr	r3, [sp, #12]
 8002a80:	3b02      	subs	r3, #2
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	f200 8651 	bhi.w	800372a <_dtoa_r+0xe3e>
 8002a88:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002a8c:	04650468 	.word	0x04650468
 8002a90:	0458043e 	.word	0x0458043e
 8002a94:	9a07      	ldr	r2, [sp, #28]
 8002a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	9b00      	ldr	r3, [sp, #0]
 8002a9e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8002aa2:	4333      	orrs	r3, r6
 8002aa4:	d118      	bne.n	8002ad8 <_dtoa_r+0x1ec>
 8002aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8635 	beq.w	8003718 <_dtoa_r+0xe2c>
 8002aae:	4b18      	ldr	r3, [pc, #96]	; (8002b10 <_dtoa_r+0x224>)
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002ab6:	9802      	ldr	r0, [sp, #8]
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	b017      	add	sp, #92	; 0x5c
 8002abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac0:	f3c8 0113 	ubfx	r1, r8, #0, #20
 8002ac4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8002ac8:	950e      	str	r5, [sp, #56]	; 0x38
 8002aca:	463a      	mov	r2, r7
 8002acc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002ad0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002ad4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8002ad6:	e771      	b.n	80029bc <_dtoa_r+0xd0>
 8002ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8403 	bne.w	80032e6 <_dtoa_r+0x9fa>
 8002ae0:	4b0c      	ldr	r3, [pc, #48]	; (8002b14 <_dtoa_r+0x228>)
 8002ae2:	9302      	str	r3, [sp, #8]
 8002ae4:	e740      	b.n	8002968 <_dtoa_r+0x7c>
 8002ae6:	bf00      	nop
 8002ae8:	636f4361 	.word	0x636f4361
 8002aec:	3fd287a7 	.word	0x3fd287a7
 8002af0:	8b60c8b3 	.word	0x8b60c8b3
 8002af4:	3fc68a28 	.word	0x3fc68a28
 8002af8:	509f79fb 	.word	0x509f79fb
 8002afc:	3fd34413 	.word	0x3fd34413
 8002b00:	7ff00000 	.word	0x7ff00000
 8002b04:	0801cab1 	.word	0x0801cab1
 8002b08:	3ff80000 	.word	0x3ff80000
 8002b0c:	0800d428 	.word	0x0800d428
 8002b10:	0801cab8 	.word	0x0801cab8
 8002b14:	0801cab4 	.word	0x0801cab4
 8002b18:	f1b8 0f00 	cmp.w	r8, #0
 8002b1c:	f2c0 84be 	blt.w	800349c <_dtoa_r+0xbb0>
 8002b20:	900d      	str	r0, [sp, #52]	; 0x34
 8002b22:	9009      	str	r0, [sp, #36]	; 0x24
 8002b24:	2300      	movs	r3, #0
 8002b26:	930c      	str	r3, [sp, #48]	; 0x30
 8002b28:	9b03      	ldr	r3, [sp, #12]
 8002b2a:	f8cd 9018 	str.w	r9, [sp, #24]
 8002b2e:	2b09      	cmp	r3, #9
 8002b30:	44c8      	add	r8, r9
 8002b32:	d99e      	bls.n	8002a72 <_dtoa_r+0x186>
 8002b34:	2300      	movs	r3, #0
 8002b36:	2401      	movs	r4, #1
 8002b38:	9303      	str	r3, [sp, #12]
 8002b3a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8002b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b42:	9308      	str	r3, [sp, #32]
 8002b44:	2100      	movs	r1, #0
 8002b46:	9b08      	ldr	r3, [sp, #32]
 8002b48:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8002b4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b4e:	4650      	mov	r0, sl
 8002b50:	f001 ffa4 	bl	8004a9c <_Balloc>
 8002b54:	9002      	str	r0, [sp, #8]
 8002b56:	2800      	cmp	r0, #0
 8002b58:	f000 85f0 	beq.w	800373c <_dtoa_r+0xe50>
 8002b5c:	9b02      	ldr	r3, [sp, #8]
 8002b5e:	f8ca 3040 	str.w	r3, [sl, #64]	; 0x40
 8002b62:	9b08      	ldr	r3, [sp, #32]
 8002b64:	2b0e      	cmp	r3, #14
 8002b66:	f200 810a 	bhi.w	8002d7e <_dtoa_r+0x492>
 8002b6a:	2c00      	cmp	r4, #0
 8002b6c:	f000 8107 	beq.w	8002d7e <_dtoa_r+0x492>
 8002b70:	9906      	ldr	r1, [sp, #24]
 8002b72:	2900      	cmp	r1, #0
 8002b74:	f340 8468 	ble.w	8003448 <_dtoa_r+0xb5c>
 8002b78:	4bb1      	ldr	r3, [pc, #708]	; (8002e40 <_dtoa_r+0x554>)
 8002b7a:	f001 020f 	and.w	r2, r1, #15
 8002b7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b82:	ed93 7b00 	vldr	d7, [r3]
 8002b86:	110c      	asrs	r4, r1, #4
 8002b88:	06e2      	lsls	r2, r4, #27
 8002b8a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002b8e:	f140 8408 	bpl.w	80033a2 <_dtoa_r+0xab6>
 8002b92:	4bac      	ldr	r3, [pc, #688]	; (8002e44 <_dtoa_r+0x558>)
 8002b94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002b98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002b9c:	f004 fca6 	bl	80074ec <__aeabi_ddiv>
 8002ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8002ba4:	f004 040f 	and.w	r4, r4, #15
 8002ba8:	2603      	movs	r6, #3
 8002baa:	b17c      	cbz	r4, 8002bcc <_dtoa_r+0x2e0>
 8002bac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002bb0:	4da4      	ldr	r5, [pc, #656]	; (8002e44 <_dtoa_r+0x558>)
 8002bb2:	07e3      	lsls	r3, r4, #31
 8002bb4:	d504      	bpl.n	8002bc0 <_dtoa_r+0x2d4>
 8002bb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002bba:	f004 fb6d 	bl	8007298 <__aeabi_dmul>
 8002bbe:	3601      	adds	r6, #1
 8002bc0:	1064      	asrs	r4, r4, #1
 8002bc2:	f105 0508 	add.w	r5, r5, #8
 8002bc6:	d1f4      	bne.n	8002bb2 <_dtoa_r+0x2c6>
 8002bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002bd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002bd4:	f004 fc8a 	bl	80074ec <__aeabi_ddiv>
 8002bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8002bdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bde:	b153      	cbz	r3, 8002bf6 <_dtoa_r+0x30a>
 8002be0:	e9dd 4500 	ldrd	r4, r5, [sp]
 8002be4:	2200      	movs	r2, #0
 8002be6:	4b98      	ldr	r3, [pc, #608]	; (8002e48 <_dtoa_r+0x55c>)
 8002be8:	4620      	mov	r0, r4
 8002bea:	4629      	mov	r1, r5
 8002bec:	f004 fdc6 	bl	800777c <__aeabi_dcmplt>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	f040 8527 	bne.w	8003644 <_dtoa_r+0xd58>
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	f004 fae4 	bl	80071c4 <__aeabi_i2d>
 8002bfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c00:	f004 fb4a 	bl	8007298 <__aeabi_dmul>
 8002c04:	4b91      	ldr	r3, [pc, #580]	; (8002e4c <_dtoa_r+0x560>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	f004 f990 	bl	8006f2c <__adddf3>
 8002c0c:	9b08      	ldr	r3, [sp, #32]
 8002c0e:	4604      	mov	r4, r0
 8002c10:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 83fb 	beq.w	8003410 <_dtoa_r+0xb24>
 8002c1a:	9b06      	ldr	r3, [sp, #24]
 8002c1c:	9312      	str	r3, [sp, #72]	; 0x48
 8002c1e:	9b08      	ldr	r3, [sp, #32]
 8002c20:	9310      	str	r3, [sp, #64]	; 0x40
 8002c22:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002c26:	4639      	mov	r1, r7
 8002c28:	4630      	mov	r0, r6
 8002c2a:	f004 fde5 	bl	80077f8 <__aeabi_d2iz>
 8002c2e:	9000      	str	r0, [sp, #0]
 8002c30:	f004 fac8 	bl	80071c4 <__aeabi_i2d>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4630      	mov	r0, r6
 8002c3a:	4639      	mov	r1, r7
 8002c3c:	f004 f974 	bl	8006f28 <__aeabi_dsub>
 8002c40:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <_dtoa_r+0x554>)
 8002c42:	9a00      	ldr	r2, [sp, #0]
 8002c44:	460f      	mov	r7, r1
 8002c46:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002c48:	4606      	mov	r6, r0
 8002c4a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002c4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002c50:	9902      	ldr	r1, [sp, #8]
 8002c52:	3230      	adds	r2, #48	; 0x30
 8002c54:	e9cd 4500 	strd	r4, r5, [sp]
 8002c58:	b2d5      	uxtb	r5, r2
 8002c5a:	1c4c      	adds	r4, r1, #1
 8002c5c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002c60:	2800      	cmp	r0, #0
 8002c62:	f000 8497 	beq.w	8003594 <_dtoa_r+0xca8>
 8002c66:	2000      	movs	r0, #0
 8002c68:	4979      	ldr	r1, [pc, #484]	; (8002e50 <_dtoa_r+0x564>)
 8002c6a:	f004 fc3f 	bl	80074ec <__aeabi_ddiv>
 8002c6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c72:	f004 f959 	bl	8006f28 <__aeabi_dsub>
 8002c76:	9b02      	ldr	r3, [sp, #8]
 8002c78:	4632      	mov	r2, r6
 8002c7a:	701d      	strb	r5, [r3, #0]
 8002c7c:	463b      	mov	r3, r7
 8002c7e:	e9cd 0100 	strd	r0, r1, [sp]
 8002c82:	f004 fd99 	bl	80077b8 <__aeabi_dcmpgt>
 8002c86:	2800      	cmp	r0, #0
 8002c88:	f040 84d4 	bne.w	8003634 <_dtoa_r+0xd48>
 8002c8c:	4632      	mov	r2, r6
 8002c8e:	463b      	mov	r3, r7
 8002c90:	2000      	movs	r0, #0
 8002c92:	496d      	ldr	r1, [pc, #436]	; (8002e48 <_dtoa_r+0x55c>)
 8002c94:	f004 f948 	bl	8006f28 <__aeabi_dsub>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002ca0:	f004 fd8a 	bl	80077b8 <__aeabi_dcmpgt>
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	f040 8532 	bne.w	800370e <_dtoa_r+0xe22>
 8002caa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d062      	beq.n	8002d76 <_dtoa_r+0x48a>
 8002cb0:	9a02      	ldr	r2, [sp, #8]
 8002cb2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002cbc:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002cc0:	f8cd b000 	str.w	fp, [sp]
 8002cc4:	46d3      	mov	fp, sl
 8002cc6:	469a      	mov	sl, r3
 8002cc8:	e00e      	b.n	8002ce8 <_dtoa_r+0x3fc>
 8002cca:	4632      	mov	r2, r6
 8002ccc:	463b      	mov	r3, r7
 8002cce:	2000      	movs	r0, #0
 8002cd0:	495d      	ldr	r1, [pc, #372]	; (8002e48 <_dtoa_r+0x55c>)
 8002cd2:	f004 f929 	bl	8006f28 <__aeabi_dsub>
 8002cd6:	4642      	mov	r2, r8
 8002cd8:	464b      	mov	r3, r9
 8002cda:	f004 fd4f 	bl	800777c <__aeabi_dcmplt>
 8002cde:	2800      	cmp	r0, #0
 8002ce0:	f040 84ee 	bne.w	80036c0 <_dtoa_r+0xdd4>
 8002ce4:	4554      	cmp	r4, sl
 8002ce6:	d03f      	beq.n	8002d68 <_dtoa_r+0x47c>
 8002ce8:	4640      	mov	r0, r8
 8002cea:	4649      	mov	r1, r9
 8002cec:	2200      	movs	r2, #0
 8002cee:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <_dtoa_r+0x568>)
 8002cf0:	f004 fad2 	bl	8007298 <__aeabi_dmul>
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <_dtoa_r+0x568>)
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	4639      	mov	r1, r7
 8002d00:	f004 faca 	bl	8007298 <__aeabi_dmul>
 8002d04:	460f      	mov	r7, r1
 8002d06:	4606      	mov	r6, r0
 8002d08:	f004 fd76 	bl	80077f8 <__aeabi_d2iz>
 8002d0c:	4605      	mov	r5, r0
 8002d0e:	f004 fa59 	bl	80071c4 <__aeabi_i2d>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4630      	mov	r0, r6
 8002d18:	4639      	mov	r1, r7
 8002d1a:	f004 f905 	bl	8006f28 <__aeabi_dsub>
 8002d1e:	3530      	adds	r5, #48	; 0x30
 8002d20:	b2ed      	uxtb	r5, r5
 8002d22:	f804 5b01 	strb.w	r5, [r4], #1
 8002d26:	4642      	mov	r2, r8
 8002d28:	464b      	mov	r3, r9
 8002d2a:	4606      	mov	r6, r0
 8002d2c:	460f      	mov	r7, r1
 8002d2e:	f004 fd25 	bl	800777c <__aeabi_dcmplt>
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d0c9      	beq.n	8002cca <_dtoa_r+0x3de>
 8002d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002d38:	46da      	mov	sl, fp
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f8dd b000 	ldr.w	fp, [sp]
 8002d40:	9306      	str	r3, [sp, #24]
 8002d42:	4659      	mov	r1, fp
 8002d44:	4650      	mov	r0, sl
 8002d46:	f001 fecf 	bl	8004ae8 <_Bfree>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	7023      	strb	r3, [r4, #0]
 8002d4e:	9b07      	ldr	r3, [sp, #28]
 8002d50:	461a      	mov	r2, r3
 8002d52:	9b06      	ldr	r3, [sp, #24]
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f43f ae05 	beq.w	8002968 <_dtoa_r+0x7c>
 8002d5e:	9802      	ldr	r0, [sp, #8]
 8002d60:	601c      	str	r4, [r3, #0]
 8002d62:	b017      	add	sp, #92	; 0x5c
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d68:	46da      	mov	sl, fp
 8002d6a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8002d6e:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8002d72:	f8dd b000 	ldr.w	fp, [sp]
 8002d76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002d7a:	e9cd 3400 	strd	r3, r4, [sp]
 8002d7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f2c0 80c6 	blt.w	8002f12 <_dtoa_r+0x626>
 8002d86:	9a06      	ldr	r2, [sp, #24]
 8002d88:	2a0e      	cmp	r2, #14
 8002d8a:	f300 80c2 	bgt.w	8002f12 <_dtoa_r+0x626>
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <_dtoa_r+0x554>)
 8002d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da17      	bge.n	8002dce <_dtoa_r+0x4e2>
 8002d9e:	9f08      	ldr	r7, [sp, #32]
 8002da0:	2f00      	cmp	r7, #0
 8002da2:	dc14      	bgt.n	8002dce <_dtoa_r+0x4e2>
 8002da4:	f040 834d 	bne.w	8003442 <_dtoa_r+0xb56>
 8002da8:	2200      	movs	r2, #0
 8002daa:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <_dtoa_r+0x56c>)
 8002dac:	4640      	mov	r0, r8
 8002dae:	4649      	mov	r1, r9
 8002db0:	f004 fa72 	bl	8007298 <__aeabi_dmul>
 8002db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002db8:	f004 fcf4 	bl	80077a4 <__aeabi_dcmpge>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	f000 83c4 	beq.w	800354a <_dtoa_r+0xc5e>
 8002dc2:	9f08      	ldr	r7, [sp, #32]
 8002dc4:	463d      	mov	r5, r7
 8002dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dc8:	9c02      	ldr	r4, [sp, #8]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	e25f      	b.n	800328e <_dtoa_r+0x9a2>
 8002dce:	e9dd 4500 	ldrd	r4, r5, [sp]
 8002dd2:	4642      	mov	r2, r8
 8002dd4:	464b      	mov	r3, r9
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	4629      	mov	r1, r5
 8002dda:	f004 fb87 	bl	80074ec <__aeabi_ddiv>
 8002dde:	f004 fd0b 	bl	80077f8 <__aeabi_d2iz>
 8002de2:	4606      	mov	r6, r0
 8002de4:	9000      	str	r0, [sp, #0]
 8002de6:	f004 f9ed 	bl	80071c4 <__aeabi_i2d>
 8002dea:	4642      	mov	r2, r8
 8002dec:	464b      	mov	r3, r9
 8002dee:	f004 fa53 	bl	8007298 <__aeabi_dmul>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	9c02      	ldr	r4, [sp, #8]
 8002dfc:	4635      	mov	r5, r6
 8002dfe:	3530      	adds	r5, #48	; 0x30
 8002e00:	f004 f892 	bl	8006f28 <__aeabi_dsub>
 8002e04:	9e06      	ldr	r6, [sp, #24]
 8002e06:	f804 5b01 	strb.w	r5, [r4], #1
 8002e0a:	9d08      	ldr	r5, [sp, #32]
 8002e0c:	3601      	adds	r6, #1
 8002e0e:	2d01      	cmp	r5, #1
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	9606      	str	r6, [sp, #24]
 8002e16:	d052      	beq.n	8002ebe <_dtoa_r+0x5d2>
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <_dtoa_r+0x568>)
 8002e1c:	f004 fa3c 	bl	8007298 <__aeabi_dmul>
 8002e20:	2200      	movs	r2, #0
 8002e22:	2300      	movs	r3, #0
 8002e24:	4606      	mov	r6, r0
 8002e26:	460f      	mov	r7, r1
 8002e28:	f004 fc9e 	bl	8007768 <__aeabi_dcmpeq>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d188      	bne.n	8002d42 <_dtoa_r+0x456>
 8002e30:	f8cd b000 	str.w	fp, [sp]
 8002e34:	2501      	movs	r5, #1
 8002e36:	f8dd b020 	ldr.w	fp, [sp, #32]
 8002e3a:	f8cd a00c 	str.w	sl, [sp, #12]
 8002e3e:	e01a      	b.n	8002e76 <_dtoa_r+0x58a>
 8002e40:	0800d428 	.word	0x0800d428
 8002e44:	0800d518 	.word	0x0800d518
 8002e48:	3ff00000 	.word	0x3ff00000
 8002e4c:	401c0000 	.word	0x401c0000
 8002e50:	3fe00000 	.word	0x3fe00000
 8002e54:	40240000 	.word	0x40240000
 8002e58:	40140000 	.word	0x40140000
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4bb9      	ldr	r3, [pc, #740]	; (8003144 <_dtoa_r+0x858>)
 8002e60:	f004 fa1a 	bl	8007298 <__aeabi_dmul>
 8002e64:	2200      	movs	r2, #0
 8002e66:	2300      	movs	r3, #0
 8002e68:	4606      	mov	r6, r0
 8002e6a:	460f      	mov	r7, r1
 8002e6c:	f004 fc7c 	bl	8007768 <__aeabi_dcmpeq>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f040 8360 	bne.w	8003536 <_dtoa_r+0xc4a>
 8002e76:	4642      	mov	r2, r8
 8002e78:	464b      	mov	r3, r9
 8002e7a:	4630      	mov	r0, r6
 8002e7c:	4639      	mov	r1, r7
 8002e7e:	f004 fb35 	bl	80074ec <__aeabi_ddiv>
 8002e82:	f004 fcb9 	bl	80077f8 <__aeabi_d2iz>
 8002e86:	4682      	mov	sl, r0
 8002e88:	f004 f99c 	bl	80071c4 <__aeabi_i2d>
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	464b      	mov	r3, r9
 8002e90:	f004 fa02 	bl	8007298 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4630      	mov	r0, r6
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	f004 f844 	bl	8006f28 <__aeabi_dsub>
 8002ea0:	3501      	adds	r5, #1
 8002ea2:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8002ea6:	45ab      	cmp	fp, r5
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	f804 6b01 	strb.w	r6, [r4], #1
 8002eb0:	d1d4      	bne.n	8002e5c <_dtoa_r+0x570>
 8002eb2:	f8dd b000 	ldr.w	fp, [sp]
 8002eb6:	f8cd a000 	str.w	sl, [sp]
 8002eba:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f004 f833 	bl	8006f2c <__adddf3>
 8002ec6:	4642      	mov	r2, r8
 8002ec8:	464b      	mov	r3, r9
 8002eca:	4606      	mov	r6, r0
 8002ecc:	460f      	mov	r7, r1
 8002ece:	f004 fc73 	bl	80077b8 <__aeabi_dcmpgt>
 8002ed2:	b960      	cbnz	r0, 8002eee <_dtoa_r+0x602>
 8002ed4:	4642      	mov	r2, r8
 8002ed6:	464b      	mov	r3, r9
 8002ed8:	4630      	mov	r0, r6
 8002eda:	4639      	mov	r1, r7
 8002edc:	f004 fc44 	bl	8007768 <__aeabi_dcmpeq>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	f43f af2e 	beq.w	8002d42 <_dtoa_r+0x456>
 8002ee6:	9b00      	ldr	r3, [sp, #0]
 8002ee8:	07d9      	lsls	r1, r3, #31
 8002eea:	f57f af2a 	bpl.w	8002d42 <_dtoa_r+0x456>
 8002eee:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8002ef2:	9a02      	ldr	r2, [sp, #8]
 8002ef4:	1e63      	subs	r3, r4, #1
 8002ef6:	e004      	b.n	8002f02 <_dtoa_r+0x616>
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f000 83c9 	beq.w	8003690 <_dtoa_r+0xda4>
 8002efe:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 8002f02:	2d39      	cmp	r5, #57	; 0x39
 8002f04:	f103 0401 	add.w	r4, r3, #1
 8002f08:	d0f6      	beq.n	8002ef8 <_dtoa_r+0x60c>
 8002f0a:	1c6a      	adds	r2, r5, #1
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]
 8002f10:	e717      	b.n	8002d42 <_dtoa_r+0x456>
 8002f12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f14:	2a00      	cmp	r2, #0
 8002f16:	d038      	beq.n	8002f8a <_dtoa_r+0x69e>
 8002f18:	9a03      	ldr	r2, [sp, #12]
 8002f1a:	2a01      	cmp	r2, #1
 8002f1c:	f340 8256 	ble.w	80033cc <_dtoa_r+0xae0>
 8002f20:	9b08      	ldr	r3, [sp, #32]
 8002f22:	1e5e      	subs	r6, r3, #1
 8002f24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f26:	42b3      	cmp	r3, r6
 8002f28:	f2c0 8235 	blt.w	8003396 <_dtoa_r+0xaaa>
 8002f2c:	1b9e      	subs	r6, r3, r6
 8002f2e:	9b08      	ldr	r3, [sp, #32]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f2c0 8305 	blt.w	8003540 <_dtoa_r+0xc54>
 8002f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f38:	4614      	mov	r4, r2
 8002f3a:	441a      	add	r2, r3
 8002f3c:	4498      	add	r8, r3
 8002f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8002f40:	2101      	movs	r1, #1
 8002f42:	4650      	mov	r0, sl
 8002f44:	f001 fed2 	bl	8004cec <__i2b>
 8002f48:	4605      	mov	r5, r0
 8002f4a:	e021      	b.n	8002f90 <_dtoa_r+0x6a4>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f1b8 0f00 	cmp.w	r8, #0
 8002f52:	930d      	str	r3, [sp, #52]	; 0x34
 8002f54:	f6bf ad7a 	bge.w	8002a4c <_dtoa_r+0x160>
 8002f58:	f1c4 0301 	rsb	r3, r4, #1
 8002f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f5e:	f04f 0800 	mov.w	r8, #0
 8002f62:	e575      	b.n	8002a50 <_dtoa_r+0x164>
 8002f64:	4648      	mov	r0, r9
 8002f66:	f004 f92d 	bl	80071c4 <__aeabi_i2d>
 8002f6a:	4632      	mov	r2, r6
 8002f6c:	463b      	mov	r3, r7
 8002f6e:	f004 fbfb 	bl	8007768 <__aeabi_dcmpeq>
 8002f72:	2800      	cmp	r0, #0
 8002f74:	f47f ad50 	bne.w	8002a18 <_dtoa_r+0x12c>
 8002f78:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8002f7c:	e54c      	b.n	8002a18 <_dtoa_r+0x12c>
 8002f7e:	4b72      	ldr	r3, [pc, #456]	; (8003148 <_dtoa_r+0x85c>)
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	9802      	ldr	r0, [sp, #8]
 8002f84:	b017      	add	sp, #92	; 0x5c
 8002f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002f8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002f8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002f90:	2c00      	cmp	r4, #0
 8002f92:	dd0c      	ble.n	8002fae <_dtoa_r+0x6c2>
 8002f94:	f1b8 0f00 	cmp.w	r8, #0
 8002f98:	dd09      	ble.n	8002fae <_dtoa_r+0x6c2>
 8002f9a:	4544      	cmp	r4, r8
 8002f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	bfa8      	it	ge
 8002fa2:	4643      	movge	r3, r8
 8002fa4:	1ad2      	subs	r2, r2, r3
 8002fa6:	9209      	str	r2, [sp, #36]	; 0x24
 8002fa8:	1ae4      	subs	r4, r4, r3
 8002faa:	eba8 0803 	sub.w	r8, r8, r3
 8002fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fb0:	b1d3      	cbz	r3, 8002fe8 <_dtoa_r+0x6fc>
 8002fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 818f 	beq.w	80032d8 <_dtoa_r+0x9ec>
 8002fba:	2e00      	cmp	r6, #0
 8002fbc:	dd10      	ble.n	8002fe0 <_dtoa_r+0x6f4>
 8002fbe:	4629      	mov	r1, r5
 8002fc0:	4632      	mov	r2, r6
 8002fc2:	4650      	mov	r0, sl
 8002fc4:	f001 ff4e 	bl	8004e64 <__pow5mult>
 8002fc8:	465a      	mov	r2, fp
 8002fca:	4601      	mov	r1, r0
 8002fcc:	4605      	mov	r5, r0
 8002fce:	4650      	mov	r0, sl
 8002fd0:	f001 fea2 	bl	8004d18 <__multiply>
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	4607      	mov	r7, r0
 8002fd8:	4650      	mov	r0, sl
 8002fda:	f001 fd85 	bl	8004ae8 <_Bfree>
 8002fde:	46bb      	mov	fp, r7
 8002fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fe2:	1b9a      	subs	r2, r3, r6
 8002fe4:	f040 8179 	bne.w	80032da <_dtoa_r+0x9ee>
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4650      	mov	r0, sl
 8002fec:	f001 fe7e 	bl	8004cec <__i2b>
 8002ff0:	f1b9 0f00 	cmp.w	r9, #0
 8002ff4:	4607      	mov	r7, r0
 8002ff6:	f300 8090 	bgt.w	800311a <_dtoa_r+0x82e>
 8002ffa:	9b03      	ldr	r3, [sp, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	f340 8177 	ble.w	80032f0 <_dtoa_r+0xa04>
 8003002:	2600      	movs	r6, #0
 8003004:	2001      	movs	r0, #1
 8003006:	f1b9 0f00 	cmp.w	r9, #0
 800300a:	f040 8091 	bne.w	8003130 <_dtoa_r+0x844>
 800300e:	4440      	add	r0, r8
 8003010:	f010 001f 	ands.w	r0, r0, #31
 8003014:	d077      	beq.n	8003106 <_dtoa_r+0x81a>
 8003016:	f1c0 0320 	rsb	r3, r0, #32
 800301a:	2b04      	cmp	r3, #4
 800301c:	f340 8380 	ble.w	8003720 <_dtoa_r+0xe34>
 8003020:	f1c0 001c 	rsb	r0, r0, #28
 8003024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003026:	4403      	add	r3, r0
 8003028:	9309      	str	r3, [sp, #36]	; 0x24
 800302a:	4404      	add	r4, r0
 800302c:	4480      	add	r8, r0
 800302e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	dd05      	ble.n	8003040 <_dtoa_r+0x754>
 8003034:	4659      	mov	r1, fp
 8003036:	461a      	mov	r2, r3
 8003038:	4650      	mov	r0, sl
 800303a:	f001 ff5f 	bl	8004efc <__lshift>
 800303e:	4683      	mov	fp, r0
 8003040:	f1b8 0f00 	cmp.w	r8, #0
 8003044:	dd05      	ble.n	8003052 <_dtoa_r+0x766>
 8003046:	4639      	mov	r1, r7
 8003048:	4642      	mov	r2, r8
 800304a:	4650      	mov	r0, sl
 800304c:	f001 ff56 	bl	8004efc <__lshift>
 8003050:	4607      	mov	r7, r0
 8003052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8124 	bne.w	80032a2 <_dtoa_r+0x9b6>
 800305a:	9b08      	ldr	r3, [sp, #32]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f340 80fb 	ble.w	8003258 <_dtoa_r+0x96c>
 8003062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d17f      	bne.n	8003168 <_dtoa_r+0x87c>
 8003068:	9b06      	ldr	r3, [sp, #24]
 800306a:	3301      	adds	r3, #1
 800306c:	9306      	str	r3, [sp, #24]
 800306e:	9c02      	ldr	r4, [sp, #8]
 8003070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003074:	2601      	movs	r6, #1
 8003076:	e007      	b.n	8003088 <_dtoa_r+0x79c>
 8003078:	4659      	mov	r1, fp
 800307a:	2300      	movs	r3, #0
 800307c:	220a      	movs	r2, #10
 800307e:	4650      	mov	r0, sl
 8003080:	f001 fd3c 	bl	8004afc <__multadd>
 8003084:	3601      	adds	r6, #1
 8003086:	4683      	mov	fp, r0
 8003088:	4639      	mov	r1, r7
 800308a:	4658      	mov	r0, fp
 800308c:	f7ff fb9c 	bl	80027c8 <quorem>
 8003090:	45b0      	cmp	r8, r6
 8003092:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8003096:	f804 0b01 	strb.w	r0, [r4], #1
 800309a:	dced      	bgt.n	8003078 <_dtoa_r+0x78c>
 800309c:	4603      	mov	r3, r0
 800309e:	f04f 0900 	mov.w	r9, #0
 80030a2:	4659      	mov	r1, fp
 80030a4:	2201      	movs	r2, #1
 80030a6:	4650      	mov	r0, sl
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	f001 ff27 	bl	8004efc <__lshift>
 80030ae:	4639      	mov	r1, r7
 80030b0:	4683      	mov	fp, r0
 80030b2:	f001 ff89 	bl	8004fc8 <__mcmp>
 80030b6:	2800      	cmp	r0, #0
 80030b8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80030bc:	f340 8178 	ble.w	80033b0 <_dtoa_r+0xac4>
 80030c0:	1e63      	subs	r3, r4, #1
 80030c2:	9902      	ldr	r1, [sp, #8]
 80030c4:	e004      	b.n	80030d0 <_dtoa_r+0x7e4>
 80030c6:	4299      	cmp	r1, r3
 80030c8:	f000 818d 	beq.w	80033e6 <_dtoa_r+0xafa>
 80030cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80030d0:	2a39      	cmp	r2, #57	; 0x39
 80030d2:	f103 0401 	add.w	r4, r3, #1
 80030d6:	d0f6      	beq.n	80030c6 <_dtoa_r+0x7da>
 80030d8:	3201      	adds	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	4639      	mov	r1, r7
 80030de:	4650      	mov	r0, sl
 80030e0:	f001 fd02 	bl	8004ae8 <_Bfree>
 80030e4:	2d00      	cmp	r5, #0
 80030e6:	f43f ae2c 	beq.w	8002d42 <_dtoa_r+0x456>
 80030ea:	f1b9 0f00 	cmp.w	r9, #0
 80030ee:	d005      	beq.n	80030fc <_dtoa_r+0x810>
 80030f0:	45a9      	cmp	r9, r5
 80030f2:	d003      	beq.n	80030fc <_dtoa_r+0x810>
 80030f4:	4649      	mov	r1, r9
 80030f6:	4650      	mov	r0, sl
 80030f8:	f001 fcf6 	bl	8004ae8 <_Bfree>
 80030fc:	4629      	mov	r1, r5
 80030fe:	4650      	mov	r0, sl
 8003100:	f001 fcf2 	bl	8004ae8 <_Bfree>
 8003104:	e61d      	b.n	8002d42 <_dtoa_r+0x456>
 8003106:	201c      	movs	r0, #28
 8003108:	e78c      	b.n	8003024 <_dtoa_r+0x738>
 800310a:	2401      	movs	r4, #1
 800310c:	e4b7      	b.n	8002a7e <_dtoa_r+0x192>
 800310e:	f1c3 0620 	rsb	r6, r3, #32
 8003112:	9b00      	ldr	r3, [sp, #0]
 8003114:	fa03 f006 	lsl.w	r0, r3, r6
 8003118:	e448      	b.n	80029ac <_dtoa_r+0xc0>
 800311a:	4601      	mov	r1, r0
 800311c:	464a      	mov	r2, r9
 800311e:	4650      	mov	r0, sl
 8003120:	f001 fea0 	bl	8004e64 <__pow5mult>
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	2b01      	cmp	r3, #1
 8003128:	4607      	mov	r7, r0
 800312a:	f340 81b9 	ble.w	80034a0 <_dtoa_r+0xbb4>
 800312e:	2600      	movs	r6, #0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003136:	6918      	ldr	r0, [r3, #16]
 8003138:	f001 fd88 	bl	8004c4c <__hi0bits>
 800313c:	f1c0 0020 	rsb	r0, r0, #32
 8003140:	e765      	b.n	800300e <_dtoa_r+0x722>
 8003142:	bf00      	nop
 8003144:	40240000 	.word	0x40240000
 8003148:	0801cab0 	.word	0x0801cab0
 800314c:	4629      	mov	r1, r5
 800314e:	2300      	movs	r3, #0
 8003150:	220a      	movs	r2, #10
 8003152:	4650      	mov	r0, sl
 8003154:	f001 fcd2 	bl	8004afc <__multadd>
 8003158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800315a:	2b00      	cmp	r3, #0
 800315c:	4605      	mov	r5, r0
 800315e:	f340 82ce 	ble.w	80036fe <_dtoa_r+0xe12>
 8003162:	f8cd 8018 	str.w	r8, [sp, #24]
 8003166:	9308      	str	r3, [sp, #32]
 8003168:	2c00      	cmp	r4, #0
 800316a:	f300 810d 	bgt.w	8003388 <_dtoa_r+0xa9c>
 800316e:	2e00      	cmp	r6, #0
 8003170:	f040 81ca 	bne.w	8003508 <_dtoa_r+0xc1c>
 8003174:	46a8      	mov	r8, r5
 8003176:	9b00      	ldr	r3, [sp, #0]
 8003178:	9903      	ldr	r1, [sp, #12]
 800317a:	9e02      	ldr	r6, [sp, #8]
 800317c:	f003 0201 	and.w	r2, r3, #1
 8003180:	920b      	str	r2, [sp, #44]	; 0x2c
 8003182:	430a      	orrs	r2, r1
 8003184:	920a      	str	r2, [sp, #40]	; 0x28
 8003186:	9a08      	ldr	r2, [sp, #32]
 8003188:	1e73      	subs	r3, r6, #1
 800318a:	441a      	add	r2, r3
 800318c:	9209      	str	r2, [sp, #36]	; 0x24
 800318e:	4639      	mov	r1, r7
 8003190:	4658      	mov	r0, fp
 8003192:	f7ff fb19 	bl	80027c8 <quorem>
 8003196:	4629      	mov	r1, r5
 8003198:	9000      	str	r0, [sp, #0]
 800319a:	4658      	mov	r0, fp
 800319c:	f001 ff14 	bl	8004fc8 <__mcmp>
 80031a0:	4642      	mov	r2, r8
 80031a2:	4681      	mov	r9, r0
 80031a4:	4639      	mov	r1, r7
 80031a6:	4650      	mov	r0, sl
 80031a8:	f001 ff2a 	bl	8005000 <__mdiff>
 80031ac:	9b00      	ldr	r3, [sp, #0]
 80031ae:	68c2      	ldr	r2, [r0, #12]
 80031b0:	4604      	mov	r4, r0
 80031b2:	3330      	adds	r3, #48	; 0x30
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	d141      	bne.n	800323c <_dtoa_r+0x950>
 80031b8:	4601      	mov	r1, r0
 80031ba:	4658      	mov	r0, fp
 80031bc:	9308      	str	r3, [sp, #32]
 80031be:	f001 ff03 	bl	8004fc8 <__mcmp>
 80031c2:	4621      	mov	r1, r4
 80031c4:	9004      	str	r0, [sp, #16]
 80031c6:	4650      	mov	r0, sl
 80031c8:	f001 fc8e 	bl	8004ae8 <_Bfree>
 80031cc:	9a04      	ldr	r2, [sp, #16]
 80031ce:	9b08      	ldr	r3, [sp, #32]
 80031d0:	b91a      	cbnz	r2, 80031da <_dtoa_r+0x8ee>
 80031d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80031d4:	2900      	cmp	r1, #0
 80031d6:	f000 827a 	beq.w	80036ce <_dtoa_r+0xde2>
 80031da:	f1b9 0f00 	cmp.w	r9, #0
 80031de:	f106 0401 	add.w	r4, r6, #1
 80031e2:	f2c0 8174 	blt.w	80034ce <_dtoa_r+0xbe2>
 80031e6:	9903      	ldr	r1, [sp, #12]
 80031e8:	ea41 0909 	orr.w	r9, r1, r9
 80031ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031ee:	ea51 0109 	orrs.w	r1, r1, r9
 80031f2:	f000 816c 	beq.w	80034ce <_dtoa_r+0xbe2>
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	f300 81a9 	bgt.w	800354e <_dtoa_r+0xc62>
 80031fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031fe:	7033      	strb	r3, [r6, #0]
 8003200:	42b2      	cmp	r2, r6
 8003202:	f000 81b0 	beq.w	8003566 <_dtoa_r+0xc7a>
 8003206:	4659      	mov	r1, fp
 8003208:	2300      	movs	r3, #0
 800320a:	220a      	movs	r2, #10
 800320c:	4650      	mov	r0, sl
 800320e:	f001 fc75 	bl	8004afc <__multadd>
 8003212:	4545      	cmp	r5, r8
 8003214:	4683      	mov	fp, r0
 8003216:	4629      	mov	r1, r5
 8003218:	f04f 0300 	mov.w	r3, #0
 800321c:	f04f 020a 	mov.w	r2, #10
 8003220:	4650      	mov	r0, sl
 8003222:	d013      	beq.n	800324c <_dtoa_r+0x960>
 8003224:	f001 fc6a 	bl	8004afc <__multadd>
 8003228:	4641      	mov	r1, r8
 800322a:	4605      	mov	r5, r0
 800322c:	2300      	movs	r3, #0
 800322e:	220a      	movs	r2, #10
 8003230:	4650      	mov	r0, sl
 8003232:	f001 fc63 	bl	8004afc <__multadd>
 8003236:	4626      	mov	r6, r4
 8003238:	4680      	mov	r8, r0
 800323a:	e7a8      	b.n	800318e <_dtoa_r+0x8a2>
 800323c:	4601      	mov	r1, r0
 800323e:	4650      	mov	r0, sl
 8003240:	9304      	str	r3, [sp, #16]
 8003242:	f001 fc51 	bl	8004ae8 <_Bfree>
 8003246:	2201      	movs	r2, #1
 8003248:	9b04      	ldr	r3, [sp, #16]
 800324a:	e7c6      	b.n	80031da <_dtoa_r+0x8ee>
 800324c:	f001 fc56 	bl	8004afc <__multadd>
 8003250:	4626      	mov	r6, r4
 8003252:	4605      	mov	r5, r0
 8003254:	4680      	mov	r8, r0
 8003256:	e79a      	b.n	800318e <_dtoa_r+0x8a2>
 8003258:	9b03      	ldr	r3, [sp, #12]
 800325a:	2b02      	cmp	r3, #2
 800325c:	f340 8081 	ble.w	8003362 <_dtoa_r+0xa76>
 8003260:	9b08      	ldr	r3, [sp, #32]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f adaf 	bne.w	8002dc6 <_dtoa_r+0x4da>
 8003268:	4639      	mov	r1, r7
 800326a:	2205      	movs	r2, #5
 800326c:	4650      	mov	r0, sl
 800326e:	f001 fc45 	bl	8004afc <__multadd>
 8003272:	4601      	mov	r1, r0
 8003274:	4607      	mov	r7, r0
 8003276:	4658      	mov	r0, fp
 8003278:	f001 fea6 	bl	8004fc8 <__mcmp>
 800327c:	2800      	cmp	r0, #0
 800327e:	f77f ada2 	ble.w	8002dc6 <_dtoa_r+0x4da>
 8003282:	9c02      	ldr	r4, [sp, #8]
 8003284:	9b06      	ldr	r3, [sp, #24]
 8003286:	2231      	movs	r2, #49	; 0x31
 8003288:	f804 2b01 	strb.w	r2, [r4], #1
 800328c:	3301      	adds	r3, #1
 800328e:	3301      	adds	r3, #1
 8003290:	4639      	mov	r1, r7
 8003292:	4650      	mov	r0, sl
 8003294:	9306      	str	r3, [sp, #24]
 8003296:	f001 fc27 	bl	8004ae8 <_Bfree>
 800329a:	2d00      	cmp	r5, #0
 800329c:	f47f af2e 	bne.w	80030fc <_dtoa_r+0x810>
 80032a0:	e54f      	b.n	8002d42 <_dtoa_r+0x456>
 80032a2:	4639      	mov	r1, r7
 80032a4:	4658      	mov	r0, fp
 80032a6:	f001 fe8f 	bl	8004fc8 <__mcmp>
 80032aa:	2800      	cmp	r0, #0
 80032ac:	f6bf aed5 	bge.w	800305a <_dtoa_r+0x76e>
 80032b0:	4659      	mov	r1, fp
 80032b2:	2300      	movs	r3, #0
 80032b4:	220a      	movs	r2, #10
 80032b6:	4650      	mov	r0, sl
 80032b8:	f001 fc20 	bl	8004afc <__multadd>
 80032bc:	9b06      	ldr	r3, [sp, #24]
 80032be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80032c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80032c4:	4683      	mov	fp, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f47f af40 	bne.w	800314c <_dtoa_r+0x860>
 80032cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f340 820a 	ble.w	80036e8 <_dtoa_r+0xdfc>
 80032d4:	9308      	str	r3, [sp, #32]
 80032d6:	e6ca      	b.n	800306e <_dtoa_r+0x782>
 80032d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80032da:	4659      	mov	r1, fp
 80032dc:	4650      	mov	r0, sl
 80032de:	f001 fdc1 	bl	8004e64 <__pow5mult>
 80032e2:	4683      	mov	fp, r0
 80032e4:	e680      	b.n	8002fe8 <_dtoa_r+0x6fc>
 80032e6:	4ba5      	ldr	r3, [pc, #660]	; (800357c <_dtoa_r+0xc90>)
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	3303      	adds	r3, #3
 80032ec:	f7ff bbe2 	b.w	8002ab4 <_dtoa_r+0x1c8>
 80032f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80032f4:	2900      	cmp	r1, #0
 80032f6:	f47f ae84 	bne.w	8003002 <_dtoa_r+0x716>
 80032fa:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 80d9 	beq.w	80034b6 <_dtoa_r+0xbca>
 8003304:	9e00      	ldr	r6, [sp, #0]
 8003306:	e67d      	b.n	8003004 <_dtoa_r+0x718>
 8003308:	2301      	movs	r3, #1
 800330a:	930b      	str	r3, [sp, #44]	; 0x2c
 800330c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800330e:	2d00      	cmp	r5, #0
 8003310:	dd49      	ble.n	80033a6 <_dtoa_r+0xaba>
 8003312:	950f      	str	r5, [sp, #60]	; 0x3c
 8003314:	9508      	str	r5, [sp, #32]
 8003316:	2100      	movs	r1, #0
 8003318:	2d17      	cmp	r5, #23
 800331a:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800331e:	f77f ac16 	ble.w	8002b4e <_dtoa_r+0x262>
 8003322:	2201      	movs	r2, #1
 8003324:	2304      	movs	r3, #4
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	f103 0014 	add.w	r0, r3, #20
 800332c:	42a8      	cmp	r0, r5
 800332e:	4611      	mov	r1, r2
 8003330:	f102 0201 	add.w	r2, r2, #1
 8003334:	d9f7      	bls.n	8003326 <_dtoa_r+0xa3a>
 8003336:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 800333a:	e408      	b.n	8002b4e <_dtoa_r+0x262>
 800333c:	2301      	movs	r3, #1
 800333e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003342:	9a06      	ldr	r2, [sp, #24]
 8003344:	4413      	add	r3, r2
 8003346:	930f      	str	r3, [sp, #60]	; 0x3c
 8003348:	3301      	adds	r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	461d      	mov	r5, r3
 800334e:	9308      	str	r3, [sp, #32]
 8003350:	bfb8      	it	lt
 8003352:	2501      	movlt	r5, #1
 8003354:	e7df      	b.n	8003316 <_dtoa_r+0xa2a>
 8003356:	2300      	movs	r3, #0
 8003358:	930b      	str	r3, [sp, #44]	; 0x2c
 800335a:	e7f1      	b.n	8003340 <_dtoa_r+0xa54>
 800335c:	2300      	movs	r3, #0
 800335e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003360:	e7d4      	b.n	800330c <_dtoa_r+0xa20>
 8003362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f aeff 	bne.w	8003168 <_dtoa_r+0x87c>
 800336a:	4639      	mov	r1, r7
 800336c:	4658      	mov	r0, fp
 800336e:	f7ff fa2b 	bl	80027c8 <quorem>
 8003372:	9a06      	ldr	r2, [sp, #24]
 8003374:	9c02      	ldr	r4, [sp, #8]
 8003376:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800337a:	3201      	adds	r2, #1
 800337c:	9206      	str	r2, [sp, #24]
 800337e:	f804 3b01 	strb.w	r3, [r4], #1
 8003382:	f04f 0900 	mov.w	r9, #0
 8003386:	e68c      	b.n	80030a2 <_dtoa_r+0x7b6>
 8003388:	4629      	mov	r1, r5
 800338a:	4622      	mov	r2, r4
 800338c:	4650      	mov	r0, sl
 800338e:	f001 fdb5 	bl	8004efc <__lshift>
 8003392:	4605      	mov	r5, r0
 8003394:	e6eb      	b.n	800316e <_dtoa_r+0x882>
 8003396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003398:	960c      	str	r6, [sp, #48]	; 0x30
 800339a:	1af3      	subs	r3, r6, r3
 800339c:	4499      	add	r9, r3
 800339e:	2600      	movs	r6, #0
 80033a0:	e5c5      	b.n	8002f2e <_dtoa_r+0x642>
 80033a2:	2602      	movs	r6, #2
 80033a4:	e401      	b.n	8002baa <_dtoa_r+0x2be>
 80033a6:	2301      	movs	r3, #1
 80033a8:	930a      	str	r3, [sp, #40]	; 0x28
 80033aa:	9308      	str	r3, [sp, #32]
 80033ac:	f7ff bbca 	b.w	8002b44 <_dtoa_r+0x258>
 80033b0:	d103      	bne.n	80033ba <_dtoa_r+0xace>
 80033b2:	9b00      	ldr	r3, [sp, #0]
 80033b4:	07db      	lsls	r3, r3, #31
 80033b6:	f53f ae83 	bmi.w	80030c0 <_dtoa_r+0x7d4>
 80033ba:	1e63      	subs	r3, r4, #1
 80033bc:	e001      	b.n	80033c2 <_dtoa_r+0xad6>
 80033be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80033c2:	2a30      	cmp	r2, #48	; 0x30
 80033c4:	f103 0401 	add.w	r4, r3, #1
 80033c8:	d0f9      	beq.n	80033be <_dtoa_r+0xad2>
 80033ca:	e687      	b.n	80030dc <_dtoa_r+0x7f0>
 80033cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033ce:	2a00      	cmp	r2, #0
 80033d0:	f000 80cf 	beq.w	8003572 <_dtoa_r+0xc86>
 80033d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80033d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80033dc:	4614      	mov	r4, r2
 80033de:	441a      	add	r2, r3
 80033e0:	4498      	add	r8, r3
 80033e2:	9209      	str	r2, [sp, #36]	; 0x24
 80033e4:	e5ac      	b.n	8002f40 <_dtoa_r+0x654>
 80033e6:	9a06      	ldr	r2, [sp, #24]
 80033e8:	3201      	adds	r2, #1
 80033ea:	9206      	str	r2, [sp, #24]
 80033ec:	9a02      	ldr	r2, [sp, #8]
 80033ee:	2331      	movs	r3, #49	; 0x31
 80033f0:	7013      	strb	r3, [r2, #0]
 80033f2:	e673      	b.n	80030dc <_dtoa_r+0x7f0>
 80033f4:	4630      	mov	r0, r6
 80033f6:	f003 fee5 	bl	80071c4 <__aeabi_i2d>
 80033fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033fe:	f003 ff4b 	bl	8007298 <__aeabi_dmul>
 8003402:	2200      	movs	r2, #0
 8003404:	4b5e      	ldr	r3, [pc, #376]	; (8003580 <_dtoa_r+0xc94>)
 8003406:	f003 fd91 	bl	8006f2c <__adddf3>
 800340a:	4604      	mov	r4, r0
 800340c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003410:	2200      	movs	r2, #0
 8003412:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <_dtoa_r+0xc98>)
 8003414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003418:	f003 fd86 	bl	8006f28 <__aeabi_dsub>
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
 8003420:	4606      	mov	r6, r0
 8003422:	460f      	mov	r7, r1
 8003424:	f004 f9c8 	bl	80077b8 <__aeabi_dcmpgt>
 8003428:	2800      	cmp	r0, #0
 800342a:	f040 808d 	bne.w	8003548 <_dtoa_r+0xc5c>
 800342e:	4622      	mov	r2, r4
 8003430:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003434:	4630      	mov	r0, r6
 8003436:	4639      	mov	r1, r7
 8003438:	f004 f9a0 	bl	800777c <__aeabi_dcmplt>
 800343c:	2800      	cmp	r0, #0
 800343e:	f43f ac9a 	beq.w	8002d76 <_dtoa_r+0x48a>
 8003442:	2700      	movs	r7, #0
 8003444:	463d      	mov	r5, r7
 8003446:	e4be      	b.n	8002dc6 <_dtoa_r+0x4da>
 8003448:	f000 80f9 	beq.w	800363e <_dtoa_r+0xd52>
 800344c:	9b06      	ldr	r3, [sp, #24]
 800344e:	425c      	negs	r4, r3
 8003450:	4b4d      	ldr	r3, [pc, #308]	; (8003588 <_dtoa_r+0xc9c>)
 8003452:	f004 020f 	and.w	r2, r4, #15
 8003456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003462:	f003 ff19 	bl	8007298 <__aeabi_dmul>
 8003466:	1124      	asrs	r4, r4, #4
 8003468:	e9cd 0100 	strd	r0, r1, [sp]
 800346c:	f000 80e7 	beq.w	800363e <_dtoa_r+0xd52>
 8003470:	4d46      	ldr	r5, [pc, #280]	; (800358c <_dtoa_r+0xca0>)
 8003472:	2300      	movs	r3, #0
 8003474:	2602      	movs	r6, #2
 8003476:	07e7      	lsls	r7, r4, #31
 8003478:	d505      	bpl.n	8003486 <_dtoa_r+0xb9a>
 800347a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800347e:	f003 ff0b 	bl	8007298 <__aeabi_dmul>
 8003482:	3601      	adds	r6, #1
 8003484:	2301      	movs	r3, #1
 8003486:	1064      	asrs	r4, r4, #1
 8003488:	f105 0508 	add.w	r5, r5, #8
 800348c:	d1f3      	bne.n	8003476 <_dtoa_r+0xb8a>
 800348e:	2b00      	cmp	r3, #0
 8003490:	f43f aba4 	beq.w	8002bdc <_dtoa_r+0x2f0>
 8003494:	e9cd 0100 	strd	r0, r1, [sp]
 8003498:	f7ff bba0 	b.w	8002bdc <_dtoa_r+0x2f0>
 800349c:	900d      	str	r0, [sp, #52]	; 0x34
 800349e:	e55b      	b.n	8002f58 <_dtoa_r+0x66c>
 80034a0:	9b00      	ldr	r3, [sp, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f47f ae43 	bne.w	800312e <_dtoa_r+0x842>
 80034a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80034ac:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f47f ae3c 	bne.w	800312e <_dtoa_r+0x842>
 80034b6:	4e36      	ldr	r6, [pc, #216]	; (8003590 <_dtoa_r+0xca4>)
 80034b8:	4016      	ands	r6, r2
 80034ba:	2e00      	cmp	r6, #0
 80034bc:	f43f ada2 	beq.w	8003004 <_dtoa_r+0x718>
 80034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c2:	3301      	adds	r3, #1
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
 80034c6:	f108 0801 	add.w	r8, r8, #1
 80034ca:	2601      	movs	r6, #1
 80034cc:	e59a      	b.n	8003004 <_dtoa_r+0x718>
 80034ce:	9906      	ldr	r1, [sp, #24]
 80034d0:	2a00      	cmp	r2, #0
 80034d2:	f101 0101 	add.w	r1, r1, #1
 80034d6:	9106      	str	r1, [sp, #24]
 80034d8:	dd12      	ble.n	8003500 <_dtoa_r+0xc14>
 80034da:	4659      	mov	r1, fp
 80034dc:	2201      	movs	r2, #1
 80034de:	4650      	mov	r0, sl
 80034e0:	9303      	str	r3, [sp, #12]
 80034e2:	f001 fd0b 	bl	8004efc <__lshift>
 80034e6:	4639      	mov	r1, r7
 80034e8:	4683      	mov	fp, r0
 80034ea:	f001 fd6d 	bl	8004fc8 <__mcmp>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	9b03      	ldr	r3, [sp, #12]
 80034f2:	f340 80df 	ble.w	80036b4 <_dtoa_r+0xdc8>
 80034f6:	2b39      	cmp	r3, #57	; 0x39
 80034f8:	f000 80d1 	beq.w	800369e <_dtoa_r+0xdb2>
 80034fc:	9b00      	ldr	r3, [sp, #0]
 80034fe:	3331      	adds	r3, #49	; 0x31
 8003500:	46a9      	mov	r9, r5
 8003502:	7033      	strb	r3, [r6, #0]
 8003504:	4645      	mov	r5, r8
 8003506:	e5e9      	b.n	80030dc <_dtoa_r+0x7f0>
 8003508:	6869      	ldr	r1, [r5, #4]
 800350a:	4650      	mov	r0, sl
 800350c:	f001 fac6 	bl	8004a9c <_Balloc>
 8003510:	4604      	mov	r4, r0
 8003512:	2800      	cmp	r0, #0
 8003514:	f000 8119 	beq.w	800374a <_dtoa_r+0xe5e>
 8003518:	692b      	ldr	r3, [r5, #16]
 800351a:	3302      	adds	r3, #2
 800351c:	009a      	lsls	r2, r3, #2
 800351e:	f105 010c 	add.w	r1, r5, #12
 8003522:	300c      	adds	r0, #12
 8003524:	f001 f9b4 	bl	8004890 <memcpy>
 8003528:	4621      	mov	r1, r4
 800352a:	2201      	movs	r2, #1
 800352c:	4650      	mov	r0, sl
 800352e:	f001 fce5 	bl	8004efc <__lshift>
 8003532:	4680      	mov	r8, r0
 8003534:	e61f      	b.n	8003176 <_dtoa_r+0x88a>
 8003536:	f8dd b000 	ldr.w	fp, [sp]
 800353a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800353e:	e400      	b.n	8002d42 <_dtoa_r+0x456>
 8003540:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003544:	1a9c      	subs	r4, r3, r2
 8003546:	e4fb      	b.n	8002f40 <_dtoa_r+0x654>
 8003548:	2700      	movs	r7, #0
 800354a:	463d      	mov	r5, r7
 800354c:	e699      	b.n	8003282 <_dtoa_r+0x996>
 800354e:	9a06      	ldr	r2, [sp, #24]
 8003550:	2b39      	cmp	r3, #57	; 0x39
 8003552:	f102 0201 	add.w	r2, r2, #1
 8003556:	9206      	str	r2, [sp, #24]
 8003558:	f000 80a1 	beq.w	800369e <_dtoa_r+0xdb2>
 800355c:	3301      	adds	r3, #1
 800355e:	46a9      	mov	r9, r5
 8003560:	7033      	strb	r3, [r6, #0]
 8003562:	4645      	mov	r5, r8
 8003564:	e5ba      	b.n	80030dc <_dtoa_r+0x7f0>
 8003566:	9a06      	ldr	r2, [sp, #24]
 8003568:	3201      	adds	r2, #1
 800356a:	46a9      	mov	r9, r5
 800356c:	9206      	str	r2, [sp, #24]
 800356e:	4645      	mov	r5, r8
 8003570:	e597      	b.n	80030a2 <_dtoa_r+0x7b6>
 8003572:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003574:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003578:	e72e      	b.n	80033d8 <_dtoa_r+0xaec>
 800357a:	bf00      	nop
 800357c:	0801cab4 	.word	0x0801cab4
 8003580:	401c0000 	.word	0x401c0000
 8003584:	40140000 	.word	0x40140000
 8003588:	0800d428 	.word	0x0800d428
 800358c:	0800d518 	.word	0x0800d518
 8003590:	7ff00000 	.word	0x7ff00000
 8003594:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003598:	f003 fe7e 	bl	8007298 <__aeabi_dmul>
 800359c:	9b02      	ldr	r3, [sp, #8]
 800359e:	701d      	strb	r5, [r3, #0]
 80035a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	e9cd 0100 	strd	r0, r1, [sp]
 80035a8:	d023      	beq.n	80035f2 <_dtoa_r+0xd06>
 80035aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035ac:	9a02      	ldr	r2, [sp, #8]
 80035ae:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80035b2:	4413      	add	r3, r2
 80035b4:	46c1      	mov	r9, r8
 80035b6:	4698      	mov	r8, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	4b6d      	ldr	r3, [pc, #436]	; (8003770 <_dtoa_r+0xe84>)
 80035bc:	4630      	mov	r0, r6
 80035be:	4639      	mov	r1, r7
 80035c0:	f003 fe6a 	bl	8007298 <__aeabi_dmul>
 80035c4:	460f      	mov	r7, r1
 80035c6:	4606      	mov	r6, r0
 80035c8:	f004 f916 	bl	80077f8 <__aeabi_d2iz>
 80035cc:	4605      	mov	r5, r0
 80035ce:	f003 fdf9 	bl	80071c4 <__aeabi_i2d>
 80035d2:	3530      	adds	r5, #48	; 0x30
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4630      	mov	r0, r6
 80035da:	4639      	mov	r1, r7
 80035dc:	f003 fca4 	bl	8006f28 <__aeabi_dsub>
 80035e0:	f804 5b01 	strb.w	r5, [r4], #1
 80035e4:	4544      	cmp	r4, r8
 80035e6:	4606      	mov	r6, r0
 80035e8:	460f      	mov	r7, r1
 80035ea:	d1e5      	bne.n	80035b8 <_dtoa_r+0xccc>
 80035ec:	46c8      	mov	r8, r9
 80035ee:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80035f2:	4b60      	ldr	r3, [pc, #384]	; (8003774 <_dtoa_r+0xe88>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80035fa:	f003 fc97 	bl	8006f2c <__adddf3>
 80035fe:	4632      	mov	r2, r6
 8003600:	463b      	mov	r3, r7
 8003602:	f004 f8bb 	bl	800777c <__aeabi_dcmplt>
 8003606:	2800      	cmp	r0, #0
 8003608:	d14e      	bne.n	80036a8 <_dtoa_r+0xdbc>
 800360a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800360e:	2000      	movs	r0, #0
 8003610:	4958      	ldr	r1, [pc, #352]	; (8003774 <_dtoa_r+0xe88>)
 8003612:	f003 fc89 	bl	8006f28 <__aeabi_dsub>
 8003616:	4632      	mov	r2, r6
 8003618:	463b      	mov	r3, r7
 800361a:	f004 f8cd 	bl	80077b8 <__aeabi_dcmpgt>
 800361e:	2800      	cmp	r0, #0
 8003620:	f43f aba9 	beq.w	8002d76 <_dtoa_r+0x48a>
 8003624:	e000      	b.n	8003628 <_dtoa_r+0xd3c>
 8003626:	4614      	mov	r4, r2
 8003628:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800362c:	2b30      	cmp	r3, #48	; 0x30
 800362e:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8003632:	d0f8      	beq.n	8003626 <_dtoa_r+0xd3a>
 8003634:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003636:	3301      	adds	r3, #1
 8003638:	9306      	str	r3, [sp, #24]
 800363a:	f7ff bb82 	b.w	8002d42 <_dtoa_r+0x456>
 800363e:	2602      	movs	r6, #2
 8003640:	f7ff bacc 	b.w	8002bdc <_dtoa_r+0x2f0>
 8003644:	9b08      	ldr	r3, [sp, #32]
 8003646:	2b00      	cmp	r3, #0
 8003648:	f43f aed4 	beq.w	80033f4 <_dtoa_r+0xb08>
 800364c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800364e:	2f00      	cmp	r7, #0
 8003650:	f77f ab91 	ble.w	8002d76 <_dtoa_r+0x48a>
 8003654:	2200      	movs	r2, #0
 8003656:	4b46      	ldr	r3, [pc, #280]	; (8003770 <_dtoa_r+0xe84>)
 8003658:	4620      	mov	r0, r4
 800365a:	4629      	mov	r1, r5
 800365c:	f003 fe1c 	bl	8007298 <__aeabi_dmul>
 8003660:	4604      	mov	r4, r0
 8003662:	460d      	mov	r5, r1
 8003664:	1c70      	adds	r0, r6, #1
 8003666:	e9cd 4500 	strd	r4, r5, [sp]
 800366a:	f003 fdab 	bl	80071c4 <__aeabi_i2d>
 800366e:	4622      	mov	r2, r4
 8003670:	462b      	mov	r3, r5
 8003672:	f003 fe11 	bl	8007298 <__aeabi_dmul>
 8003676:	4b40      	ldr	r3, [pc, #256]	; (8003778 <_dtoa_r+0xe8c>)
 8003678:	2200      	movs	r2, #0
 800367a:	f003 fc57 	bl	8006f2c <__adddf3>
 800367e:	9b06      	ldr	r3, [sp, #24]
 8003680:	9710      	str	r7, [sp, #64]	; 0x40
 8003682:	3b01      	subs	r3, #1
 8003684:	4604      	mov	r4, r0
 8003686:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800368a:	9312      	str	r3, [sp, #72]	; 0x48
 800368c:	f7ff bac9 	b.w	8002c22 <_dtoa_r+0x336>
 8003690:	9a06      	ldr	r2, [sp, #24]
 8003692:	3201      	adds	r2, #1
 8003694:	9206      	str	r2, [sp, #24]
 8003696:	2231      	movs	r2, #49	; 0x31
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	f7ff bb52 	b.w	8002d42 <_dtoa_r+0x456>
 800369e:	2239      	movs	r2, #57	; 0x39
 80036a0:	46a9      	mov	r9, r5
 80036a2:	7032      	strb	r2, [r6, #0]
 80036a4:	4645      	mov	r5, r8
 80036a6:	e50b      	b.n	80030c0 <_dtoa_r+0x7d4>
 80036a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036aa:	3301      	adds	r3, #1
 80036ac:	9306      	str	r3, [sp, #24]
 80036ae:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 80036b2:	e41e      	b.n	8002ef2 <_dtoa_r+0x606>
 80036b4:	f47f af24 	bne.w	8003500 <_dtoa_r+0xc14>
 80036b8:	07da      	lsls	r2, r3, #31
 80036ba:	f57f af21 	bpl.w	8003500 <_dtoa_r+0xc14>
 80036be:	e71a      	b.n	80034f6 <_dtoa_r+0xc0a>
 80036c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036c2:	3301      	adds	r3, #1
 80036c4:	46da      	mov	sl, fp
 80036c6:	9306      	str	r3, [sp, #24]
 80036c8:	f8dd b000 	ldr.w	fp, [sp]
 80036cc:	e411      	b.n	8002ef2 <_dtoa_r+0x606>
 80036ce:	9a06      	ldr	r2, [sp, #24]
 80036d0:	2b39      	cmp	r3, #57	; 0x39
 80036d2:	f102 0201 	add.w	r2, r2, #1
 80036d6:	9206      	str	r2, [sp, #24]
 80036d8:	f106 0401 	add.w	r4, r6, #1
 80036dc:	d0df      	beq.n	800369e <_dtoa_r+0xdb2>
 80036de:	f1b9 0f00 	cmp.w	r9, #0
 80036e2:	f73f af0b 	bgt.w	80034fc <_dtoa_r+0xc10>
 80036e6:	e70b      	b.n	8003500 <_dtoa_r+0xc14>
 80036e8:	9b03      	ldr	r3, [sp, #12]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	dc02      	bgt.n	80036f4 <_dtoa_r+0xe08>
 80036ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80036f2:	e63a      	b.n	800336a <_dtoa_r+0xa7e>
 80036f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80036f6:	9308      	str	r3, [sp, #32]
 80036f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80036fc:	e5b0      	b.n	8003260 <_dtoa_r+0x974>
 80036fe:	9b03      	ldr	r3, [sp, #12]
 8003700:	2b02      	cmp	r3, #2
 8003702:	dcf7      	bgt.n	80036f4 <_dtoa_r+0xe08>
 8003704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003706:	f8cd 8018 	str.w	r8, [sp, #24]
 800370a:	9308      	str	r3, [sp, #32]
 800370c:	e52c      	b.n	8003168 <_dtoa_r+0x87c>
 800370e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003710:	3301      	adds	r3, #1
 8003712:	9306      	str	r3, [sp, #24]
 8003714:	f7ff bbed 	b.w	8002ef2 <_dtoa_r+0x606>
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <_dtoa_r+0xe90>)
 800371a:	9302      	str	r3, [sp, #8]
 800371c:	f7ff b924 	b.w	8002968 <_dtoa_r+0x7c>
 8003720:	f43f ac85 	beq.w	800302e <_dtoa_r+0x742>
 8003724:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8003728:	e47c      	b.n	8003024 <_dtoa_r+0x738>
 800372a:	2400      	movs	r4, #0
 800372c:	f8ca 4044 	str.w	r4, [sl, #68]	; 0x44
 8003730:	4621      	mov	r1, r4
 8003732:	4650      	mov	r0, sl
 8003734:	f001 f9b2 	bl	8004a9c <_Balloc>
 8003738:	9002      	str	r0, [sp, #8]
 800373a:	b968      	cbnz	r0, 8003758 <_dtoa_r+0xe6c>
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <_dtoa_r+0xe94>)
 800373e:	4811      	ldr	r0, [pc, #68]	; (8003784 <_dtoa_r+0xe98>)
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003746:	f002 ffb5 	bl	80066b4 <__assert_func>
 800374a:	4602      	mov	r2, r0
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <_dtoa_r+0xe94>)
 800374e:	480d      	ldr	r0, [pc, #52]	; (8003784 <_dtoa_r+0xe98>)
 8003750:	f240 21ea 	movw	r1, #746	; 0x2ea
 8003754:	f002 ffae 	bl	80066b4 <__assert_func>
 8003758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375c:	9308      	str	r3, [sp, #32]
 800375e:	9a02      	ldr	r2, [sp, #8]
 8003760:	930f      	str	r3, [sp, #60]	; 0x3c
 8003762:	2301      	movs	r3, #1
 8003764:	f8ca 2040 	str.w	r2, [sl, #64]	; 0x40
 8003768:	940a      	str	r4, [sp, #40]	; 0x28
 800376a:	930b      	str	r3, [sp, #44]	; 0x2c
 800376c:	f7ff bb07 	b.w	8002d7e <_dtoa_r+0x492>
 8003770:	40240000 	.word	0x40240000
 8003774:	3fe00000 	.word	0x3fe00000
 8003778:	401c0000 	.word	0x401c0000
 800377c:	0801cab8 	.word	0x0801cab8
 8003780:	0801cac4 	.word	0x0801cac4
 8003784:	0801cad8 	.word	0x0801cad8

08003788 <__sflush_r>:
 8003788:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800378c:	b29a      	uxth	r2, r3
 800378e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003792:	460c      	mov	r4, r1
 8003794:	0711      	lsls	r1, r2, #28
 8003796:	4680      	mov	r8, r0
 8003798:	d448      	bmi.n	800382c <__sflush_r+0xa4>
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037a0:	2a00      	cmp	r2, #0
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	dd5d      	ble.n	8003862 <__sflush_r+0xda>
 80037a6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	d057      	beq.n	800385c <__sflush_r+0xd4>
 80037ac:	2200      	movs	r2, #0
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f8d8 6000 	ldr.w	r6, [r8]
 80037b4:	69e1      	ldr	r1, [r4, #28]
 80037b6:	f8c8 2000 	str.w	r2, [r8]
 80037ba:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
 80037be:	d154      	bne.n	800386a <__sflush_r+0xe2>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4640      	mov	r0, r8
 80037c4:	47a8      	blx	r5
 80037c6:	1c43      	adds	r3, r0, #1
 80037c8:	d066      	beq.n	8003898 <__sflush_r+0x110>
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80037ce:	69e1      	ldr	r1, [r4, #28]
 80037d0:	075f      	lsls	r7, r3, #29
 80037d2:	d505      	bpl.n	80037e0 <__sflush_r+0x58>
 80037d4:	6862      	ldr	r2, [r4, #4]
 80037d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037d8:	1a80      	subs	r0, r0, r2
 80037da:	b10b      	cbz	r3, 80037e0 <__sflush_r+0x58>
 80037dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80037de:	1ac0      	subs	r0, r0, r3
 80037e0:	4602      	mov	r2, r0
 80037e2:	2300      	movs	r3, #0
 80037e4:	4640      	mov	r0, r8
 80037e6:	47a8      	blx	r5
 80037e8:	1c45      	adds	r5, r0, #1
 80037ea:	d148      	bne.n	800387e <__sflush_r+0xf6>
 80037ec:	f8d8 2000 	ldr.w	r2, [r8]
 80037f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f4:	2a00      	cmp	r2, #0
 80037f6:	d05c      	beq.n	80038b2 <__sflush_r+0x12a>
 80037f8:	2a1d      	cmp	r2, #29
 80037fa:	d001      	beq.n	8003800 <__sflush_r+0x78>
 80037fc:	2a16      	cmp	r2, #22
 80037fe:	d164      	bne.n	80038ca <__sflush_r+0x142>
 8003800:	6922      	ldr	r2, [r4, #16]
 8003802:	2100      	movs	r1, #0
 8003804:	e9c4 2100 	strd	r2, r1, [r4]
 8003808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800380c:	81a3      	strh	r3, [r4, #12]
 800380e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003810:	f8c8 6000 	str.w	r6, [r8]
 8003814:	b311      	cbz	r1, 800385c <__sflush_r+0xd4>
 8003816:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800381a:	4299      	cmp	r1, r3
 800381c:	d002      	beq.n	8003824 <__sflush_r+0x9c>
 800381e:	4640      	mov	r0, r8
 8003820:	f000 f9ce 	bl	8003bc0 <_free_r>
 8003824:	2000      	movs	r0, #0
 8003826:	6320      	str	r0, [r4, #48]	; 0x30
 8003828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800382c:	6926      	ldr	r6, [r4, #16]
 800382e:	b1ae      	cbz	r6, 800385c <__sflush_r+0xd4>
 8003830:	6825      	ldr	r5, [r4, #0]
 8003832:	6026      	str	r6, [r4, #0]
 8003834:	0791      	lsls	r1, r2, #30
 8003836:	bf0c      	ite	eq
 8003838:	6963      	ldreq	r3, [r4, #20]
 800383a:	2300      	movne	r3, #0
 800383c:	1bad      	subs	r5, r5, r6
 800383e:	60a3      	str	r3, [r4, #8]
 8003840:	e00a      	b.n	8003858 <__sflush_r+0xd0>
 8003842:	462b      	mov	r3, r5
 8003844:	4632      	mov	r2, r6
 8003846:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003848:	69e1      	ldr	r1, [r4, #28]
 800384a:	4640      	mov	r0, r8
 800384c:	47b8      	blx	r7
 800384e:	2800      	cmp	r0, #0
 8003850:	eba5 0500 	sub.w	r5, r5, r0
 8003854:	4406      	add	r6, r0
 8003856:	dd0a      	ble.n	800386e <__sflush_r+0xe6>
 8003858:	2d00      	cmp	r5, #0
 800385a:	dcf2      	bgt.n	8003842 <__sflush_r+0xba>
 800385c:	2000      	movs	r0, #0
 800385e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003862:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003864:	2a00      	cmp	r2, #0
 8003866:	dc9e      	bgt.n	80037a6 <__sflush_r+0x1e>
 8003868:	e7f8      	b.n	800385c <__sflush_r+0xd4>
 800386a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800386c:	e7b0      	b.n	80037d0 <__sflush_r+0x48>
 800386e:	89a3      	ldrh	r3, [r4, #12]
 8003870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800387a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800387e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003882:	6922      	ldr	r2, [r4, #16]
 8003884:	6022      	str	r2, [r4, #0]
 8003886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800388a:	2200      	movs	r2, #0
 800388c:	6062      	str	r2, [r4, #4]
 800388e:	04da      	lsls	r2, r3, #19
 8003890:	81a3      	strh	r3, [r4, #12]
 8003892:	d5bc      	bpl.n	800380e <__sflush_r+0x86>
 8003894:	6520      	str	r0, [r4, #80]	; 0x50
 8003896:	e7ba      	b.n	800380e <__sflush_r+0x86>
 8003898:	f8d8 3000 	ldr.w	r3, [r8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d094      	beq.n	80037ca <__sflush_r+0x42>
 80038a0:	2b1d      	cmp	r3, #29
 80038a2:	d00f      	beq.n	80038c4 <__sflush_r+0x13c>
 80038a4:	2b16      	cmp	r3, #22
 80038a6:	d00d      	beq.n	80038c4 <__sflush_r+0x13c>
 80038a8:	89a3      	ldrh	r3, [r4, #12]
 80038aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ae:	81a3      	strh	r3, [r4, #12]
 80038b0:	e7d5      	b.n	800385e <__sflush_r+0xd6>
 80038b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038b6:	6921      	ldr	r1, [r4, #16]
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	04db      	lsls	r3, r3, #19
 80038bc:	e9c4 1200 	strd	r1, r2, [r4]
 80038c0:	d5a5      	bpl.n	800380e <__sflush_r+0x86>
 80038c2:	e7e7      	b.n	8003894 <__sflush_r+0x10c>
 80038c4:	f8c8 6000 	str.w	r6, [r8]
 80038c8:	e7c8      	b.n	800385c <__sflush_r+0xd4>
 80038ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ce:	81a3      	strh	r3, [r4, #12]
 80038d0:	e7c5      	b.n	800385e <__sflush_r+0xd6>
 80038d2:	bf00      	nop

080038d4 <_fflush_r>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	b082      	sub	sp, #8
 80038da:	b108      	cbz	r0, 80038e0 <_fflush_r+0xc>
 80038dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80038de:	b123      	cbz	r3, 80038ea <_fflush_r+0x16>
 80038e0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80038e4:	b948      	cbnz	r0, 80038fa <_fflush_r+0x26>
 80038e6:	b002      	add	sp, #8
 80038e8:	bd10      	pop	{r4, pc}
 80038ea:	9101      	str	r1, [sp, #4]
 80038ec:	f000 f8f8 	bl	8003ae0 <__sinit>
 80038f0:	9901      	ldr	r1, [sp, #4]
 80038f2:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d0f5      	beq.n	80038e6 <_fflush_r+0x12>
 80038fa:	4620      	mov	r0, r4
 80038fc:	b002      	add	sp, #8
 80038fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003902:	f7ff bf41 	b.w	8003788 <__sflush_r>
 8003906:	bf00      	nop

08003908 <fflush>:
 8003908:	b120      	cbz	r0, 8003914 <fflush+0xc>
 800390a:	4b05      	ldr	r3, [pc, #20]	; (8003920 <fflush+0x18>)
 800390c:	4601      	mov	r1, r0
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	f7ff bfe0 	b.w	80038d4 <_fflush_r>
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <fflush+0x1c>)
 8003916:	4904      	ldr	r1, [pc, #16]	; (8003928 <fflush+0x20>)
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	f000 bbf5 	b.w	8004108 <_fwalk_reent>
 800391e:	bf00      	nop
 8003920:	20000078 	.word	0x20000078
 8003924:	0800d3f0 	.word	0x0800d3f0
 8003928:	080038d5 	.word	0x080038d5

0800392c <__fp_lock>:
 800392c:	2000      	movs	r0, #0
 800392e:	4770      	bx	lr

08003930 <_cleanup_r>:
 8003930:	4901      	ldr	r1, [pc, #4]	; (8003938 <_cleanup_r+0x8>)
 8003932:	f000 bbe9 	b.w	8004108 <_fwalk_reent>
 8003936:	bf00      	nop
 8003938:	0800675d 	.word	0x0800675d

0800393c <__sinit.part.0>:
 800393c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	6845      	ldr	r5, [r0, #4]
 8003942:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <__sinit.part.0+0xb8>)
 8003944:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003946:	2400      	movs	r4, #0
 8003948:	4607      	mov	r7, r0
 800394a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
 800394e:	2304      	movs	r3, #4
 8003950:	2103      	movs	r1, #3
 8003952:	e9c0 12b9 	strd	r1, r2, [r0, #740]	; 0x2e4
 8003956:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 800395a:	4621      	mov	r1, r4
 800395c:	60eb      	str	r3, [r5, #12]
 800395e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8003962:	666c      	str	r4, [r5, #100]	; 0x64
 8003964:	e9c5 4400 	strd	r4, r4, [r5]
 8003968:	60ac      	str	r4, [r5, #8]
 800396a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 800396e:	61ac      	str	r4, [r5, #24]
 8003970:	2208      	movs	r2, #8
 8003972:	f7fd f861 	bl	8000a38 <memset>
 8003976:	f8df b088 	ldr.w	fp, [pc, #136]	; 8003a00 <__sinit.part.0+0xc4>
 800397a:	68be      	ldr	r6, [r7, #8]
 800397c:	f8df a084 	ldr.w	sl, [pc, #132]	; 8003a04 <__sinit.part.0+0xc8>
 8003980:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8003a08 <__sinit.part.0+0xcc>
 8003984:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003a0c <__sinit.part.0+0xd0>
 8003988:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <__sinit.part.0+0xbc>)
 800398a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 800398e:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 8003992:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 8003996:	4621      	mov	r1, r4
 8003998:	60f3      	str	r3, [r6, #12]
 800399a:	2208      	movs	r2, #8
 800399c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 80039a0:	6674      	str	r4, [r6, #100]	; 0x64
 80039a2:	e9c6 4400 	strd	r4, r4, [r6]
 80039a6:	60b4      	str	r4, [r6, #8]
 80039a8:	e9c6 4404 	strd	r4, r4, [r6, #16]
 80039ac:	61b4      	str	r4, [r6, #24]
 80039ae:	f7fd f843 	bl	8000a38 <memset>
 80039b2:	68fd      	ldr	r5, [r7, #12]
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <__sinit.part.0+0xc0>)
 80039b6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 80039ba:	e9c6 6b07 	strd	r6, fp, [r6, #28]
 80039be:	e9c6 a909 	strd	sl, r9, [r6, #36]	; 0x24
 80039c2:	4621      	mov	r1, r4
 80039c4:	60eb      	str	r3, [r5, #12]
 80039c6:	666c      	str	r4, [r5, #100]	; 0x64
 80039c8:	e9c5 4400 	strd	r4, r4, [r5]
 80039cc:	60ac      	str	r4, [r5, #8]
 80039ce:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80039d2:	61ac      	str	r4, [r5, #24]
 80039d4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80039d8:	2208      	movs	r2, #8
 80039da:	f7fd f82d 	bl	8000a38 <memset>
 80039de:	2301      	movs	r3, #1
 80039e0:	e9c5 5b07 	strd	r5, fp, [r5, #28]
 80039e4:	e9c5 a909 	strd	sl, r9, [r5, #36]	; 0x24
 80039e8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 80039ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	08003931 	.word	0x08003931
 80039f8:	00010009 	.word	0x00010009
 80039fc:	00020012 	.word	0x00020012
 8003a00:	08005865 	.word	0x08005865
 8003a04:	0800588d 	.word	0x0800588d
 8003a08:	080058cd 	.word	0x080058cd
 8003a0c:	080058ed 	.word	0x080058ed

08003a10 <__fp_unlock>:
 8003a10:	2000      	movs	r0, #0
 8003a12:	4770      	bx	lr

08003a14 <__sfmoreglue>:
 8003a14:	b570      	push	{r4, r5, r6, lr}
 8003a16:	1e4a      	subs	r2, r1, #1
 8003a18:	2568      	movs	r5, #104	; 0x68
 8003a1a:	fb05 f502 	mul.w	r5, r5, r2
 8003a1e:	460e      	mov	r6, r1
 8003a20:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a24:	f000 fc2c 	bl	8004280 <_malloc_r>
 8003a28:	4604      	mov	r4, r0
 8003a2a:	b140      	cbz	r0, 8003a3e <__sfmoreglue+0x2a>
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	300c      	adds	r0, #12
 8003a30:	6066      	str	r6, [r4, #4]
 8003a32:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a36:	6021      	str	r1, [r4, #0]
 8003a38:	60a0      	str	r0, [r4, #8]
 8003a3a:	f7fc fffd 	bl	8000a38 <memset>
 8003a3e:	4620      	mov	r0, r4
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	bf00      	nop

08003a44 <__sfp>:
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <__sfp+0x80>)
 8003a46:	b570      	push	{r4, r5, r6, lr}
 8003a48:	681d      	ldr	r5, [r3, #0]
 8003a4a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	b34b      	cbz	r3, 8003aa4 <__sfp+0x60>
 8003a50:	f505 7538 	add.w	r5, r5, #736	; 0x2e0
 8003a54:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	d505      	bpl.n	8003a68 <__sfp+0x24>
 8003a5c:	e01e      	b.n	8003a9c <__sfp+0x58>
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8003a66:	d019      	beq.n	8003a9c <__sfp+0x58>
 8003a68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	d1f6      	bne.n	8003a5e <__sfp+0x1a>
 8003a70:	2500      	movs	r5, #0
 8003a72:	4b15      	ldr	r3, [pc, #84]	; (8003ac8 <__sfp+0x84>)
 8003a74:	6665      	str	r5, [r4, #100]	; 0x64
 8003a76:	e9c4 5500 	strd	r5, r5, [r4]
 8003a7a:	60a5      	str	r5, [r4, #8]
 8003a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a80:	61a5      	str	r5, [r4, #24]
 8003a82:	4629      	mov	r1, r5
 8003a84:	60e3      	str	r3, [r4, #12]
 8003a86:	2208      	movs	r2, #8
 8003a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a8c:	f7fc ffd4 	bl	8000a38 <memset>
 8003a90:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 8003a94:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8003a98:	4620      	mov	r0, r4
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	682c      	ldr	r4, [r5, #0]
 8003a9e:	b12c      	cbz	r4, 8003aac <__sfp+0x68>
 8003aa0:	4625      	mov	r5, r4
 8003aa2:	e7d7      	b.n	8003a54 <__sfp+0x10>
 8003aa4:	4628      	mov	r0, r5
 8003aa6:	f7ff ff49 	bl	800393c <__sinit.part.0>
 8003aaa:	e7d1      	b.n	8003a50 <__sfp+0xc>
 8003aac:	2104      	movs	r1, #4
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff ffb0 	bl	8003a14 <__sfmoreglue>
 8003ab4:	4604      	mov	r4, r0
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	2800      	cmp	r0, #0
 8003aba:	d1f1      	bne.n	8003aa0 <__sfp+0x5c>
 8003abc:	230c      	movs	r3, #12
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	e7ea      	b.n	8003a98 <__sfp+0x54>
 8003ac2:	bf00      	nop
 8003ac4:	0800d3f0 	.word	0x0800d3f0
 8003ac8:	ffff0001 	.word	0xffff0001

08003acc <_cleanup>:
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <_cleanup+0xc>)
 8003ace:	4903      	ldr	r1, [pc, #12]	; (8003adc <_cleanup+0x10>)
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f000 bb19 	b.w	8004108 <_fwalk_reent>
 8003ad6:	bf00      	nop
 8003ad8:	0800d3f0 	.word	0x0800d3f0
 8003adc:	0800675d 	.word	0x0800675d

08003ae0 <__sinit>:
 8003ae0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003ae2:	b103      	cbz	r3, 8003ae6 <__sinit+0x6>
 8003ae4:	4770      	bx	lr
 8003ae6:	e729      	b.n	800393c <__sinit.part.0>

08003ae8 <__sfp_lock_acquire>:
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop

08003aec <__sfp_lock_release>:
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <__sinit_lock_acquire>:
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop

08003af4 <__sinit_lock_release>:
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <__fp_lock_all>:
 8003af8:	4b02      	ldr	r3, [pc, #8]	; (8003b04 <__fp_lock_all+0xc>)
 8003afa:	4903      	ldr	r1, [pc, #12]	; (8003b08 <__fp_lock_all+0x10>)
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	f000 badd 	b.w	80040bc <_fwalk>
 8003b02:	bf00      	nop
 8003b04:	20000078 	.word	0x20000078
 8003b08:	0800392d 	.word	0x0800392d

08003b0c <__fp_unlock_all>:
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <__fp_unlock_all+0xc>)
 8003b0e:	4903      	ldr	r1, [pc, #12]	; (8003b1c <__fp_unlock_all+0x10>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f000 bad3 	b.w	80040bc <_fwalk>
 8003b16:	bf00      	nop
 8003b18:	20000078 	.word	0x20000078
 8003b1c:	08003a11 	.word	0x08003a11

08003b20 <_malloc_trim_r>:
 8003b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b22:	4f24      	ldr	r7, [pc, #144]	; (8003bb4 <_malloc_trim_r+0x94>)
 8003b24:	460c      	mov	r4, r1
 8003b26:	4606      	mov	r6, r0
 8003b28:	f000 ffb4 	bl	8004a94 <__malloc_lock>
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	685d      	ldr	r5, [r3, #4]
 8003b30:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8003b34:	310f      	adds	r1, #15
 8003b36:	f025 0503 	bic.w	r5, r5, #3
 8003b3a:	4429      	add	r1, r5
 8003b3c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8003b40:	f021 010f 	bic.w	r1, r1, #15
 8003b44:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8003b48:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8003b4c:	db07      	blt.n	8003b5e <_malloc_trim_r+0x3e>
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4630      	mov	r0, r6
 8003b52:	f004 fc7f 	bl	8008454 <_sbrk_r>
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	442b      	add	r3, r5
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	d004      	beq.n	8003b68 <_malloc_trim_r+0x48>
 8003b5e:	4630      	mov	r0, r6
 8003b60:	f000 ff9a 	bl	8004a98 <__malloc_unlock>
 8003b64:	2000      	movs	r0, #0
 8003b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b68:	4261      	negs	r1, r4
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	f004 fc72 	bl	8008454 <_sbrk_r>
 8003b70:	3001      	adds	r0, #1
 8003b72:	d00d      	beq.n	8003b90 <_malloc_trim_r+0x70>
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <_malloc_trim_r+0x98>)
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	6819      	ldr	r1, [r3, #0]
 8003b7a:	1b2d      	subs	r5, r5, r4
 8003b7c:	f045 0501 	orr.w	r5, r5, #1
 8003b80:	4630      	mov	r0, r6
 8003b82:	1b09      	subs	r1, r1, r4
 8003b84:	6055      	str	r5, [r2, #4]
 8003b86:	6019      	str	r1, [r3, #0]
 8003b88:	f000 ff86 	bl	8004a98 <__malloc_unlock>
 8003b8c:	2001      	movs	r0, #1
 8003b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b90:	2100      	movs	r1, #0
 8003b92:	4630      	mov	r0, r6
 8003b94:	f004 fc5e 	bl	8008454 <_sbrk_r>
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	1a83      	subs	r3, r0, r2
 8003b9c:	2b0f      	cmp	r3, #15
 8003b9e:	ddde      	ble.n	8003b5e <_malloc_trim_r+0x3e>
 8003ba0:	4c06      	ldr	r4, [pc, #24]	; (8003bbc <_malloc_trim_r+0x9c>)
 8003ba2:	4905      	ldr	r1, [pc, #20]	; (8003bb8 <_malloc_trim_r+0x98>)
 8003ba4:	6824      	ldr	r4, [r4, #0]
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	1b00      	subs	r0, r0, r4
 8003bac:	6053      	str	r3, [r2, #4]
 8003bae:	6008      	str	r0, [r1, #0]
 8003bb0:	e7d5      	b.n	8003b5e <_malloc_trim_r+0x3e>
 8003bb2:	bf00      	nop
 8003bb4:	200004a8 	.word	0x200004a8
 8003bb8:	20000cb4 	.word	0x20000cb4
 8003bbc:	200008b0 	.word	0x200008b0

08003bc0 <_free_r>:
 8003bc0:	2900      	cmp	r1, #0
 8003bc2:	d05e      	beq.n	8003c82 <_free_r+0xc2>
 8003bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc6:	460f      	mov	r7, r1
 8003bc8:	4606      	mov	r6, r0
 8003bca:	f000 ff63 	bl	8004a94 <__malloc_lock>
 8003bce:	f857 cc04 	ldr.w	ip, [r7, #-4]
 8003bd2:	4d75      	ldr	r5, [pc, #468]	; (8003da8 <_free_r+0x1e8>)
 8003bd4:	f02c 0301 	bic.w	r3, ip, #1
 8003bd8:	f1a7 0008 	sub.w	r0, r7, #8
 8003bdc:	18c2      	adds	r2, r0, r3
 8003bde:	68a9      	ldr	r1, [r5, #8]
 8003be0:	6854      	ldr	r4, [r2, #4]
 8003be2:	4291      	cmp	r1, r2
 8003be4:	f024 0403 	bic.w	r4, r4, #3
 8003be8:	f000 8084 	beq.w	8003cf4 <_free_r+0x134>
 8003bec:	f01c 0f01 	tst.w	ip, #1
 8003bf0:	6054      	str	r4, [r2, #4]
 8003bf2:	eb02 0104 	add.w	r1, r2, r4
 8003bf6:	d133      	bne.n	8003c60 <_free_r+0xa0>
 8003bf8:	f857 ec08 	ldr.w	lr, [r7, #-8]
 8003bfc:	6849      	ldr	r1, [r1, #4]
 8003bfe:	eba0 000e 	sub.w	r0, r0, lr
 8003c02:	f105 0c08 	add.w	ip, r5, #8
 8003c06:	6887      	ldr	r7, [r0, #8]
 8003c08:	4567      	cmp	r7, ip
 8003c0a:	4473      	add	r3, lr
 8003c0c:	f001 0101 	and.w	r1, r1, #1
 8003c10:	d060      	beq.n	8003cd4 <_free_r+0x114>
 8003c12:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8003c16:	f8c7 e00c 	str.w	lr, [r7, #12]
 8003c1a:	f8ce 7008 	str.w	r7, [lr, #8]
 8003c1e:	2900      	cmp	r1, #0
 8003c20:	f000 808d 	beq.w	8003d3e <_free_r+0x17e>
 8003c24:	f043 0101 	orr.w	r1, r3, #1
 8003c28:	6041      	str	r1, [r0, #4]
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c30:	d230      	bcs.n	8003c94 <_free_r+0xd4>
 8003c32:	08db      	lsrs	r3, r3, #3
 8003c34:	1c59      	adds	r1, r3, #1
 8003c36:	686c      	ldr	r4, [r5, #4]
 8003c38:	109a      	asrs	r2, r3, #2
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4093      	lsls	r3, r2
 8003c3e:	4323      	orrs	r3, r4
 8003c40:	eb05 02c1 	add.w	r2, r5, r1, lsl #3
 8003c44:	f855 4031 	ldr.w	r4, [r5, r1, lsl #3]
 8003c48:	606b      	str	r3, [r5, #4]
 8003c4a:	3a08      	subs	r2, #8
 8003c4c:	e9c0 4202 	strd	r4, r2, [r0, #8]
 8003c50:	f845 0031 	str.w	r0, [r5, r1, lsl #3]
 8003c54:	60e0      	str	r0, [r4, #12]
 8003c56:	4630      	mov	r0, r6
 8003c58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c5c:	f000 bf1c 	b.w	8004a98 <__malloc_unlock>
 8003c60:	6849      	ldr	r1, [r1, #4]
 8003c62:	07c9      	lsls	r1, r1, #31
 8003c64:	d40e      	bmi.n	8003c84 <_free_r+0xc4>
 8003c66:	4423      	add	r3, r4
 8003c68:	f105 0c08 	add.w	ip, r5, #8
 8003c6c:	6891      	ldr	r1, [r2, #8]
 8003c6e:	4561      	cmp	r1, ip
 8003c70:	f043 0401 	orr.w	r4, r3, #1
 8003c74:	d06b      	beq.n	8003d4e <_free_r+0x18e>
 8003c76:	68d2      	ldr	r2, [r2, #12]
 8003c78:	60ca      	str	r2, [r1, #12]
 8003c7a:	6091      	str	r1, [r2, #8]
 8003c7c:	6044      	str	r4, [r0, #4]
 8003c7e:	50c3      	str	r3, [r0, r3]
 8003c80:	e7d4      	b.n	8003c2c <_free_r+0x6c>
 8003c82:	4770      	bx	lr
 8003c84:	f043 0101 	orr.w	r1, r3, #1
 8003c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8c:	f847 1c04 	str.w	r1, [r7, #-4]
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	d3ce      	bcc.n	8003c32 <_free_r+0x72>
 8003c94:	0a5a      	lsrs	r2, r3, #9
 8003c96:	2a04      	cmp	r2, #4
 8003c98:	d846      	bhi.n	8003d28 <_free_r+0x168>
 8003c9a:	099a      	lsrs	r2, r3, #6
 8003c9c:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8003ca0:	00ff      	lsls	r7, r7, #3
 8003ca2:	f102 0138 	add.w	r1, r2, #56	; 0x38
 8003ca6:	19ec      	adds	r4, r5, r7
 8003ca8:	59ea      	ldr	r2, [r5, r7]
 8003caa:	3c08      	subs	r4, #8
 8003cac:	4294      	cmp	r4, r2
 8003cae:	d055      	beq.n	8003d5c <_free_r+0x19c>
 8003cb0:	6851      	ldr	r1, [r2, #4]
 8003cb2:	f021 0103 	bic.w	r1, r1, #3
 8003cb6:	4299      	cmp	r1, r3
 8003cb8:	d902      	bls.n	8003cc0 <_free_r+0x100>
 8003cba:	6892      	ldr	r2, [r2, #8]
 8003cbc:	4294      	cmp	r4, r2
 8003cbe:	d1f7      	bne.n	8003cb0 <_free_r+0xf0>
 8003cc0:	68d4      	ldr	r4, [r2, #12]
 8003cc2:	e9c0 2402 	strd	r2, r4, [r0, #8]
 8003cc6:	60a0      	str	r0, [r4, #8]
 8003cc8:	60d0      	str	r0, [r2, #12]
 8003cca:	4630      	mov	r0, r6
 8003ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003cd0:	f000 bee2 	b.w	8004a98 <__malloc_unlock>
 8003cd4:	2900      	cmp	r1, #0
 8003cd6:	d162      	bne.n	8003d9e <_free_r+0x1de>
 8003cd8:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8003cdc:	4423      	add	r3, r4
 8003cde:	f043 0401 	orr.w	r4, r3, #1
 8003ce2:	60d1      	str	r1, [r2, #12]
 8003ce4:	608a      	str	r2, [r1, #8]
 8003ce6:	6044      	str	r4, [r0, #4]
 8003ce8:	50c3      	str	r3, [r0, r3]
 8003cea:	4630      	mov	r0, r6
 8003cec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003cf0:	f000 bed2 	b.w	8004a98 <__malloc_unlock>
 8003cf4:	f01c 0f01 	tst.w	ip, #1
 8003cf8:	4423      	add	r3, r4
 8003cfa:	d107      	bne.n	8003d0c <_free_r+0x14c>
 8003cfc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8003d00:	1a80      	subs	r0, r0, r2
 8003d02:	4413      	add	r3, r2
 8003d04:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
 8003d08:	60ca      	str	r2, [r1, #12]
 8003d0a:	6091      	str	r1, [r2, #8]
 8003d0c:	4a27      	ldr	r2, [pc, #156]	; (8003dac <_free_r+0x1ec>)
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	f043 0101 	orr.w	r1, r3, #1
 8003d14:	429a      	cmp	r2, r3
 8003d16:	6041      	str	r1, [r0, #4]
 8003d18:	60a8      	str	r0, [r5, #8]
 8003d1a:	d89c      	bhi.n	8003c56 <_free_r+0x96>
 8003d1c:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <_free_r+0x1f0>)
 8003d1e:	4630      	mov	r0, r6
 8003d20:	6819      	ldr	r1, [r3, #0]
 8003d22:	f7ff fefd 	bl	8003b20 <_malloc_trim_r>
 8003d26:	e796      	b.n	8003c56 <_free_r+0x96>
 8003d28:	2a14      	cmp	r2, #20
 8003d2a:	d90a      	bls.n	8003d42 <_free_r+0x182>
 8003d2c:	2a54      	cmp	r2, #84	; 0x54
 8003d2e:	d81d      	bhi.n	8003d6c <_free_r+0x1ac>
 8003d30:	0b1a      	lsrs	r2, r3, #12
 8003d32:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8003d36:	00ff      	lsls	r7, r7, #3
 8003d38:	f102 016e 	add.w	r1, r2, #110	; 0x6e
 8003d3c:	e7b3      	b.n	8003ca6 <_free_r+0xe6>
 8003d3e:	4423      	add	r3, r4
 8003d40:	e794      	b.n	8003c6c <_free_r+0xac>
 8003d42:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 8003d46:	00ff      	lsls	r7, r7, #3
 8003d48:	f102 015b 	add.w	r1, r2, #91	; 0x5b
 8003d4c:	e7ab      	b.n	8003ca6 <_free_r+0xe6>
 8003d4e:	e9c5 0004 	strd	r0, r0, [r5, #16]
 8003d52:	e9c0 cc02 	strd	ip, ip, [r0, #8]
 8003d56:	6044      	str	r4, [r0, #4]
 8003d58:	50c3      	str	r3, [r0, r3]
 8003d5a:	e77c      	b.n	8003c56 <_free_r+0x96>
 8003d5c:	686b      	ldr	r3, [r5, #4]
 8003d5e:	1089      	asrs	r1, r1, #2
 8003d60:	2701      	movs	r7, #1
 8003d62:	fa07 f101 	lsl.w	r1, r7, r1
 8003d66:	4319      	orrs	r1, r3
 8003d68:	6069      	str	r1, [r5, #4]
 8003d6a:	e7aa      	b.n	8003cc2 <_free_r+0x102>
 8003d6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003d70:	d806      	bhi.n	8003d80 <_free_r+0x1c0>
 8003d72:	0bda      	lsrs	r2, r3, #15
 8003d74:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8003d78:	00ff      	lsls	r7, r7, #3
 8003d7a:	f102 0177 	add.w	r1, r2, #119	; 0x77
 8003d7e:	e792      	b.n	8003ca6 <_free_r+0xe6>
 8003d80:	f240 5154 	movw	r1, #1364	; 0x554
 8003d84:	428a      	cmp	r2, r1
 8003d86:	d806      	bhi.n	8003d96 <_free_r+0x1d6>
 8003d88:	0c9a      	lsrs	r2, r3, #18
 8003d8a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8003d8e:	00ff      	lsls	r7, r7, #3
 8003d90:	f102 017c 	add.w	r1, r2, #124	; 0x7c
 8003d94:	e787      	b.n	8003ca6 <_free_r+0xe6>
 8003d96:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 8003d9a:	217e      	movs	r1, #126	; 0x7e
 8003d9c:	e783      	b.n	8003ca6 <_free_r+0xe6>
 8003d9e:	f043 0101 	orr.w	r1, r3, #1
 8003da2:	6041      	str	r1, [r0, #4]
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e756      	b.n	8003c56 <_free_r+0x96>
 8003da8:	200004a8 	.word	0x200004a8
 8003dac:	200008b4 	.word	0x200008b4
 8003db0:	20000cb0 	.word	0x20000cb0

08003db4 <__sfvwrite_r>:
 8003db4:	6893      	ldr	r3, [r2, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8102 	beq.w	8003fc0 <__sfvwrite_r+0x20c>
 8003dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	460c      	mov	r4, r1
 8003dc8:	0719      	lsls	r1, r3, #28
 8003dca:	b083      	sub	sp, #12
 8003dcc:	4682      	mov	sl, r0
 8003dce:	4690      	mov	r8, r2
 8003dd0:	d535      	bpl.n	8003e3e <__sfvwrite_r+0x8a>
 8003dd2:	6922      	ldr	r2, [r4, #16]
 8003dd4:	b39a      	cbz	r2, 8003e3e <__sfvwrite_r+0x8a>
 8003dd6:	f013 0202 	ands.w	r2, r3, #2
 8003dda:	f8d8 6000 	ldr.w	r6, [r8]
 8003dde:	d03d      	beq.n	8003e5c <__sfvwrite_r+0xa8>
 8003de0:	2700      	movs	r7, #0
 8003de2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8003de6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8003dea:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80040b8 <__sfvwrite_r+0x304>
 8003dee:	463d      	mov	r5, r7
 8003df0:	454d      	cmp	r5, r9
 8003df2:	462b      	mov	r3, r5
 8003df4:	463a      	mov	r2, r7
 8003df6:	bf28      	it	cs
 8003df8:	464b      	movcs	r3, r9
 8003dfa:	4661      	mov	r1, ip
 8003dfc:	4650      	mov	r0, sl
 8003dfe:	b1d5      	cbz	r5, 8003e36 <__sfvwrite_r+0x82>
 8003e00:	47d8      	blx	fp
 8003e02:	2800      	cmp	r0, #0
 8003e04:	f340 80d2 	ble.w	8003fac <__sfvwrite_r+0x1f8>
 8003e08:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003e0c:	1a1b      	subs	r3, r3, r0
 8003e0e:	4407      	add	r7, r0
 8003e10:	1a2d      	subs	r5, r5, r0
 8003e12:	f8c8 3008 	str.w	r3, [r8, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80b7 	beq.w	8003f8a <__sfvwrite_r+0x1d6>
 8003e1c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8003e20:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8003e24:	454d      	cmp	r5, r9
 8003e26:	462b      	mov	r3, r5
 8003e28:	463a      	mov	r2, r7
 8003e2a:	bf28      	it	cs
 8003e2c:	464b      	movcs	r3, r9
 8003e2e:	4661      	mov	r1, ip
 8003e30:	4650      	mov	r0, sl
 8003e32:	2d00      	cmp	r5, #0
 8003e34:	d1e4      	bne.n	8003e00 <__sfvwrite_r+0x4c>
 8003e36:	e9d6 7500 	ldrd	r7, r5, [r6]
 8003e3a:	3608      	adds	r6, #8
 8003e3c:	e7d8      	b.n	8003df0 <__sfvwrite_r+0x3c>
 8003e3e:	4621      	mov	r1, r4
 8003e40:	4650      	mov	r0, sl
 8003e42:	f7fe fc25 	bl	8002690 <__swsetup_r>
 8003e46:	2800      	cmp	r0, #0
 8003e48:	f040 8130 	bne.w	80040ac <__sfvwrite_r+0x2f8>
 8003e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e50:	f8d8 6000 	ldr.w	r6, [r8]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	f013 0202 	ands.w	r2, r3, #2
 8003e5a:	d1c1      	bne.n	8003de0 <__sfvwrite_r+0x2c>
 8003e5c:	f013 0901 	ands.w	r9, r3, #1
 8003e60:	f040 80b0 	bne.w	8003fc4 <__sfvwrite_r+0x210>
 8003e64:	68a7      	ldr	r7, [r4, #8]
 8003e66:	6820      	ldr	r0, [r4, #0]
 8003e68:	464d      	mov	r5, r9
 8003e6a:	2d00      	cmp	r5, #0
 8003e6c:	d054      	beq.n	8003f18 <__sfvwrite_r+0x164>
 8003e6e:	059a      	lsls	r2, r3, #22
 8003e70:	f140 80bc 	bpl.w	8003fec <__sfvwrite_r+0x238>
 8003e74:	42af      	cmp	r7, r5
 8003e76:	46bb      	mov	fp, r7
 8003e78:	f200 80e7 	bhi.w	800404a <__sfvwrite_r+0x296>
 8003e7c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8003e80:	d02f      	beq.n	8003ee2 <__sfvwrite_r+0x12e>
 8003e82:	e9d4 1704 	ldrd	r1, r7, [r4, #16]
 8003e86:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8003e8a:	eba0 0b01 	sub.w	fp, r0, r1
 8003e8e:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8003e92:	1c68      	adds	r0, r5, #1
 8003e94:	107f      	asrs	r7, r7, #1
 8003e96:	4458      	add	r0, fp
 8003e98:	42b8      	cmp	r0, r7
 8003e9a:	463a      	mov	r2, r7
 8003e9c:	bf84      	itt	hi
 8003e9e:	4607      	movhi	r7, r0
 8003ea0:	463a      	movhi	r2, r7
 8003ea2:	055b      	lsls	r3, r3, #21
 8003ea4:	f140 80e9 	bpl.w	800407a <__sfvwrite_r+0x2c6>
 8003ea8:	4611      	mov	r1, r2
 8003eaa:	4650      	mov	r0, sl
 8003eac:	f000 f9e8 	bl	8004280 <_malloc_r>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	f000 80f5 	beq.w	80040a0 <__sfvwrite_r+0x2ec>
 8003eb6:	465a      	mov	r2, fp
 8003eb8:	6921      	ldr	r1, [r4, #16]
 8003eba:	9001      	str	r0, [sp, #4]
 8003ebc:	f000 fce8 	bl	8004890 <memcpy>
 8003ec0:	89a2      	ldrh	r2, [r4, #12]
 8003ec2:	9b01      	ldr	r3, [sp, #4]
 8003ec4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8003ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ecc:	81a2      	strh	r2, [r4, #12]
 8003ece:	eba7 020b 	sub.w	r2, r7, fp
 8003ed2:	eb03 000b 	add.w	r0, r3, fp
 8003ed6:	6167      	str	r7, [r4, #20]
 8003ed8:	6123      	str	r3, [r4, #16]
 8003eda:	6020      	str	r0, [r4, #0]
 8003edc:	60a2      	str	r2, [r4, #8]
 8003ede:	462f      	mov	r7, r5
 8003ee0:	46ab      	mov	fp, r5
 8003ee2:	465a      	mov	r2, fp
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	f000 fd6d 	bl	80049c4 <memmove>
 8003eea:	68a2      	ldr	r2, [r4, #8]
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	1bd2      	subs	r2, r2, r7
 8003ef0:	445b      	add	r3, fp
 8003ef2:	462f      	mov	r7, r5
 8003ef4:	60a2      	str	r2, [r4, #8]
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	2500      	movs	r5, #0
 8003efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003efe:	1bdb      	subs	r3, r3, r7
 8003f00:	44b9      	add	r9, r7
 8003f02:	f8c8 3008 	str.w	r3, [r8, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d03f      	beq.n	8003f8a <__sfvwrite_r+0x1d6>
 8003f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f0e:	68a7      	ldr	r7, [r4, #8]
 8003f10:	6820      	ldr	r0, [r4, #0]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2d00      	cmp	r5, #0
 8003f16:	d1aa      	bne.n	8003e6e <__sfvwrite_r+0xba>
 8003f18:	e9d6 9500 	ldrd	r9, r5, [r6]
 8003f1c:	3608      	adds	r6, #8
 8003f1e:	e7a4      	b.n	8003e6a <__sfvwrite_r+0xb6>
 8003f20:	f10b 0308 	add.w	r3, fp, #8
 8003f24:	e953 6702 	ldrd	r6, r7, [r3, #-8]
 8003f28:	469b      	mov	fp, r3
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	2f00      	cmp	r7, #0
 8003f2e:	d0f9      	beq.n	8003f24 <__sfvwrite_r+0x170>
 8003f30:	463a      	mov	r2, r7
 8003f32:	210a      	movs	r1, #10
 8003f34:	4630      	mov	r0, r6
 8003f36:	f000 fc5b 	bl	80047f0 <memchr>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d053      	beq.n	8003fe6 <__sfvwrite_r+0x232>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	eba0 0906 	sub.w	r9, r0, r6
 8003f44:	464b      	mov	r3, r9
 8003f46:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8003f4a:	6820      	ldr	r0, [r4, #0]
 8003f4c:	42bb      	cmp	r3, r7
 8003f4e:	bf28      	it	cs
 8003f50:	463b      	movcs	r3, r7
 8003f52:	4288      	cmp	r0, r1
 8003f54:	d903      	bls.n	8003f5e <__sfvwrite_r+0x1aa>
 8003f56:	68a5      	ldr	r5, [r4, #8]
 8003f58:	4415      	add	r5, r2
 8003f5a:	42ab      	cmp	r3, r5
 8003f5c:	dc19      	bgt.n	8003f92 <__sfvwrite_r+0x1de>
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	dc7d      	bgt.n	800405e <__sfvwrite_r+0x2aa>
 8003f62:	4613      	mov	r3, r2
 8003f64:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003f66:	69e1      	ldr	r1, [r4, #28]
 8003f68:	4632      	mov	r2, r6
 8003f6a:	4650      	mov	r0, sl
 8003f6c:	47a8      	blx	r5
 8003f6e:	1e05      	subs	r5, r0, #0
 8003f70:	dd1c      	ble.n	8003fac <__sfvwrite_r+0x1f8>
 8003f72:	ebb9 0905 	subs.w	r9, r9, r5
 8003f76:	d06b      	beq.n	8004050 <__sfvwrite_r+0x29c>
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003f7e:	1b5b      	subs	r3, r3, r5
 8003f80:	442e      	add	r6, r5
 8003f82:	1b7f      	subs	r7, r7, r5
 8003f84:	f8c8 3008 	str.w	r3, [r8, #8]
 8003f88:	bb13      	cbnz	r3, 8003fd0 <__sfvwrite_r+0x21c>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	b003      	add	sp, #12
 8003f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f92:	4631      	mov	r1, r6
 8003f94:	462a      	mov	r2, r5
 8003f96:	f000 fd15 	bl	80049c4 <memmove>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	442b      	add	r3, r5
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	f7ff fc96 	bl	80038d4 <_fflush_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d0e2      	beq.n	8003f72 <__sfvwrite_r+0x1be>
 8003fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	b003      	add	sp, #12
 8003fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	4770      	bx	lr
 8003fc4:	4633      	mov	r3, r6
 8003fc6:	4691      	mov	r9, r2
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4617      	mov	r7, r2
 8003fcc:	464e      	mov	r6, r9
 8003fce:	469b      	mov	fp, r3
 8003fd0:	2f00      	cmp	r7, #0
 8003fd2:	d0a5      	beq.n	8003f20 <__sfvwrite_r+0x16c>
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d1b5      	bne.n	8003f44 <__sfvwrite_r+0x190>
 8003fd8:	463a      	mov	r2, r7
 8003fda:	210a      	movs	r1, #10
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f000 fc07 	bl	80047f0 <memchr>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d1ab      	bne.n	8003f3e <__sfvwrite_r+0x18a>
 8003fe6:	1c7b      	adds	r3, r7, #1
 8003fe8:	4699      	mov	r9, r3
 8003fea:	e7ac      	b.n	8003f46 <__sfvwrite_r+0x192>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	4283      	cmp	r3, r0
 8003ff0:	d315      	bcc.n	800401e <__sfvwrite_r+0x26a>
 8003ff2:	6961      	ldr	r1, [r4, #20]
 8003ff4:	42a9      	cmp	r1, r5
 8003ff6:	d812      	bhi.n	800401e <__sfvwrite_r+0x26a>
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <__sfvwrite_r+0x300>)
 8003ffa:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8003ffc:	429d      	cmp	r5, r3
 8003ffe:	bf94      	ite	ls
 8004000:	462b      	movls	r3, r5
 8004002:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 8004006:	464a      	mov	r2, r9
 8004008:	fb93 f3f1 	sdiv	r3, r3, r1
 800400c:	4650      	mov	r0, sl
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	69e1      	ldr	r1, [r4, #28]
 8004014:	47b8      	blx	r7
 8004016:	1e07      	subs	r7, r0, #0
 8004018:	ddc8      	ble.n	8003fac <__sfvwrite_r+0x1f8>
 800401a:	1bed      	subs	r5, r5, r7
 800401c:	e76d      	b.n	8003efa <__sfvwrite_r+0x146>
 800401e:	42af      	cmp	r7, r5
 8004020:	bf28      	it	cs
 8004022:	462f      	movcs	r7, r5
 8004024:	463a      	mov	r2, r7
 8004026:	4649      	mov	r1, r9
 8004028:	f000 fccc 	bl	80049c4 <memmove>
 800402c:	68a3      	ldr	r3, [r4, #8]
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	1bdb      	subs	r3, r3, r7
 8004032:	443a      	add	r2, r7
 8004034:	60a3      	str	r3, [r4, #8]
 8004036:	6022      	str	r2, [r4, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1ee      	bne.n	800401a <__sfvwrite_r+0x266>
 800403c:	4621      	mov	r1, r4
 800403e:	4650      	mov	r0, sl
 8004040:	f7ff fc48 	bl	80038d4 <_fflush_r>
 8004044:	2800      	cmp	r0, #0
 8004046:	d0e8      	beq.n	800401a <__sfvwrite_r+0x266>
 8004048:	e7b0      	b.n	8003fac <__sfvwrite_r+0x1f8>
 800404a:	462f      	mov	r7, r5
 800404c:	46ab      	mov	fp, r5
 800404e:	e748      	b.n	8003ee2 <__sfvwrite_r+0x12e>
 8004050:	4621      	mov	r1, r4
 8004052:	4650      	mov	r0, sl
 8004054:	f7ff fc3e 	bl	80038d4 <_fflush_r>
 8004058:	2800      	cmp	r0, #0
 800405a:	d08e      	beq.n	8003f7a <__sfvwrite_r+0x1c6>
 800405c:	e7a6      	b.n	8003fac <__sfvwrite_r+0x1f8>
 800405e:	461a      	mov	r2, r3
 8004060:	4631      	mov	r1, r6
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	f000 fcae 	bl	80049c4 <memmove>
 8004068:	9b01      	ldr	r3, [sp, #4]
 800406a:	68a1      	ldr	r1, [r4, #8]
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	1ac9      	subs	r1, r1, r3
 8004070:	441a      	add	r2, r3
 8004072:	60a1      	str	r1, [r4, #8]
 8004074:	6022      	str	r2, [r4, #0]
 8004076:	461d      	mov	r5, r3
 8004078:	e77b      	b.n	8003f72 <__sfvwrite_r+0x1be>
 800407a:	4650      	mov	r0, sl
 800407c:	f001 fa3c 	bl	80054f8 <_realloc_r>
 8004080:	4603      	mov	r3, r0
 8004082:	2800      	cmp	r0, #0
 8004084:	f47f af23 	bne.w	8003ece <__sfvwrite_r+0x11a>
 8004088:	6921      	ldr	r1, [r4, #16]
 800408a:	4650      	mov	r0, sl
 800408c:	f7ff fd98 	bl	8003bc0 <_free_r>
 8004090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004094:	220c      	movs	r2, #12
 8004096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800409a:	f8ca 2000 	str.w	r2, [sl]
 800409e:	e787      	b.n	8003fb0 <__sfvwrite_r+0x1fc>
 80040a0:	230c      	movs	r3, #12
 80040a2:	f8ca 3000 	str.w	r3, [sl]
 80040a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040aa:	e781      	b.n	8003fb0 <__sfvwrite_r+0x1fc>
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040b0:	e76c      	b.n	8003f8c <__sfvwrite_r+0x1d8>
 80040b2:	bf00      	nop
 80040b4:	7ffffffe 	.word	0x7ffffffe
 80040b8:	7ffffc00 	.word	0x7ffffc00

080040bc <_fwalk>:
 80040bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c0:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 80040c4:	d01b      	beq.n	80040fe <_fwalk+0x42>
 80040c6:	4688      	mov	r8, r1
 80040c8:	2600      	movs	r6, #0
 80040ca:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 80040ce:	3d01      	subs	r5, #1
 80040d0:	d40f      	bmi.n	80040f2 <_fwalk+0x36>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80040da:	d906      	bls.n	80040ea <_fwalk+0x2e>
 80040dc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80040e0:	3301      	adds	r3, #1
 80040e2:	4620      	mov	r0, r4
 80040e4:	d001      	beq.n	80040ea <_fwalk+0x2e>
 80040e6:	47c0      	blx	r8
 80040e8:	4306      	orrs	r6, r0
 80040ea:	1c6b      	adds	r3, r5, #1
 80040ec:	f104 0468 	add.w	r4, r4, #104	; 0x68
 80040f0:	d1ef      	bne.n	80040d2 <_fwalk+0x16>
 80040f2:	683f      	ldr	r7, [r7, #0]
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	d1e8      	bne.n	80040ca <_fwalk+0xe>
 80040f8:	4630      	mov	r0, r6
 80040fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040fe:	463e      	mov	r6, r7
 8004100:	4630      	mov	r0, r6
 8004102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004106:	bf00      	nop

08004108 <_fwalk_reent>:
 8004108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800410c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8004110:	d01f      	beq.n	8004152 <_fwalk_reent+0x4a>
 8004112:	4688      	mov	r8, r1
 8004114:	4606      	mov	r6, r0
 8004116:	f04f 0900 	mov.w	r9, #0
 800411a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 800411e:	3d01      	subs	r5, #1
 8004120:	d411      	bmi.n	8004146 <_fwalk_reent+0x3e>
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	2b01      	cmp	r3, #1
 8004126:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800412a:	d908      	bls.n	800413e <_fwalk_reent+0x36>
 800412c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8004130:	3301      	adds	r3, #1
 8004132:	4621      	mov	r1, r4
 8004134:	4630      	mov	r0, r6
 8004136:	d002      	beq.n	800413e <_fwalk_reent+0x36>
 8004138:	47c0      	blx	r8
 800413a:	ea49 0900 	orr.w	r9, r9, r0
 800413e:	1c6b      	adds	r3, r5, #1
 8004140:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8004144:	d1ed      	bne.n	8004122 <_fwalk_reent+0x1a>
 8004146:	683f      	ldr	r7, [r7, #0]
 8004148:	2f00      	cmp	r7, #0
 800414a:	d1e6      	bne.n	800411a <_fwalk_reent+0x12>
 800414c:	4648      	mov	r0, r9
 800414e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004152:	46b9      	mov	r9, r7
 8004154:	4648      	mov	r0, r9
 8004156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800415a:	bf00      	nop

0800415c <__localeconv_l>:
 800415c:	30f0      	adds	r0, #240	; 0xf0
 800415e:	4770      	bx	lr

08004160 <_localeconv_r>:
 8004160:	4800      	ldr	r0, [pc, #0]	; (8004164 <_localeconv_r+0x4>)
 8004162:	4770      	bx	lr
 8004164:	200009a8 	.word	0x200009a8

08004168 <localeconv>:
 8004168:	4800      	ldr	r0, [pc, #0]	; (800416c <localeconv+0x4>)
 800416a:	4770      	bx	lr
 800416c:	200009a8 	.word	0x200009a8

08004170 <__swhatbuf_r>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	460c      	mov	r4, r1
 8004174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004178:	2900      	cmp	r1, #0
 800417a:	b096      	sub	sp, #88	; 0x58
 800417c:	4615      	mov	r5, r2
 800417e:	461e      	mov	r6, r3
 8004180:	db14      	blt.n	80041ac <__swhatbuf_r+0x3c>
 8004182:	466a      	mov	r2, sp
 8004184:	f004 f981 	bl	800848a <_fstat_r>
 8004188:	2800      	cmp	r0, #0
 800418a:	db0f      	blt.n	80041ac <__swhatbuf_r+0x3c>
 800418c:	9a01      	ldr	r2, [sp, #4]
 800418e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004192:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
 8004196:	fab2 f282 	clz	r2, r2
 800419a:	0952      	lsrs	r2, r2, #5
 800419c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80041a4:	6032      	str	r2, [r6, #0]
 80041a6:	602b      	str	r3, [r5, #0]
 80041a8:	b016      	add	sp, #88	; 0x58
 80041aa:	bd70      	pop	{r4, r5, r6, pc}
 80041ac:	89a2      	ldrh	r2, [r4, #12]
 80041ae:	2300      	movs	r3, #0
 80041b0:	f012 0080 	ands.w	r0, r2, #128	; 0x80
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	d004      	beq.n	80041c2 <__swhatbuf_r+0x52>
 80041b8:	2240      	movs	r2, #64	; 0x40
 80041ba:	4618      	mov	r0, r3
 80041bc:	602a      	str	r2, [r5, #0]
 80041be:	b016      	add	sp, #88	; 0x58
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041c6:	602b      	str	r3, [r5, #0]
 80041c8:	b016      	add	sp, #88	; 0x58
 80041ca:	bd70      	pop	{r4, r5, r6, pc}

080041cc <__smakebuf_r>:
 80041cc:	898a      	ldrh	r2, [r1, #12]
 80041ce:	0792      	lsls	r2, r2, #30
 80041d0:	460b      	mov	r3, r1
 80041d2:	d506      	bpl.n	80041e2 <__smakebuf_r+0x16>
 80041d4:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041d8:	2101      	movs	r1, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e9c3 2104 	strd	r2, r1, [r3, #16]
 80041e0:	4770      	bx	lr
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	ab01      	add	r3, sp, #4
 80041e8:	466a      	mov	r2, sp
 80041ea:	460c      	mov	r4, r1
 80041ec:	4606      	mov	r6, r0
 80041ee:	f7ff ffbf 	bl	8004170 <__swhatbuf_r>
 80041f2:	9900      	ldr	r1, [sp, #0]
 80041f4:	4605      	mov	r5, r0
 80041f6:	4630      	mov	r0, r6
 80041f8:	f000 f842 	bl	8004280 <_malloc_r>
 80041fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004200:	b170      	cbz	r0, 8004220 <__smakebuf_r+0x54>
 8004202:	4916      	ldr	r1, [pc, #88]	; (800425c <__smakebuf_r+0x90>)
 8004204:	63f1      	str	r1, [r6, #60]	; 0x3c
 8004206:	9a01      	ldr	r2, [sp, #4]
 8004208:	9900      	ldr	r1, [sp, #0]
 800420a:	6020      	str	r0, [r4, #0]
 800420c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004210:	81a3      	strh	r3, [r4, #12]
 8004212:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8004216:	b98a      	cbnz	r2, 800423c <__smakebuf_r+0x70>
 8004218:	432b      	orrs	r3, r5
 800421a:	81a3      	strh	r3, [r4, #12]
 800421c:	b002      	add	sp, #8
 800421e:	bd70      	pop	{r4, r5, r6, pc}
 8004220:	059a      	lsls	r2, r3, #22
 8004222:	d4fb      	bmi.n	800421c <__smakebuf_r+0x50>
 8004224:	f023 0303 	bic.w	r3, r3, #3
 8004228:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	2101      	movs	r1, #1
 8004232:	81a3      	strh	r3, [r4, #12]
 8004234:	6022      	str	r2, [r4, #0]
 8004236:	e9c4 2104 	strd	r2, r1, [r4, #16]
 800423a:	e7ef      	b.n	800421c <__smakebuf_r+0x50>
 800423c:	4630      	mov	r0, r6
 800423e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004242:	f004 f927 	bl	8008494 <_isatty_r>
 8004246:	b910      	cbnz	r0, 800424e <__smakebuf_r+0x82>
 8004248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424c:	e7e4      	b.n	8004218 <__smakebuf_r+0x4c>
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	f023 0303 	bic.w	r3, r3, #3
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	b21b      	sxth	r3, r3
 800425a:	e7dd      	b.n	8004218 <__smakebuf_r+0x4c>
 800425c:	08003931 	.word	0x08003931

08004260 <malloc>:
 8004260:	4b02      	ldr	r3, [pc, #8]	; (800426c <malloc+0xc>)
 8004262:	4601      	mov	r1, r0
 8004264:	6818      	ldr	r0, [r3, #0]
 8004266:	f000 b80b 	b.w	8004280 <_malloc_r>
 800426a:	bf00      	nop
 800426c:	20000078 	.word	0x20000078

08004270 <free>:
 8004270:	4b02      	ldr	r3, [pc, #8]	; (800427c <free+0xc>)
 8004272:	4601      	mov	r1, r0
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	f7ff bca3 	b.w	8003bc0 <_free_r>
 800427a:	bf00      	nop
 800427c:	20000078 	.word	0x20000078

08004280 <_malloc_r>:
 8004280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	f101 050b 	add.w	r5, r1, #11
 8004288:	2d16      	cmp	r5, #22
 800428a:	b083      	sub	sp, #12
 800428c:	4606      	mov	r6, r0
 800428e:	d823      	bhi.n	80042d8 <_malloc_r+0x58>
 8004290:	2910      	cmp	r1, #16
 8004292:	f200 80b9 	bhi.w	8004408 <_malloc_r+0x188>
 8004296:	f000 fbfd 	bl	8004a94 <__malloc_lock>
 800429a:	2510      	movs	r5, #16
 800429c:	2318      	movs	r3, #24
 800429e:	2002      	movs	r0, #2
 80042a0:	4fcd      	ldr	r7, [pc, #820]	; (80045d8 <_malloc_r+0x358>)
 80042a2:	443b      	add	r3, r7
 80042a4:	f1a3 0208 	sub.w	r2, r3, #8
 80042a8:	685c      	ldr	r4, [r3, #4]
 80042aa:	4294      	cmp	r4, r2
 80042ac:	f000 80b9 	beq.w	8004422 <_malloc_r+0x1a2>
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	4423      	add	r3, r4
 80042b8:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	60e9      	str	r1, [r5, #12]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	4630      	mov	r0, r6
 80042c6:	608d      	str	r5, [r1, #8]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	f000 fbe5 	bl	8004a98 <__malloc_unlock>
 80042ce:	3408      	adds	r4, #8
 80042d0:	4620      	mov	r0, r4
 80042d2:	b003      	add	sp, #12
 80042d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d8:	f035 0507 	bics.w	r5, r5, #7
 80042dc:	f100 8094 	bmi.w	8004408 <_malloc_r+0x188>
 80042e0:	42a9      	cmp	r1, r5
 80042e2:	f200 8091 	bhi.w	8004408 <_malloc_r+0x188>
 80042e6:	f000 fbd5 	bl	8004a94 <__malloc_lock>
 80042ea:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80042ee:	f0c0 819d 	bcc.w	800462c <_malloc_r+0x3ac>
 80042f2:	0a6b      	lsrs	r3, r5, #9
 80042f4:	f000 808f 	beq.w	8004416 <_malloc_r+0x196>
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	f200 8173 	bhi.w	80045e4 <_malloc_r+0x364>
 80042fe:	09ab      	lsrs	r3, r5, #6
 8004300:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8004304:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8004308:	00c3      	lsls	r3, r0, #3
 800430a:	4fb3      	ldr	r7, [pc, #716]	; (80045d8 <_malloc_r+0x358>)
 800430c:	443b      	add	r3, r7
 800430e:	f1a3 0108 	sub.w	r1, r3, #8
 8004312:	685c      	ldr	r4, [r3, #4]
 8004314:	42a1      	cmp	r1, r4
 8004316:	d106      	bne.n	8004326 <_malloc_r+0xa6>
 8004318:	e00c      	b.n	8004334 <_malloc_r+0xb4>
 800431a:	2a00      	cmp	r2, #0
 800431c:	f280 812b 	bge.w	8004576 <_malloc_r+0x2f6>
 8004320:	68e4      	ldr	r4, [r4, #12]
 8004322:	42a1      	cmp	r1, r4
 8004324:	d006      	beq.n	8004334 <_malloc_r+0xb4>
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	1b5a      	subs	r2, r3, r5
 800432e:	2a0f      	cmp	r2, #15
 8004330:	ddf3      	ble.n	800431a <_malloc_r+0x9a>
 8004332:	4660      	mov	r0, ip
 8004334:	693c      	ldr	r4, [r7, #16]
 8004336:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 80045dc <_malloc_r+0x35c>
 800433a:	4564      	cmp	r4, ip
 800433c:	d07c      	beq.n	8004438 <_malloc_r+0x1b8>
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	1b5a      	subs	r2, r3, r5
 8004346:	2a0f      	cmp	r2, #15
 8004348:	f300 817e 	bgt.w	8004648 <_malloc_r+0x3c8>
 800434c:	2a00      	cmp	r2, #0
 800434e:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8004352:	f280 816f 	bge.w	8004634 <_malloc_r+0x3b4>
 8004356:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800435a:	f080 811a 	bcs.w	8004592 <_malloc_r+0x312>
 800435e:	08db      	lsrs	r3, r3, #3
 8004360:	1c59      	adds	r1, r3, #1
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8004368:	f8c4 8008 	str.w	r8, [r4, #8]
 800436c:	f04f 0e01 	mov.w	lr, #1
 8004370:	109b      	asrs	r3, r3, #2
 8004372:	fa0e f303 	lsl.w	r3, lr, r3
 8004376:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 800437a:	4313      	orrs	r3, r2
 800437c:	f1ae 0208 	sub.w	r2, lr, #8
 8004380:	60e2      	str	r2, [r4, #12]
 8004382:	607b      	str	r3, [r7, #4]
 8004384:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8004388:	f8c8 400c 	str.w	r4, [r8, #12]
 800438c:	1082      	asrs	r2, r0, #2
 800438e:	2401      	movs	r4, #1
 8004390:	4094      	lsls	r4, r2
 8004392:	429c      	cmp	r4, r3
 8004394:	d856      	bhi.n	8004444 <_malloc_r+0x1c4>
 8004396:	421c      	tst	r4, r3
 8004398:	d106      	bne.n	80043a8 <_malloc_r+0x128>
 800439a:	f020 0003 	bic.w	r0, r0, #3
 800439e:	0064      	lsls	r4, r4, #1
 80043a0:	421c      	tst	r4, r3
 80043a2:	f100 0004 	add.w	r0, r0, #4
 80043a6:	d0fa      	beq.n	800439e <_malloc_r+0x11e>
 80043a8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80043ac:	46ce      	mov	lr, r9
 80043ae:	4680      	mov	r8, r0
 80043b0:	f8de 300c 	ldr.w	r3, [lr, #12]
 80043b4:	459e      	cmp	lr, r3
 80043b6:	d107      	bne.n	80043c8 <_malloc_r+0x148>
 80043b8:	e120      	b.n	80045fc <_malloc_r+0x37c>
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	f280 8127 	bge.w	800460e <_malloc_r+0x38e>
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	459e      	cmp	lr, r3
 80043c4:	f000 811a 	beq.w	80045fc <_malloc_r+0x37c>
 80043c8:	6859      	ldr	r1, [r3, #4]
 80043ca:	f021 0103 	bic.w	r1, r1, #3
 80043ce:	1b4a      	subs	r2, r1, r5
 80043d0:	2a0f      	cmp	r2, #15
 80043d2:	ddf2      	ble.n	80043ba <_malloc_r+0x13a>
 80043d4:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 80043d8:	195c      	adds	r4, r3, r5
 80043da:	f045 0501 	orr.w	r5, r5, #1
 80043de:	605d      	str	r5, [r3, #4]
 80043e0:	f042 0501 	orr.w	r5, r2, #1
 80043e4:	f8c8 e00c 	str.w	lr, [r8, #12]
 80043e8:	4630      	mov	r0, r6
 80043ea:	f8ce 8008 	str.w	r8, [lr, #8]
 80043ee:	e9c7 4404 	strd	r4, r4, [r7, #16]
 80043f2:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 80043f6:	6065      	str	r5, [r4, #4]
 80043f8:	505a      	str	r2, [r3, r1]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	f000 fb4c 	bl	8004a98 <__malloc_unlock>
 8004400:	9b00      	ldr	r3, [sp, #0]
 8004402:	f103 0408 	add.w	r4, r3, #8
 8004406:	e002      	b.n	800440e <_malloc_r+0x18e>
 8004408:	230c      	movs	r3, #12
 800440a:	6033      	str	r3, [r6, #0]
 800440c:	2400      	movs	r4, #0
 800440e:	4620      	mov	r0, r4
 8004410:	b003      	add	sp, #12
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800441a:	2040      	movs	r0, #64	; 0x40
 800441c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8004420:	e773      	b.n	800430a <_malloc_r+0x8a>
 8004422:	68dc      	ldr	r4, [r3, #12]
 8004424:	42a3      	cmp	r3, r4
 8004426:	bf08      	it	eq
 8004428:	3002      	addeq	r0, #2
 800442a:	f47f af41 	bne.w	80042b0 <_malloc_r+0x30>
 800442e:	693c      	ldr	r4, [r7, #16]
 8004430:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80045dc <_malloc_r+0x35c>
 8004434:	4564      	cmp	r4, ip
 8004436:	d182      	bne.n	800433e <_malloc_r+0xbe>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	1082      	asrs	r2, r0, #2
 800443c:	2401      	movs	r4, #1
 800443e:	4094      	lsls	r4, r2
 8004440:	429c      	cmp	r4, r3
 8004442:	d9a8      	bls.n	8004396 <_malloc_r+0x116>
 8004444:	68bc      	ldr	r4, [r7, #8]
 8004446:	6863      	ldr	r3, [r4, #4]
 8004448:	f023 0803 	bic.w	r8, r3, #3
 800444c:	45a8      	cmp	r8, r5
 800444e:	d303      	bcc.n	8004458 <_malloc_r+0x1d8>
 8004450:	eba8 0305 	sub.w	r3, r8, r5
 8004454:	2b0f      	cmp	r3, #15
 8004456:	dc7e      	bgt.n	8004556 <_malloc_r+0x2d6>
 8004458:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80045e0 <_malloc_r+0x360>
 800445c:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8004460:	f8d9 3000 	ldr.w	r3, [r9]
 8004464:	3201      	adds	r2, #1
 8004466:	eb04 0a08 	add.w	sl, r4, r8
 800446a:	442b      	add	r3, r5
 800446c:	f000 8137 	beq.w	80046de <_malloc_r+0x45e>
 8004470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004474:	330f      	adds	r3, #15
 8004476:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 800447a:	f02b 0b0f 	bic.w	fp, fp, #15
 800447e:	4659      	mov	r1, fp
 8004480:	4630      	mov	r0, r6
 8004482:	f003 ffe7 	bl	8008454 <_sbrk_r>
 8004486:	1c41      	adds	r1, r0, #1
 8004488:	4602      	mov	r2, r0
 800448a:	f000 80f7 	beq.w	800467c <_malloc_r+0x3fc>
 800448e:	4582      	cmp	sl, r0
 8004490:	f200 80f2 	bhi.w	8004678 <_malloc_r+0x3f8>
 8004494:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004498:	4459      	add	r1, fp
 800449a:	f8c9 1004 	str.w	r1, [r9, #4]
 800449e:	460b      	mov	r3, r1
 80044a0:	f000 8153 	beq.w	800474a <_malloc_r+0x4ca>
 80044a4:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 80044a8:	3101      	adds	r1, #1
 80044aa:	bf1b      	ittet	ne
 80044ac:	eba2 0a0a 	subne.w	sl, r2, sl
 80044b0:	4453      	addne	r3, sl
 80044b2:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 80044b6:	f8c9 3004 	strne.w	r3, [r9, #4]
 80044ba:	f012 0307 	ands.w	r3, r2, #7
 80044be:	f000 811a 	beq.w	80046f6 <_malloc_r+0x476>
 80044c2:	f1c3 0108 	rsb	r1, r3, #8
 80044c6:	440a      	add	r2, r1
 80044c8:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 80044cc:	4493      	add	fp, r2
 80044ce:	3108      	adds	r1, #8
 80044d0:	eba1 010b 	sub.w	r1, r1, fp
 80044d4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80044d8:	4651      	mov	r1, sl
 80044da:	4630      	mov	r0, r6
 80044dc:	9301      	str	r3, [sp, #4]
 80044de:	9200      	str	r2, [sp, #0]
 80044e0:	f003 ffb8 	bl	8008454 <_sbrk_r>
 80044e4:	1c42      	adds	r2, r0, #1
 80044e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044ea:	f000 8153 	beq.w	8004794 <_malloc_r+0x514>
 80044ee:	1a83      	subs	r3, r0, r2
 80044f0:	eb03 0b0a 	add.w	fp, r3, sl
 80044f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80044f8:	60ba      	str	r2, [r7, #8]
 80044fa:	f04b 0301 	orr.w	r3, fp, #1
 80044fe:	4451      	add	r1, sl
 8004500:	42bc      	cmp	r4, r7
 8004502:	6053      	str	r3, [r2, #4]
 8004504:	f8c9 1004 	str.w	r1, [r9, #4]
 8004508:	f000 812b 	beq.w	8004762 <_malloc_r+0x4e2>
 800450c:	f1b8 0f0f 	cmp.w	r8, #15
 8004510:	f240 8129 	bls.w	8004766 <_malloc_r+0x4e6>
 8004514:	6863      	ldr	r3, [r4, #4]
 8004516:	f1a8 000c 	sub.w	r0, r8, #12
 800451a:	f020 0007 	bic.w	r0, r0, #7
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	eb04 0c00 	add.w	ip, r4, r0
 8004526:	4303      	orrs	r3, r0
 8004528:	f04f 0e05 	mov.w	lr, #5
 800452c:	280f      	cmp	r0, #15
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8004534:	f200 8135 	bhi.w	80047a2 <_malloc_r+0x522>
 8004538:	6853      	ldr	r3, [r2, #4]
 800453a:	4614      	mov	r4, r2
 800453c:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 8004540:	428a      	cmp	r2, r1
 8004542:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8004546:	bf38      	it	cc
 8004548:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 800454c:	428a      	cmp	r2, r1
 800454e:	bf38      	it	cc
 8004550:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 8004554:	e094      	b.n	8004680 <_malloc_r+0x400>
 8004556:	1962      	adds	r2, r4, r5
 8004558:	f043 0301 	orr.w	r3, r3, #1
 800455c:	f045 0501 	orr.w	r5, r5, #1
 8004560:	6065      	str	r5, [r4, #4]
 8004562:	4630      	mov	r0, r6
 8004564:	60ba      	str	r2, [r7, #8]
 8004566:	6053      	str	r3, [r2, #4]
 8004568:	f000 fa96 	bl	8004a98 <__malloc_unlock>
 800456c:	3408      	adds	r4, #8
 800456e:	4620      	mov	r0, r4
 8004570:	b003      	add	sp, #12
 8004572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004576:	4423      	add	r3, r4
 8004578:	68e1      	ldr	r1, [r4, #12]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68a5      	ldr	r5, [r4, #8]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	60e9      	str	r1, [r5, #12]
 8004584:	4630      	mov	r0, r6
 8004586:	608d      	str	r5, [r1, #8]
 8004588:	605a      	str	r2, [r3, #4]
 800458a:	f000 fa85 	bl	8004a98 <__malloc_unlock>
 800458e:	3408      	adds	r4, #8
 8004590:	e73d      	b.n	800440e <_malloc_r+0x18e>
 8004592:	0a5a      	lsrs	r2, r3, #9
 8004594:	2a04      	cmp	r2, #4
 8004596:	d969      	bls.n	800466c <_malloc_r+0x3ec>
 8004598:	2a14      	cmp	r2, #20
 800459a:	f200 80be 	bhi.w	800471a <_malloc_r+0x49a>
 800459e:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 80045a2:	00c9      	lsls	r1, r1, #3
 80045a4:	325b      	adds	r2, #91	; 0x5b
 80045a6:	eb07 0e01 	add.w	lr, r7, r1
 80045aa:	5879      	ldr	r1, [r7, r1]
 80045ac:	f1ae 0e08 	sub.w	lr, lr, #8
 80045b0:	458e      	cmp	lr, r1
 80045b2:	f000 8097 	beq.w	80046e4 <_malloc_r+0x464>
 80045b6:	684a      	ldr	r2, [r1, #4]
 80045b8:	f022 0203 	bic.w	r2, r2, #3
 80045bc:	429a      	cmp	r2, r3
 80045be:	d902      	bls.n	80045c6 <_malloc_r+0x346>
 80045c0:	6889      	ldr	r1, [r1, #8]
 80045c2:	458e      	cmp	lr, r1
 80045c4:	d1f7      	bne.n	80045b6 <_malloc_r+0x336>
 80045c6:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 80045d0:	f8ce 4008 	str.w	r4, [lr, #8]
 80045d4:	60cc      	str	r4, [r1, #12]
 80045d6:	e6d9      	b.n	800438c <_malloc_r+0x10c>
 80045d8:	200004a8 	.word	0x200004a8
 80045dc:	200004b0 	.word	0x200004b0
 80045e0:	20000cb0 	.word	0x20000cb0
 80045e4:	2b14      	cmp	r3, #20
 80045e6:	d959      	bls.n	800469c <_malloc_r+0x41c>
 80045e8:	2b54      	cmp	r3, #84	; 0x54
 80045ea:	f200 809e 	bhi.w	800472a <_malloc_r+0x4aa>
 80045ee:	0b2b      	lsrs	r3, r5, #12
 80045f0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80045f4:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80045f8:	00c3      	lsls	r3, r0, #3
 80045fa:	e686      	b.n	800430a <_malloc_r+0x8a>
 80045fc:	f108 0801 	add.w	r8, r8, #1
 8004600:	f018 0f03 	tst.w	r8, #3
 8004604:	f10e 0e08 	add.w	lr, lr, #8
 8004608:	f47f aed2 	bne.w	80043b0 <_malloc_r+0x130>
 800460c:	e051      	b.n	80046b2 <_malloc_r+0x432>
 800460e:	4419      	add	r1, r3
 8004610:	461c      	mov	r4, r3
 8004612:	684a      	ldr	r2, [r1, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f854 5f08 	ldr.w	r5, [r4, #8]!
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	604a      	str	r2, [r1, #4]
 8004620:	4630      	mov	r0, r6
 8004622:	60eb      	str	r3, [r5, #12]
 8004624:	609d      	str	r5, [r3, #8]
 8004626:	f000 fa37 	bl	8004a98 <__malloc_unlock>
 800462a:	e6f0      	b.n	800440e <_malloc_r+0x18e>
 800462c:	08e8      	lsrs	r0, r5, #3
 800462e:	f105 0308 	add.w	r3, r5, #8
 8004632:	e635      	b.n	80042a0 <_malloc_r+0x20>
 8004634:	4423      	add	r3, r4
 8004636:	4630      	mov	r0, r6
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	605a      	str	r2, [r3, #4]
 8004640:	3408      	adds	r4, #8
 8004642:	f000 fa29 	bl	8004a98 <__malloc_unlock>
 8004646:	e6e2      	b.n	800440e <_malloc_r+0x18e>
 8004648:	1961      	adds	r1, r4, r5
 800464a:	f045 0e01 	orr.w	lr, r5, #1
 800464e:	f042 0501 	orr.w	r5, r2, #1
 8004652:	f8c4 e004 	str.w	lr, [r4, #4]
 8004656:	4630      	mov	r0, r6
 8004658:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800465c:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8004660:	604d      	str	r5, [r1, #4]
 8004662:	50e2      	str	r2, [r4, r3]
 8004664:	f000 fa18 	bl	8004a98 <__malloc_unlock>
 8004668:	3408      	adds	r4, #8
 800466a:	e6d0      	b.n	800440e <_malloc_r+0x18e>
 800466c:	099a      	lsrs	r2, r3, #6
 800466e:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8004672:	00c9      	lsls	r1, r1, #3
 8004674:	3238      	adds	r2, #56	; 0x38
 8004676:	e796      	b.n	80045a6 <_malloc_r+0x326>
 8004678:	42bc      	cmp	r4, r7
 800467a:	d060      	beq.n	800473e <_malloc_r+0x4be>
 800467c:	68bc      	ldr	r4, [r7, #8]
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	f023 0b03 	bic.w	fp, r3, #3
 8004684:	45ab      	cmp	fp, r5
 8004686:	ebab 0305 	sub.w	r3, fp, r5
 800468a:	d302      	bcc.n	8004692 <_malloc_r+0x412>
 800468c:	2b0f      	cmp	r3, #15
 800468e:	f73f af62 	bgt.w	8004556 <_malloc_r+0x2d6>
 8004692:	4630      	mov	r0, r6
 8004694:	f000 fa00 	bl	8004a98 <__malloc_unlock>
 8004698:	2400      	movs	r4, #0
 800469a:	e6b8      	b.n	800440e <_malloc_r+0x18e>
 800469c:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80046a0:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80046a4:	00c3      	lsls	r3, r0, #3
 80046a6:	e630      	b.n	800430a <_malloc_r+0x8a>
 80046a8:	f859 3908 	ldr.w	r3, [r9], #-8
 80046ac:	454b      	cmp	r3, r9
 80046ae:	f040 8096 	bne.w	80047de <_malloc_r+0x55e>
 80046b2:	f010 0f03 	tst.w	r0, #3
 80046b6:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80046ba:	d1f5      	bne.n	80046a8 <_malloc_r+0x428>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	ea23 0304 	bic.w	r3, r3, r4
 80046c2:	607b      	str	r3, [r7, #4]
 80046c4:	0064      	lsls	r4, r4, #1
 80046c6:	429c      	cmp	r4, r3
 80046c8:	f63f aebc 	bhi.w	8004444 <_malloc_r+0x1c4>
 80046cc:	b91c      	cbnz	r4, 80046d6 <_malloc_r+0x456>
 80046ce:	e6b9      	b.n	8004444 <_malloc_r+0x1c4>
 80046d0:	0064      	lsls	r4, r4, #1
 80046d2:	f108 0804 	add.w	r8, r8, #4
 80046d6:	421c      	tst	r4, r3
 80046d8:	d0fa      	beq.n	80046d0 <_malloc_r+0x450>
 80046da:	4640      	mov	r0, r8
 80046dc:	e664      	b.n	80043a8 <_malloc_r+0x128>
 80046de:	f103 0b10 	add.w	fp, r3, #16
 80046e2:	e6cc      	b.n	800447e <_malloc_r+0x1fe>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1092      	asrs	r2, r2, #2
 80046e8:	f04f 0801 	mov.w	r8, #1
 80046ec:	fa08 f202 	lsl.w	r2, r8, r2
 80046f0:	4313      	orrs	r3, r2
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e76a      	b.n	80045cc <_malloc_r+0x34c>
 80046f6:	eb02 010b 	add.w	r1, r2, fp
 80046fa:	4249      	negs	r1, r1
 80046fc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8004700:	4651      	mov	r1, sl
 8004702:	4630      	mov	r0, r6
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	9200      	str	r2, [sp, #0]
 8004708:	f003 fea4 	bl	8008454 <_sbrk_r>
 800470c:	1c43      	adds	r3, r0, #1
 800470e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004712:	f47f aeec 	bne.w	80044ee <_malloc_r+0x26e>
 8004716:	469a      	mov	sl, r3
 8004718:	e6ec      	b.n	80044f4 <_malloc_r+0x274>
 800471a:	2a54      	cmp	r2, #84	; 0x54
 800471c:	d826      	bhi.n	800476c <_malloc_r+0x4ec>
 800471e:	0b1a      	lsrs	r2, r3, #12
 8004720:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8004724:	00c9      	lsls	r1, r1, #3
 8004726:	326e      	adds	r2, #110	; 0x6e
 8004728:	e73d      	b.n	80045a6 <_malloc_r+0x326>
 800472a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800472e:	d826      	bhi.n	800477e <_malloc_r+0x4fe>
 8004730:	0beb      	lsrs	r3, r5, #15
 8004732:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004736:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 800473a:	00c3      	lsls	r3, r0, #3
 800473c:	e5e5      	b.n	800430a <_malloc_r+0x8a>
 800473e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004742:	445b      	add	r3, fp
 8004744:	f8c9 3004 	str.w	r3, [r9, #4]
 8004748:	e6ac      	b.n	80044a4 <_malloc_r+0x224>
 800474a:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800474e:	2800      	cmp	r0, #0
 8004750:	f47f aea8 	bne.w	80044a4 <_malloc_r+0x224>
 8004754:	eb08 030b 	add.w	r3, r8, fp
 8004758:	68bc      	ldr	r4, [r7, #8]
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	6063      	str	r3, [r4, #4]
 8004760:	e6ec      	b.n	800453c <_malloc_r+0x2bc>
 8004762:	4614      	mov	r4, r2
 8004764:	e6ea      	b.n	800453c <_malloc_r+0x2bc>
 8004766:	2301      	movs	r3, #1
 8004768:	6053      	str	r3, [r2, #4]
 800476a:	e792      	b.n	8004692 <_malloc_r+0x412>
 800476c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004770:	d821      	bhi.n	80047b6 <_malloc_r+0x536>
 8004772:	0bda      	lsrs	r2, r3, #15
 8004774:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8004778:	00c9      	lsls	r1, r1, #3
 800477a:	3277      	adds	r2, #119	; 0x77
 800477c:	e713      	b.n	80045a6 <_malloc_r+0x326>
 800477e:	f240 5254 	movw	r2, #1364	; 0x554
 8004782:	4293      	cmp	r3, r2
 8004784:	d821      	bhi.n	80047ca <_malloc_r+0x54a>
 8004786:	0cab      	lsrs	r3, r5, #18
 8004788:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800478c:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8004790:	00c3      	lsls	r3, r0, #3
 8004792:	e5ba      	b.n	800430a <_malloc_r+0x8a>
 8004794:	3b08      	subs	r3, #8
 8004796:	449b      	add	fp, r3
 8004798:	ebab 0b02 	sub.w	fp, fp, r2
 800479c:	f04f 0a00 	mov.w	sl, #0
 80047a0:	e6a8      	b.n	80044f4 <_malloc_r+0x274>
 80047a2:	f104 0108 	add.w	r1, r4, #8
 80047a6:	4630      	mov	r0, r6
 80047a8:	f7ff fa0a 	bl	8003bc0 <_free_r>
 80047ac:	68bc      	ldr	r4, [r7, #8]
 80047ae:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	e6c2      	b.n	800453c <_malloc_r+0x2bc>
 80047b6:	f240 5154 	movw	r1, #1364	; 0x554
 80047ba:	428a      	cmp	r2, r1
 80047bc:	d80b      	bhi.n	80047d6 <_malloc_r+0x556>
 80047be:	0c9a      	lsrs	r2, r3, #18
 80047c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 80047c4:	00c9      	lsls	r1, r1, #3
 80047c6:	327c      	adds	r2, #124	; 0x7c
 80047c8:	e6ed      	b.n	80045a6 <_malloc_r+0x326>
 80047ca:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80047ce:	207f      	movs	r0, #127	; 0x7f
 80047d0:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 80047d4:	e599      	b.n	800430a <_malloc_r+0x8a>
 80047d6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80047da:	227e      	movs	r2, #126	; 0x7e
 80047dc:	e6e3      	b.n	80045a6 <_malloc_r+0x326>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	e770      	b.n	80046c4 <_malloc_r+0x444>
 80047e2:	bf00      	nop
	...

080047f0 <memchr>:
 80047f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80047f4:	2a10      	cmp	r2, #16
 80047f6:	db2b      	blt.n	8004850 <memchr+0x60>
 80047f8:	f010 0f07 	tst.w	r0, #7
 80047fc:	d008      	beq.n	8004810 <memchr+0x20>
 80047fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004802:	3a01      	subs	r2, #1
 8004804:	428b      	cmp	r3, r1
 8004806:	d02d      	beq.n	8004864 <memchr+0x74>
 8004808:	f010 0f07 	tst.w	r0, #7
 800480c:	b342      	cbz	r2, 8004860 <memchr+0x70>
 800480e:	d1f6      	bne.n	80047fe <memchr+0xe>
 8004810:	b4f0      	push	{r4, r5, r6, r7}
 8004812:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8004816:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800481a:	f022 0407 	bic.w	r4, r2, #7
 800481e:	f07f 0700 	mvns.w	r7, #0
 8004822:	2300      	movs	r3, #0
 8004824:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004828:	3c08      	subs	r4, #8
 800482a:	ea85 0501 	eor.w	r5, r5, r1
 800482e:	ea86 0601 	eor.w	r6, r6, r1
 8004832:	fa85 f547 	uadd8	r5, r5, r7
 8004836:	faa3 f587 	sel	r5, r3, r7
 800483a:	fa86 f647 	uadd8	r6, r6, r7
 800483e:	faa5 f687 	sel	r6, r5, r7
 8004842:	b98e      	cbnz	r6, 8004868 <memchr+0x78>
 8004844:	d1ee      	bne.n	8004824 <memchr+0x34>
 8004846:	bcf0      	pop	{r4, r5, r6, r7}
 8004848:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800484c:	f002 0207 	and.w	r2, r2, #7
 8004850:	b132      	cbz	r2, 8004860 <memchr+0x70>
 8004852:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004856:	3a01      	subs	r2, #1
 8004858:	ea83 0301 	eor.w	r3, r3, r1
 800485c:	b113      	cbz	r3, 8004864 <memchr+0x74>
 800485e:	d1f8      	bne.n	8004852 <memchr+0x62>
 8004860:	2000      	movs	r0, #0
 8004862:	4770      	bx	lr
 8004864:	3801      	subs	r0, #1
 8004866:	4770      	bx	lr
 8004868:	2d00      	cmp	r5, #0
 800486a:	bf06      	itte	eq
 800486c:	4635      	moveq	r5, r6
 800486e:	3803      	subeq	r0, #3
 8004870:	3807      	subne	r0, #7
 8004872:	f015 0f01 	tst.w	r5, #1
 8004876:	d107      	bne.n	8004888 <memchr+0x98>
 8004878:	3001      	adds	r0, #1
 800487a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800487e:	bf02      	ittt	eq
 8004880:	3001      	addeq	r0, #1
 8004882:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004886:	3001      	addeq	r0, #1
 8004888:	bcf0      	pop	{r4, r5, r6, r7}
 800488a:	3801      	subs	r0, #1
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop

08004890 <memcpy>:
 8004890:	4684      	mov	ip, r0
 8004892:	ea41 0300 	orr.w	r3, r1, r0
 8004896:	f013 0303 	ands.w	r3, r3, #3
 800489a:	d16d      	bne.n	8004978 <memcpy+0xe8>
 800489c:	3a40      	subs	r2, #64	; 0x40
 800489e:	d341      	bcc.n	8004924 <memcpy+0x94>
 80048a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048a4:	f840 3b04 	str.w	r3, [r0], #4
 80048a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048ac:	f840 3b04 	str.w	r3, [r0], #4
 80048b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048b4:	f840 3b04 	str.w	r3, [r0], #4
 80048b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048bc:	f840 3b04 	str.w	r3, [r0], #4
 80048c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048c4:	f840 3b04 	str.w	r3, [r0], #4
 80048c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048cc:	f840 3b04 	str.w	r3, [r0], #4
 80048d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048d4:	f840 3b04 	str.w	r3, [r0], #4
 80048d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048dc:	f840 3b04 	str.w	r3, [r0], #4
 80048e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048e4:	f840 3b04 	str.w	r3, [r0], #4
 80048e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048ec:	f840 3b04 	str.w	r3, [r0], #4
 80048f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80048f4:	f840 3b04 	str.w	r3, [r0], #4
 80048f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80048fc:	f840 3b04 	str.w	r3, [r0], #4
 8004900:	f851 3b04 	ldr.w	r3, [r1], #4
 8004904:	f840 3b04 	str.w	r3, [r0], #4
 8004908:	f851 3b04 	ldr.w	r3, [r1], #4
 800490c:	f840 3b04 	str.w	r3, [r0], #4
 8004910:	f851 3b04 	ldr.w	r3, [r1], #4
 8004914:	f840 3b04 	str.w	r3, [r0], #4
 8004918:	f851 3b04 	ldr.w	r3, [r1], #4
 800491c:	f840 3b04 	str.w	r3, [r0], #4
 8004920:	3a40      	subs	r2, #64	; 0x40
 8004922:	d2bd      	bcs.n	80048a0 <memcpy+0x10>
 8004924:	3230      	adds	r2, #48	; 0x30
 8004926:	d311      	bcc.n	800494c <memcpy+0xbc>
 8004928:	f851 3b04 	ldr.w	r3, [r1], #4
 800492c:	f840 3b04 	str.w	r3, [r0], #4
 8004930:	f851 3b04 	ldr.w	r3, [r1], #4
 8004934:	f840 3b04 	str.w	r3, [r0], #4
 8004938:	f851 3b04 	ldr.w	r3, [r1], #4
 800493c:	f840 3b04 	str.w	r3, [r0], #4
 8004940:	f851 3b04 	ldr.w	r3, [r1], #4
 8004944:	f840 3b04 	str.w	r3, [r0], #4
 8004948:	3a10      	subs	r2, #16
 800494a:	d2ed      	bcs.n	8004928 <memcpy+0x98>
 800494c:	320c      	adds	r2, #12
 800494e:	d305      	bcc.n	800495c <memcpy+0xcc>
 8004950:	f851 3b04 	ldr.w	r3, [r1], #4
 8004954:	f840 3b04 	str.w	r3, [r0], #4
 8004958:	3a04      	subs	r2, #4
 800495a:	d2f9      	bcs.n	8004950 <memcpy+0xc0>
 800495c:	3204      	adds	r2, #4
 800495e:	d008      	beq.n	8004972 <memcpy+0xe2>
 8004960:	07d2      	lsls	r2, r2, #31
 8004962:	bf1c      	itt	ne
 8004964:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004968:	f800 3b01 	strbne.w	r3, [r0], #1
 800496c:	d301      	bcc.n	8004972 <memcpy+0xe2>
 800496e:	880b      	ldrh	r3, [r1, #0]
 8004970:	8003      	strh	r3, [r0, #0]
 8004972:	4660      	mov	r0, ip
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	2a08      	cmp	r2, #8
 800497a:	d313      	bcc.n	80049a4 <memcpy+0x114>
 800497c:	078b      	lsls	r3, r1, #30
 800497e:	d08d      	beq.n	800489c <memcpy+0xc>
 8004980:	f010 0303 	ands.w	r3, r0, #3
 8004984:	d08a      	beq.n	800489c <memcpy+0xc>
 8004986:	f1c3 0304 	rsb	r3, r3, #4
 800498a:	1ad2      	subs	r2, r2, r3
 800498c:	07db      	lsls	r3, r3, #31
 800498e:	bf1c      	itt	ne
 8004990:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8004994:	f800 3b01 	strbne.w	r3, [r0], #1
 8004998:	d380      	bcc.n	800489c <memcpy+0xc>
 800499a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800499e:	f820 3b02 	strh.w	r3, [r0], #2
 80049a2:	e77b      	b.n	800489c <memcpy+0xc>
 80049a4:	3a04      	subs	r2, #4
 80049a6:	d3d9      	bcc.n	800495c <memcpy+0xcc>
 80049a8:	3a01      	subs	r2, #1
 80049aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ae:	f800 3b01 	strb.w	r3, [r0], #1
 80049b2:	d2f9      	bcs.n	80049a8 <memcpy+0x118>
 80049b4:	780b      	ldrb	r3, [r1, #0]
 80049b6:	7003      	strb	r3, [r0, #0]
 80049b8:	784b      	ldrb	r3, [r1, #1]
 80049ba:	7043      	strb	r3, [r0, #1]
 80049bc:	788b      	ldrb	r3, [r1, #2]
 80049be:	7083      	strb	r3, [r0, #2]
 80049c0:	4660      	mov	r0, ip
 80049c2:	4770      	bx	lr

080049c4 <memmove>:
 80049c4:	4288      	cmp	r0, r1
 80049c6:	b4f0      	push	{r4, r5, r6, r7}
 80049c8:	d90d      	bls.n	80049e6 <memmove+0x22>
 80049ca:	188b      	adds	r3, r1, r2
 80049cc:	4283      	cmp	r3, r0
 80049ce:	d90a      	bls.n	80049e6 <memmove+0x22>
 80049d0:	1884      	adds	r4, r0, r2
 80049d2:	b132      	cbz	r2, 80049e2 <memmove+0x1e>
 80049d4:	4622      	mov	r2, r4
 80049d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049de:	4299      	cmp	r1, r3
 80049e0:	d1f9      	bne.n	80049d6 <memmove+0x12>
 80049e2:	bcf0      	pop	{r4, r5, r6, r7}
 80049e4:	4770      	bx	lr
 80049e6:	2a0f      	cmp	r2, #15
 80049e8:	d80e      	bhi.n	8004a08 <memmove+0x44>
 80049ea:	4603      	mov	r3, r0
 80049ec:	1e54      	subs	r4, r2, #1
 80049ee:	2a00      	cmp	r2, #0
 80049f0:	d0f7      	beq.n	80049e2 <memmove+0x1e>
 80049f2:	3401      	adds	r4, #1
 80049f4:	440c      	add	r4, r1
 80049f6:	3b01      	subs	r3, #1
 80049f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a00:	42a1      	cmp	r1, r4
 8004a02:	d1f9      	bne.n	80049f8 <memmove+0x34>
 8004a04:	bcf0      	pop	{r4, r5, r6, r7}
 8004a06:	4770      	bx	lr
 8004a08:	ea40 0301 	orr.w	r3, r0, r1
 8004a0c:	079b      	lsls	r3, r3, #30
 8004a0e:	d13b      	bne.n	8004a88 <memmove+0xc4>
 8004a10:	f1a2 0710 	sub.w	r7, r2, #16
 8004a14:	093f      	lsrs	r7, r7, #4
 8004a16:	f101 0620 	add.w	r6, r1, #32
 8004a1a:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004a1e:	f101 0310 	add.w	r3, r1, #16
 8004a22:	f100 0410 	add.w	r4, r0, #16
 8004a26:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8004a2a:	f844 5c10 	str.w	r5, [r4, #-16]
 8004a2e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8004a32:	f844 5c0c 	str.w	r5, [r4, #-12]
 8004a36:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8004a3a:	f844 5c08 	str.w	r5, [r4, #-8]
 8004a3e:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8004a42:	f844 5c04 	str.w	r5, [r4, #-4]
 8004a46:	3310      	adds	r3, #16
 8004a48:	42b3      	cmp	r3, r6
 8004a4a:	f104 0410 	add.w	r4, r4, #16
 8004a4e:	d1ea      	bne.n	8004a26 <memmove+0x62>
 8004a50:	1c7b      	adds	r3, r7, #1
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	f012 0f0c 	tst.w	r2, #12
 8004a58:	4419      	add	r1, r3
 8004a5a:	f002 050f 	and.w	r5, r2, #15
 8004a5e:	4403      	add	r3, r0
 8004a60:	d015      	beq.n	8004a8e <memmove+0xca>
 8004a62:	3d04      	subs	r5, #4
 8004a64:	08ad      	lsrs	r5, r5, #2
 8004a66:	eb03 0c85 	add.w	ip, r3, r5, lsl #2
 8004a6a:	1f1c      	subs	r4, r3, #4
 8004a6c:	460e      	mov	r6, r1
 8004a6e:	f856 7b04 	ldr.w	r7, [r6], #4
 8004a72:	f844 7f04 	str.w	r7, [r4, #4]!
 8004a76:	4564      	cmp	r4, ip
 8004a78:	d1f9      	bne.n	8004a6e <memmove+0xaa>
 8004a7a:	3501      	adds	r5, #1
 8004a7c:	00ad      	lsls	r5, r5, #2
 8004a7e:	442b      	add	r3, r5
 8004a80:	4429      	add	r1, r5
 8004a82:	f002 0203 	and.w	r2, r2, #3
 8004a86:	e7b1      	b.n	80049ec <memmove+0x28>
 8004a88:	1e54      	subs	r4, r2, #1
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	e7b1      	b.n	80049f2 <memmove+0x2e>
 8004a8e:	462a      	mov	r2, r5
 8004a90:	e7ac      	b.n	80049ec <memmove+0x28>
 8004a92:	bf00      	nop

08004a94 <__malloc_lock>:
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop

08004a98 <__malloc_unlock>:
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop

08004a9c <_Balloc>:
 8004a9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b14b      	cbz	r3, 8004aba <_Balloc+0x1e>
 8004aa6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004aaa:	b180      	cbz	r0, 8004ace <_Balloc+0x32>
 8004aac:	6802      	ldr	r2, [r0, #0]
 8004aae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004ab8:	bd70      	pop	{r4, r5, r6, pc}
 8004aba:	2221      	movs	r2, #33	; 0x21
 8004abc:	2104      	movs	r1, #4
 8004abe:	f001 fe1d 	bl	80066fc <_calloc_r>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	64e8      	str	r0, [r5, #76]	; 0x4c
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d1ed      	bne.n	8004aa6 <_Balloc+0xa>
 8004aca:	2000      	movs	r0, #0
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	2101      	movs	r1, #1
 8004ad0:	fa01 f604 	lsl.w	r6, r1, r4
 8004ad4:	1d72      	adds	r2, r6, #5
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	0092      	lsls	r2, r2, #2
 8004ada:	f001 fe0f 	bl	80066fc <_calloc_r>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d0f3      	beq.n	8004aca <_Balloc+0x2e>
 8004ae2:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8004ae6:	e7e4      	b.n	8004ab2 <_Balloc+0x16>

08004ae8 <_Bfree>:
 8004ae8:	b131      	cbz	r1, 8004af8 <_Bfree+0x10>
 8004aea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004aec:	684a      	ldr	r2, [r1, #4]
 8004aee:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004af2:	6008      	str	r0, [r1, #0]
 8004af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop

08004afc <__multadd>:
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	690c      	ldr	r4, [r1, #16]
 8004b00:	b083      	sub	sp, #12
 8004b02:	460d      	mov	r5, r1
 8004b04:	4606      	mov	r6, r0
 8004b06:	f101 0c14 	add.w	ip, r1, #20
 8004b0a:	2700      	movs	r7, #0
 8004b0c:	f8dc 0000 	ldr.w	r0, [ip]
 8004b10:	b281      	uxth	r1, r0
 8004b12:	fb02 3301 	mla	r3, r2, r1, r3
 8004b16:	0c19      	lsrs	r1, r3, #16
 8004b18:	0c00      	lsrs	r0, r0, #16
 8004b1a:	fb02 1000 	mla	r0, r2, r0, r1
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3701      	adds	r7, #1
 8004b22:	eb03 4300 	add.w	r3, r3, r0, lsl #16
 8004b26:	42bc      	cmp	r4, r7
 8004b28:	f84c 3b04 	str.w	r3, [ip], #4
 8004b2c:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8004b30:	dcec      	bgt.n	8004b0c <__multadd+0x10>
 8004b32:	b13b      	cbz	r3, 8004b44 <__multadd+0x48>
 8004b34:	68aa      	ldr	r2, [r5, #8]
 8004b36:	42a2      	cmp	r2, r4
 8004b38:	dd07      	ble.n	8004b4a <__multadd+0x4e>
 8004b3a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004b3e:	3401      	adds	r4, #1
 8004b40:	6153      	str	r3, [r2, #20]
 8004b42:	612c      	str	r4, [r5, #16]
 8004b44:	4628      	mov	r0, r5
 8004b46:	b003      	add	sp, #12
 8004b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b4a:	6869      	ldr	r1, [r5, #4]
 8004b4c:	9301      	str	r3, [sp, #4]
 8004b4e:	4630      	mov	r0, r6
 8004b50:	3101      	adds	r1, #1
 8004b52:	f7ff ffa3 	bl	8004a9c <_Balloc>
 8004b56:	9b01      	ldr	r3, [sp, #4]
 8004b58:	4607      	mov	r7, r0
 8004b5a:	b1b8      	cbz	r0, 8004b8c <__multadd+0x90>
 8004b5c:	692a      	ldr	r2, [r5, #16]
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	3202      	adds	r2, #2
 8004b62:	f105 010c 	add.w	r1, r5, #12
 8004b66:	0092      	lsls	r2, r2, #2
 8004b68:	300c      	adds	r0, #12
 8004b6a:	f7ff fe91 	bl	8004890 <memcpy>
 8004b6e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8004b70:	6869      	ldr	r1, [r5, #4]
 8004b72:	9b01      	ldr	r3, [sp, #4]
 8004b74:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8004b78:	6028      	str	r0, [r5, #0]
 8004b7a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8004b7e:	463d      	mov	r5, r7
 8004b80:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8004b84:	3401      	adds	r4, #1
 8004b86:	6153      	str	r3, [r2, #20]
 8004b88:	612c      	str	r4, [r5, #16]
 8004b8a:	e7db      	b.n	8004b44 <__multadd+0x48>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b02      	ldr	r3, [pc, #8]	; (8004b98 <__multadd+0x9c>)
 8004b90:	4802      	ldr	r0, [pc, #8]	; (8004b9c <__multadd+0xa0>)
 8004b92:	21b5      	movs	r1, #181	; 0xb5
 8004b94:	f001 fd8e 	bl	80066b4 <__assert_func>
 8004b98:	0801cac4 	.word	0x0801cac4
 8004b9c:	0801cb0c 	.word	0x0801cb0c

08004ba0 <__s2b>:
 8004ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ba4:	4c26      	ldr	r4, [pc, #152]	; (8004c40 <__s2b+0xa0>)
 8004ba6:	9e08      	ldr	r6, [sp, #32]
 8004ba8:	461d      	mov	r5, r3
 8004baa:	3308      	adds	r3, #8
 8004bac:	fb84 4c03 	smull	r4, ip, r4, r3
 8004bb0:	2d09      	cmp	r5, #9
 8004bb2:	ea4f 73e3 	mov.w	r3, r3, asr #31
 8004bb6:	4690      	mov	r8, r2
 8004bb8:	4607      	mov	r7, r0
 8004bba:	460c      	mov	r4, r1
 8004bbc:	ebc3 026c 	rsb	r2, r3, ip, asr #1
 8004bc0:	dd36      	ble.n	8004c30 <__s2b+0x90>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	f101 0101 	add.w	r1, r1, #1
 8004bce:	dcfa      	bgt.n	8004bc6 <__s2b+0x26>
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	f7ff ff63 	bl	8004a9c <_Balloc>
 8004bd6:	b368      	cbz	r0, 8004c34 <__s2b+0x94>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f1b8 0f09 	cmp.w	r8, #9
 8004bde:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004be2:	dc13      	bgt.n	8004c0c <__s2b+0x6c>
 8004be4:	340a      	adds	r4, #10
 8004be6:	f04f 0809 	mov.w	r8, #9
 8004bea:	4545      	cmp	r5, r8
 8004bec:	dd0c      	ble.n	8004c08 <__s2b+0x68>
 8004bee:	eba5 0508 	sub.w	r5, r5, r8
 8004bf2:	4425      	add	r5, r4
 8004bf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004bf8:	4601      	mov	r1, r0
 8004bfa:	3b30      	subs	r3, #48	; 0x30
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f7ff ff7c 	bl	8004afc <__multadd>
 8004c04:	42a5      	cmp	r5, r4
 8004c06:	d1f5      	bne.n	8004bf4 <__s2b+0x54>
 8004c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0c:	f104 0909 	add.w	r9, r4, #9
 8004c10:	464e      	mov	r6, r9
 8004c12:	4444      	add	r4, r8
 8004c14:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004c18:	4601      	mov	r1, r0
 8004c1a:	3b30      	subs	r3, #48	; 0x30
 8004c1c:	220a      	movs	r2, #10
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f7ff ff6c 	bl	8004afc <__multadd>
 8004c24:	42b4      	cmp	r4, r6
 8004c26:	d1f5      	bne.n	8004c14 <__s2b+0x74>
 8004c28:	f1a8 0408 	sub.w	r4, r8, #8
 8004c2c:	444c      	add	r4, r9
 8004c2e:	e7dc      	b.n	8004bea <__s2b+0x4a>
 8004c30:	2100      	movs	r1, #0
 8004c32:	e7cd      	b.n	8004bd0 <__s2b+0x30>
 8004c34:	4602      	mov	r2, r0
 8004c36:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <__s2b+0xa4>)
 8004c38:	4803      	ldr	r0, [pc, #12]	; (8004c48 <__s2b+0xa8>)
 8004c3a:	21ce      	movs	r1, #206	; 0xce
 8004c3c:	f001 fd3a 	bl	80066b4 <__assert_func>
 8004c40:	38e38e39 	.word	0x38e38e39
 8004c44:	0801cac4 	.word	0x0801cac4
 8004c48:	0801cb0c 	.word	0x0801cb0c

08004c4c <__hi0bits>:
 8004c4c:	0c02      	lsrs	r2, r0, #16
 8004c4e:	0412      	lsls	r2, r2, #16
 8004c50:	4603      	mov	r3, r0
 8004c52:	b9ca      	cbnz	r2, 8004c88 <__hi0bits+0x3c>
 8004c54:	0403      	lsls	r3, r0, #16
 8004c56:	2010      	movs	r0, #16
 8004c58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004c5c:	bf04      	itt	eq
 8004c5e:	021b      	lsleq	r3, r3, #8
 8004c60:	3008      	addeq	r0, #8
 8004c62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004c66:	bf04      	itt	eq
 8004c68:	011b      	lsleq	r3, r3, #4
 8004c6a:	3004      	addeq	r0, #4
 8004c6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004c70:	bf04      	itt	eq
 8004c72:	009b      	lsleq	r3, r3, #2
 8004c74:	3002      	addeq	r0, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	db05      	blt.n	8004c86 <__hi0bits+0x3a>
 8004c7a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004c7e:	f100 0001 	add.w	r0, r0, #1
 8004c82:	bf08      	it	eq
 8004c84:	2020      	moveq	r0, #32
 8004c86:	4770      	bx	lr
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e7e5      	b.n	8004c58 <__hi0bits+0xc>

08004c8c <__lo0bits>:
 8004c8c:	6803      	ldr	r3, [r0, #0]
 8004c8e:	f013 0207 	ands.w	r2, r3, #7
 8004c92:	4601      	mov	r1, r0
 8004c94:	d007      	beq.n	8004ca6 <__lo0bits+0x1a>
 8004c96:	07da      	lsls	r2, r3, #31
 8004c98:	d420      	bmi.n	8004cdc <__lo0bits+0x50>
 8004c9a:	0798      	lsls	r0, r3, #30
 8004c9c:	d522      	bpl.n	8004ce4 <__lo0bits+0x58>
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	600b      	str	r3, [r1, #0]
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	4770      	bx	lr
 8004ca6:	b298      	uxth	r0, r3
 8004ca8:	b9b0      	cbnz	r0, 8004cd8 <__lo0bits+0x4c>
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	2010      	movs	r0, #16
 8004cae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004cb2:	bf04      	itt	eq
 8004cb4:	0a1b      	lsreq	r3, r3, #8
 8004cb6:	3008      	addeq	r0, #8
 8004cb8:	071a      	lsls	r2, r3, #28
 8004cba:	bf04      	itt	eq
 8004cbc:	091b      	lsreq	r3, r3, #4
 8004cbe:	3004      	addeq	r0, #4
 8004cc0:	079a      	lsls	r2, r3, #30
 8004cc2:	bf04      	itt	eq
 8004cc4:	089b      	lsreq	r3, r3, #2
 8004cc6:	3002      	addeq	r0, #2
 8004cc8:	07da      	lsls	r2, r3, #31
 8004cca:	d403      	bmi.n	8004cd4 <__lo0bits+0x48>
 8004ccc:	085b      	lsrs	r3, r3, #1
 8004cce:	f100 0001 	add.w	r0, r0, #1
 8004cd2:	d005      	beq.n	8004ce0 <__lo0bits+0x54>
 8004cd4:	600b      	str	r3, [r1, #0]
 8004cd6:	4770      	bx	lr
 8004cd8:	4610      	mov	r0, r2
 8004cda:	e7e8      	b.n	8004cae <__lo0bits+0x22>
 8004cdc:	2000      	movs	r0, #0
 8004cde:	4770      	bx	lr
 8004ce0:	2020      	movs	r0, #32
 8004ce2:	4770      	bx	lr
 8004ce4:	089b      	lsrs	r3, r3, #2
 8004ce6:	600b      	str	r3, [r1, #0]
 8004ce8:	2002      	movs	r0, #2
 8004cea:	4770      	bx	lr

08004cec <__i2b>:
 8004cec:	b510      	push	{r4, lr}
 8004cee:	460c      	mov	r4, r1
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	f7ff fed3 	bl	8004a9c <_Balloc>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	b118      	cbz	r0, 8004d02 <__i2b+0x16>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e9c0 3404 	strd	r3, r4, [r0, #16]
 8004d00:	bd10      	pop	{r4, pc}
 8004d02:	4b03      	ldr	r3, [pc, #12]	; (8004d10 <__i2b+0x24>)
 8004d04:	4803      	ldr	r0, [pc, #12]	; (8004d14 <__i2b+0x28>)
 8004d06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004d0a:	f001 fcd3 	bl	80066b4 <__assert_func>
 8004d0e:	bf00      	nop
 8004d10:	0801cac4 	.word	0x0801cac4
 8004d14:	0801cb0c 	.word	0x0801cb0c

08004d18 <__multiply>:
 8004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d1c:	690e      	ldr	r6, [r1, #16]
 8004d1e:	6917      	ldr	r7, [r2, #16]
 8004d20:	42be      	cmp	r6, r7
 8004d22:	b083      	sub	sp, #12
 8004d24:	460c      	mov	r4, r1
 8004d26:	4615      	mov	r5, r2
 8004d28:	db05      	blt.n	8004d36 <__multiply+0x1e>
 8004d2a:	463a      	mov	r2, r7
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	4637      	mov	r7, r6
 8004d30:	460d      	mov	r5, r1
 8004d32:	4616      	mov	r6, r2
 8004d34:	461c      	mov	r4, r3
 8004d36:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
 8004d3a:	eb07 0806 	add.w	r8, r7, r6
 8004d3e:	4543      	cmp	r3, r8
 8004d40:	bfb8      	it	lt
 8004d42:	3101      	addlt	r1, #1
 8004d44:	f7ff feaa 	bl	8004a9c <_Balloc>
 8004d48:	9000      	str	r0, [sp, #0]
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d07f      	beq.n	8004e4e <__multiply+0x136>
 8004d4e:	9b00      	ldr	r3, [sp, #0]
 8004d50:	f103 0a14 	add.w	sl, r3, #20
 8004d54:	eb0a 0988 	add.w	r9, sl, r8, lsl #2
 8004d58:	45ca      	cmp	sl, r9
 8004d5a:	d205      	bcs.n	8004d68 <__multiply+0x50>
 8004d5c:	4653      	mov	r3, sl
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f843 1b04 	str.w	r1, [r3], #4
 8004d64:	4599      	cmp	r9, r3
 8004d66:	d8fb      	bhi.n	8004d60 <__multiply+0x48>
 8004d68:	f104 0e14 	add.w	lr, r4, #20
 8004d6c:	eb0e 0b86 	add.w	fp, lr, r6, lsl #2
 8004d70:	f105 0314 	add.w	r3, r5, #20
 8004d74:	45de      	cmp	lr, fp
 8004d76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004d7a:	d253      	bcs.n	8004e24 <__multiply+0x10c>
 8004d7c:	f8cd 8004 	str.w	r8, [sp, #4]
 8004d80:	4698      	mov	r8, r3
 8004d82:	e005      	b.n	8004d90 <__multiply+0x78>
 8004d84:	0c09      	lsrs	r1, r1, #16
 8004d86:	d128      	bne.n	8004dda <__multiply+0xc2>
 8004d88:	45f3      	cmp	fp, lr
 8004d8a:	f10a 0a04 	add.w	sl, sl, #4
 8004d8e:	d947      	bls.n	8004e20 <__multiply+0x108>
 8004d90:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004d94:	b28e      	uxth	r6, r1
 8004d96:	2e00      	cmp	r6, #0
 8004d98:	d0f4      	beq.n	8004d84 <__multiply+0x6c>
 8004d9a:	4645      	mov	r5, r8
 8004d9c:	4654      	mov	r4, sl
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f855 1b04 	ldr.w	r1, [r5], #4
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	b28a      	uxth	r2, r1
 8004da8:	fa1f fc80 	uxth.w	ip, r0
 8004dac:	fb06 c202 	mla	r2, r6, r2, ip
 8004db0:	0c09      	lsrs	r1, r1, #16
 8004db2:	0c00      	lsrs	r0, r0, #16
 8004db4:	4413      	add	r3, r2
 8004db6:	fb06 0201 	mla	r2, r6, r1, r0
 8004dba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc4:	42af      	cmp	r7, r5
 8004dc6:	f844 3b04 	str.w	r3, [r4], #4
 8004dca:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8004dce:	d8e7      	bhi.n	8004da0 <__multiply+0x88>
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	f85e 1c04 	ldr.w	r1, [lr, #-4]
 8004dd6:	0c09      	lsrs	r1, r1, #16
 8004dd8:	d0d6      	beq.n	8004d88 <__multiply+0x70>
 8004dda:	f8da 3000 	ldr.w	r3, [sl]
 8004dde:	4640      	mov	r0, r8
 8004de0:	461a      	mov	r2, r3
 8004de2:	4654      	mov	r4, sl
 8004de4:	f04f 0c00 	mov.w	ip, #0
 8004de8:	8805      	ldrh	r5, [r0, #0]
 8004dea:	0c12      	lsrs	r2, r2, #16
 8004dec:	fb01 2205 	mla	r2, r1, r5, r2
 8004df0:	4494      	add	ip, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8004df8:	f844 3b04 	str.w	r3, [r4], #4
 8004dfc:	f850 3b04 	ldr.w	r3, [r0], #4
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	0c1b      	lsrs	r3, r3, #16
 8004e04:	b295      	uxth	r5, r2
 8004e06:	fb01 5303 	mla	r3, r1, r3, r5
 8004e0a:	eb03 431c 	add.w	r3, r3, ip, lsr #16
 8004e0e:	4287      	cmp	r7, r0
 8004e10:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8004e14:	d8e8      	bhi.n	8004de8 <__multiply+0xd0>
 8004e16:	45f3      	cmp	fp, lr
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	f10a 0a04 	add.w	sl, sl, #4
 8004e1e:	d8b7      	bhi.n	8004d90 <__multiply+0x78>
 8004e20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004e24:	f1b8 0f00 	cmp.w	r8, #0
 8004e28:	dd0b      	ble.n	8004e42 <__multiply+0x12a>
 8004e2a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8004e2e:	f1a9 0904 	sub.w	r9, r9, #4
 8004e32:	b11b      	cbz	r3, 8004e3c <__multiply+0x124>
 8004e34:	e005      	b.n	8004e42 <__multiply+0x12a>
 8004e36:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 8004e3a:	b913      	cbnz	r3, 8004e42 <__multiply+0x12a>
 8004e3c:	f1b8 0801 	subs.w	r8, r8, #1
 8004e40:	d1f9      	bne.n	8004e36 <__multiply+0x11e>
 8004e42:	9800      	ldr	r0, [sp, #0]
 8004e44:	f8c0 8010 	str.w	r8, [r0, #16]
 8004e48:	b003      	add	sp, #12
 8004e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e4e:	4602      	mov	r2, r0
 8004e50:	4b02      	ldr	r3, [pc, #8]	; (8004e5c <__multiply+0x144>)
 8004e52:	4803      	ldr	r0, [pc, #12]	; (8004e60 <__multiply+0x148>)
 8004e54:	f240 115d 	movw	r1, #349	; 0x15d
 8004e58:	f001 fc2c 	bl	80066b4 <__assert_func>
 8004e5c:	0801cac4 	.word	0x0801cac4
 8004e60:	0801cb0c 	.word	0x0801cb0c

08004e64 <__pow5mult>:
 8004e64:	f012 0303 	ands.w	r3, r2, #3
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	4607      	mov	r7, r0
 8004e70:	d12e      	bne.n	8004ed0 <__pow5mult+0x6c>
 8004e72:	460d      	mov	r5, r1
 8004e74:	10a4      	asrs	r4, r4, #2
 8004e76:	d01c      	beq.n	8004eb2 <__pow5mult+0x4e>
 8004e78:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 8004e7a:	b396      	cbz	r6, 8004ee2 <__pow5mult+0x7e>
 8004e7c:	07e3      	lsls	r3, r4, #31
 8004e7e:	f04f 0800 	mov.w	r8, #0
 8004e82:	d406      	bmi.n	8004e92 <__pow5mult+0x2e>
 8004e84:	1064      	asrs	r4, r4, #1
 8004e86:	d014      	beq.n	8004eb2 <__pow5mult+0x4e>
 8004e88:	6830      	ldr	r0, [r6, #0]
 8004e8a:	b1a8      	cbz	r0, 8004eb8 <__pow5mult+0x54>
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	07e3      	lsls	r3, r4, #31
 8004e90:	d5f8      	bpl.n	8004e84 <__pow5mult+0x20>
 8004e92:	4632      	mov	r2, r6
 8004e94:	4629      	mov	r1, r5
 8004e96:	4638      	mov	r0, r7
 8004e98:	f7ff ff3e 	bl	8004d18 <__multiply>
 8004e9c:	b1b5      	cbz	r5, 8004ecc <__pow5mult+0x68>
 8004e9e:	686a      	ldr	r2, [r5, #4]
 8004ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea2:	1064      	asrs	r4, r4, #1
 8004ea4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ea8:	6029      	str	r1, [r5, #0]
 8004eaa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004eae:	4605      	mov	r5, r0
 8004eb0:	d1ea      	bne.n	8004e88 <__pow5mult+0x24>
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	4632      	mov	r2, r6
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4638      	mov	r0, r7
 8004ebe:	f7ff ff2b 	bl	8004d18 <__multiply>
 8004ec2:	6030      	str	r0, [r6, #0]
 8004ec4:	f8c0 8000 	str.w	r8, [r0]
 8004ec8:	4606      	mov	r6, r0
 8004eca:	e7e0      	b.n	8004e8e <__pow5mult+0x2a>
 8004ecc:	4605      	mov	r5, r0
 8004ece:	e7d9      	b.n	8004e84 <__pow5mult+0x20>
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	4a09      	ldr	r2, [pc, #36]	; (8004ef8 <__pow5mult+0x94>)
 8004ed4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f7ff fe0f 	bl	8004afc <__multadd>
 8004ede:	4605      	mov	r5, r0
 8004ee0:	e7c8      	b.n	8004e74 <__pow5mult+0x10>
 8004ee2:	f240 2171 	movw	r1, #625	; 0x271
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	f7ff ff00 	bl	8004cec <__i2b>
 8004eec:	2300      	movs	r3, #0
 8004eee:	64b8      	str	r0, [r7, #72]	; 0x48
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	6003      	str	r3, [r0, #0]
 8004ef4:	e7c2      	b.n	8004e7c <__pow5mult+0x18>
 8004ef6:	bf00      	nop
 8004ef8:	0800d418 	.word	0x0800d418

08004efc <__lshift>:
 8004efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f00:	690e      	ldr	r6, [r1, #16]
 8004f02:	460d      	mov	r5, r1
 8004f04:	ea4f 1962 	mov.w	r9, r2, asr #5
 8004f08:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 8004f0c:	444e      	add	r6, r9
 8004f0e:	1c74      	adds	r4, r6, #1
 8004f10:	429c      	cmp	r4, r3
 8004f12:	4690      	mov	r8, r2
 8004f14:	4607      	mov	r7, r0
 8004f16:	dd04      	ble.n	8004f22 <__lshift+0x26>
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	429c      	cmp	r4, r3
 8004f1c:	f101 0101 	add.w	r1, r1, #1
 8004f20:	dcfa      	bgt.n	8004f18 <__lshift+0x1c>
 8004f22:	4638      	mov	r0, r7
 8004f24:	f7ff fdba 	bl	8004a9c <_Balloc>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d042      	beq.n	8004fb2 <__lshift+0xb6>
 8004f2c:	f1b9 0f00 	cmp.w	r9, #0
 8004f30:	f100 0c14 	add.w	ip, r0, #20
 8004f34:	dd0e      	ble.n	8004f54 <__lshift+0x58>
 8004f36:	f109 0905 	add.w	r9, r9, #5
 8004f3a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8004f3e:	eb00 0109 	add.w	r1, r0, r9
 8004f42:	4663      	mov	r3, ip
 8004f44:	2200      	movs	r2, #0
 8004f46:	f843 2b04 	str.w	r2, [r3], #4
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	d1fb      	bne.n	8004f46 <__lshift+0x4a>
 8004f4e:	f1a9 0914 	sub.w	r9, r9, #20
 8004f52:	44cc      	add	ip, r9
 8004f54:	6929      	ldr	r1, [r5, #16]
 8004f56:	f105 0314 	add.w	r3, r5, #20
 8004f5a:	f018 081f 	ands.w	r8, r8, #31
 8004f5e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8004f62:	d01d      	beq.n	8004fa0 <__lshift+0xa4>
 8004f64:	f1c8 0920 	rsb	r9, r8, #32
 8004f68:	2200      	movs	r2, #0
 8004f6a:	6819      	ldr	r1, [r3, #0]
 8004f6c:	fa01 f108 	lsl.w	r1, r1, r8
 8004f70:	4311      	orrs	r1, r2
 8004f72:	f84c 1b04 	str.w	r1, [ip], #4
 8004f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f7a:	4573      	cmp	r3, lr
 8004f7c:	fa22 f209 	lsr.w	r2, r2, r9
 8004f80:	d3f3      	bcc.n	8004f6a <__lshift+0x6e>
 8004f82:	f8cc 2000 	str.w	r2, [ip]
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	bf18      	it	ne
 8004f8a:	4626      	movne	r6, r4
 8004f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f8e:	686a      	ldr	r2, [r5, #4]
 8004f90:	6106      	str	r6, [r0, #16]
 8004f92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f96:	6029      	str	r1, [r5, #0]
 8004f98:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fa0:	f1ac 0c04 	sub.w	ip, ip, #4
 8004fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa8:	f84c 2f04 	str.w	r2, [ip, #4]!
 8004fac:	459e      	cmp	lr, r3
 8004fae:	d8f9      	bhi.n	8004fa4 <__lshift+0xa8>
 8004fb0:	e7ec      	b.n	8004f8c <__lshift+0x90>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	4b02      	ldr	r3, [pc, #8]	; (8004fc0 <__lshift+0xc4>)
 8004fb6:	4803      	ldr	r0, [pc, #12]	; (8004fc4 <__lshift+0xc8>)
 8004fb8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004fbc:	f001 fb7a 	bl	80066b4 <__assert_func>
 8004fc0:	0801cac4 	.word	0x0801cac4
 8004fc4:	0801cb0c 	.word	0x0801cb0c

08004fc8 <__mcmp>:
 8004fc8:	b430      	push	{r4, r5}
 8004fca:	690b      	ldr	r3, [r1, #16]
 8004fcc:	4605      	mov	r5, r0
 8004fce:	6900      	ldr	r0, [r0, #16]
 8004fd0:	1ac0      	subs	r0, r0, r3
 8004fd2:	d110      	bne.n	8004ff6 <__mcmp+0x2e>
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	3514      	adds	r5, #20
 8004fd8:	3114      	adds	r1, #20
 8004fda:	4419      	add	r1, r3
 8004fdc:	442b      	add	r3, r5
 8004fde:	e001      	b.n	8004fe4 <__mcmp+0x1c>
 8004fe0:	429d      	cmp	r5, r3
 8004fe2:	d208      	bcs.n	8004ff6 <__mcmp+0x2e>
 8004fe4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004fe8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004fec:	4294      	cmp	r4, r2
 8004fee:	d0f7      	beq.n	8004fe0 <__mcmp+0x18>
 8004ff0:	d203      	bcs.n	8004ffa <__mcmp+0x32>
 8004ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ff6:	bc30      	pop	{r4, r5}
 8004ff8:	4770      	bx	lr
 8004ffa:	2001      	movs	r0, #1
 8004ffc:	bc30      	pop	{r4, r5}
 8004ffe:	4770      	bx	lr

08005000 <__mdiff>:
 8005000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005004:	4616      	mov	r6, r2
 8005006:	690b      	ldr	r3, [r1, #16]
 8005008:	6912      	ldr	r2, [r2, #16]
 800500a:	eba3 0802 	sub.w	r8, r3, r2
 800500e:	f1b8 0f00 	cmp.w	r8, #0
 8005012:	460d      	mov	r5, r1
 8005014:	d167      	bne.n	80050e6 <__mdiff+0xe6>
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	f101 0714 	add.w	r7, r1, #20
 800501c:	f106 0114 	add.w	r1, r6, #20
 8005020:	18bb      	adds	r3, r7, r2
 8005022:	4411      	add	r1, r2
 8005024:	e001      	b.n	800502a <__mdiff+0x2a>
 8005026:	429f      	cmp	r7, r3
 8005028:	d261      	bcs.n	80050ee <__mdiff+0xee>
 800502a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800502e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005032:	42a2      	cmp	r2, r4
 8005034:	d0f7      	beq.n	8005026 <__mdiff+0x26>
 8005036:	d350      	bcc.n	80050da <__mdiff+0xda>
 8005038:	6869      	ldr	r1, [r5, #4]
 800503a:	f7ff fd2f 	bl	8004a9c <_Balloc>
 800503e:	2800      	cmp	r0, #0
 8005040:	d05f      	beq.n	8005102 <__mdiff+0x102>
 8005042:	692f      	ldr	r7, [r5, #16]
 8005044:	6933      	ldr	r3, [r6, #16]
 8005046:	f8c0 800c 	str.w	r8, [r0, #12]
 800504a:	f106 0214 	add.w	r2, r6, #20
 800504e:	3514      	adds	r5, #20
 8005050:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005054:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8005058:	f100 0614 	add.w	r6, r0, #20
 800505c:	2100      	movs	r1, #0
 800505e:	e000      	b.n	8005062 <__mdiff+0x62>
 8005060:	4626      	mov	r6, r4
 8005062:	f852 4b04 	ldr.w	r4, [r2], #4
 8005066:	f855 8b04 	ldr.w	r8, [r5], #4
 800506a:	fa1f f984 	uxth.w	r9, r4
 800506e:	fa11 f388 	uxtah	r3, r1, r8
 8005072:	0c21      	lsrs	r1, r4, #16
 8005074:	eba3 0309 	sub.w	r3, r3, r9
 8005078:	ebc1 4118 	rsb	r1, r1, r8, lsr #16
 800507c:	eb01 4123 	add.w	r1, r1, r3, asr #16
 8005080:	4634      	mov	r4, r6
 8005082:	b29b      	uxth	r3, r3
 8005084:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005088:	4596      	cmp	lr, r2
 800508a:	ea4f 4121 	mov.w	r1, r1, asr #16
 800508e:	f844 3b04 	str.w	r3, [r4], #4
 8005092:	46a8      	mov	r8, r5
 8005094:	d8e4      	bhi.n	8005060 <__mdiff+0x60>
 8005096:	45ac      	cmp	ip, r5
 8005098:	d916      	bls.n	80050c8 <__mdiff+0xc8>
 800509a:	4626      	mov	r6, r4
 800509c:	f858 2b04 	ldr.w	r2, [r8], #4
 80050a0:	fa11 f382 	uxtah	r3, r1, r2
 80050a4:	1419      	asrs	r1, r3, #16
 80050a6:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80050b0:	45c4      	cmp	ip, r8
 80050b2:	f846 3b04 	str.w	r3, [r6], #4
 80050b6:	ea4f 4121 	mov.w	r1, r1, asr #16
 80050ba:	d8ef      	bhi.n	800509c <__mdiff+0x9c>
 80050bc:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 80050c0:	1b76      	subs	r6, r6, r5
 80050c2:	f026 0603 	bic.w	r6, r6, #3
 80050c6:	4426      	add	r6, r4
 80050c8:	b923      	cbnz	r3, 80050d4 <__mdiff+0xd4>
 80050ca:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 80050ce:	3f01      	subs	r7, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0fa      	beq.n	80050ca <__mdiff+0xca>
 80050d4:	6107      	str	r7, [r0, #16]
 80050d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050da:	462b      	mov	r3, r5
 80050dc:	f04f 0801 	mov.w	r8, #1
 80050e0:	4635      	mov	r5, r6
 80050e2:	461e      	mov	r6, r3
 80050e4:	e7a8      	b.n	8005038 <__mdiff+0x38>
 80050e6:	dbf8      	blt.n	80050da <__mdiff+0xda>
 80050e8:	f04f 0800 	mov.w	r8, #0
 80050ec:	e7a4      	b.n	8005038 <__mdiff+0x38>
 80050ee:	2100      	movs	r1, #0
 80050f0:	f7ff fcd4 	bl	8004a9c <_Balloc>
 80050f4:	b160      	cbz	r0, 8005110 <__mdiff+0x110>
 80050f6:	2201      	movs	r2, #1
 80050f8:	2300      	movs	r3, #0
 80050fa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80050fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005102:	4602      	mov	r2, r0
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <__mdiff+0x120>)
 8005106:	4807      	ldr	r0, [pc, #28]	; (8005124 <__mdiff+0x124>)
 8005108:	f44f 7110 	mov.w	r1, #576	; 0x240
 800510c:	f001 fad2 	bl	80066b4 <__assert_func>
 8005110:	4602      	mov	r2, r0
 8005112:	4b03      	ldr	r3, [pc, #12]	; (8005120 <__mdiff+0x120>)
 8005114:	4803      	ldr	r0, [pc, #12]	; (8005124 <__mdiff+0x124>)
 8005116:	f240 2132 	movw	r1, #562	; 0x232
 800511a:	f001 facb 	bl	80066b4 <__assert_func>
 800511e:	bf00      	nop
 8005120:	0801cac4 	.word	0x0801cac4
 8005124:	0801cb0c 	.word	0x0801cb0c

08005128 <__ulp>:
 8005128:	4b12      	ldr	r3, [pc, #72]	; (8005174 <__ulp+0x4c>)
 800512a:	ee10 2a90 	vmov	r2, s1
 800512e:	401a      	ands	r2, r3
 8005130:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005134:	2b00      	cmp	r3, #0
 8005136:	dd04      	ble.n	8005142 <__ulp+0x1a>
 8005138:	2000      	movs	r0, #0
 800513a:	4619      	mov	r1, r3
 800513c:	ec41 0b10 	vmov	d0, r0, r1
 8005140:	4770      	bx	lr
 8005142:	425b      	negs	r3, r3
 8005144:	151b      	asrs	r3, r3, #20
 8005146:	2b13      	cmp	r3, #19
 8005148:	dc07      	bgt.n	800515a <__ulp+0x32>
 800514a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800514e:	2000      	movs	r0, #0
 8005150:	fa42 f103 	asr.w	r1, r2, r3
 8005154:	ec41 0b10 	vmov	d0, r0, r1
 8005158:	4770      	bx	lr
 800515a:	3b14      	subs	r3, #20
 800515c:	2b1e      	cmp	r3, #30
 800515e:	bfda      	itte	le
 8005160:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005164:	fa22 f303 	lsrle.w	r3, r2, r3
 8005168:	2301      	movgt	r3, #1
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	ec41 0b10 	vmov	d0, r0, r1
 8005172:	4770      	bx	lr
 8005174:	7ff00000 	.word	0x7ff00000

08005178 <__b2d>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	6904      	ldr	r4, [r0, #16]
 800517c:	f100 0614 	add.w	r6, r0, #20
 8005180:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005184:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8005188:	4628      	mov	r0, r5
 800518a:	f7ff fd5f 	bl	8004c4c <__hi0bits>
 800518e:	f1c0 0320 	rsb	r3, r0, #32
 8005192:	280a      	cmp	r0, #10
 8005194:	600b      	str	r3, [r1, #0]
 8005196:	f1a4 0104 	sub.w	r1, r4, #4
 800519a:	dd31      	ble.n	8005200 <__b2d+0x88>
 800519c:	428e      	cmp	r6, r1
 800519e:	f1a0 000b 	sub.w	r0, r0, #11
 80051a2:	d21a      	bcs.n	80051da <__b2d+0x62>
 80051a4:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80051a8:	b310      	cbz	r0, 80051f0 <__b2d+0x78>
 80051aa:	f1c0 0720 	rsb	r7, r0, #32
 80051ae:	4085      	lsls	r5, r0
 80051b0:	fa21 f307 	lsr.w	r3, r1, r7
 80051b4:	431d      	orrs	r5, r3
 80051b6:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80051ba:	f1a4 0508 	sub.w	r5, r4, #8
 80051be:	42ae      	cmp	r6, r5
 80051c0:	fa01 f000 	lsl.w	r0, r1, r0
 80051c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051c8:	d203      	bcs.n	80051d2 <__b2d+0x5a>
 80051ca:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 80051ce:	40f9      	lsrs	r1, r7
 80051d0:	4308      	orrs	r0, r1
 80051d2:	4602      	mov	r2, r0
 80051d4:	ec43 2b10 	vmov	d0, r2, r3
 80051d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051da:	b140      	cbz	r0, 80051ee <__b2d+0x76>
 80051dc:	fa05 f000 	lsl.w	r0, r5, r0
 80051e0:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80051e4:	2000      	movs	r0, #0
 80051e6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051ea:	4602      	mov	r2, r0
 80051ec:	e7f2      	b.n	80051d4 <__b2d+0x5c>
 80051ee:	4601      	mov	r1, r0
 80051f0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80051f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051f8:	460a      	mov	r2, r1
 80051fa:	ec43 2b10 	vmov	d0, r2, r3
 80051fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005200:	428e      	cmp	r6, r1
 8005202:	f1c0 070b 	rsb	r7, r0, #11
 8005206:	bf38      	it	cc
 8005208:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 800520c:	fa25 fc07 	lsr.w	ip, r5, r7
 8005210:	f100 0015 	add.w	r0, r0, #21
 8005214:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
 8005218:	bf34      	ite	cc
 800521a:	40f9      	lsrcc	r1, r7
 800521c:	2100      	movcs	r1, #0
 800521e:	fa05 f000 	lsl.w	r0, r5, r0
 8005222:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005226:	ea40 0201 	orr.w	r2, r0, r1
 800522a:	ec43 2b10 	vmov	d0, r2, r3
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005230 <__d2b>:
 8005230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005234:	4688      	mov	r8, r1
 8005236:	b083      	sub	sp, #12
 8005238:	2101      	movs	r1, #1
 800523a:	4615      	mov	r5, r2
 800523c:	ec57 6b10 	vmov	r6, r7, d0
 8005240:	f7ff fc2c 	bl	8004a9c <_Balloc>
 8005244:	4604      	mov	r4, r0
 8005246:	2800      	cmp	r0, #0
 8005248:	d050      	beq.n	80052ec <__d2b+0xbc>
 800524a:	f3c7 590a 	ubfx	r9, r7, #20, #11
 800524e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	d001      	beq.n	800525c <__d2b+0x2c>
 8005258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800525c:	2e00      	cmp	r6, #0
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	d025      	beq.n	80052ae <__d2b+0x7e>
 8005262:	4668      	mov	r0, sp
 8005264:	9600      	str	r6, [sp, #0]
 8005266:	f7ff fd11 	bl	8004c8c <__lo0bits>
 800526a:	2800      	cmp	r0, #0
 800526c:	d03a      	beq.n	80052e4 <__d2b+0xb4>
 800526e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8005272:	f1c0 0220 	rsb	r2, r0, #32
 8005276:	fa03 f202 	lsl.w	r2, r3, r2
 800527a:	430a      	orrs	r2, r1
 800527c:	40c3      	lsrs	r3, r0
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	6162      	str	r2, [r4, #20]
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2102      	movne	r1, #2
 8005288:	2101      	moveq	r1, #1
 800528a:	61a3      	str	r3, [r4, #24]
 800528c:	6121      	str	r1, [r4, #16]
 800528e:	f1b9 0f00 	cmp.w	r9, #0
 8005292:	d017      	beq.n	80052c4 <__d2b+0x94>
 8005294:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
 8005298:	eb09 0300 	add.w	r3, r9, r0
 800529c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80052a0:	f8c8 3000 	str.w	r3, [r8]
 80052a4:	6028      	str	r0, [r5, #0]
 80052a6:	4620      	mov	r0, r4
 80052a8:	b003      	add	sp, #12
 80052aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ae:	a801      	add	r0, sp, #4
 80052b0:	f7ff fcec 	bl	8004c8c <__lo0bits>
 80052b4:	9b01      	ldr	r3, [sp, #4]
 80052b6:	6163      	str	r3, [r4, #20]
 80052b8:	2101      	movs	r1, #1
 80052ba:	3020      	adds	r0, #32
 80052bc:	6121      	str	r1, [r4, #16]
 80052be:	f1b9 0f00 	cmp.w	r9, #0
 80052c2:	d1e7      	bne.n	8005294 <__d2b+0x64>
 80052c4:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80052c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80052cc:	f8c8 0000 	str.w	r0, [r8]
 80052d0:	6918      	ldr	r0, [r3, #16]
 80052d2:	f7ff fcbb 	bl	8004c4c <__hi0bits>
 80052d6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80052da:	6028      	str	r0, [r5, #0]
 80052dc:	4620      	mov	r0, r4
 80052de:	b003      	add	sp, #12
 80052e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052e8:	6162      	str	r2, [r4, #20]
 80052ea:	e7ca      	b.n	8005282 <__d2b+0x52>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b03      	ldr	r3, [pc, #12]	; (80052fc <__d2b+0xcc>)
 80052f0:	4803      	ldr	r0, [pc, #12]	; (8005300 <__d2b+0xd0>)
 80052f2:	f240 310a 	movw	r1, #778	; 0x30a
 80052f6:	f001 f9dd 	bl	80066b4 <__assert_func>
 80052fa:	bf00      	nop
 80052fc:	0801cac4 	.word	0x0801cac4
 8005300:	0801cb0c 	.word	0x0801cb0c

08005304 <__ratio>:
 8005304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005308:	b083      	sub	sp, #12
 800530a:	4688      	mov	r8, r1
 800530c:	4669      	mov	r1, sp
 800530e:	4681      	mov	r9, r0
 8005310:	f7ff ff32 	bl	8005178 <__b2d>
 8005314:	4640      	mov	r0, r8
 8005316:	a901      	add	r1, sp, #4
 8005318:	ec55 4b10 	vmov	r4, r5, d0
 800531c:	f7ff ff2c 	bl	8005178 <__b2d>
 8005320:	e9dd 1300 	ldrd	r1, r3, [sp]
 8005324:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8005328:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800532c:	1acb      	subs	r3, r1, r3
 800532e:	1a12      	subs	r2, r2, r0
 8005330:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8005334:	2b00      	cmp	r3, #0
 8005336:	ec57 6b10 	vmov	r6, r7, d0
 800533a:	dd0d      	ble.n	8005358 <__ratio+0x54>
 800533c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8005340:	464d      	mov	r5, r9
 8005342:	4632      	mov	r2, r6
 8005344:	463b      	mov	r3, r7
 8005346:	4620      	mov	r0, r4
 8005348:	4629      	mov	r1, r5
 800534a:	f002 f8cf 	bl	80074ec <__aeabi_ddiv>
 800534e:	ec41 0b10 	vmov	d0, r0, r1
 8005352:	b003      	add	sp, #12
 8005354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005358:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 800535c:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 8005360:	460f      	mov	r7, r1
 8005362:	e7ee      	b.n	8005342 <__ratio+0x3e>

08005364 <_mprec_log10>:
 8005364:	2817      	cmp	r0, #23
 8005366:	b5d0      	push	{r4, r6, r7, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	dd0c      	ble.n	8005386 <_mprec_log10+0x22>
 800536c:	490a      	ldr	r1, [pc, #40]	; (8005398 <_mprec_log10+0x34>)
 800536e:	4f0b      	ldr	r7, [pc, #44]	; (800539c <_mprec_log10+0x38>)
 8005370:	2000      	movs	r0, #0
 8005372:	2600      	movs	r6, #0
 8005374:	4632      	mov	r2, r6
 8005376:	463b      	mov	r3, r7
 8005378:	f001 ff8e 	bl	8007298 <__aeabi_dmul>
 800537c:	3c01      	subs	r4, #1
 800537e:	d1f9      	bne.n	8005374 <_mprec_log10+0x10>
 8005380:	ec41 0b10 	vmov	d0, r0, r1
 8005384:	bdd0      	pop	{r4, r6, r7, pc}
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <_mprec_log10+0x3c>)
 8005388:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800538c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8005390:	ec41 0b10 	vmov	d0, r0, r1
 8005394:	bdd0      	pop	{r4, r6, r7, pc}
 8005396:	bf00      	nop
 8005398:	3ff00000 	.word	0x3ff00000
 800539c:	40240000 	.word	0x40240000
 80053a0:	0800d418 	.word	0x0800d418

080053a4 <__copybits>:
 80053a4:	b470      	push	{r4, r5, r6}
 80053a6:	6914      	ldr	r4, [r2, #16]
 80053a8:	1e4e      	subs	r6, r1, #1
 80053aa:	f102 0314 	add.w	r3, r2, #20
 80053ae:	1176      	asrs	r6, r6, #5
 80053b0:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 80053b4:	3601      	adds	r6, #1
 80053b6:	428b      	cmp	r3, r1
 80053b8:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80053bc:	d20c      	bcs.n	80053d8 <__copybits+0x34>
 80053be:	1f04      	subs	r4, r0, #4
 80053c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053c4:	f844 5f04 	str.w	r5, [r4, #4]!
 80053c8:	4299      	cmp	r1, r3
 80053ca:	d8f9      	bhi.n	80053c0 <__copybits+0x1c>
 80053cc:	1a8b      	subs	r3, r1, r2
 80053ce:	3b15      	subs	r3, #21
 80053d0:	f023 0303 	bic.w	r3, r3, #3
 80053d4:	3304      	adds	r3, #4
 80053d6:	4418      	add	r0, r3
 80053d8:	4286      	cmp	r6, r0
 80053da:	d904      	bls.n	80053e6 <__copybits+0x42>
 80053dc:	2300      	movs	r3, #0
 80053de:	f840 3b04 	str.w	r3, [r0], #4
 80053e2:	4286      	cmp	r6, r0
 80053e4:	d8fb      	bhi.n	80053de <__copybits+0x3a>
 80053e6:	bc70      	pop	{r4, r5, r6}
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <__any_on>:
 80053ec:	6903      	ldr	r3, [r0, #16]
 80053ee:	114a      	asrs	r2, r1, #5
 80053f0:	4293      	cmp	r3, r2
 80053f2:	b410      	push	{r4}
 80053f4:	f100 0414 	add.w	r4, r0, #20
 80053f8:	da10      	bge.n	800541c <__any_on+0x30>
 80053fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053fe:	429c      	cmp	r4, r3
 8005400:	d21e      	bcs.n	8005440 <__any_on+0x54>
 8005402:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005406:	3b04      	subs	r3, #4
 8005408:	b118      	cbz	r0, 8005412 <__any_on+0x26>
 800540a:	e015      	b.n	8005438 <__any_on+0x4c>
 800540c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005410:	b992      	cbnz	r2, 8005438 <__any_on+0x4c>
 8005412:	429c      	cmp	r4, r3
 8005414:	d3fa      	bcc.n	800540c <__any_on+0x20>
 8005416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005420:	dded      	ble.n	80053fe <__any_on+0x12>
 8005422:	f011 011f 	ands.w	r1, r1, #31
 8005426:	d0ea      	beq.n	80053fe <__any_on+0x12>
 8005428:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
 800542c:	fa20 f201 	lsr.w	r2, r0, r1
 8005430:	fa02 f101 	lsl.w	r1, r2, r1
 8005434:	4288      	cmp	r0, r1
 8005436:	d0e2      	beq.n	80053fe <__any_on+0x12>
 8005438:	2001      	movs	r0, #1
 800543a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	2000      	movs	r0, #0
 8005442:	e7e8      	b.n	8005416 <__any_on+0x2a>

08005444 <_putc_r>:
 8005444:	b510      	push	{r4, lr}
 8005446:	4604      	mov	r4, r0
 8005448:	b082      	sub	sp, #8
 800544a:	b108      	cbz	r0, 8005450 <_putc_r+0xc>
 800544c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800544e:	b183      	cbz	r3, 8005472 <_putc_r+0x2e>
 8005450:	6893      	ldr	r3, [r2, #8]
 8005452:	3b01      	subs	r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	6093      	str	r3, [r2, #8]
 8005458:	da16      	bge.n	8005488 <_putc_r+0x44>
 800545a:	6990      	ldr	r0, [r2, #24]
 800545c:	4283      	cmp	r3, r0
 800545e:	db15      	blt.n	800548c <_putc_r+0x48>
 8005460:	b2c8      	uxtb	r0, r1
 8005462:	280a      	cmp	r0, #10
 8005464:	d012      	beq.n	800548c <_putc_r+0x48>
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	1c5c      	adds	r4, r3, #1
 800546a:	6014      	str	r4, [r2, #0]
 800546c:	7019      	strb	r1, [r3, #0]
 800546e:	b002      	add	sp, #8
 8005470:	bd10      	pop	{r4, pc}
 8005472:	e9cd 1200 	strd	r1, r2, [sp]
 8005476:	f7fe fb33 	bl	8003ae0 <__sinit>
 800547a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800547e:	6893      	ldr	r3, [r2, #8]
 8005480:	3b01      	subs	r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	6093      	str	r3, [r2, #8]
 8005486:	dbe8      	blt.n	800545a <_putc_r+0x16>
 8005488:	b2c8      	uxtb	r0, r1
 800548a:	e7ec      	b.n	8005466 <_putc_r+0x22>
 800548c:	4620      	mov	r0, r4
 800548e:	b002      	add	sp, #8
 8005490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005494:	f001 b8ae 	b.w	80065f4 <__swbuf_r>

08005498 <putc>:
 8005498:	4b16      	ldr	r3, [pc, #88]	; (80054f4 <putc+0x5c>)
 800549a:	b570      	push	{r4, r5, r6, lr}
 800549c:	681d      	ldr	r5, [r3, #0]
 800549e:	4606      	mov	r6, r0
 80054a0:	460c      	mov	r4, r1
 80054a2:	b10d      	cbz	r5, 80054a8 <putc+0x10>
 80054a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80054a6:	b17b      	cbz	r3, 80054c8 <putc+0x30>
 80054a8:	68a3      	ldr	r3, [r4, #8]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	60a3      	str	r3, [r4, #8]
 80054b0:	da12      	bge.n	80054d8 <putc+0x40>
 80054b2:	69a2      	ldr	r2, [r4, #24]
 80054b4:	4293      	cmp	r3, r2
 80054b6:	db15      	blt.n	80054e4 <putc+0x4c>
 80054b8:	b2f0      	uxtb	r0, r6
 80054ba:	280a      	cmp	r0, #10
 80054bc:	d012      	beq.n	80054e4 <putc+0x4c>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	6022      	str	r2, [r4, #0]
 80054c4:	701e      	strb	r6, [r3, #0]
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	4628      	mov	r0, r5
 80054ca:	f7fe fb09 	bl	8003ae0 <__sinit>
 80054ce:	68a3      	ldr	r3, [r4, #8]
 80054d0:	3b01      	subs	r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	60a3      	str	r3, [r4, #8]
 80054d6:	dbec      	blt.n	80054b2 <putc+0x1a>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	701e      	strb	r6, [r3, #0]
 80054e0:	b2f0      	uxtb	r0, r6
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	4622      	mov	r2, r4
 80054e6:	4631      	mov	r1, r6
 80054e8:	4628      	mov	r0, r5
 80054ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80054ee:	f001 b881 	b.w	80065f4 <__swbuf_r>
 80054f2:	bf00      	nop
 80054f4:	20000078 	.word	0x20000078

080054f8 <_realloc_r>:
 80054f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	4617      	mov	r7, r2
 80054fe:	2900      	cmp	r1, #0
 8005500:	f000 80bb 	beq.w	800567a <_realloc_r+0x182>
 8005504:	f107 040b 	add.w	r4, r7, #11
 8005508:	4681      	mov	r9, r0
 800550a:	460d      	mov	r5, r1
 800550c:	f7ff fac2 	bl	8004a94 <__malloc_lock>
 8005510:	2c16      	cmp	r4, #22
 8005512:	d85e      	bhi.n	80055d2 <_realloc_r+0xda>
 8005514:	2410      	movs	r4, #16
 8005516:	4622      	mov	r2, r4
 8005518:	42a7      	cmp	r7, r4
 800551a:	d85f      	bhi.n	80055dc <_realloc_r+0xe4>
 800551c:	f855 ec04 	ldr.w	lr, [r5, #-4]
 8005520:	f02e 0603 	bic.w	r6, lr, #3
 8005524:	f1a5 0808 	sub.w	r8, r5, #8
 8005528:	4296      	cmp	r6, r2
 800552a:	eb08 0a06 	add.w	sl, r8, r6
 800552e:	f280 8081 	bge.w	8005634 <_realloc_r+0x13c>
 8005532:	4bcb      	ldr	r3, [pc, #812]	; (8005860 <_realloc_r+0x368>)
 8005534:	f8da 0004 	ldr.w	r0, [sl, #4]
 8005538:	6899      	ldr	r1, [r3, #8]
 800553a:	4551      	cmp	r1, sl
 800553c:	f000 80b5 	beq.w	80056aa <_realloc_r+0x1b2>
 8005540:	f020 0301 	bic.w	r3, r0, #1
 8005544:	4453      	add	r3, sl
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	07db      	lsls	r3, r3, #31
 800554a:	f100 808a 	bmi.w	8005662 <_realloc_r+0x16a>
 800554e:	f020 0003 	bic.w	r0, r0, #3
 8005552:	1833      	adds	r3, r6, r0
 8005554:	4293      	cmp	r3, r2
 8005556:	f280 8112 	bge.w	800577e <_realloc_r+0x286>
 800555a:	f01e 0f01 	tst.w	lr, #1
 800555e:	d10f      	bne.n	8005580 <_realloc_r+0x88>
 8005560:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8005564:	eba8 0b03 	sub.w	fp, r8, r3
 8005568:	f8db 1004 	ldr.w	r1, [fp, #4]
 800556c:	f021 0103 	bic.w	r1, r1, #3
 8005570:	4408      	add	r0, r1
 8005572:	1983      	adds	r3, r0, r6
 8005574:	4293      	cmp	r3, r2
 8005576:	f280 8116 	bge.w	80057a6 <_realloc_r+0x2ae>
 800557a:	1873      	adds	r3, r6, r1
 800557c:	4293      	cmp	r3, r2
 800557e:	da34      	bge.n	80055ea <_realloc_r+0xf2>
 8005580:	4639      	mov	r1, r7
 8005582:	4648      	mov	r0, r9
 8005584:	f7fe fe7c 	bl	8004280 <_malloc_r>
 8005588:	4607      	mov	r7, r0
 800558a:	b1e0      	cbz	r0, 80055c6 <_realloc_r+0xce>
 800558c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005590:	f023 0301 	bic.w	r3, r3, #1
 8005594:	4443      	add	r3, r8
 8005596:	f1a0 0208 	sub.w	r2, r0, #8
 800559a:	4293      	cmp	r3, r2
 800559c:	f000 80f7 	beq.w	800578e <_realloc_r+0x296>
 80055a0:	1f32      	subs	r2, r6, #4
 80055a2:	2a24      	cmp	r2, #36	; 0x24
 80055a4:	f200 80fb 	bhi.w	800579e <_realloc_r+0x2a6>
 80055a8:	2a13      	cmp	r2, #19
 80055aa:	6829      	ldr	r1, [r5, #0]
 80055ac:	f200 80c9 	bhi.w	8005742 <_realloc_r+0x24a>
 80055b0:	4603      	mov	r3, r0
 80055b2:	462a      	mov	r2, r5
 80055b4:	6019      	str	r1, [r3, #0]
 80055b6:	6851      	ldr	r1, [r2, #4]
 80055b8:	6059      	str	r1, [r3, #4]
 80055ba:	6892      	ldr	r2, [r2, #8]
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	4629      	mov	r1, r5
 80055c0:	4648      	mov	r0, r9
 80055c2:	f7fe fafd 	bl	8003bc0 <_free_r>
 80055c6:	4648      	mov	r0, r9
 80055c8:	f7ff fa66 	bl	8004a98 <__malloc_unlock>
 80055cc:	4638      	mov	r0, r7
 80055ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d2:	f024 0407 	bic.w	r4, r4, #7
 80055d6:	2c00      	cmp	r4, #0
 80055d8:	4622      	mov	r2, r4
 80055da:	da9d      	bge.n	8005518 <_realloc_r+0x20>
 80055dc:	230c      	movs	r3, #12
 80055de:	f8c9 3000 	str.w	r3, [r9]
 80055e2:	2700      	movs	r7, #0
 80055e4:	4638      	mov	r0, r7
 80055e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ea:	465f      	mov	r7, fp
 80055ec:	f8db 100c 	ldr.w	r1, [fp, #12]
 80055f0:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80055f4:	1f32      	subs	r2, r6, #4
 80055f6:	2a24      	cmp	r2, #36	; 0x24
 80055f8:	60c1      	str	r1, [r0, #12]
 80055fa:	eb0b 0a03 	add.w	sl, fp, r3
 80055fe:	6088      	str	r0, [r1, #8]
 8005600:	f200 80d9 	bhi.w	80057b6 <_realloc_r+0x2be>
 8005604:	2a13      	cmp	r2, #19
 8005606:	6829      	ldr	r1, [r5, #0]
 8005608:	f240 80d3 	bls.w	80057b2 <_realloc_r+0x2ba>
 800560c:	f8cb 1008 	str.w	r1, [fp, #8]
 8005610:	6869      	ldr	r1, [r5, #4]
 8005612:	f8cb 100c 	str.w	r1, [fp, #12]
 8005616:	2a1b      	cmp	r2, #27
 8005618:	68a9      	ldr	r1, [r5, #8]
 800561a:	f200 80e0 	bhi.w	80057de <_realloc_r+0x2e6>
 800561e:	f10b 0210 	add.w	r2, fp, #16
 8005622:	3508      	adds	r5, #8
 8005624:	6011      	str	r1, [r2, #0]
 8005626:	6869      	ldr	r1, [r5, #4]
 8005628:	6051      	str	r1, [r2, #4]
 800562a:	68a9      	ldr	r1, [r5, #8]
 800562c:	6091      	str	r1, [r2, #8]
 800562e:	461e      	mov	r6, r3
 8005630:	46d8      	mov	r8, fp
 8005632:	463d      	mov	r5, r7
 8005634:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005638:	1b32      	subs	r2, r6, r4
 800563a:	2a0f      	cmp	r2, #15
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	d820      	bhi.n	8005684 <_realloc_r+0x18c>
 8005642:	4333      	orrs	r3, r6
 8005644:	f8c8 3004 	str.w	r3, [r8, #4]
 8005648:	f8da 3004 	ldr.w	r3, [sl, #4]
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	f8ca 3004 	str.w	r3, [sl, #4]
 8005654:	4648      	mov	r0, r9
 8005656:	462f      	mov	r7, r5
 8005658:	f7ff fa1e 	bl	8004a98 <__malloc_unlock>
 800565c:	4638      	mov	r0, r7
 800565e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005662:	f01e 0f01 	tst.w	lr, #1
 8005666:	d18b      	bne.n	8005580 <_realloc_r+0x88>
 8005668:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800566c:	eba8 0b03 	sub.w	fp, r8, r3
 8005670:	f8db 1004 	ldr.w	r1, [fp, #4]
 8005674:	f021 0103 	bic.w	r1, r1, #3
 8005678:	e77f      	b.n	800557a <_realloc_r+0x82>
 800567a:	4611      	mov	r1, r2
 800567c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005680:	f7fe bdfe 	b.w	8004280 <_malloc_r>
 8005684:	eb08 0104 	add.w	r1, r8, r4
 8005688:	4323      	orrs	r3, r4
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005692:	604a      	str	r2, [r1, #4]
 8005694:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	3108      	adds	r1, #8
 800569e:	f8ca 3004 	str.w	r3, [sl, #4]
 80056a2:	4648      	mov	r0, r9
 80056a4:	f7fe fa8c 	bl	8003bc0 <_free_r>
 80056a8:	e7d4      	b.n	8005654 <_realloc_r+0x15c>
 80056aa:	f020 0003 	bic.w	r0, r0, #3
 80056ae:	1831      	adds	r1, r6, r0
 80056b0:	f104 0c10 	add.w	ip, r4, #16
 80056b4:	4561      	cmp	r1, ip
 80056b6:	da4f      	bge.n	8005758 <_realloc_r+0x260>
 80056b8:	f01e 0f01 	tst.w	lr, #1
 80056bc:	f47f af60 	bne.w	8005580 <_realloc_r+0x88>
 80056c0:	f855 1c08 	ldr.w	r1, [r5, #-8]
 80056c4:	eba8 0b01 	sub.w	fp, r8, r1
 80056c8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80056cc:	f021 0103 	bic.w	r1, r1, #3
 80056d0:	4408      	add	r0, r1
 80056d2:	eb00 0a06 	add.w	sl, r0, r6
 80056d6:	45d4      	cmp	ip, sl
 80056d8:	f73f af4f 	bgt.w	800557a <_realloc_r+0x82>
 80056dc:	465f      	mov	r7, fp
 80056de:	f8db 100c 	ldr.w	r1, [fp, #12]
 80056e2:	f857 0f08 	ldr.w	r0, [r7, #8]!
 80056e6:	1f32      	subs	r2, r6, #4
 80056e8:	2a24      	cmp	r2, #36	; 0x24
 80056ea:	60c1      	str	r1, [r0, #12]
 80056ec:	6088      	str	r0, [r1, #8]
 80056ee:	f200 8099 	bhi.w	8005824 <_realloc_r+0x32c>
 80056f2:	2a13      	cmp	r2, #19
 80056f4:	6829      	ldr	r1, [r5, #0]
 80056f6:	f240 8093 	bls.w	8005820 <_realloc_r+0x328>
 80056fa:	f8cb 1008 	str.w	r1, [fp, #8]
 80056fe:	6869      	ldr	r1, [r5, #4]
 8005700:	f8cb 100c 	str.w	r1, [fp, #12]
 8005704:	2a1b      	cmp	r2, #27
 8005706:	68a9      	ldr	r1, [r5, #8]
 8005708:	f200 8092 	bhi.w	8005830 <_realloc_r+0x338>
 800570c:	f10b 0210 	add.w	r2, fp, #16
 8005710:	3508      	adds	r5, #8
 8005712:	6011      	str	r1, [r2, #0]
 8005714:	6869      	ldr	r1, [r5, #4]
 8005716:	6051      	str	r1, [r2, #4]
 8005718:	68a9      	ldr	r1, [r5, #8]
 800571a:	6091      	str	r1, [r2, #8]
 800571c:	eb0b 0104 	add.w	r1, fp, r4
 8005720:	ebaa 0204 	sub.w	r2, sl, r4
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	6099      	str	r1, [r3, #8]
 800572a:	604a      	str	r2, [r1, #4]
 800572c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	431c      	orrs	r4, r3
 8005736:	4648      	mov	r0, r9
 8005738:	f8cb 4004 	str.w	r4, [fp, #4]
 800573c:	f7ff f9ac 	bl	8004a98 <__malloc_unlock>
 8005740:	e750      	b.n	80055e4 <_realloc_r+0xec>
 8005742:	6001      	str	r1, [r0, #0]
 8005744:	686b      	ldr	r3, [r5, #4]
 8005746:	6043      	str	r3, [r0, #4]
 8005748:	2a1b      	cmp	r2, #27
 800574a:	d83c      	bhi.n	80057c6 <_realloc_r+0x2ce>
 800574c:	f105 0208 	add.w	r2, r5, #8
 8005750:	f100 0308 	add.w	r3, r0, #8
 8005754:	68a9      	ldr	r1, [r5, #8]
 8005756:	e72d      	b.n	80055b4 <_realloc_r+0xbc>
 8005758:	eb08 0004 	add.w	r0, r8, r4
 800575c:	1b0a      	subs	r2, r1, r4
 800575e:	f042 0201 	orr.w	r2, r2, #1
 8005762:	6098      	str	r0, [r3, #8]
 8005764:	6042      	str	r2, [r0, #4]
 8005766:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	431c      	orrs	r4, r3
 8005770:	4648      	mov	r0, r9
 8005772:	f845 4c04 	str.w	r4, [r5, #-4]
 8005776:	f7ff f98f 	bl	8004a98 <__malloc_unlock>
 800577a:	462f      	mov	r7, r5
 800577c:	e732      	b.n	80055e4 <_realloc_r+0xec>
 800577e:	e9da 1202 	ldrd	r1, r2, [sl, #8]
 8005782:	461e      	mov	r6, r3
 8005784:	60ca      	str	r2, [r1, #12]
 8005786:	eb08 0a03 	add.w	sl, r8, r3
 800578a:	6091      	str	r1, [r2, #8]
 800578c:	e752      	b.n	8005634 <_realloc_r+0x13c>
 800578e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005792:	f023 0303 	bic.w	r3, r3, #3
 8005796:	441e      	add	r6, r3
 8005798:	eb08 0a06 	add.w	sl, r8, r6
 800579c:	e74a      	b.n	8005634 <_realloc_r+0x13c>
 800579e:	4629      	mov	r1, r5
 80057a0:	f7ff f910 	bl	80049c4 <memmove>
 80057a4:	e70b      	b.n	80055be <_realloc_r+0xc6>
 80057a6:	e9da 1202 	ldrd	r1, r2, [sl, #8]
 80057aa:	465f      	mov	r7, fp
 80057ac:	60ca      	str	r2, [r1, #12]
 80057ae:	6091      	str	r1, [r2, #8]
 80057b0:	e71c      	b.n	80055ec <_realloc_r+0xf4>
 80057b2:	463a      	mov	r2, r7
 80057b4:	e736      	b.n	8005624 <_realloc_r+0x12c>
 80057b6:	4629      	mov	r1, r5
 80057b8:	4638      	mov	r0, r7
 80057ba:	461e      	mov	r6, r3
 80057bc:	46d8      	mov	r8, fp
 80057be:	f7ff f901 	bl	80049c4 <memmove>
 80057c2:	463d      	mov	r5, r7
 80057c4:	e736      	b.n	8005634 <_realloc_r+0x13c>
 80057c6:	68ab      	ldr	r3, [r5, #8]
 80057c8:	6083      	str	r3, [r0, #8]
 80057ca:	68eb      	ldr	r3, [r5, #12]
 80057cc:	60c3      	str	r3, [r0, #12]
 80057ce:	2a24      	cmp	r2, #36	; 0x24
 80057d0:	d011      	beq.n	80057f6 <_realloc_r+0x2fe>
 80057d2:	f105 0210 	add.w	r2, r5, #16
 80057d6:	f100 0310 	add.w	r3, r0, #16
 80057da:	6929      	ldr	r1, [r5, #16]
 80057dc:	e6ea      	b.n	80055b4 <_realloc_r+0xbc>
 80057de:	f8cb 1010 	str.w	r1, [fp, #16]
 80057e2:	68e9      	ldr	r1, [r5, #12]
 80057e4:	f8cb 1014 	str.w	r1, [fp, #20]
 80057e8:	2a24      	cmp	r2, #36	; 0x24
 80057ea:	d00e      	beq.n	800580a <_realloc_r+0x312>
 80057ec:	6929      	ldr	r1, [r5, #16]
 80057ee:	f10b 0218 	add.w	r2, fp, #24
 80057f2:	3510      	adds	r5, #16
 80057f4:	e716      	b.n	8005624 <_realloc_r+0x12c>
 80057f6:	692b      	ldr	r3, [r5, #16]
 80057f8:	6103      	str	r3, [r0, #16]
 80057fa:	696b      	ldr	r3, [r5, #20]
 80057fc:	6143      	str	r3, [r0, #20]
 80057fe:	69a9      	ldr	r1, [r5, #24]
 8005800:	f105 0218 	add.w	r2, r5, #24
 8005804:	f100 0318 	add.w	r3, r0, #24
 8005808:	e6d4      	b.n	80055b4 <_realloc_r+0xbc>
 800580a:	692a      	ldr	r2, [r5, #16]
 800580c:	f8cb 2018 	str.w	r2, [fp, #24]
 8005810:	696a      	ldr	r2, [r5, #20]
 8005812:	f8cb 201c 	str.w	r2, [fp, #28]
 8005816:	69a9      	ldr	r1, [r5, #24]
 8005818:	f10b 0220 	add.w	r2, fp, #32
 800581c:	3518      	adds	r5, #24
 800581e:	e701      	b.n	8005624 <_realloc_r+0x12c>
 8005820:	463a      	mov	r2, r7
 8005822:	e776      	b.n	8005712 <_realloc_r+0x21a>
 8005824:	4629      	mov	r1, r5
 8005826:	4638      	mov	r0, r7
 8005828:	f7ff f8cc 	bl	80049c4 <memmove>
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <_realloc_r+0x368>)
 800582e:	e775      	b.n	800571c <_realloc_r+0x224>
 8005830:	f8cb 1010 	str.w	r1, [fp, #16]
 8005834:	68e9      	ldr	r1, [r5, #12]
 8005836:	f8cb 1014 	str.w	r1, [fp, #20]
 800583a:	2a24      	cmp	r2, #36	; 0x24
 800583c:	d004      	beq.n	8005848 <_realloc_r+0x350>
 800583e:	6929      	ldr	r1, [r5, #16]
 8005840:	f10b 0218 	add.w	r2, fp, #24
 8005844:	3510      	adds	r5, #16
 8005846:	e764      	b.n	8005712 <_realloc_r+0x21a>
 8005848:	692a      	ldr	r2, [r5, #16]
 800584a:	f8cb 2018 	str.w	r2, [fp, #24]
 800584e:	696a      	ldr	r2, [r5, #20]
 8005850:	f8cb 201c 	str.w	r2, [fp, #28]
 8005854:	69a9      	ldr	r1, [r5, #24]
 8005856:	f10b 0220 	add.w	r2, fp, #32
 800585a:	3518      	adds	r5, #24
 800585c:	e759      	b.n	8005712 <_realloc_r+0x21a>
 800585e:	bf00      	nop
 8005860:	200004a8 	.word	0x200004a8

08005864 <__sread>:
 8005864:	b510      	push	{r4, lr}
 8005866:	460c      	mov	r4, r1
 8005868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800586c:	f002 fede 	bl	800862c <_read_r>
 8005870:	2800      	cmp	r0, #0
 8005872:	db03      	blt.n	800587c <__sread+0x18>
 8005874:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005876:	4403      	add	r3, r0
 8005878:	6523      	str	r3, [r4, #80]	; 0x50
 800587a:	bd10      	pop	{r4, pc}
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005882:	81a3      	strh	r3, [r4, #12]
 8005884:	bd10      	pop	{r4, pc}
 8005886:	bf00      	nop

08005888 <__seofread>:
 8005888:	2000      	movs	r0, #0
 800588a:	4770      	bx	lr

0800588c <__swrite>:
 800588c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005890:	4616      	mov	r6, r2
 8005892:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005896:	461f      	mov	r7, r3
 8005898:	05d3      	lsls	r3, r2, #23
 800589a:	460c      	mov	r4, r1
 800589c:	4605      	mov	r5, r0
 800589e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a2:	d409      	bmi.n	80058b8 <__swrite+0x2c>
 80058a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058a8:	81a2      	strh	r2, [r4, #12]
 80058aa:	463b      	mov	r3, r7
 80058ac:	4632      	mov	r2, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	f002 bf44 	b.w	8008740 <_write_r>
 80058b8:	2200      	movs	r2, #0
 80058ba:	2302      	movs	r3, #2
 80058bc:	f002 fdec 	bl	8008498 <_lseek_r>
 80058c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058c8:	e7ec      	b.n	80058a4 <__swrite+0x18>
 80058ca:	bf00      	nop

080058cc <__sseek>:
 80058cc:	b510      	push	{r4, lr}
 80058ce:	460c      	mov	r4, r1
 80058d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d4:	f002 fde0 	bl	8008498 <_lseek_r>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	1c42      	adds	r2, r0, #1
 80058dc:	bf0e      	itee	eq
 80058de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058e6:	6520      	strne	r0, [r4, #80]	; 0x50
 80058e8:	81a3      	strh	r3, [r4, #12]
 80058ea:	bd10      	pop	{r4, pc}

080058ec <__sclose>:
 80058ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f0:	f002 bdc8 	b.w	8008484 <_close_r>

080058f4 <__sprint_r.part.0>:
 80058f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80058fa:	049c      	lsls	r4, r3, #18
 80058fc:	4693      	mov	fp, r2
 80058fe:	d52d      	bpl.n	800595c <__sprint_r.part.0+0x68>
 8005900:	6893      	ldr	r3, [r2, #8]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	b343      	cbz	r3, 8005958 <__sprint_r.part.0+0x64>
 8005906:	460e      	mov	r6, r1
 8005908:	4607      	mov	r7, r0
 800590a:	f102 0908 	add.w	r9, r2, #8
 800590e:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8005912:	ea5f 089a 	movs.w	r8, sl, lsr #2
 8005916:	d015      	beq.n	8005944 <__sprint_r.part.0+0x50>
 8005918:	3d04      	subs	r5, #4
 800591a:	2400      	movs	r4, #0
 800591c:	e001      	b.n	8005922 <__sprint_r.part.0+0x2e>
 800591e:	45a0      	cmp	r8, r4
 8005920:	d00e      	beq.n	8005940 <__sprint_r.part.0+0x4c>
 8005922:	4632      	mov	r2, r6
 8005924:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005928:	4638      	mov	r0, r7
 800592a:	f000 ffd9 	bl	80068e0 <_fputwc_r>
 800592e:	1c43      	adds	r3, r0, #1
 8005930:	f104 0401 	add.w	r4, r4, #1
 8005934:	d1f3      	bne.n	800591e <__sprint_r.part.0+0x2a>
 8005936:	2300      	movs	r3, #0
 8005938:	e9cb 3301 	strd	r3, r3, [fp, #4]
 800593c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005940:	f8db 3008 	ldr.w	r3, [fp, #8]
 8005944:	f02a 0a03 	bic.w	sl, sl, #3
 8005948:	eba3 030a 	sub.w	r3, r3, sl
 800594c:	f8cb 3008 	str.w	r3, [fp, #8]
 8005950:	f109 0908 	add.w	r9, r9, #8
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1da      	bne.n	800590e <__sprint_r.part.0+0x1a>
 8005958:	2000      	movs	r0, #0
 800595a:	e7ec      	b.n	8005936 <__sprint_r.part.0+0x42>
 800595c:	f7fe fa2a 	bl	8003db4 <__sfvwrite_r>
 8005960:	2300      	movs	r3, #0
 8005962:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8005966:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop

0800596c <__sprint_r>:
 800596c:	6893      	ldr	r3, [r2, #8]
 800596e:	b103      	cbz	r3, 8005972 <__sprint_r+0x6>
 8005970:	e7c0      	b.n	80058f4 <__sprint_r.part.0>
 8005972:	b410      	push	{r4}
 8005974:	4618      	mov	r0, r3
 8005976:	6053      	str	r3, [r2, #4]
 8005978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop

08005980 <_vfiprintf_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	b0ab      	sub	sp, #172	; 0xac
 8005986:	461c      	mov	r4, r3
 8005988:	468a      	mov	sl, r1
 800598a:	4690      	mov	r8, r2
 800598c:	e9cd 3004 	strd	r3, r0, [sp, #16]
 8005990:	b118      	cbz	r0, 800599a <_vfiprintf_r+0x1a>
 8005992:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 82ff 	beq.w	8005f98 <_vfiprintf_r+0x618>
 800599a:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
 800599e:	b28a      	uxth	r2, r1
 80059a0:	0490      	lsls	r0, r2, #18
 80059a2:	d40a      	bmi.n	80059ba <_vfiprintf_r+0x3a>
 80059a4:	f8da 3064 	ldr.w	r3, [sl, #100]	; 0x64
 80059a8:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80059ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059b0:	f8aa 200c 	strh.w	r2, [sl, #12]
 80059b4:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
 80059b8:	b292      	uxth	r2, r2
 80059ba:	0711      	lsls	r1, r2, #28
 80059bc:	f140 80ca 	bpl.w	8005b54 <_vfiprintf_r+0x1d4>
 80059c0:	f8da 3010 	ldr.w	r3, [sl, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80c5 	beq.w	8005b54 <_vfiprintf_r+0x1d4>
 80059ca:	f002 021a 	and.w	r2, r2, #26
 80059ce:	2a0a      	cmp	r2, #10
 80059d0:	f000 80ce 	beq.w	8005b70 <_vfiprintf_r+0x1f0>
 80059d4:	2300      	movs	r3, #0
 80059d6:	9308      	str	r3, [sp, #32]
 80059d8:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80059dc:	9302      	str	r3, [sp, #8]
 80059de:	ab1a      	add	r3, sp, #104	; 0x68
 80059e0:	930d      	str	r3, [sp, #52]	; 0x34
 80059e2:	469b      	mov	fp, r3
 80059e4:	f898 3000 	ldrb.w	r3, [r8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f000 80df 	beq.w	8005bac <_vfiprintf_r+0x22c>
 80059ee:	2b25      	cmp	r3, #37	; 0x25
 80059f0:	f000 851c 	beq.w	800642c <_vfiprintf_r+0xaac>
 80059f4:	4645      	mov	r5, r8
 80059f6:	e003      	b.n	8005a00 <_vfiprintf_r+0x80>
 80059f8:	2b25      	cmp	r3, #37	; 0x25
 80059fa:	f000 80c6 	beq.w	8005b8a <_vfiprintf_r+0x20a>
 80059fe:	4625      	mov	r5, r4
 8005a00:	786b      	ldrb	r3, [r5, #1]
 8005a02:	1c6c      	adds	r4, r5, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1f7      	bne.n	80059f8 <_vfiprintf_r+0x78>
 8005a08:	ebb4 0608 	subs.w	r6, r4, r8
 8005a0c:	f000 80ce 	beq.w	8005bac <_vfiprintf_r+0x22c>
 8005a10:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8005a14:	3301      	adds	r3, #1
 8005a16:	4432      	add	r2, r6
 8005a18:	2b07      	cmp	r3, #7
 8005a1a:	f8cb 8000 	str.w	r8, [fp]
 8005a1e:	f8cb 6004 	str.w	r6, [fp, #4]
 8005a22:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8005a26:	f300 80b5 	bgt.w	8005b94 <_vfiprintf_r+0x214>
 8005a2a:	f10b 0b08 	add.w	fp, fp, #8
 8005a2e:	9a02      	ldr	r2, [sp, #8]
 8005a30:	786b      	ldrb	r3, [r5, #1]
 8005a32:	4432      	add	r2, r6
 8005a34:	9202      	str	r2, [sp, #8]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80b8 	beq.w	8005bac <_vfiprintf_r+0x22c>
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	2100      	movs	r1, #0
 8005a42:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005a46:	7863      	ldrb	r3, [r4, #1]
 8005a48:	9103      	str	r1, [sp, #12]
 8005a4a:	4608      	mov	r0, r1
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	f104 0801 	add.w	r8, r4, #1
 8005a52:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005a56:	f108 0801 	add.w	r8, r8, #1
 8005a5a:	f1a3 0220 	sub.w	r2, r3, #32
 8005a5e:	2a58      	cmp	r2, #88	; 0x58
 8005a60:	f200 829d 	bhi.w	8005f9e <_vfiprintf_r+0x61e>
 8005a64:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005a68:	029b00f9 	.word	0x029b00f9
 8005a6c:	00f4029b 	.word	0x00f4029b
 8005a70:	029b029b 	.word	0x029b029b
 8005a74:	029b029b 	.word	0x029b029b
 8005a78:	029b029b 	.word	0x029b029b
 8005a7c:	00e400e9 	.word	0x00e400e9
 8005a80:	00df029b 	.word	0x00df029b
 8005a84:	029b00c6 	.word	0x029b00c6
 8005a88:	00b200c1 	.word	0x00b200c1
 8005a8c:	00b200b2 	.word	0x00b200b2
 8005a90:	00b200b2 	.word	0x00b200b2
 8005a94:	00b200b2 	.word	0x00b200b2
 8005a98:	00b200b2 	.word	0x00b200b2
 8005a9c:	029b029b 	.word	0x029b029b
 8005aa0:	029b029b 	.word	0x029b029b
 8005aa4:	029b029b 	.word	0x029b029b
 8005aa8:	029b029b 	.word	0x029b029b
 8005aac:	029b029b 	.word	0x029b029b
 8005ab0:	029b0228 	.word	0x029b0228
 8005ab4:	029b029b 	.word	0x029b029b
 8005ab8:	029b029b 	.word	0x029b029b
 8005abc:	029b029b 	.word	0x029b029b
 8005ac0:	029b029b 	.word	0x029b029b
 8005ac4:	0067029b 	.word	0x0067029b
 8005ac8:	029b029b 	.word	0x029b029b
 8005acc:	029b029b 	.word	0x029b029b
 8005ad0:	0059029b 	.word	0x0059029b
 8005ad4:	029b029b 	.word	0x029b029b
 8005ad8:	029b0213 	.word	0x029b0213
 8005adc:	029b029b 	.word	0x029b029b
 8005ae0:	029b029b 	.word	0x029b029b
 8005ae4:	029b029b 	.word	0x029b029b
 8005ae8:	029b029b 	.word	0x029b029b
 8005aec:	0184029b 	.word	0x0184029b
 8005af0:	029b0157 	.word	0x029b0157
 8005af4:	029b029b 	.word	0x029b029b
 8005af8:	01570152 	.word	0x01570152
 8005afc:	029b029b 	.word	0x029b029b
 8005b00:	029b0145 	.word	0x029b0145
 8005b04:	0069026e 	.word	0x0069026e
 8005b08:	0140023f 	.word	0x0140023f
 8005b0c:	0120029b 	.word	0x0120029b
 8005b10:	005b029b 	.word	0x005b029b
 8005b14:	029b029b 	.word	0x029b029b
 8005b18:	0101      	.short	0x0101
 8005b1a:	f047 0710 	orr.w	r7, r7, #16
 8005b1e:	06ba      	lsls	r2, r7, #26
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	f140 8222 	bpl.w	8005f6a <_vfiprintf_r+0x5ea>
 8005b26:	3307      	adds	r3, #7
 8005b28:	f023 0307 	bic.w	r3, r3, #7
 8005b2c:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	2301      	movs	r3, #1
 8005b34:	e1e5      	b.n	8005f02 <_vfiprintf_r+0x582>
 8005b36:	f047 0710 	orr.w	r7, r7, #16
 8005b3a:	f017 0320 	ands.w	r3, r7, #32
 8005b3e:	f000 8221 	beq.w	8005f84 <_vfiprintf_r+0x604>
 8005b42:	9b04      	ldr	r3, [sp, #16]
 8005b44:	3307      	adds	r3, #7
 8005b46:	f023 0307 	bic.w	r3, r3, #7
 8005b4a:	e8f3 4502 	ldrd	r4, r5, [r3], #8
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	2300      	movs	r3, #0
 8005b52:	e1d6      	b.n	8005f02 <_vfiprintf_r+0x582>
 8005b54:	4651      	mov	r1, sl
 8005b56:	9805      	ldr	r0, [sp, #20]
 8005b58:	f7fc fd9a 	bl	8002690 <__swsetup_r>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f040 84f4 	bne.w	800654a <_vfiprintf_r+0xbca>
 8005b62:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 8005b66:	f002 021a 	and.w	r2, r2, #26
 8005b6a:	2a0a      	cmp	r2, #10
 8005b6c:	f47f af32 	bne.w	80059d4 <_vfiprintf_r+0x54>
 8005b70:	f9ba 300e 	ldrsh.w	r3, [sl, #14]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f6ff af2d 	blt.w	80059d4 <_vfiprintf_r+0x54>
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	4651      	mov	r1, sl
 8005b80:	9805      	ldr	r0, [sp, #20]
 8005b82:	f000 fd01 	bl	8006588 <__sbprintf>
 8005b86:	9002      	str	r0, [sp, #8]
 8005b88:	e01c      	b.n	8005bc4 <_vfiprintf_r+0x244>
 8005b8a:	ebb4 0608 	subs.w	r6, r4, r8
 8005b8e:	f43f af55 	beq.w	8005a3c <_vfiprintf_r+0xbc>
 8005b92:	e73d      	b.n	8005a10 <_vfiprintf_r+0x90>
 8005b94:	2a00      	cmp	r2, #0
 8005b96:	f000 840f 	beq.w	80063b8 <_vfiprintf_r+0xa38>
 8005b9a:	aa0d      	add	r2, sp, #52	; 0x34
 8005b9c:	4651      	mov	r1, sl
 8005b9e:	9805      	ldr	r0, [sp, #20]
 8005ba0:	f7ff fea8 	bl	80058f4 <__sprint_r.part.0>
 8005ba4:	b948      	cbnz	r0, 8005bba <_vfiprintf_r+0x23a>
 8005ba6:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8005baa:	e740      	b.n	8005a2e <_vfiprintf_r+0xae>
 8005bac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bae:	b123      	cbz	r3, 8005bba <_vfiprintf_r+0x23a>
 8005bb0:	9805      	ldr	r0, [sp, #20]
 8005bb2:	aa0d      	add	r2, sp, #52	; 0x34
 8005bb4:	4651      	mov	r1, sl
 8005bb6:	f7ff fe9d 	bl	80058f4 <__sprint_r.part.0>
 8005bba:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005bbe:	065b      	lsls	r3, r3, #25
 8005bc0:	f100 84c3 	bmi.w	800654a <_vfiprintf_r+0xbca>
 8005bc4:	9802      	ldr	r0, [sp, #8]
 8005bc6:	b02b      	add	sp, #172	; 0xac
 8005bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bcc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005bd0:	2400      	movs	r4, #0
 8005bd2:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005bd6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8005bda:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005bde:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005be2:	2a09      	cmp	r2, #9
 8005be4:	d9f5      	bls.n	8005bd2 <_vfiprintf_r+0x252>
 8005be6:	9403      	str	r4, [sp, #12]
 8005be8:	e737      	b.n	8005a5a <_vfiprintf_r+0xda>
 8005bea:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8005bee:	f898 3000 	ldrb.w	r3, [r8]
 8005bf2:	e730      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005bf4:	4644      	mov	r4, r8
 8005bf6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005bfc:	f000 84aa 	beq.w	8006554 <_vfiprintf_r+0xbd4>
 8005c00:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005c04:	2a09      	cmp	r2, #9
 8005c06:	46a0      	mov	r8, r4
 8005c08:	f04f 0900 	mov.w	r9, #0
 8005c0c:	f63f af25 	bhi.w	8005a5a <_vfiprintf_r+0xda>
 8005c10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005c14:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8005c18:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 8005c1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005c20:	2a09      	cmp	r2, #9
 8005c22:	d9f5      	bls.n	8005c10 <_vfiprintf_r+0x290>
 8005c24:	e719      	b.n	8005a5a <_vfiprintf_r+0xda>
 8005c26:	f898 3000 	ldrb.w	r3, [r8]
 8005c2a:	f047 0704 	orr.w	r7, r7, #4
 8005c2e:	e712      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005c30:	f898 3000 	ldrb.w	r3, [r8]
 8005c34:	2101      	movs	r1, #1
 8005c36:	202b      	movs	r0, #43	; 0x2b
 8005c38:	e70d      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005c3a:	9a04      	ldr	r2, [sp, #16]
 8005c3c:	f898 3000 	ldrb.w	r3, [r8]
 8005c40:	f852 4b04 	ldr.w	r4, [r2], #4
 8005c44:	9403      	str	r4, [sp, #12]
 8005c46:	2c00      	cmp	r4, #0
 8005c48:	f2c0 8415 	blt.w	8006476 <_vfiprintf_r+0xaf6>
 8005c4c:	9204      	str	r2, [sp, #16]
 8005c4e:	e702      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005c50:	f047 0701 	orr.w	r7, r7, #1
 8005c54:	f898 3000 	ldrb.w	r3, [r8]
 8005c58:	e6fd      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005c5a:	f898 3000 	ldrb.w	r3, [r8]
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f47f aef9 	bne.w	8005a56 <_vfiprintf_r+0xd6>
 8005c64:	2101      	movs	r1, #1
 8005c66:	2020      	movs	r0, #32
 8005c68:	e6f5      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005c6a:	2900      	cmp	r1, #0
 8005c6c:	f040 845b 	bne.w	8006526 <_vfiprintf_r+0xba6>
 8005c70:	4ac2      	ldr	r2, [pc, #776]	; (8005f7c <_vfiprintf_r+0x5fc>)
 8005c72:	9208      	str	r2, [sp, #32]
 8005c74:	06b8      	lsls	r0, r7, #26
 8005c76:	9a04      	ldr	r2, [sp, #16]
 8005c78:	f140 8112 	bpl.w	8005ea0 <_vfiprintf_r+0x520>
 8005c7c:	3207      	adds	r2, #7
 8005c7e:	f022 0207 	bic.w	r2, r2, #7
 8005c82:	e8f2 4502 	ldrd	r4, r5, [r2], #8
 8005c86:	9204      	str	r2, [sp, #16]
 8005c88:	07fe      	lsls	r6, r7, #31
 8005c8a:	f140 8198 	bpl.w	8005fbe <_vfiprintf_r+0x63e>
 8005c8e:	ea54 0205 	orrs.w	r2, r4, r5
 8005c92:	f000 8194 	beq.w	8005fbe <_vfiprintf_r+0x63e>
 8005c96:	2230      	movs	r2, #48	; 0x30
 8005c98:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8005c9c:	f047 0702 	orr.w	r7, r7, #2
 8005ca0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e12c      	b.n	8005f02 <_vfiprintf_r+0x582>
 8005ca8:	9c04      	ldr	r4, [sp, #16]
 8005caa:	f854 6b04 	ldr.w	r6, [r4], #4
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	f000 8407 	beq.w	80064ca <_vfiprintf_r+0xb4a>
 8005cbc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005cc0:	f000 83de 	beq.w	8006480 <_vfiprintf_r+0xb00>
 8005cc4:	464a      	mov	r2, r9
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7fe fd91 	bl	80047f0 <memchr>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f000 8419 	beq.w	8006506 <_vfiprintf_r+0xb86>
 8005cd4:	1b83      	subs	r3, r0, r6
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005cdc:	9404      	str	r4, [sp, #16]
 8005cde:	9700      	str	r7, [sp, #0]
 8005ce0:	9306      	str	r3, [sp, #24]
 8005ce2:	f04f 0900 	mov.w	r9, #0
 8005ce6:	e1af      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8005ce8:	f047 0720 	orr.w	r7, r7, #32
 8005cec:	f898 3000 	ldrb.w	r3, [r8]
 8005cf0:	e6b1      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005cf2:	f898 3000 	ldrb.w	r3, [r8]
 8005cf6:	2b6c      	cmp	r3, #108	; 0x6c
 8005cf8:	bf03      	ittte	eq
 8005cfa:	f898 3001 	ldrbeq.w	r3, [r8, #1]
 8005cfe:	f047 0720 	orreq.w	r7, r7, #32
 8005d02:	f108 0801 	addeq.w	r8, r8, #1
 8005d06:	f047 0710 	orrne.w	r7, r7, #16
 8005d0a:	e6a4      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005d0c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8005d10:	f898 3000 	ldrb.w	r3, [r8]
 8005d14:	e69f      	b.n	8005a56 <_vfiprintf_r+0xd6>
 8005d16:	2900      	cmp	r1, #0
 8005d18:	f040 8401 	bne.w	800651e <_vfiprintf_r+0xb9e>
 8005d1c:	06ba      	lsls	r2, r7, #26
 8005d1e:	9b04      	ldr	r3, [sp, #16]
 8005d20:	f140 80d3 	bpl.w	8005eca <_vfiprintf_r+0x54a>
 8005d24:	3307      	adds	r3, #7
 8005d26:	f023 0307 	bic.w	r3, r3, #7
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005d30:	9104      	str	r1, [sp, #16]
 8005d32:	4614      	mov	r4, r2
 8005d34:	461d      	mov	r5, r3
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	f173 0300 	sbcs.w	r3, r3, #0
 8005d3c:	f2c0 8349 	blt.w	80063d2 <_vfiprintf_r+0xa52>
 8005d40:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 8005d44:	9306      	str	r3, [sp, #24]
 8005d46:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005d4a:	f000 8314 	beq.w	8006376 <_vfiprintf_r+0x9f6>
 8005d4e:	f027 0380 	bic.w	r3, r7, #128	; 0x80
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	ea54 0305 	orrs.w	r3, r4, r5
 8005d58:	f040 830c 	bne.w	8006374 <_vfiprintf_r+0x9f4>
 8005d5c:	f1b9 0f00 	cmp.w	r9, #0
 8005d60:	f040 83cf 	bne.w	8006502 <_vfiprintf_r+0xb82>
 8005d64:	f04f 0900 	mov.w	r9, #0
 8005d68:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d6c:	ae1a      	add	r6, sp, #104	; 0x68
 8005d6e:	e16b      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8005d70:	9b04      	ldr	r3, [sp, #16]
 8005d72:	2501      	movs	r5, #1
 8005d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d78:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
 8005d7c:	f04f 0100 	mov.w	r1, #0
 8005d80:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8005d84:	9304      	str	r3, [sp, #16]
 8005d86:	9501      	str	r5, [sp, #4]
 8005d88:	ae10      	add	r6, sp, #64	; 0x40
 8005d8a:	9700      	str	r7, [sp, #0]
 8005d8c:	f04f 0900 	mov.w	r9, #0
 8005d90:	9b00      	ldr	r3, [sp, #0]
 8005d92:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 8005d96:	f013 0302 	ands.w	r3, r3, #2
 8005d9a:	9306      	str	r3, [sp, #24]
 8005d9c:	9b00      	ldr	r3, [sp, #0]
 8005d9e:	bf18      	it	ne
 8005da0:	3502      	addne	r5, #2
 8005da2:	1c50      	adds	r0, r2, #1
 8005da4:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 8005da8:	4601      	mov	r1, r0
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	d104      	bne.n	8005db8 <_vfiprintf_r+0x438>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	1b5c      	subs	r4, r3, r5
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	f300 8224 	bgt.w	8006200 <_vfiprintf_r+0x880>
 8005db8:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 8005dbc:	f10b 0008 	add.w	r0, fp, #8
 8005dc0:	b17c      	cbz	r4, 8005de2 <_vfiprintf_r+0x462>
 8005dc2:	f10c 0c01 	add.w	ip, ip, #1
 8005dc6:	f10d 042f 	add.w	r4, sp, #47	; 0x2f
 8005dca:	2201      	movs	r2, #1
 8005dcc:	2907      	cmp	r1, #7
 8005dce:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	; 0x38
 8005dd2:	e9cb 4200 	strd	r4, r2, [fp]
 8005dd6:	f300 81f3 	bgt.w	80061c0 <_vfiprintf_r+0x840>
 8005dda:	460a      	mov	r2, r1
 8005ddc:	4683      	mov	fp, r0
 8005dde:	3101      	adds	r1, #1
 8005de0:	3008      	adds	r0, #8
 8005de2:	9b06      	ldr	r3, [sp, #24]
 8005de4:	b1e3      	cbz	r3, 8005e20 <_vfiprintf_r+0x4a0>
 8005de6:	f10c 0c02 	add.w	ip, ip, #2
 8005dea:	aa0c      	add	r2, sp, #48	; 0x30
 8005dec:	2302      	movs	r3, #2
 8005dee:	2907      	cmp	r1, #7
 8005df0:	e9cd 1c0e 	strd	r1, ip, [sp, #56]	; 0x38
 8005df4:	e9cb 2300 	strd	r2, r3, [fp]
 8005df8:	f340 81fc 	ble.w	80061f4 <_vfiprintf_r+0x874>
 8005dfc:	f1bc 0f00 	cmp.w	ip, #0
 8005e00:	f000 82fd 	beq.w	80063fe <_vfiprintf_r+0xa7e>
 8005e04:	aa0d      	add	r2, sp, #52	; 0x34
 8005e06:	4651      	mov	r1, sl
 8005e08:	9805      	ldr	r0, [sp, #20]
 8005e0a:	f7ff fd73 	bl	80058f4 <__sprint_r.part.0>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f47f aed3 	bne.w	8005bba <_vfiprintf_r+0x23a>
 8005e14:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 8005e18:	a81c      	add	r0, sp, #112	; 0x70
 8005e1a:	1c51      	adds	r1, r2, #1
 8005e1c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8005e20:	9b07      	ldr	r3, [sp, #28]
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	f000 811b 	beq.w	800605e <_vfiprintf_r+0x6de>
 8005e28:	9b01      	ldr	r3, [sp, #4]
 8005e2a:	eba9 0703 	sub.w	r7, r9, r3
 8005e2e:	2f00      	cmp	r7, #0
 8005e30:	f300 8172 	bgt.w	8006118 <_vfiprintf_r+0x798>
 8005e34:	9a01      	ldr	r2, [sp, #4]
 8005e36:	910e      	str	r1, [sp, #56]	; 0x38
 8005e38:	4613      	mov	r3, r2
 8005e3a:	4463      	add	r3, ip
 8005e3c:	2907      	cmp	r1, #7
 8005e3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e40:	e9cb 6200 	strd	r6, r2, [fp]
 8005e44:	dd0c      	ble.n	8005e60 <_vfiprintf_r+0x4e0>
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8223 	beq.w	8006292 <_vfiprintf_r+0x912>
 8005e4c:	aa0d      	add	r2, sp, #52	; 0x34
 8005e4e:	4651      	mov	r1, sl
 8005e50:	9805      	ldr	r0, [sp, #20]
 8005e52:	f7ff fd4f 	bl	80058f4 <__sprint_r.part.0>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f47f aeaf 	bne.w	8005bba <_vfiprintf_r+0x23a>
 8005e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e5e:	a81a      	add	r0, sp, #104	; 0x68
 8005e60:	9a00      	ldr	r2, [sp, #0]
 8005e62:	0752      	lsls	r2, r2, #29
 8005e64:	d504      	bpl.n	8005e70 <_vfiprintf_r+0x4f0>
 8005e66:	9a03      	ldr	r2, [sp, #12]
 8005e68:	1b54      	subs	r4, r2, r5
 8005e6a:	2c00      	cmp	r4, #0
 8005e6c:	f300 821a 	bgt.w	80062a4 <_vfiprintf_r+0x924>
 8005e70:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e74:	42a9      	cmp	r1, r5
 8005e76:	bfac      	ite	ge
 8005e78:	1852      	addge	r2, r2, r1
 8005e7a:	1952      	addlt	r2, r2, r5
 8005e7c:	9202      	str	r2, [sp, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f040 8190 	bne.w	80061a4 <_vfiprintf_r+0x824>
 8005e84:	2300      	movs	r3, #0
 8005e86:	930e      	str	r3, [sp, #56]	; 0x38
 8005e88:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8005e8c:	e5aa      	b.n	80059e4 <_vfiprintf_r+0x64>
 8005e8e:	2900      	cmp	r1, #0
 8005e90:	f040 8352 	bne.w	8006538 <_vfiprintf_r+0xbb8>
 8005e94:	4a3a      	ldr	r2, [pc, #232]	; (8005f80 <_vfiprintf_r+0x600>)
 8005e96:	9208      	str	r2, [sp, #32]
 8005e98:	06b8      	lsls	r0, r7, #26
 8005e9a:	9a04      	ldr	r2, [sp, #16]
 8005e9c:	f53f aeee 	bmi.w	8005c7c <_vfiprintf_r+0x2fc>
 8005ea0:	f852 4b04 	ldr.w	r4, [r2], #4
 8005ea4:	9204      	str	r2, [sp, #16]
 8005ea6:	06f9      	lsls	r1, r7, #27
 8005ea8:	f100 829c 	bmi.w	80063e4 <_vfiprintf_r+0xa64>
 8005eac:	067a      	lsls	r2, r7, #25
 8005eae:	f140 8299 	bpl.w	80063e4 <_vfiprintf_r+0xa64>
 8005eb2:	b2a4      	uxth	r4, r4
 8005eb4:	2500      	movs	r5, #0
 8005eb6:	e6e7      	b.n	8005c88 <_vfiprintf_r+0x308>
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	f040 832d 	bne.w	8006518 <_vfiprintf_r+0xb98>
 8005ebe:	f047 0710 	orr.w	r7, r7, #16
 8005ec2:	06ba      	lsls	r2, r7, #26
 8005ec4:	9b04      	ldr	r3, [sp, #16]
 8005ec6:	f53f af2d 	bmi.w	8005d24 <_vfiprintf_r+0x3a4>
 8005eca:	f853 4b04 	ldr.w	r4, [r3], #4
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	06fe      	lsls	r6, r7, #27
 8005ed2:	f100 8276 	bmi.w	80063c2 <_vfiprintf_r+0xa42>
 8005ed6:	067d      	lsls	r5, r7, #25
 8005ed8:	f140 8273 	bpl.w	80063c2 <_vfiprintf_r+0xa42>
 8005edc:	b224      	sxth	r4, r4
 8005ede:	17e5      	asrs	r5, r4, #31
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	462b      	mov	r3, r5
 8005ee4:	e727      	b.n	8005d36 <_vfiprintf_r+0x3b6>
 8005ee6:	9b04      	ldr	r3, [sp, #16]
 8005ee8:	f853 4b04 	ldr.w	r4, [r3], #4
 8005eec:	9304      	str	r3, [sp, #16]
 8005eee:	f647 0230 	movw	r2, #30768	; 0x7830
 8005ef2:	4b22      	ldr	r3, [pc, #136]	; (8005f7c <_vfiprintf_r+0x5fc>)
 8005ef4:	9308      	str	r3, [sp, #32]
 8005ef6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8005efa:	f047 0702 	orr.w	r7, r7, #2
 8005efe:	2500      	movs	r5, #0
 8005f00:	2302      	movs	r3, #2
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	9206      	str	r2, [sp, #24]
 8005f0e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8005f12:	d057      	beq.n	8005fc4 <_vfiprintf_r+0x644>
 8005f14:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 8005f18:	9200      	str	r2, [sp, #0]
 8005f1a:	ea54 0205 	orrs.w	r2, r4, r5
 8005f1e:	d150      	bne.n	8005fc2 <_vfiprintf_r+0x642>
 8005f20:	f1b9 0f00 	cmp.w	r9, #0
 8005f24:	f040 8209 	bne.w	800633a <_vfiprintf_r+0x9ba>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f47f af1b 	bne.w	8005d64 <_vfiprintf_r+0x3e4>
 8005f2e:	f017 0301 	ands.w	r3, r7, #1
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	f000 827d 	beq.w	8006432 <_vfiprintf_r+0xab2>
 8005f38:	2330      	movs	r3, #48	; 0x30
 8005f3a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8005f3e:	f10d 0667 	add.w	r6, sp, #103	; 0x67
 8005f42:	e081      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8005f44:	2900      	cmp	r1, #0
 8005f46:	f040 82f2 	bne.w	800652e <_vfiprintf_r+0xbae>
 8005f4a:	9a04      	ldr	r2, [sp, #16]
 8005f4c:	06bc      	lsls	r4, r7, #26
 8005f4e:	f852 3b04 	ldr.w	r3, [r2], #4
 8005f52:	9204      	str	r2, [sp, #16]
 8005f54:	f100 8282 	bmi.w	800645c <_vfiprintf_r+0xadc>
 8005f58:	06f8      	lsls	r0, r7, #27
 8005f5a:	f100 82aa 	bmi.w	80064b2 <_vfiprintf_r+0xb32>
 8005f5e:	0679      	lsls	r1, r7, #25
 8005f60:	f140 82a7 	bpl.w	80064b2 <_vfiprintf_r+0xb32>
 8005f64:	9a02      	ldr	r2, [sp, #8]
 8005f66:	801a      	strh	r2, [r3, #0]
 8005f68:	e53c      	b.n	80059e4 <_vfiprintf_r+0x64>
 8005f6a:	f853 4b04 	ldr.w	r4, [r3], #4
 8005f6e:	9304      	str	r3, [sp, #16]
 8005f70:	06fe      	lsls	r6, r7, #27
 8005f72:	f140 826d 	bpl.w	8006450 <_vfiprintf_r+0xad0>
 8005f76:	2500      	movs	r5, #0
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e7c2      	b.n	8005f02 <_vfiprintf_r+0x582>
 8005f7c:	0801ca94 	.word	0x0801ca94
 8005f80:	0801ca80 	.word	0x0801ca80
 8005f84:	9a04      	ldr	r2, [sp, #16]
 8005f86:	f852 4b04 	ldr.w	r4, [r2], #4
 8005f8a:	9204      	str	r2, [sp, #16]
 8005f8c:	f017 0210 	ands.w	r2, r7, #16
 8005f90:	f000 8257 	beq.w	8006442 <_vfiprintf_r+0xac2>
 8005f94:	2500      	movs	r5, #0
 8005f96:	e7b4      	b.n	8005f02 <_vfiprintf_r+0x582>
 8005f98:	f7fd fda2 	bl	8003ae0 <__sinit>
 8005f9c:	e4fd      	b.n	800599a <_vfiprintf_r+0x1a>
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	f040 82ac 	bne.w	80064fc <_vfiprintf_r+0xb7c>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f43f ae01 	beq.w	8005bac <_vfiprintf_r+0x22c>
 8005faa:	2501      	movs	r5, #1
 8005fac:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8005fb0:	f04f 0300 	mov.w	r3, #0
 8005fb4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005fb8:	9501      	str	r5, [sp, #4]
 8005fba:	ae10      	add	r6, sp, #64	; 0x40
 8005fbc:	e6e5      	b.n	8005d8a <_vfiprintf_r+0x40a>
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	e79f      	b.n	8005f02 <_vfiprintf_r+0x582>
 8005fc2:	9f00      	ldr	r7, [sp, #0]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	f000 81d6 	beq.w	8006376 <_vfiprintf_r+0x9f6>
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	f000 81bc 	beq.w	8006348 <_vfiprintf_r+0x9c8>
 8005fd0:	a91a      	add	r1, sp, #104	; 0x68
 8005fd2:	e000      	b.n	8005fd6 <_vfiprintf_r+0x656>
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	08e2      	lsrs	r2, r4, #3
 8005fd8:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 8005fdc:	08e8      	lsrs	r0, r5, #3
 8005fde:	f004 0307 	and.w	r3, r4, #7
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	3330      	adds	r3, #48	; 0x30
 8005fe8:	ea54 0205 	orrs.w	r2, r4, r5
 8005fec:	f801 3c01 	strb.w	r3, [r1, #-1]
 8005ff0:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8005ff4:	d1ee      	bne.n	8005fd4 <_vfiprintf_r+0x654>
 8005ff6:	07f8      	lsls	r0, r7, #31
 8005ff8:	d522      	bpl.n	8006040 <_vfiprintf_r+0x6c0>
 8005ffa:	2b30      	cmp	r3, #48	; 0x30
 8005ffc:	d020      	beq.n	8006040 <_vfiprintf_r+0x6c0>
 8005ffe:	2330      	movs	r3, #48	; 0x30
 8006000:	3902      	subs	r1, #2
 8006002:	f806 3c01 	strb.w	r3, [r6, #-1]
 8006006:	ab1a      	add	r3, sp, #104	; 0x68
 8006008:	1a5b      	subs	r3, r3, r1
 800600a:	9700      	str	r7, [sp, #0]
 800600c:	9301      	str	r3, [sp, #4]
 800600e:	460e      	mov	r6, r1
 8006010:	e01a      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8006012:	ae1a      	add	r6, sp, #104	; 0x68
 8006014:	e001      	b.n	800601a <_vfiprintf_r+0x69a>
 8006016:	4604      	mov	r4, r0
 8006018:	460d      	mov	r5, r1
 800601a:	220a      	movs	r2, #10
 800601c:	2300      	movs	r3, #0
 800601e:	4620      	mov	r0, r4
 8006020:	4629      	mov	r1, r5
 8006022:	f001 fc11 	bl	8007848 <__aeabi_uldivmod>
 8006026:	3230      	adds	r2, #48	; 0x30
 8006028:	f806 2d01 	strb.w	r2, [r6, #-1]!
 800602c:	2300      	movs	r3, #0
 800602e:	220a      	movs	r2, #10
 8006030:	4620      	mov	r0, r4
 8006032:	4629      	mov	r1, r5
 8006034:	f001 fc08 	bl	8007848 <__aeabi_uldivmod>
 8006038:	2d00      	cmp	r5, #0
 800603a:	bf08      	it	eq
 800603c:	2c0a      	cmpeq	r4, #10
 800603e:	d2ea      	bcs.n	8006016 <_vfiprintf_r+0x696>
 8006040:	ab1a      	add	r3, sp, #104	; 0x68
 8006042:	1b9b      	subs	r3, r3, r6
 8006044:	9700      	str	r7, [sp, #0]
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	454b      	cmp	r3, r9
 800604c:	bfb8      	it	lt
 800604e:	464b      	movlt	r3, r9
 8006050:	461d      	mov	r5, r3
 8006052:	9b06      	ldr	r3, [sp, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f43f ae9b 	beq.w	8005d90 <_vfiprintf_r+0x410>
 800605a:	3501      	adds	r5, #1
 800605c:	e698      	b.n	8005d90 <_vfiprintf_r+0x410>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	1b5f      	subs	r7, r3, r5
 8006062:	2f00      	cmp	r7, #0
 8006064:	f77f aee0 	ble.w	8005e28 <_vfiprintf_r+0x4a8>
 8006068:	2f10      	cmp	r7, #16
 800606a:	4cc0      	ldr	r4, [pc, #768]	; (800636c <_vfiprintf_r+0x9ec>)
 800606c:	f340 826a 	ble.w	8006544 <_vfiprintf_r+0xbc4>
 8006070:	4663      	mov	r3, ip
 8006072:	46dc      	mov	ip, fp
 8006074:	46ab      	mov	fp, r5
 8006076:	4625      	mov	r5, r4
 8006078:	9c05      	ldr	r4, [sp, #20]
 800607a:	e006      	b.n	800608a <_vfiprintf_r+0x70a>
 800607c:	1c90      	adds	r0, r2, #2
 800607e:	f10c 0c08 	add.w	ip, ip, #8
 8006082:	460a      	mov	r2, r1
 8006084:	3f10      	subs	r7, #16
 8006086:	2f10      	cmp	r7, #16
 8006088:	dd1e      	ble.n	80060c8 <_vfiprintf_r+0x748>
 800608a:	1c51      	adds	r1, r2, #1
 800608c:	3310      	adds	r3, #16
 800608e:	2010      	movs	r0, #16
 8006090:	2907      	cmp	r1, #7
 8006092:	930f      	str	r3, [sp, #60]	; 0x3c
 8006094:	f8cc 5000 	str.w	r5, [ip]
 8006098:	f8cc 0004 	str.w	r0, [ip, #4]
 800609c:	910e      	str	r1, [sp, #56]	; 0x38
 800609e:	dded      	ble.n	800607c <_vfiprintf_r+0x6fc>
 80060a0:	aa0d      	add	r2, sp, #52	; 0x34
 80060a2:	4651      	mov	r1, sl
 80060a4:	4620      	mov	r0, r4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8085 	beq.w	80061b6 <_vfiprintf_r+0x836>
 80060ac:	f7ff fc22 	bl	80058f4 <__sprint_r.part.0>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f47f ad82 	bne.w	8005bba <_vfiprintf_r+0x23a>
 80060b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80060ba:	3f10      	subs	r7, #16
 80060bc:	2f10      	cmp	r7, #16
 80060be:	f102 0001 	add.w	r0, r2, #1
 80060c2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80060c6:	dce0      	bgt.n	800608a <_vfiprintf_r+0x70a>
 80060c8:	462c      	mov	r4, r5
 80060ca:	465d      	mov	r5, fp
 80060cc:	46e3      	mov	fp, ip
 80060ce:	469c      	mov	ip, r3
 80060d0:	f10b 0308 	add.w	r3, fp, #8
 80060d4:	44bc      	add	ip, r7
 80060d6:	2807      	cmp	r0, #7
 80060d8:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80060dc:	e9cb 4700 	strd	r4, r7, [fp]
 80060e0:	900e      	str	r0, [sp, #56]	; 0x38
 80060e2:	f340 81a8 	ble.w	8006436 <_vfiprintf_r+0xab6>
 80060e6:	f1bc 0f00 	cmp.w	ip, #0
 80060ea:	f000 81f8 	beq.w	80064de <_vfiprintf_r+0xb5e>
 80060ee:	aa0d      	add	r2, sp, #52	; 0x34
 80060f0:	4651      	mov	r1, sl
 80060f2:	9805      	ldr	r0, [sp, #20]
 80060f4:	f7ff fbfe 	bl	80058f4 <__sprint_r.part.0>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	f47f ad5e 	bne.w	8005bba <_vfiprintf_r+0x23a>
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 8006104:	eba9 0703 	sub.w	r7, r9, r3
 8006108:	2f00      	cmp	r7, #0
 800610a:	f102 0101 	add.w	r1, r2, #1
 800610e:	a81c      	add	r0, sp, #112	; 0x70
 8006110:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8006114:	f77f ae8e 	ble.w	8005e34 <_vfiprintf_r+0x4b4>
 8006118:	2f10      	cmp	r7, #16
 800611a:	4c94      	ldr	r4, [pc, #592]	; (800636c <_vfiprintf_r+0x9ec>)
 800611c:	f340 81dd 	ble.w	80064da <_vfiprintf_r+0xb5a>
 8006120:	4663      	mov	r3, ip
 8006122:	f04f 0910 	mov.w	r9, #16
 8006126:	46dc      	mov	ip, fp
 8006128:	46ab      	mov	fp, r5
 800612a:	4625      	mov	r5, r4
 800612c:	9c05      	ldr	r4, [sp, #20]
 800612e:	e006      	b.n	800613e <_vfiprintf_r+0x7be>
 8006130:	1c91      	adds	r1, r2, #2
 8006132:	f10c 0c08 	add.w	ip, ip, #8
 8006136:	4602      	mov	r2, r0
 8006138:	3f10      	subs	r7, #16
 800613a:	2f10      	cmp	r7, #16
 800613c:	dd19      	ble.n	8006172 <_vfiprintf_r+0x7f2>
 800613e:	1c50      	adds	r0, r2, #1
 8006140:	3310      	adds	r3, #16
 8006142:	2807      	cmp	r0, #7
 8006144:	930f      	str	r3, [sp, #60]	; 0x3c
 8006146:	e9cc 5900 	strd	r5, r9, [ip]
 800614a:	900e      	str	r0, [sp, #56]	; 0x38
 800614c:	ddf0      	ble.n	8006130 <_vfiprintf_r+0x7b0>
 800614e:	aa0d      	add	r2, sp, #52	; 0x34
 8006150:	4651      	mov	r1, sl
 8006152:	4620      	mov	r0, r4
 8006154:	b30b      	cbz	r3, 800619a <_vfiprintf_r+0x81a>
 8006156:	f7ff fbcd 	bl	80058f4 <__sprint_r.part.0>
 800615a:	2800      	cmp	r0, #0
 800615c:	f47f ad2d 	bne.w	8005bba <_vfiprintf_r+0x23a>
 8006160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006164:	3f10      	subs	r7, #16
 8006166:	2f10      	cmp	r7, #16
 8006168:	f102 0101 	add.w	r1, r2, #1
 800616c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8006170:	dce5      	bgt.n	800613e <_vfiprintf_r+0x7be>
 8006172:	462c      	mov	r4, r5
 8006174:	465d      	mov	r5, fp
 8006176:	46e3      	mov	fp, ip
 8006178:	469c      	mov	ip, r3
 800617a:	f10b 0308 	add.w	r3, fp, #8
 800617e:	44bc      	add	ip, r7
 8006180:	2907      	cmp	r1, #7
 8006182:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006186:	e9cb 4700 	strd	r4, r7, [fp]
 800618a:	910e      	str	r1, [sp, #56]	; 0x38
 800618c:	f300 8101 	bgt.w	8006392 <_vfiprintf_r+0xa12>
 8006190:	3101      	adds	r1, #1
 8006192:	f103 0008 	add.w	r0, r3, #8
 8006196:	469b      	mov	fp, r3
 8006198:	e64c      	b.n	8005e34 <_vfiprintf_r+0x4b4>
 800619a:	2101      	movs	r1, #1
 800619c:	461a      	mov	r2, r3
 800619e:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80061a2:	e7c9      	b.n	8006138 <_vfiprintf_r+0x7b8>
 80061a4:	aa0d      	add	r2, sp, #52	; 0x34
 80061a6:	4651      	mov	r1, sl
 80061a8:	9805      	ldr	r0, [sp, #20]
 80061aa:	f7ff fba3 	bl	80058f4 <__sprint_r.part.0>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f43f ae68 	beq.w	8005e84 <_vfiprintf_r+0x504>
 80061b4:	e501      	b.n	8005bba <_vfiprintf_r+0x23a>
 80061b6:	2001      	movs	r0, #1
 80061b8:	461a      	mov	r2, r3
 80061ba:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 80061be:	e761      	b.n	8006084 <_vfiprintf_r+0x704>
 80061c0:	f1bc 0f00 	cmp.w	ip, #0
 80061c4:	f000 8110 	beq.w	80063e8 <_vfiprintf_r+0xa68>
 80061c8:	aa0d      	add	r2, sp, #52	; 0x34
 80061ca:	4651      	mov	r1, sl
 80061cc:	9805      	ldr	r0, [sp, #20]
 80061ce:	f7ff fb91 	bl	80058f4 <__sprint_r.part.0>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	f47f acf1 	bne.w	8005bba <_vfiprintf_r+0x23a>
 80061d8:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 80061dc:	a81c      	add	r0, sp, #112	; 0x70
 80061de:	1c51      	adds	r1, r2, #1
 80061e0:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80061e4:	e5fd      	b.n	8005de2 <_vfiprintf_r+0x462>
 80061e6:	2302      	movs	r3, #2
 80061e8:	aa0c      	add	r2, sp, #48	; 0x30
 80061ea:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 80061ee:	469c      	mov	ip, r3
 80061f0:	a81c      	add	r0, sp, #112	; 0x70
 80061f2:	2101      	movs	r1, #1
 80061f4:	4683      	mov	fp, r0
 80061f6:	460a      	mov	r2, r1
 80061f8:	1c51      	adds	r1, r2, #1
 80061fa:	f10b 0008 	add.w	r0, fp, #8
 80061fe:	e60f      	b.n	8005e20 <_vfiprintf_r+0x4a0>
 8006200:	2c10      	cmp	r4, #16
 8006202:	4f5b      	ldr	r7, [pc, #364]	; (8006370 <_vfiprintf_r+0x9f0>)
 8006204:	f340 8196 	ble.w	8006534 <_vfiprintf_r+0xbb4>
 8006208:	9609      	str	r6, [sp, #36]	; 0x24
 800620a:	4659      	mov	r1, fp
 800620c:	2310      	movs	r3, #16
 800620e:	46c3      	mov	fp, r8
 8006210:	4666      	mov	r6, ip
 8006212:	46a8      	mov	r8, r5
 8006214:	9d05      	ldr	r5, [sp, #20]
 8006216:	e007      	b.n	8006228 <_vfiprintf_r+0x8a8>
 8006218:	f102 0e02 	add.w	lr, r2, #2
 800621c:	3108      	adds	r1, #8
 800621e:	4602      	mov	r2, r0
 8006220:	3c10      	subs	r4, #16
 8006222:	2c10      	cmp	r4, #16
 8006224:	dd1a      	ble.n	800625c <_vfiprintf_r+0x8dc>
 8006226:	1c50      	adds	r0, r2, #1
 8006228:	3610      	adds	r6, #16
 800622a:	2807      	cmp	r0, #7
 800622c:	960f      	str	r6, [sp, #60]	; 0x3c
 800622e:	e9c1 7300 	strd	r7, r3, [r1]
 8006232:	900e      	str	r0, [sp, #56]	; 0x38
 8006234:	ddf0      	ble.n	8006218 <_vfiprintf_r+0x898>
 8006236:	aa0d      	add	r2, sp, #52	; 0x34
 8006238:	4651      	mov	r1, sl
 800623a:	4628      	mov	r0, r5
 800623c:	b326      	cbz	r6, 8006288 <_vfiprintf_r+0x908>
 800623e:	f7ff fb59 	bl	80058f4 <__sprint_r.part.0>
 8006242:	2800      	cmp	r0, #0
 8006244:	f47f acb9 	bne.w	8005bba <_vfiprintf_r+0x23a>
 8006248:	e9dd 260e 	ldrd	r2, r6, [sp, #56]	; 0x38
 800624c:	3c10      	subs	r4, #16
 800624e:	2c10      	cmp	r4, #16
 8006250:	f102 0e01 	add.w	lr, r2, #1
 8006254:	a91a      	add	r1, sp, #104	; 0x68
 8006256:	f04f 0310 	mov.w	r3, #16
 800625a:	dce4      	bgt.n	8006226 <_vfiprintf_r+0x8a6>
 800625c:	46b4      	mov	ip, r6
 800625e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006260:	4645      	mov	r5, r8
 8006262:	46d8      	mov	r8, fp
 8006264:	468b      	mov	fp, r1
 8006266:	44a4      	add	ip, r4
 8006268:	f1be 0f07 	cmp.w	lr, #7
 800626c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8006270:	e9cb 7400 	strd	r7, r4, [fp]
 8006274:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8006278:	f300 80c7 	bgt.w	800640a <_vfiprintf_r+0xa8a>
 800627c:	f10b 0b08 	add.w	fp, fp, #8
 8006280:	f10e 0101 	add.w	r1, lr, #1
 8006284:	4672      	mov	r2, lr
 8006286:	e597      	b.n	8005db8 <_vfiprintf_r+0x438>
 8006288:	4632      	mov	r2, r6
 800628a:	f04f 0e01 	mov.w	lr, #1
 800628e:	a91a      	add	r1, sp, #104	; 0x68
 8006290:	e7c6      	b.n	8006220 <_vfiprintf_r+0x8a0>
 8006292:	9a00      	ldr	r2, [sp, #0]
 8006294:	930e      	str	r3, [sp, #56]	; 0x38
 8006296:	0751      	lsls	r1, r2, #29
 8006298:	d547      	bpl.n	800632a <_vfiprintf_r+0x9aa>
 800629a:	9a03      	ldr	r2, [sp, #12]
 800629c:	1b54      	subs	r4, r2, r5
 800629e:	2c00      	cmp	r4, #0
 80062a0:	dd43      	ble.n	800632a <_vfiprintf_r+0x9aa>
 80062a2:	a81a      	add	r0, sp, #104	; 0x68
 80062a4:	2c10      	cmp	r4, #16
 80062a6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80062a8:	4f31      	ldr	r7, [pc, #196]	; (8006370 <_vfiprintf_r+0x9f0>)
 80062aa:	f340 8148 	ble.w	800653e <_vfiprintf_r+0xbbe>
 80062ae:	2610      	movs	r6, #16
 80062b0:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80062b4:	e006      	b.n	80062c4 <_vfiprintf_r+0x944>
 80062b6:	f101 0c02 	add.w	ip, r1, #2
 80062ba:	3008      	adds	r0, #8
 80062bc:	4611      	mov	r1, r2
 80062be:	3c10      	subs	r4, #16
 80062c0:	2c10      	cmp	r4, #16
 80062c2:	dd18      	ble.n	80062f6 <_vfiprintf_r+0x976>
 80062c4:	1c4a      	adds	r2, r1, #1
 80062c6:	3310      	adds	r3, #16
 80062c8:	2a07      	cmp	r2, #7
 80062ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80062cc:	e9c0 7600 	strd	r7, r6, [r0]
 80062d0:	920e      	str	r2, [sp, #56]	; 0x38
 80062d2:	ddf0      	ble.n	80062b6 <_vfiprintf_r+0x936>
 80062d4:	aa0d      	add	r2, sp, #52	; 0x34
 80062d6:	4651      	mov	r1, sl
 80062d8:	4648      	mov	r0, r9
 80062da:	b30b      	cbz	r3, 8006320 <_vfiprintf_r+0x9a0>
 80062dc:	f7ff fb0a 	bl	80058f4 <__sprint_r.part.0>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	f47f ac6a 	bne.w	8005bba <_vfiprintf_r+0x23a>
 80062e6:	e9dd 130e 	ldrd	r1, r3, [sp, #56]	; 0x38
 80062ea:	3c10      	subs	r4, #16
 80062ec:	2c10      	cmp	r4, #16
 80062ee:	f101 0c01 	add.w	ip, r1, #1
 80062f2:	a81a      	add	r0, sp, #104	; 0x68
 80062f4:	dce6      	bgt.n	80062c4 <_vfiprintf_r+0x944>
 80062f6:	4423      	add	r3, r4
 80062f8:	f1bc 0f07 	cmp.w	ip, #7
 80062fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80062fe:	e9c0 7400 	strd	r7, r4, [r0]
 8006302:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8006306:	f77f adb3 	ble.w	8005e70 <_vfiprintf_r+0x4f0>
 800630a:	b173      	cbz	r3, 800632a <_vfiprintf_r+0x9aa>
 800630c:	aa0d      	add	r2, sp, #52	; 0x34
 800630e:	4651      	mov	r1, sl
 8006310:	9805      	ldr	r0, [sp, #20]
 8006312:	f7ff faef 	bl	80058f4 <__sprint_r.part.0>
 8006316:	2800      	cmp	r0, #0
 8006318:	f47f ac4f 	bne.w	8005bba <_vfiprintf_r+0x23a>
 800631c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800631e:	e5a7      	b.n	8005e70 <_vfiprintf_r+0x4f0>
 8006320:	f04f 0c01 	mov.w	ip, #1
 8006324:	4619      	mov	r1, r3
 8006326:	a81a      	add	r0, sp, #104	; 0x68
 8006328:	e7c9      	b.n	80062be <_vfiprintf_r+0x93e>
 800632a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800632e:	42aa      	cmp	r2, r5
 8006330:	bfac      	ite	ge
 8006332:	189b      	addge	r3, r3, r2
 8006334:	195b      	addlt	r3, r3, r5
 8006336:	9302      	str	r3, [sp, #8]
 8006338:	e5a4      	b.n	8005e84 <_vfiprintf_r+0x504>
 800633a:	2b01      	cmp	r3, #1
 800633c:	f000 80e1 	beq.w	8006502 <_vfiprintf_r+0xb82>
 8006340:	2b02      	cmp	r3, #2
 8006342:	9f00      	ldr	r7, [sp, #0]
 8006344:	f47f ae44 	bne.w	8005fd0 <_vfiprintf_r+0x650>
 8006348:	9808      	ldr	r0, [sp, #32]
 800634a:	ae1a      	add	r6, sp, #104	; 0x68
 800634c:	0923      	lsrs	r3, r4, #4
 800634e:	f004 010f 	and.w	r1, r4, #15
 8006352:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8006356:	092a      	lsrs	r2, r5, #4
 8006358:	461c      	mov	r4, r3
 800635a:	4615      	mov	r5, r2
 800635c:	5c43      	ldrb	r3, [r0, r1]
 800635e:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8006362:	ea54 0305 	orrs.w	r3, r4, r5
 8006366:	d1f1      	bne.n	800634c <_vfiprintf_r+0x9cc>
 8006368:	e66a      	b.n	8006040 <_vfiprintf_r+0x6c0>
 800636a:	bf00      	nop
 800636c:	0800d550 	.word	0x0800d550
 8006370:	0800d540 	.word	0x0800d540
 8006374:	9f00      	ldr	r7, [sp, #0]
 8006376:	2d00      	cmp	r5, #0
 8006378:	bf08      	it	eq
 800637a:	2c0a      	cmpeq	r4, #10
 800637c:	f4bf ae49 	bcs.w	8006012 <_vfiprintf_r+0x692>
 8006380:	3430      	adds	r4, #48	; 0x30
 8006382:	2301      	movs	r3, #1
 8006384:	f88d 4067 	strb.w	r4, [sp, #103]	; 0x67
 8006388:	9700      	str	r7, [sp, #0]
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	f10d 0667 	add.w	r6, sp, #103	; 0x67
 8006390:	e65a      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8006392:	f1bc 0f00 	cmp.w	ip, #0
 8006396:	f000 8090 	beq.w	80064ba <_vfiprintf_r+0xb3a>
 800639a:	aa0d      	add	r2, sp, #52	; 0x34
 800639c:	4651      	mov	r1, sl
 800639e:	9805      	ldr	r0, [sp, #20]
 80063a0:	f7ff faa8 	bl	80058f4 <__sprint_r.part.0>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	f47f ac08 	bne.w	8005bba <_vfiprintf_r+0x23a>
 80063aa:	e9dd 1c0e 	ldrd	r1, ip, [sp, #56]	; 0x38
 80063ae:	a81c      	add	r0, sp, #112	; 0x70
 80063b0:	3101      	adds	r1, #1
 80063b2:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80063b6:	e53d      	b.n	8005e34 <_vfiprintf_r+0x4b4>
 80063b8:	920e      	str	r2, [sp, #56]	; 0x38
 80063ba:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80063be:	f7ff bb36 	b.w	8005a2e <_vfiprintf_r+0xae>
 80063c2:	17e5      	asrs	r5, r4, #31
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	2a00      	cmp	r2, #0
 80063ca:	f173 0300 	sbcs.w	r3, r3, #0
 80063ce:	f6bf acb7 	bge.w	8005d40 <_vfiprintf_r+0x3c0>
 80063d2:	232d      	movs	r3, #45	; 0x2d
 80063d4:	4264      	negs	r4, r4
 80063d6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 80063da:	9306      	str	r3, [sp, #24]
 80063dc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80063e0:	2301      	movs	r3, #1
 80063e2:	e594      	b.n	8005f0e <_vfiprintf_r+0x58e>
 80063e4:	2500      	movs	r5, #0
 80063e6:	e44f      	b.n	8005c88 <_vfiprintf_r+0x308>
 80063e8:	9b06      	ldr	r3, [sp, #24]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03d      	beq.n	800646a <_vfiprintf_r+0xaea>
 80063ee:	2302      	movs	r3, #2
 80063f0:	a90c      	add	r1, sp, #48	; 0x30
 80063f2:	e9cd 131a 	strd	r1, r3, [sp, #104]	; 0x68
 80063f6:	469c      	mov	ip, r3
 80063f8:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 80063fc:	e6fc      	b.n	80061f8 <_vfiprintf_r+0x878>
 80063fe:	a81c      	add	r0, sp, #112	; 0x70
 8006400:	2101      	movs	r1, #1
 8006402:	4662      	mov	r2, ip
 8006404:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8006408:	e50a      	b.n	8005e20 <_vfiprintf_r+0x4a0>
 800640a:	f1bc 0f00 	cmp.w	ip, #0
 800640e:	d043      	beq.n	8006498 <_vfiprintf_r+0xb18>
 8006410:	aa0d      	add	r2, sp, #52	; 0x34
 8006412:	4651      	mov	r1, sl
 8006414:	9805      	ldr	r0, [sp, #20]
 8006416:	f7ff fa6d 	bl	80058f4 <__sprint_r.part.0>
 800641a:	2800      	cmp	r0, #0
 800641c:	f47f abcd 	bne.w	8005bba <_vfiprintf_r+0x23a>
 8006420:	e9dd 2c0e 	ldrd	r2, ip, [sp, #56]	; 0x38
 8006424:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8006428:	1c51      	adds	r1, r2, #1
 800642a:	e4c5      	b.n	8005db8 <_vfiprintf_r+0x438>
 800642c:	4644      	mov	r4, r8
 800642e:	f7ff bb05 	b.w	8005a3c <_vfiprintf_r+0xbc>
 8006432:	ae1a      	add	r6, sp, #104	; 0x68
 8006434:	e608      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8006436:	1c41      	adds	r1, r0, #1
 8006438:	4602      	mov	r2, r0
 800643a:	469b      	mov	fp, r3
 800643c:	f103 0008 	add.w	r0, r3, #8
 8006440:	e4f2      	b.n	8005e28 <_vfiprintf_r+0x4a8>
 8006442:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8006446:	bf1c      	itt	ne
 8006448:	4613      	movne	r3, r2
 800644a:	b2a4      	uxthne	r4, r4
 800644c:	2500      	movs	r5, #0
 800644e:	e558      	b.n	8005f02 <_vfiprintf_r+0x582>
 8006450:	067d      	lsls	r5, r7, #25
 8006452:	bf48      	it	mi
 8006454:	b2a4      	uxthmi	r4, r4
 8006456:	2500      	movs	r5, #0
 8006458:	2301      	movs	r3, #1
 800645a:	e552      	b.n	8005f02 <_vfiprintf_r+0x582>
 800645c:	9a02      	ldr	r2, [sp, #8]
 800645e:	4610      	mov	r0, r2
 8006460:	17d1      	asrs	r1, r2, #31
 8006462:	e9c3 0100 	strd	r0, r1, [r3]
 8006466:	f7ff babd 	b.w	80059e4 <_vfiprintf_r+0x64>
 800646a:	4611      	mov	r1, r2
 800646c:	a81c      	add	r0, sp, #112	; 0x70
 800646e:	4662      	mov	r2, ip
 8006470:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8006474:	e4d4      	b.n	8005e20 <_vfiprintf_r+0x4a0>
 8006476:	4264      	negs	r4, r4
 8006478:	e9cd 4203 	strd	r4, r2, [sp, #12]
 800647c:	f7ff bbd5 	b.w	8005c2a <_vfiprintf_r+0x2aa>
 8006480:	4630      	mov	r0, r6
 8006482:	9404      	str	r4, [sp, #16]
 8006484:	9700      	str	r7, [sp, #0]
 8006486:	f7fa fcdb 	bl	8000e40 <strlen>
 800648a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800648e:	9001      	str	r0, [sp, #4]
 8006490:	9306      	str	r3, [sp, #24]
 8006492:	f04f 0900 	mov.w	r9, #0
 8006496:	e5d7      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8006498:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 800649c:	bb2a      	cbnz	r2, 80064ea <_vfiprintf_r+0xb6a>
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f47f aea0 	bne.w	80061e6 <_vfiprintf_r+0x866>
 80064a6:	4662      	mov	r2, ip
 80064a8:	a81c      	add	r0, sp, #112	; 0x70
 80064aa:	2101      	movs	r1, #1
 80064ac:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80064b0:	e4ba      	b.n	8005e28 <_vfiprintf_r+0x4a8>
 80064b2:	9a02      	ldr	r2, [sp, #8]
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	f7ff ba95 	b.w	80059e4 <_vfiprintf_r+0x64>
 80064ba:	9b01      	ldr	r3, [sp, #4]
 80064bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80064be:	2201      	movs	r2, #1
 80064c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c2:	961a      	str	r6, [sp, #104]	; 0x68
 80064c4:	920e      	str	r2, [sp, #56]	; 0x38
 80064c6:	a81c      	add	r0, sp, #112	; 0x70
 80064c8:	e4ca      	b.n	8005e60 <_vfiprintf_r+0x4e0>
 80064ca:	464d      	mov	r5, r9
 80064cc:	2d06      	cmp	r5, #6
 80064ce:	bf28      	it	cs
 80064d0:	2506      	movcs	r5, #6
 80064d2:	9501      	str	r5, [sp, #4]
 80064d4:	9404      	str	r4, [sp, #16]
 80064d6:	4e25      	ldr	r6, [pc, #148]	; (800656c <_vfiprintf_r+0xbec>)
 80064d8:	e457      	b.n	8005d8a <_vfiprintf_r+0x40a>
 80064da:	4603      	mov	r3, r0
 80064dc:	e64f      	b.n	800617e <_vfiprintf_r+0x7fe>
 80064de:	a81c      	add	r0, sp, #112	; 0x70
 80064e0:	2101      	movs	r1, #1
 80064e2:	4662      	mov	r2, ip
 80064e4:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80064e8:	e49e      	b.n	8005e28 <_vfiprintf_r+0x4a8>
 80064ea:	2201      	movs	r2, #1
 80064ec:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 80064f0:	901a      	str	r0, [sp, #104]	; 0x68
 80064f2:	4694      	mov	ip, r2
 80064f4:	921b      	str	r2, [sp, #108]	; 0x6c
 80064f6:	4611      	mov	r1, r2
 80064f8:	a81c      	add	r0, sp, #112	; 0x70
 80064fa:	e46e      	b.n	8005dda <_vfiprintf_r+0x45a>
 80064fc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006500:	e550      	b.n	8005fa4 <_vfiprintf_r+0x624>
 8006502:	9f00      	ldr	r7, [sp, #0]
 8006504:	e73c      	b.n	8006380 <_vfiprintf_r+0xa00>
 8006506:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
 800650a:	f8cd 9004 	str.w	r9, [sp, #4]
 800650e:	9306      	str	r3, [sp, #24]
 8006510:	9404      	str	r4, [sp, #16]
 8006512:	9700      	str	r7, [sp, #0]
 8006514:	4681      	mov	r9, r0
 8006516:	e597      	b.n	8006048 <_vfiprintf_r+0x6c8>
 8006518:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800651c:	e4cf      	b.n	8005ebe <_vfiprintf_r+0x53e>
 800651e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006522:	f7ff bbfb 	b.w	8005d1c <_vfiprintf_r+0x39c>
 8006526:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800652a:	f7ff bba1 	b.w	8005c70 <_vfiprintf_r+0x2f0>
 800652e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8006532:	e50a      	b.n	8005f4a <_vfiprintf_r+0x5ca>
 8006534:	4686      	mov	lr, r0
 8006536:	e696      	b.n	8006266 <_vfiprintf_r+0x8e6>
 8006538:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800653c:	e4aa      	b.n	8005e94 <_vfiprintf_r+0x514>
 800653e:	f101 0c01 	add.w	ip, r1, #1
 8006542:	e6d8      	b.n	80062f6 <_vfiprintf_r+0x976>
 8006544:	4603      	mov	r3, r0
 8006546:	4608      	mov	r0, r1
 8006548:	e5c4      	b.n	80060d4 <_vfiprintf_r+0x754>
 800654a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800654e:	9302      	str	r3, [sp, #8]
 8006550:	f7ff bb38 	b.w	8005bc4 <_vfiprintf_r+0x244>
 8006554:	9d04      	ldr	r5, [sp, #16]
 8006556:	f898 3001 	ldrb.w	r3, [r8, #1]
 800655a:	f855 2b04 	ldr.w	r2, [r5], #4
 800655e:	9504      	str	r5, [sp, #16]
 8006560:	46a0      	mov	r8, r4
 8006562:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8006566:	f7ff ba76 	b.w	8005a56 <_vfiprintf_r+0xd6>
 800656a:	bf00      	nop
 800656c:	0801caa8 	.word	0x0801caa8

08006570 <vfiprintf>:
 8006570:	b410      	push	{r4}
 8006572:	4c04      	ldr	r4, [pc, #16]	; (8006584 <vfiprintf+0x14>)
 8006574:	4613      	mov	r3, r2
 8006576:	460a      	mov	r2, r1
 8006578:	4601      	mov	r1, r0
 800657a:	6820      	ldr	r0, [r4, #0]
 800657c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006580:	f7ff b9fe 	b.w	8005980 <_vfiprintf_r>
 8006584:	20000078 	.word	0x20000078

08006588 <__sbprintf>:
 8006588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658a:	460c      	mov	r4, r1
 800658c:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8006590:	8989      	ldrh	r1, [r1, #12]
 8006592:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006594:	89e5      	ldrh	r5, [r4, #14]
 8006596:	9619      	str	r6, [sp, #100]	; 0x64
 8006598:	f021 0102 	bic.w	r1, r1, #2
 800659c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800659e:	f8ad 500e 	strh.w	r5, [sp, #14]
 80065a2:	2500      	movs	r5, #0
 80065a4:	69e7      	ldr	r7, [r4, #28]
 80065a6:	f8ad 100c 	strh.w	r1, [sp, #12]
 80065aa:	9609      	str	r6, [sp, #36]	; 0x24
 80065ac:	9506      	str	r5, [sp, #24]
 80065ae:	ae1a      	add	r6, sp, #104	; 0x68
 80065b0:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80065b4:	4669      	mov	r1, sp
 80065b6:	9600      	str	r6, [sp, #0]
 80065b8:	9604      	str	r6, [sp, #16]
 80065ba:	9502      	str	r5, [sp, #8]
 80065bc:	9505      	str	r5, [sp, #20]
 80065be:	9707      	str	r7, [sp, #28]
 80065c0:	4606      	mov	r6, r0
 80065c2:	f7ff f9dd 	bl	8005980 <_vfiprintf_r>
 80065c6:	1e05      	subs	r5, r0, #0
 80065c8:	db07      	blt.n	80065da <__sbprintf+0x52>
 80065ca:	4630      	mov	r0, r6
 80065cc:	4669      	mov	r1, sp
 80065ce:	f7fd f981 	bl	80038d4 <_fflush_r>
 80065d2:	2800      	cmp	r0, #0
 80065d4:	bf18      	it	ne
 80065d6:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80065da:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80065de:	065b      	lsls	r3, r3, #25
 80065e0:	d503      	bpl.n	80065ea <__sbprintf+0x62>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e8:	81a3      	strh	r3, [r4, #12]
 80065ea:	4628      	mov	r0, r5
 80065ec:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 80065f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f2:	bf00      	nop

080065f4 <__swbuf_r>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	460d      	mov	r5, r1
 80065f8:	4614      	mov	r4, r2
 80065fa:	4606      	mov	r6, r0
 80065fc:	b110      	cbz	r0, 8006604 <__swbuf_r+0x10>
 80065fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d043      	beq.n	800668c <__swbuf_r+0x98>
 8006604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006608:	69a3      	ldr	r3, [r4, #24]
 800660a:	60a3      	str	r3, [r4, #8]
 800660c:	b291      	uxth	r1, r2
 800660e:	0708      	lsls	r0, r1, #28
 8006610:	d51b      	bpl.n	800664a <__swbuf_r+0x56>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	b1cb      	cbz	r3, 800664a <__swbuf_r+0x56>
 8006616:	b2ed      	uxtb	r5, r5
 8006618:	0489      	lsls	r1, r1, #18
 800661a:	462f      	mov	r7, r5
 800661c:	d522      	bpl.n	8006664 <__swbuf_r+0x70>
 800661e:	6822      	ldr	r2, [r4, #0]
 8006620:	6961      	ldr	r1, [r4, #20]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	4299      	cmp	r1, r3
 8006626:	dd29      	ble.n	800667c <__swbuf_r+0x88>
 8006628:	3301      	adds	r3, #1
 800662a:	68a1      	ldr	r1, [r4, #8]
 800662c:	1c50      	adds	r0, r2, #1
 800662e:	3901      	subs	r1, #1
 8006630:	60a1      	str	r1, [r4, #8]
 8006632:	6020      	str	r0, [r4, #0]
 8006634:	7015      	strb	r5, [r2, #0]
 8006636:	6962      	ldr	r2, [r4, #20]
 8006638:	429a      	cmp	r2, r3
 800663a:	d02a      	beq.n	8006692 <__swbuf_r+0x9e>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	07db      	lsls	r3, r3, #31
 8006640:	d501      	bpl.n	8006646 <__swbuf_r+0x52>
 8006642:	2d0a      	cmp	r5, #10
 8006644:	d025      	beq.n	8006692 <__swbuf_r+0x9e>
 8006646:	4638      	mov	r0, r7
 8006648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800664a:	4621      	mov	r1, r4
 800664c:	4630      	mov	r0, r6
 800664e:	f7fc f81f 	bl	8002690 <__swsetup_r>
 8006652:	bb20      	cbnz	r0, 800669e <__swbuf_r+0xaa>
 8006654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	b291      	uxth	r1, r2
 800665c:	b2ed      	uxtb	r5, r5
 800665e:	0489      	lsls	r1, r1, #18
 8006660:	462f      	mov	r7, r5
 8006662:	d4dc      	bmi.n	800661e <__swbuf_r+0x2a>
 8006664:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800666e:	81a2      	strh	r2, [r4, #12]
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	6661      	str	r1, [r4, #100]	; 0x64
 8006674:	6961      	ldr	r1, [r4, #20]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	4299      	cmp	r1, r3
 800667a:	dcd5      	bgt.n	8006628 <__swbuf_r+0x34>
 800667c:	4621      	mov	r1, r4
 800667e:	4630      	mov	r0, r6
 8006680:	f7fd f928 	bl	80038d4 <_fflush_r>
 8006684:	b958      	cbnz	r0, 800669e <__swbuf_r+0xaa>
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	2301      	movs	r3, #1
 800668a:	e7ce      	b.n	800662a <__swbuf_r+0x36>
 800668c:	f7fd fa28 	bl	8003ae0 <__sinit>
 8006690:	e7b8      	b.n	8006604 <__swbuf_r+0x10>
 8006692:	4621      	mov	r1, r4
 8006694:	4630      	mov	r0, r6
 8006696:	f7fd f91d 	bl	80038d4 <_fflush_r>
 800669a:	2800      	cmp	r0, #0
 800669c:	d0d3      	beq.n	8006646 <__swbuf_r+0x52>
 800669e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80066a2:	e7d0      	b.n	8006646 <__swbuf_r+0x52>

080066a4 <__swbuf>:
 80066a4:	4b02      	ldr	r3, [pc, #8]	; (80066b0 <__swbuf+0xc>)
 80066a6:	460a      	mov	r2, r1
 80066a8:	4601      	mov	r1, r0
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	f7ff bfa2 	b.w	80065f4 <__swbuf_r>
 80066b0:	20000078 	.word	0x20000078

080066b4 <__assert_func>:
 80066b4:	b500      	push	{lr}
 80066b6:	4c0a      	ldr	r4, [pc, #40]	; (80066e0 <__assert_func+0x2c>)
 80066b8:	6826      	ldr	r6, [r4, #0]
 80066ba:	4605      	mov	r5, r0
 80066bc:	b085      	sub	sp, #20
 80066be:	461c      	mov	r4, r3
 80066c0:	68f0      	ldr	r0, [r6, #12]
 80066c2:	b152      	cbz	r2, 80066da <__assert_func+0x26>
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <__assert_func+0x30>)
 80066c6:	9100      	str	r1, [sp, #0]
 80066c8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80066cc:	4906      	ldr	r1, [pc, #24]	; (80066e8 <__assert_func+0x34>)
 80066ce:	462b      	mov	r3, r5
 80066d0:	4622      	mov	r2, r4
 80066d2:	f000 f89d 	bl	8006810 <fiprintf>
 80066d6:	f000 fb57 	bl	8006d88 <abort>
 80066da:	4b04      	ldr	r3, [pc, #16]	; (80066ec <__assert_func+0x38>)
 80066dc:	461a      	mov	r2, r3
 80066de:	e7f2      	b.n	80066c6 <__assert_func+0x12>
 80066e0:	20000078 	.word	0x20000078
 80066e4:	0801cb40 	.word	0x0801cb40
 80066e8:	0801cb50 	.word	0x0801cb50
 80066ec:	0801cb4c 	.word	0x0801cb4c

080066f0 <__assert>:
 80066f0:	b508      	push	{r3, lr}
 80066f2:	4613      	mov	r3, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	f7ff ffdd 	bl	80066b4 <__assert_func>
 80066fa:	bf00      	nop

080066fc <_calloc_r>:
 80066fc:	b510      	push	{r4, lr}
 80066fe:	fb02 f101 	mul.w	r1, r2, r1
 8006702:	f7fd fdbd 	bl	8004280 <_malloc_r>
 8006706:	4604      	mov	r4, r0
 8006708:	b168      	cbz	r0, 8006726 <_calloc_r+0x2a>
 800670a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800670e:	f022 0203 	bic.w	r2, r2, #3
 8006712:	3a04      	subs	r2, #4
 8006714:	2a24      	cmp	r2, #36	; 0x24
 8006716:	d818      	bhi.n	800674a <_calloc_r+0x4e>
 8006718:	2a13      	cmp	r2, #19
 800671a:	d806      	bhi.n	800672a <_calloc_r+0x2e>
 800671c:	4602      	mov	r2, r0
 800671e:	2300      	movs	r3, #0
 8006720:	e9c2 3300 	strd	r3, r3, [r2]
 8006724:	6093      	str	r3, [r2, #8]
 8006726:	4620      	mov	r0, r4
 8006728:	bd10      	pop	{r4, pc}
 800672a:	2300      	movs	r3, #0
 800672c:	2a1b      	cmp	r2, #27
 800672e:	e9c0 3300 	strd	r3, r3, [r0]
 8006732:	d90f      	bls.n	8006754 <_calloc_r+0x58>
 8006734:	2a24      	cmp	r2, #36	; 0x24
 8006736:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800673a:	bf12      	itee	ne
 800673c:	f100 0210 	addne.w	r2, r0, #16
 8006740:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 8006744:	f100 0218 	addeq.w	r2, r0, #24
 8006748:	e7e9      	b.n	800671e <_calloc_r+0x22>
 800674a:	2100      	movs	r1, #0
 800674c:	f7fa f974 	bl	8000a38 <memset>
 8006750:	4620      	mov	r0, r4
 8006752:	bd10      	pop	{r4, pc}
 8006754:	f100 0208 	add.w	r2, r0, #8
 8006758:	e7e1      	b.n	800671e <_calloc_r+0x22>
 800675a:	bf00      	nop

0800675c <_fclose_r>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	b139      	cbz	r1, 8006770 <_fclose_r+0x14>
 8006760:	4605      	mov	r5, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b108      	cbz	r0, 800676a <_fclose_r+0xe>
 8006766:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006768:	b383      	cbz	r3, 80067cc <_fclose_r+0x70>
 800676a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676e:	b913      	cbnz	r3, 8006776 <_fclose_r+0x1a>
 8006770:	2600      	movs	r6, #0
 8006772:	4630      	mov	r0, r6
 8006774:	bd70      	pop	{r4, r5, r6, pc}
 8006776:	4621      	mov	r1, r4
 8006778:	4628      	mov	r0, r5
 800677a:	f7fd f805 	bl	8003788 <__sflush_r>
 800677e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006780:	4606      	mov	r6, r0
 8006782:	b133      	cbz	r3, 8006792 <_fclose_r+0x36>
 8006784:	69e1      	ldr	r1, [r4, #28]
 8006786:	4628      	mov	r0, r5
 8006788:	4798      	blx	r3
 800678a:	2800      	cmp	r0, #0
 800678c:	bfb8      	it	lt
 800678e:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8006792:	89a3      	ldrh	r3, [r4, #12]
 8006794:	061b      	lsls	r3, r3, #24
 8006796:	d420      	bmi.n	80067da <_fclose_r+0x7e>
 8006798:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800679a:	b141      	cbz	r1, 80067ae <_fclose_r+0x52>
 800679c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80067a0:	4299      	cmp	r1, r3
 80067a2:	d002      	beq.n	80067aa <_fclose_r+0x4e>
 80067a4:	4628      	mov	r0, r5
 80067a6:	f7fd fa0b 	bl	8003bc0 <_free_r>
 80067aa:	2300      	movs	r3, #0
 80067ac:	6323      	str	r3, [r4, #48]	; 0x30
 80067ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80067b0:	b121      	cbz	r1, 80067bc <_fclose_r+0x60>
 80067b2:	4628      	mov	r0, r5
 80067b4:	f7fd fa04 	bl	8003bc0 <_free_r>
 80067b8:	2300      	movs	r3, #0
 80067ba:	6463      	str	r3, [r4, #68]	; 0x44
 80067bc:	f7fd f994 	bl	8003ae8 <__sfp_lock_acquire>
 80067c0:	2300      	movs	r3, #0
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	f7fd f992 	bl	8003aec <__sfp_lock_release>
 80067c8:	4630      	mov	r0, r6
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	f7fd f988 	bl	8003ae0 <__sinit>
 80067d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0cb      	beq.n	8006770 <_fclose_r+0x14>
 80067d8:	e7cd      	b.n	8006776 <_fclose_r+0x1a>
 80067da:	6921      	ldr	r1, [r4, #16]
 80067dc:	4628      	mov	r0, r5
 80067de:	f7fd f9ef 	bl	8003bc0 <_free_r>
 80067e2:	e7d9      	b.n	8006798 <_fclose_r+0x3c>

080067e4 <fclose>:
 80067e4:	4b02      	ldr	r3, [pc, #8]	; (80067f0 <fclose+0xc>)
 80067e6:	4601      	mov	r1, r0
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	f7ff bfb7 	b.w	800675c <_fclose_r>
 80067ee:	bf00      	nop
 80067f0:	20000078 	.word	0x20000078

080067f4 <_fiprintf_r>:
 80067f4:	b40c      	push	{r2, r3}
 80067f6:	b500      	push	{lr}
 80067f8:	b083      	sub	sp, #12
 80067fa:	ab04      	add	r3, sp, #16
 80067fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	f7ff f8bd 	bl	8005980 <_vfiprintf_r>
 8006806:	b003      	add	sp, #12
 8006808:	f85d eb04 	ldr.w	lr, [sp], #4
 800680c:	b002      	add	sp, #8
 800680e:	4770      	bx	lr

08006810 <fiprintf>:
 8006810:	b40e      	push	{r1, r2, r3}
 8006812:	b510      	push	{r4, lr}
 8006814:	b083      	sub	sp, #12
 8006816:	ab05      	add	r3, sp, #20
 8006818:	4c06      	ldr	r4, [pc, #24]	; (8006834 <fiprintf+0x24>)
 800681a:	f853 2b04 	ldr.w	r2, [r3], #4
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	4601      	mov	r1, r0
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	f7ff f8ac 	bl	8005980 <_vfiprintf_r>
 8006828:	b003      	add	sp, #12
 800682a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682e:	b003      	add	sp, #12
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000078 	.word	0x20000078

08006838 <__fputwc>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	4680      	mov	r8, r0
 8006840:	4689      	mov	r9, r1
 8006842:	4614      	mov	r4, r2
 8006844:	f000 f8a0 	bl	8006988 <__locale_mb_cur_max>
 8006848:	2801      	cmp	r0, #1
 800684a:	d103      	bne.n	8006854 <__fputwc+0x1c>
 800684c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8006850:	2bfe      	cmp	r3, #254	; 0xfe
 8006852:	d936      	bls.n	80068c2 <__fputwc+0x8a>
 8006854:	464a      	mov	r2, r9
 8006856:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800685a:	a901      	add	r1, sp, #4
 800685c:	4640      	mov	r0, r8
 800685e:	f000 fa3d 	bl	8006cdc <_wcrtomb_r>
 8006862:	1c42      	adds	r2, r0, #1
 8006864:	4606      	mov	r6, r0
 8006866:	d032      	beq.n	80068ce <__fputwc+0x96>
 8006868:	b330      	cbz	r0, 80068b8 <__fputwc+0x80>
 800686a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800686e:	2500      	movs	r5, #0
 8006870:	f10d 0a04 	add.w	sl, sp, #4
 8006874:	e009      	b.n	800688a <__fputwc+0x52>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	6022      	str	r2, [r4, #0]
 800687c:	f883 c000 	strb.w	ip, [r3]
 8006880:	3501      	adds	r5, #1
 8006882:	42b5      	cmp	r5, r6
 8006884:	d218      	bcs.n	80068b8 <__fputwc+0x80>
 8006886:	f815 c00a 	ldrb.w	ip, [r5, sl]
 800688a:	68a3      	ldr	r3, [r4, #8]
 800688c:	3b01      	subs	r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	60a3      	str	r3, [r4, #8]
 8006892:	daf0      	bge.n	8006876 <__fputwc+0x3e>
 8006894:	69a7      	ldr	r7, [r4, #24]
 8006896:	42bb      	cmp	r3, r7
 8006898:	4661      	mov	r1, ip
 800689a:	4622      	mov	r2, r4
 800689c:	4640      	mov	r0, r8
 800689e:	db02      	blt.n	80068a6 <__fputwc+0x6e>
 80068a0:	f1bc 0f0a 	cmp.w	ip, #10
 80068a4:	d1e7      	bne.n	8006876 <__fputwc+0x3e>
 80068a6:	f7ff fea5 	bl	80065f4 <__swbuf_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d1e8      	bne.n	8006880 <__fputwc+0x48>
 80068ae:	4606      	mov	r6, r0
 80068b0:	4630      	mov	r0, r6
 80068b2:	b002      	add	sp, #8
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	464e      	mov	r6, r9
 80068ba:	4630      	mov	r0, r6
 80068bc:	b002      	add	sp, #8
 80068be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c2:	fa5f fc89 	uxtb.w	ip, r9
 80068c6:	4606      	mov	r6, r0
 80068c8:	f88d c004 	strb.w	ip, [sp, #4]
 80068cc:	e7cf      	b.n	800686e <__fputwc+0x36>
 80068ce:	89a3      	ldrh	r3, [r4, #12]
 80068d0:	4630      	mov	r0, r6
 80068d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	b002      	add	sp, #8
 80068da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068de:	bf00      	nop

080068e0 <_fputwc_r>:
 80068e0:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80068e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80068e8:	d10b      	bne.n	8006902 <_fputwc_r+0x22>
 80068ea:	b410      	push	{r4}
 80068ec:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80068ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068f2:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80068f6:	6654      	str	r4, [r2, #100]	; 0x64
 80068f8:	8193      	strh	r3, [r2, #12]
 80068fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068fe:	f7ff bf9b 	b.w	8006838 <__fputwc>
 8006902:	f7ff bf99 	b.w	8006838 <__fputwc>
 8006906:	bf00      	nop

08006908 <fputwc>:
 8006908:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <fputwc+0x3c>)
 800690a:	b570      	push	{r4, r5, r6, lr}
 800690c:	681d      	ldr	r5, [r3, #0]
 800690e:	4606      	mov	r6, r0
 8006910:	460c      	mov	r4, r1
 8006912:	b10d      	cbz	r5, 8006918 <fputwc+0x10>
 8006914:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006916:	b18b      	cbz	r3, 800693c <fputwc+0x34>
 8006918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800691c:	049a      	lsls	r2, r3, #18
 800691e:	d406      	bmi.n	800692e <fputwc+0x26>
 8006920:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800692a:	81a3      	strh	r3, [r4, #12]
 800692c:	6662      	str	r2, [r4, #100]	; 0x64
 800692e:	4622      	mov	r2, r4
 8006930:	4631      	mov	r1, r6
 8006932:	4628      	mov	r0, r5
 8006934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006938:	f7ff bf7e 	b.w	8006838 <__fputwc>
 800693c:	4628      	mov	r0, r5
 800693e:	f7fd f8cf 	bl	8003ae0 <__sinit>
 8006942:	e7e9      	b.n	8006918 <fputwc+0x10>
 8006944:	20000078 	.word	0x20000078

08006948 <_setlocale_r>:
 8006948:	b142      	cbz	r2, 800695c <_setlocale_r+0x14>
 800694a:	b510      	push	{r4, lr}
 800694c:	490b      	ldr	r1, [pc, #44]	; (800697c <_setlocale_r+0x34>)
 800694e:	4610      	mov	r0, r2
 8006950:	4614      	mov	r4, r2
 8006952:	f000 f859 	bl	8006a08 <strcmp>
 8006956:	b918      	cbnz	r0, 8006960 <_setlocale_r+0x18>
 8006958:	4809      	ldr	r0, [pc, #36]	; (8006980 <_setlocale_r+0x38>)
 800695a:	bd10      	pop	{r4, pc}
 800695c:	4808      	ldr	r0, [pc, #32]	; (8006980 <_setlocale_r+0x38>)
 800695e:	4770      	bx	lr
 8006960:	4907      	ldr	r1, [pc, #28]	; (8006980 <_setlocale_r+0x38>)
 8006962:	4620      	mov	r0, r4
 8006964:	f000 f850 	bl	8006a08 <strcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0f5      	beq.n	8006958 <_setlocale_r+0x10>
 800696c:	4620      	mov	r0, r4
 800696e:	4905      	ldr	r1, [pc, #20]	; (8006984 <_setlocale_r+0x3c>)
 8006970:	f000 f84a 	bl	8006a08 <strcmp>
 8006974:	2800      	cmp	r0, #0
 8006976:	d0ef      	beq.n	8006958 <_setlocale_r+0x10>
 8006978:	2000      	movs	r0, #0
 800697a:	bd10      	pop	{r4, pc}
 800697c:	0801cb84 	.word	0x0801cb84
 8006980:	0801cb80 	.word	0x0801cb80
 8006984:	0801cb4c 	.word	0x0801cb4c

08006988 <__locale_mb_cur_max>:
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <__locale_mb_cur_max+0x8>)
 800698a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800698e:	4770      	bx	lr
 8006990:	200008b8 	.word	0x200008b8

08006994 <setlocale>:
 8006994:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <setlocale+0xc>)
 8006996:	460a      	mov	r2, r1
 8006998:	4601      	mov	r1, r0
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	f7ff bfd4 	b.w	8006948 <_setlocale_r>
 80069a0:	20000078 	.word	0x20000078

080069a4 <_mbtowc_r>:
 80069a4:	b410      	push	{r4}
 80069a6:	4c03      	ldr	r4, [pc, #12]	; (80069b4 <_mbtowc_r+0x10>)
 80069a8:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80069ac:	46a4      	mov	ip, r4
 80069ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b2:	4760      	bx	ip
 80069b4:	200008b8 	.word	0x200008b8

080069b8 <__ascii_mbtowc>:
 80069b8:	b082      	sub	sp, #8
 80069ba:	b149      	cbz	r1, 80069d0 <__ascii_mbtowc+0x18>
 80069bc:	b15a      	cbz	r2, 80069d6 <__ascii_mbtowc+0x1e>
 80069be:	b16b      	cbz	r3, 80069dc <__ascii_mbtowc+0x24>
 80069c0:	7813      	ldrb	r3, [r2, #0]
 80069c2:	600b      	str	r3, [r1, #0]
 80069c4:	7812      	ldrb	r2, [r2, #0]
 80069c6:	1c10      	adds	r0, r2, #0
 80069c8:	bf18      	it	ne
 80069ca:	2001      	movne	r0, #1
 80069cc:	b002      	add	sp, #8
 80069ce:	4770      	bx	lr
 80069d0:	a901      	add	r1, sp, #4
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	d1f3      	bne.n	80069be <__ascii_mbtowc+0x6>
 80069d6:	4610      	mov	r0, r2
 80069d8:	b002      	add	sp, #8
 80069da:	4770      	bx	lr
 80069dc:	f06f 0001 	mvn.w	r0, #1
 80069e0:	e7f4      	b.n	80069cc <__ascii_mbtowc+0x14>
 80069e2:	bf00      	nop
	...
 8006a00:	eba2 0003 	sub.w	r0, r2, r3
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop

08006a08 <strcmp>:
 8006a08:	7802      	ldrb	r2, [r0, #0]
 8006a0a:	780b      	ldrb	r3, [r1, #0]
 8006a0c:	2a01      	cmp	r2, #1
 8006a0e:	bf28      	it	cs
 8006a10:	429a      	cmpcs	r2, r3
 8006a12:	d1f5      	bne.n	8006a00 <__ascii_mbtowc+0x48>
 8006a14:	e96d 4504 	strd	r4, r5, [sp, #-16]!
 8006a18:	ea40 0401 	orr.w	r4, r0, r1
 8006a1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006a20:	f06f 0c00 	mvn.w	ip, #0
 8006a24:	ea4f 7244 	mov.w	r2, r4, lsl #29
 8006a28:	b312      	cbz	r2, 8006a70 <strcmp+0x68>
 8006a2a:	ea80 0401 	eor.w	r4, r0, r1
 8006a2e:	f014 0f07 	tst.w	r4, #7
 8006a32:	d16a      	bne.n	8006b0a <strcmp+0x102>
 8006a34:	f000 0407 	and.w	r4, r0, #7
 8006a38:	f020 0007 	bic.w	r0, r0, #7
 8006a3c:	f004 0503 	and.w	r5, r4, #3
 8006a40:	f021 0107 	bic.w	r1, r1, #7
 8006a44:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8006a48:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8006a4c:	f014 0f04 	tst.w	r4, #4
 8006a50:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8006a54:	fa0c f405 	lsl.w	r4, ip, r5
 8006a58:	ea62 0204 	orn	r2, r2, r4
 8006a5c:	ea66 0604 	orn	r6, r6, r4
 8006a60:	d00a      	beq.n	8006a78 <strcmp+0x70>
 8006a62:	ea63 0304 	orn	r3, r3, r4
 8006a66:	4662      	mov	r2, ip
 8006a68:	ea67 0704 	orn	r7, r7, r4
 8006a6c:	4666      	mov	r6, ip
 8006a6e:	e003      	b.n	8006a78 <strcmp+0x70>
 8006a70:	e8f0 2304 	ldrd	r2, r3, [r0], #16
 8006a74:	e8f1 6704 	ldrd	r6, r7, [r1], #16
 8006a78:	fa82 f54c 	uadd8	r5, r2, ip
 8006a7c:	ea82 0406 	eor.w	r4, r2, r6
 8006a80:	faa4 f48c 	sel	r4, r4, ip
 8006a84:	bb6c      	cbnz	r4, 8006ae2 <strcmp+0xda>
 8006a86:	fa83 f54c 	uadd8	r5, r3, ip
 8006a8a:	ea83 0507 	eor.w	r5, r3, r7
 8006a8e:	faa5 f58c 	sel	r5, r5, ip
 8006a92:	b995      	cbnz	r5, 8006aba <strcmp+0xb2>
 8006a94:	e950 2302 	ldrd	r2, r3, [r0, #-8]
 8006a98:	e951 6702 	ldrd	r6, r7, [r1, #-8]
 8006a9c:	fa82 f54c 	uadd8	r5, r2, ip
 8006aa0:	ea82 0406 	eor.w	r4, r2, r6
 8006aa4:	faa4 f48c 	sel	r4, r4, ip
 8006aa8:	fa83 f54c 	uadd8	r5, r3, ip
 8006aac:	ea83 0507 	eor.w	r5, r3, r7
 8006ab0:	faa5 f58c 	sel	r5, r5, ip
 8006ab4:	4325      	orrs	r5, r4
 8006ab6:	d0db      	beq.n	8006a70 <strcmp+0x68>
 8006ab8:	b99c      	cbnz	r4, 8006ae2 <strcmp+0xda>
 8006aba:	ba2d      	rev	r5, r5
 8006abc:	fab5 f485 	clz	r4, r5
 8006ac0:	f024 0407 	bic.w	r4, r4, #7
 8006ac4:	fa27 f104 	lsr.w	r1, r7, r4
 8006ac8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006acc:	fa23 f304 	lsr.w	r3, r3, r4
 8006ad0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8006ad4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006ad8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006adc:	eba0 0001 	sub.w	r0, r0, r1
 8006ae0:	4770      	bx	lr
 8006ae2:	ba24      	rev	r4, r4
 8006ae4:	fab4 f484 	clz	r4, r4
 8006ae8:	f024 0407 	bic.w	r4, r4, #7
 8006aec:	fa26 f104 	lsr.w	r1, r6, r4
 8006af0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006af4:	fa22 f204 	lsr.w	r2, r2, r4
 8006af8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8006afc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006b00:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006b04:	eba0 0001 	sub.w	r0, r0, r1
 8006b08:	4770      	bx	lr
 8006b0a:	f014 0f03 	tst.w	r4, #3
 8006b0e:	d13c      	bne.n	8006b8a <strcmp+0x182>
 8006b10:	f010 0403 	ands.w	r4, r0, #3
 8006b14:	d128      	bne.n	8006b68 <strcmp+0x160>
 8006b16:	f850 2b08 	ldr.w	r2, [r0], #8
 8006b1a:	f851 3b08 	ldr.w	r3, [r1], #8
 8006b1e:	fa82 f54c 	uadd8	r5, r2, ip
 8006b22:	ea82 0503 	eor.w	r5, r2, r3
 8006b26:	faa5 f58c 	sel	r5, r5, ip
 8006b2a:	b95d      	cbnz	r5, 8006b44 <strcmp+0x13c>
 8006b2c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b34:	fa82 f54c 	uadd8	r5, r2, ip
 8006b38:	ea82 0503 	eor.w	r5, r2, r3
 8006b3c:	faa5 f58c 	sel	r5, r5, ip
 8006b40:	2d00      	cmp	r5, #0
 8006b42:	d0e8      	beq.n	8006b16 <strcmp+0x10e>
 8006b44:	ba2d      	rev	r5, r5
 8006b46:	fab5 f485 	clz	r4, r5
 8006b4a:	f024 0407 	bic.w	r4, r4, #7
 8006b4e:	fa23 f104 	lsr.w	r1, r3, r4
 8006b52:	fa22 f204 	lsr.w	r2, r2, r4
 8006b56:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8006b5a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006b5e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006b62:	eba0 0001 	sub.w	r0, r0, r1
 8006b66:	4770      	bx	lr
 8006b68:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8006b6c:	f020 0003 	bic.w	r0, r0, #3
 8006b70:	f850 2b08 	ldr.w	r2, [r0], #8
 8006b74:	f021 0103 	bic.w	r1, r1, #3
 8006b78:	f851 3b08 	ldr.w	r3, [r1], #8
 8006b7c:	fa0c f404 	lsl.w	r4, ip, r4
 8006b80:	ea62 0204 	orn	r2, r2, r4
 8006b84:	ea63 0304 	orn	r3, r3, r4
 8006b88:	e7c9      	b.n	8006b1e <strcmp+0x116>
 8006b8a:	f010 0403 	ands.w	r4, r0, #3
 8006b8e:	d01a      	beq.n	8006bc6 <strcmp+0x1be>
 8006b90:	eba1 0104 	sub.w	r1, r1, r4
 8006b94:	f020 0003 	bic.w	r0, r0, #3
 8006b98:	07e4      	lsls	r4, r4, #31
 8006b9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006b9e:	d006      	beq.n	8006bae <strcmp+0x1a6>
 8006ba0:	d20f      	bcs.n	8006bc2 <strcmp+0x1ba>
 8006ba2:	788b      	ldrb	r3, [r1, #2]
 8006ba4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
 8006ba8:	1ae4      	subs	r4, r4, r3
 8006baa:	d106      	bne.n	8006bba <strcmp+0x1b2>
 8006bac:	b12b      	cbz	r3, 8006bba <strcmp+0x1b2>
 8006bae:	78cb      	ldrb	r3, [r1, #3]
 8006bb0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
 8006bb4:	1ae4      	subs	r4, r4, r3
 8006bb6:	d100      	bne.n	8006bba <strcmp+0x1b2>
 8006bb8:	b91b      	cbnz	r3, 8006bc2 <strcmp+0x1ba>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f85d 4b10 	ldr.w	r4, [sp], #16
 8006bc0:	4770      	bx	lr
 8006bc2:	f101 0104 	add.w	r1, r1, #4
 8006bc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bca:	07cc      	lsls	r4, r1, #31
 8006bcc:	f021 0103 	bic.w	r1, r1, #3
 8006bd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8006bd4:	d848      	bhi.n	8006c68 <strcmp+0x260>
 8006bd6:	d224      	bcs.n	8006c22 <strcmp+0x21a>
 8006bd8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
 8006bdc:	fa82 f54c 	uadd8	r5, r2, ip
 8006be0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
 8006be4:	faa5 f58c 	sel	r5, r5, ip
 8006be8:	d10a      	bne.n	8006c00 <strcmp+0x1f8>
 8006bea:	b965      	cbnz	r5, 8006c06 <strcmp+0x1fe>
 8006bec:	f851 3b04 	ldr.w	r3, [r1], #4
 8006bf0:	ea84 0402 	eor.w	r4, r4, r2
 8006bf4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
 8006bf8:	d10e      	bne.n	8006c18 <strcmp+0x210>
 8006bfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bfe:	e7eb      	b.n	8006bd8 <strcmp+0x1d0>
 8006c00:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8006c04:	e055      	b.n	8006cb2 <strcmp+0x2aa>
 8006c06:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8006c0a:	d14d      	bne.n	8006ca8 <strcmp+0x2a0>
 8006c0c:	7808      	ldrb	r0, [r1, #0]
 8006c0e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006c12:	f1c0 0000 	rsb	r0, r0, #0
 8006c16:	4770      	bx	lr
 8006c18:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8006c1c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8006c20:	e047      	b.n	8006cb2 <strcmp+0x2aa>
 8006c22:	ea02 441c 	and.w	r4, r2, ip, lsr #16
 8006c26:	fa82 f54c 	uadd8	r5, r2, ip
 8006c2a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
 8006c2e:	faa5 f58c 	sel	r5, r5, ip
 8006c32:	d10a      	bne.n	8006c4a <strcmp+0x242>
 8006c34:	b965      	cbnz	r5, 8006c50 <strcmp+0x248>
 8006c36:	f851 3b04 	ldr.w	r3, [r1], #4
 8006c3a:	ea84 0402 	eor.w	r4, r4, r2
 8006c3e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
 8006c42:	d10c      	bne.n	8006c5e <strcmp+0x256>
 8006c44:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c48:	e7eb      	b.n	8006c22 <strcmp+0x21a>
 8006c4a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8006c4e:	e030      	b.n	8006cb2 <strcmp+0x2aa>
 8006c50:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
 8006c54:	d128      	bne.n	8006ca8 <strcmp+0x2a0>
 8006c56:	880b      	ldrh	r3, [r1, #0]
 8006c58:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006c5c:	e029      	b.n	8006cb2 <strcmp+0x2aa>
 8006c5e:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8006c62:	ea03 431c 	and.w	r3, r3, ip, lsr #16
 8006c66:	e024      	b.n	8006cb2 <strcmp+0x2aa>
 8006c68:	f002 04ff 	and.w	r4, r2, #255	; 0xff
 8006c6c:	fa82 f54c 	uadd8	r5, r2, ip
 8006c70:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
 8006c74:	faa5 f58c 	sel	r5, r5, ip
 8006c78:	d10a      	bne.n	8006c90 <strcmp+0x288>
 8006c7a:	b965      	cbnz	r5, 8006c96 <strcmp+0x28e>
 8006c7c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006c80:	ea84 0402 	eor.w	r4, r4, r2
 8006c84:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
 8006c88:	d109      	bne.n	8006c9e <strcmp+0x296>
 8006c8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c8e:	e7eb      	b.n	8006c68 <strcmp+0x260>
 8006c90:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8006c94:	e00d      	b.n	8006cb2 <strcmp+0x2aa>
 8006c96:	f015 0fff 	tst.w	r5, #255	; 0xff
 8006c9a:	d105      	bne.n	8006ca8 <strcmp+0x2a0>
 8006c9c:	680b      	ldr	r3, [r1, #0]
 8006c9e:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8006ca2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ca6:	e004      	b.n	8006cb2 <strcmp+0x2aa>
 8006ca8:	f04f 0000 	mov.w	r0, #0
 8006cac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006cb0:	4770      	bx	lr
 8006cb2:	ba12      	rev	r2, r2
 8006cb4:	ba1b      	rev	r3, r3
 8006cb6:	fa82 f44c 	uadd8	r4, r2, ip
 8006cba:	ea82 0403 	eor.w	r4, r2, r3
 8006cbe:	faa4 f58c 	sel	r5, r4, ip
 8006cc2:	fab5 f485 	clz	r4, r5
 8006cc6:	fa02 f204 	lsl.w	r2, r2, r4
 8006cca:	fa03 f304 	lsl.w	r3, r3, r4
 8006cce:	ea4f 6012 	mov.w	r0, r2, lsr #24
 8006cd2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
 8006cd6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
 8006cda:	4770      	bx	lr

08006cdc <_wcrtomb_r>:
 8006cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cde:	4c0b      	ldr	r4, [pc, #44]	; (8006d0c <_wcrtomb_r+0x30>)
 8006ce0:	b085      	sub	sp, #20
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8006ce8:	461f      	mov	r7, r3
 8006cea:	b121      	cbz	r1, 8006cf6 <_wcrtomb_r+0x1a>
 8006cec:	47a0      	blx	r4
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d006      	beq.n	8006d00 <_wcrtomb_r+0x24>
 8006cf2:	b005      	add	sp, #20
 8006cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	a901      	add	r1, sp, #4
 8006cfa:	47a0      	blx	r4
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	d1f8      	bne.n	8006cf2 <_wcrtomb_r+0x16>
 8006d00:	2200      	movs	r2, #0
 8006d02:	238a      	movs	r3, #138	; 0x8a
 8006d04:	603a      	str	r2, [r7, #0]
 8006d06:	6033      	str	r3, [r6, #0]
 8006d08:	b005      	add	sp, #20
 8006d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0c:	200008b8 	.word	0x200008b8

08006d10 <wcrtomb>:
 8006d10:	b570      	push	{r4, r5, r6, lr}
 8006d12:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <wcrtomb+0x40>)
 8006d14:	4c0f      	ldr	r4, [pc, #60]	; (8006d54 <wcrtomb+0x44>)
 8006d16:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
 8006d1a:	6824      	ldr	r4, [r4, #0]
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	4615      	mov	r5, r2
 8006d20:	b140      	cbz	r0, 8006d34 <wcrtomb+0x24>
 8006d22:	460a      	mov	r2, r1
 8006d24:	462b      	mov	r3, r5
 8006d26:	4601      	mov	r1, r0
 8006d28:	4620      	mov	r0, r4
 8006d2a:	47b0      	blx	r6
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d008      	beq.n	8006d42 <wcrtomb+0x32>
 8006d30:	b004      	add	sp, #16
 8006d32:	bd70      	pop	{r4, r5, r6, pc}
 8006d34:	4602      	mov	r2, r0
 8006d36:	462b      	mov	r3, r5
 8006d38:	a901      	add	r1, sp, #4
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	47b0      	blx	r6
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d1f6      	bne.n	8006d30 <wcrtomb+0x20>
 8006d42:	2200      	movs	r2, #0
 8006d44:	238a      	movs	r3, #138	; 0x8a
 8006d46:	602a      	str	r2, [r5, #0]
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	b004      	add	sp, #16
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
 8006d4e:	bf00      	nop
 8006d50:	200008b8 	.word	0x200008b8
 8006d54:	20000078 	.word	0x20000078

08006d58 <_wctomb_r>:
 8006d58:	b410      	push	{r4}
 8006d5a:	4c03      	ldr	r4, [pc, #12]	; (8006d68 <_wctomb_r+0x10>)
 8006d5c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8006d60:	46a4      	mov	ip, r4
 8006d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d66:	4760      	bx	ip
 8006d68:	200008b8 	.word	0x200008b8

08006d6c <__ascii_wctomb>:
 8006d6c:	b149      	cbz	r1, 8006d82 <__ascii_wctomb+0x16>
 8006d6e:	2aff      	cmp	r2, #255	; 0xff
 8006d70:	d802      	bhi.n	8006d78 <__ascii_wctomb+0xc>
 8006d72:	700a      	strb	r2, [r1, #0]
 8006d74:	2001      	movs	r0, #1
 8006d76:	4770      	bx	lr
 8006d78:	238a      	movs	r3, #138	; 0x8a
 8006d7a:	6003      	str	r3, [r0, #0]
 8006d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d80:	4770      	bx	lr
 8006d82:	4608      	mov	r0, r1
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop

08006d88 <abort>:
 8006d88:	b508      	push	{r3, lr}
 8006d8a:	2006      	movs	r0, #6
 8006d8c:	f000 f890 	bl	8006eb0 <raise>
 8006d90:	2001      	movs	r0, #1
 8006d92:	f000 fee5 	bl	8007b60 <_exit>
 8006d96:	bf00      	nop

08006d98 <_init_signal_r.part.0>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	2180      	movs	r1, #128	; 0x80
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	f7fd fa6f 	bl	8004280 <_malloc_r>
 8006da2:	f8c4 02dc 	str.w	r0, [r4, #732]	; 0x2dc
 8006da6:	b140      	cbz	r0, 8006dba <_init_signal_r.part.0+0x22>
 8006da8:	1f03      	subs	r3, r0, #4
 8006daa:	2200      	movs	r2, #0
 8006dac:	307c      	adds	r0, #124	; 0x7c
 8006dae:	f843 2f04 	str.w	r2, [r3, #4]!
 8006db2:	4283      	cmp	r3, r0
 8006db4:	d1fb      	bne.n	8006dae <_init_signal_r.part.0+0x16>
 8006db6:	2000      	movs	r0, #0
 8006db8:	bd10      	pop	{r4, pc}
 8006dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <_init_signal_r>:
 8006dc0:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8006dc4:	b10b      	cbz	r3, 8006dca <_init_signal_r+0xa>
 8006dc6:	2000      	movs	r0, #0
 8006dc8:	4770      	bx	lr
 8006dca:	e7e5      	b.n	8006d98 <_init_signal_r.part.0>

08006dcc <_signal_r>:
 8006dcc:	291f      	cmp	r1, #31
 8006dce:	b570      	push	{r4, r5, r6, lr}
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	d809      	bhi.n	8006de8 <_signal_r+0x1c>
 8006dd4:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8006dd8:	4616      	mov	r6, r2
 8006dda:	460c      	mov	r4, r1
 8006ddc:	b14b      	cbz	r3, 8006df2 <_signal_r+0x26>
 8006dde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006de2:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	2216      	movs	r2, #22
 8006dea:	6002      	str	r2, [r0, #0]
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	f7ff ffd1 	bl	8006d98 <_init_signal_r.part.0>
 8006df6:	b910      	cbnz	r0, 8006dfe <_signal_r+0x32>
 8006df8:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 8006dfc:	e7ef      	b.n	8006dde <_signal_r+0x12>
 8006dfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e02:	bd70      	pop	{r4, r5, r6, pc}

08006e04 <_raise_r>:
 8006e04:	291f      	cmp	r1, #31
 8006e06:	b538      	push	{r3, r4, r5, lr}
 8006e08:	d822      	bhi.n	8006e50 <_raise_r+0x4c>
 8006e0a:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 8006e0e:	4605      	mov	r5, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	b16a      	cbz	r2, 8006e30 <_raise_r+0x2c>
 8006e14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e18:	b153      	cbz	r3, 8006e30 <_raise_r+0x2c>
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d016      	beq.n	8006e4c <_raise_r+0x48>
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	d010      	beq.n	8006e44 <_raise_r+0x40>
 8006e22:	2500      	movs	r5, #0
 8006e24:	4620      	mov	r0, r4
 8006e26:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
 8006e2a:	4798      	blx	r3
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 f873 	bl	8006f1c <_getpid_r>
 8006e36:	4622      	mov	r2, r4
 8006e38:	4601      	mov	r1, r0
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e40:	f000 b858 	b.w	8006ef4 <_kill_r>
 8006e44:	2316      	movs	r3, #22
 8006e46:	6003      	str	r3, [r0, #0]
 8006e48:	2001      	movs	r0, #1
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	2000      	movs	r0, #0
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	2316      	movs	r3, #22
 8006e52:	6003      	str	r3, [r0, #0]
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	bf00      	nop

08006e5c <__sigtramp_r>:
 8006e5c:	291f      	cmp	r1, #31
 8006e5e:	d823      	bhi.n	8006ea8 <__sigtramp_r+0x4c>
 8006e60:	b538      	push	{r3, r4, r5, lr}
 8006e62:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8006e66:	4605      	mov	r5, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	b183      	cbz	r3, 8006e8e <__sigtramp_r+0x32>
 8006e6c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8006e70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006e74:	b14a      	cbz	r2, 8006e8a <__sigtramp_r+0x2e>
 8006e76:	1c51      	adds	r1, r2, #1
 8006e78:	d011      	beq.n	8006e9e <__sigtramp_r+0x42>
 8006e7a:	2a01      	cmp	r2, #1
 8006e7c:	d00d      	beq.n	8006e9a <__sigtramp_r+0x3e>
 8006e7e:	2500      	movs	r5, #0
 8006e80:	4620      	mov	r0, r4
 8006e82:	601d      	str	r5, [r3, #0]
 8006e84:	4790      	blx	r2
 8006e86:	4628      	mov	r0, r5
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	f7ff ff83 	bl	8006d98 <_init_signal_r.part.0>
 8006e92:	b930      	cbnz	r0, 8006ea2 <__sigtramp_r+0x46>
 8006e94:	f8d5 32dc 	ldr.w	r3, [r5, #732]	; 0x2dc
 8006e98:	e7e8      	b.n	8006e6c <__sigtramp_r+0x10>
 8006e9a:	2003      	movs	r0, #3
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
 8006e9e:	2002      	movs	r0, #2
 8006ea0:	bd38      	pop	{r3, r4, r5, pc}
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop

08006eb0 <raise>:
 8006eb0:	4b02      	ldr	r3, [pc, #8]	; (8006ebc <raise+0xc>)
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	f7ff bfa5 	b.w	8006e04 <_raise_r>
 8006eba:	bf00      	nop
 8006ebc:	20000078 	.word	0x20000078

08006ec0 <signal>:
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <signal+0xc>)
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	f7ff bf80 	b.w	8006dcc <_signal_r>
 8006ecc:	20000078 	.word	0x20000078

08006ed0 <_init_signal>:
 8006ed0:	4b03      	ldr	r3, [pc, #12]	; (8006ee0 <_init_signal+0x10>)
 8006ed2:	6818      	ldr	r0, [r3, #0]
 8006ed4:	f8d0 32dc 	ldr.w	r3, [r0, #732]	; 0x2dc
 8006ed8:	b10b      	cbz	r3, 8006ede <_init_signal+0xe>
 8006eda:	2000      	movs	r0, #0
 8006edc:	4770      	bx	lr
 8006ede:	e75b      	b.n	8006d98 <_init_signal_r.part.0>
 8006ee0:	20000078 	.word	0x20000078

08006ee4 <__sigtramp>:
 8006ee4:	4b02      	ldr	r3, [pc, #8]	; (8006ef0 <__sigtramp+0xc>)
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	6818      	ldr	r0, [r3, #0]
 8006eea:	f7ff bfb7 	b.w	8006e5c <__sigtramp_r>
 8006eee:	bf00      	nop
 8006ef0:	20000078 	.word	0x20000078

08006ef4 <_kill_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4c07      	ldr	r4, [pc, #28]	; (8006f18 <_kill_r+0x24>)
 8006efa:	4605      	mov	r5, r0
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	2300      	movs	r3, #0
 8006f02:	6023      	str	r3, [r4, #0]
 8006f04:	f000 fe24 	bl	8007b50 <_kill>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d000      	beq.n	8006f0e <_kill_r+0x1a>
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0fb      	beq.n	8006f0c <_kill_r+0x18>
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	bd38      	pop	{r3, r4, r5, pc}
 8006f18:	20001f04 	.word	0x20001f04

08006f1c <_getpid_r>:
 8006f1c:	f000 be10 	b.w	8007b40 <_getpid>

08006f20 <__aeabi_drsub>:
 8006f20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006f24:	e002      	b.n	8006f2c <__adddf3>
 8006f26:	bf00      	nop

08006f28 <__aeabi_dsub>:
 8006f28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006f2c <__adddf3>:
 8006f2c:	b530      	push	{r4, r5, lr}
 8006f2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006f32:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8006f36:	ea94 0f05 	teq	r4, r5
 8006f3a:	bf08      	it	eq
 8006f3c:	ea90 0f02 	teqeq	r0, r2
 8006f40:	bf1f      	itttt	ne
 8006f42:	ea54 0c00 	orrsne.w	ip, r4, r0
 8006f46:	ea55 0c02 	orrsne.w	ip, r5, r2
 8006f4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006f4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006f52:	f000 80e2 	beq.w	800711a <__adddf3+0x1ee>
 8006f56:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8006f5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006f5e:	bfb8      	it	lt
 8006f60:	426d      	neglt	r5, r5
 8006f62:	dd0c      	ble.n	8006f7e <__adddf3+0x52>
 8006f64:	442c      	add	r4, r5
 8006f66:	ea80 0202 	eor.w	r2, r0, r2
 8006f6a:	ea81 0303 	eor.w	r3, r1, r3
 8006f6e:	ea82 0000 	eor.w	r0, r2, r0
 8006f72:	ea83 0101 	eor.w	r1, r3, r1
 8006f76:	ea80 0202 	eor.w	r2, r0, r2
 8006f7a:	ea81 0303 	eor.w	r3, r1, r3
 8006f7e:	2d36      	cmp	r5, #54	; 0x36
 8006f80:	bf88      	it	hi
 8006f82:	bd30      	pophi	{r4, r5, pc}
 8006f84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006f88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006f90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006f94:	d002      	beq.n	8006f9c <__adddf3+0x70>
 8006f96:	4240      	negs	r0, r0
 8006f98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006f9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006fa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006fa4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006fa8:	d002      	beq.n	8006fb0 <__adddf3+0x84>
 8006faa:	4252      	negs	r2, r2
 8006fac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006fb0:	ea94 0f05 	teq	r4, r5
 8006fb4:	f000 80a7 	beq.w	8007106 <__adddf3+0x1da>
 8006fb8:	f1a4 0401 	sub.w	r4, r4, #1
 8006fbc:	f1d5 0e20 	rsbs	lr, r5, #32
 8006fc0:	db0d      	blt.n	8006fde <__adddf3+0xb2>
 8006fc2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006fc6:	fa22 f205 	lsr.w	r2, r2, r5
 8006fca:	1880      	adds	r0, r0, r2
 8006fcc:	f141 0100 	adc.w	r1, r1, #0
 8006fd0:	fa03 f20e 	lsl.w	r2, r3, lr
 8006fd4:	1880      	adds	r0, r0, r2
 8006fd6:	fa43 f305 	asr.w	r3, r3, r5
 8006fda:	4159      	adcs	r1, r3
 8006fdc:	e00e      	b.n	8006ffc <__adddf3+0xd0>
 8006fde:	f1a5 0520 	sub.w	r5, r5, #32
 8006fe2:	f10e 0e20 	add.w	lr, lr, #32
 8006fe6:	2a01      	cmp	r2, #1
 8006fe8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006fec:	bf28      	it	cs
 8006fee:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006ff2:	fa43 f305 	asr.w	r3, r3, r5
 8006ff6:	18c0      	adds	r0, r0, r3
 8006ff8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006ffc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007000:	d507      	bpl.n	8007012 <__adddf3+0xe6>
 8007002:	f04f 0e00 	mov.w	lr, #0
 8007006:	f1dc 0c00 	rsbs	ip, ip, #0
 800700a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800700e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007012:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007016:	d31b      	bcc.n	8007050 <__adddf3+0x124>
 8007018:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800701c:	d30c      	bcc.n	8007038 <__adddf3+0x10c>
 800701e:	0849      	lsrs	r1, r1, #1
 8007020:	ea5f 0030 	movs.w	r0, r0, rrx
 8007024:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007028:	f104 0401 	add.w	r4, r4, #1
 800702c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007030:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007034:	f080 809a 	bcs.w	800716c <__adddf3+0x240>
 8007038:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800703c:	bf08      	it	eq
 800703e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007042:	f150 0000 	adcs.w	r0, r0, #0
 8007046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800704a:	ea41 0105 	orr.w	r1, r1, r5
 800704e:	bd30      	pop	{r4, r5, pc}
 8007050:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007054:	4140      	adcs	r0, r0
 8007056:	eb41 0101 	adc.w	r1, r1, r1
 800705a:	3c01      	subs	r4, #1
 800705c:	bf28      	it	cs
 800705e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007062:	d2e9      	bcs.n	8007038 <__adddf3+0x10c>
 8007064:	f091 0f00 	teq	r1, #0
 8007068:	bf04      	itt	eq
 800706a:	4601      	moveq	r1, r0
 800706c:	2000      	moveq	r0, #0
 800706e:	fab1 f381 	clz	r3, r1
 8007072:	bf08      	it	eq
 8007074:	3320      	addeq	r3, #32
 8007076:	f1a3 030b 	sub.w	r3, r3, #11
 800707a:	f1b3 0220 	subs.w	r2, r3, #32
 800707e:	da0c      	bge.n	800709a <__adddf3+0x16e>
 8007080:	320c      	adds	r2, #12
 8007082:	dd08      	ble.n	8007096 <__adddf3+0x16a>
 8007084:	f102 0c14 	add.w	ip, r2, #20
 8007088:	f1c2 020c 	rsb	r2, r2, #12
 800708c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007090:	fa21 f102 	lsr.w	r1, r1, r2
 8007094:	e00c      	b.n	80070b0 <__adddf3+0x184>
 8007096:	f102 0214 	add.w	r2, r2, #20
 800709a:	bfd8      	it	le
 800709c:	f1c2 0c20 	rsble	ip, r2, #32
 80070a0:	fa01 f102 	lsl.w	r1, r1, r2
 80070a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80070a8:	bfdc      	itt	le
 80070aa:	ea41 010c 	orrle.w	r1, r1, ip
 80070ae:	4090      	lslle	r0, r2
 80070b0:	1ae4      	subs	r4, r4, r3
 80070b2:	bfa2      	ittt	ge
 80070b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80070b8:	4329      	orrge	r1, r5
 80070ba:	bd30      	popge	{r4, r5, pc}
 80070bc:	ea6f 0404 	mvn.w	r4, r4
 80070c0:	3c1f      	subs	r4, #31
 80070c2:	da1c      	bge.n	80070fe <__adddf3+0x1d2>
 80070c4:	340c      	adds	r4, #12
 80070c6:	dc0e      	bgt.n	80070e6 <__adddf3+0x1ba>
 80070c8:	f104 0414 	add.w	r4, r4, #20
 80070cc:	f1c4 0220 	rsb	r2, r4, #32
 80070d0:	fa20 f004 	lsr.w	r0, r0, r4
 80070d4:	fa01 f302 	lsl.w	r3, r1, r2
 80070d8:	ea40 0003 	orr.w	r0, r0, r3
 80070dc:	fa21 f304 	lsr.w	r3, r1, r4
 80070e0:	ea45 0103 	orr.w	r1, r5, r3
 80070e4:	bd30      	pop	{r4, r5, pc}
 80070e6:	f1c4 040c 	rsb	r4, r4, #12
 80070ea:	f1c4 0220 	rsb	r2, r4, #32
 80070ee:	fa20 f002 	lsr.w	r0, r0, r2
 80070f2:	fa01 f304 	lsl.w	r3, r1, r4
 80070f6:	ea40 0003 	orr.w	r0, r0, r3
 80070fa:	4629      	mov	r1, r5
 80070fc:	bd30      	pop	{r4, r5, pc}
 80070fe:	fa21 f004 	lsr.w	r0, r1, r4
 8007102:	4629      	mov	r1, r5
 8007104:	bd30      	pop	{r4, r5, pc}
 8007106:	f094 0f00 	teq	r4, #0
 800710a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800710e:	bf06      	itte	eq
 8007110:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007114:	3401      	addeq	r4, #1
 8007116:	3d01      	subne	r5, #1
 8007118:	e74e      	b.n	8006fb8 <__adddf3+0x8c>
 800711a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800711e:	bf18      	it	ne
 8007120:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007124:	d029      	beq.n	800717a <__adddf3+0x24e>
 8007126:	ea94 0f05 	teq	r4, r5
 800712a:	bf08      	it	eq
 800712c:	ea90 0f02 	teqeq	r0, r2
 8007130:	d005      	beq.n	800713e <__adddf3+0x212>
 8007132:	ea54 0c00 	orrs.w	ip, r4, r0
 8007136:	bf04      	itt	eq
 8007138:	4619      	moveq	r1, r3
 800713a:	4610      	moveq	r0, r2
 800713c:	bd30      	pop	{r4, r5, pc}
 800713e:	ea91 0f03 	teq	r1, r3
 8007142:	bf1e      	ittt	ne
 8007144:	2100      	movne	r1, #0
 8007146:	2000      	movne	r0, #0
 8007148:	bd30      	popne	{r4, r5, pc}
 800714a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800714e:	d105      	bne.n	800715c <__adddf3+0x230>
 8007150:	0040      	lsls	r0, r0, #1
 8007152:	4149      	adcs	r1, r1
 8007154:	bf28      	it	cs
 8007156:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800715a:	bd30      	pop	{r4, r5, pc}
 800715c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007160:	bf3c      	itt	cc
 8007162:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007166:	bd30      	popcc	{r4, r5, pc}
 8007168:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800716c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007170:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007174:	f04f 0000 	mov.w	r0, #0
 8007178:	bd30      	pop	{r4, r5, pc}
 800717a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800717e:	bf1a      	itte	ne
 8007180:	4619      	movne	r1, r3
 8007182:	4610      	movne	r0, r2
 8007184:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007188:	bf1c      	itt	ne
 800718a:	460b      	movne	r3, r1
 800718c:	4602      	movne	r2, r0
 800718e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007192:	bf06      	itte	eq
 8007194:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007198:	ea91 0f03 	teqeq	r1, r3
 800719c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80071a0:	bd30      	pop	{r4, r5, pc}
 80071a2:	bf00      	nop

080071a4 <__aeabi_ui2d>:
 80071a4:	f090 0f00 	teq	r0, #0
 80071a8:	bf04      	itt	eq
 80071aa:	2100      	moveq	r1, #0
 80071ac:	4770      	bxeq	lr
 80071ae:	b530      	push	{r4, r5, lr}
 80071b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80071b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80071b8:	f04f 0500 	mov.w	r5, #0
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	e750      	b.n	8007064 <__adddf3+0x138>
 80071c2:	bf00      	nop

080071c4 <__aeabi_i2d>:
 80071c4:	f090 0f00 	teq	r0, #0
 80071c8:	bf04      	itt	eq
 80071ca:	2100      	moveq	r1, #0
 80071cc:	4770      	bxeq	lr
 80071ce:	b530      	push	{r4, r5, lr}
 80071d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80071d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80071d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80071dc:	bf48      	it	mi
 80071de:	4240      	negmi	r0, r0
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	e73e      	b.n	8007064 <__adddf3+0x138>
 80071e6:	bf00      	nop

080071e8 <__aeabi_f2d>:
 80071e8:	0042      	lsls	r2, r0, #1
 80071ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80071ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80071f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80071f6:	bf1f      	itttt	ne
 80071f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80071fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007200:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007204:	4770      	bxne	lr
 8007206:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800720a:	bf08      	it	eq
 800720c:	4770      	bxeq	lr
 800720e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007212:	bf04      	itt	eq
 8007214:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007218:	4770      	bxeq	lr
 800721a:	b530      	push	{r4, r5, lr}
 800721c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007220:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007224:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007228:	e71c      	b.n	8007064 <__adddf3+0x138>
 800722a:	bf00      	nop

0800722c <__aeabi_ul2d>:
 800722c:	ea50 0201 	orrs.w	r2, r0, r1
 8007230:	bf08      	it	eq
 8007232:	4770      	bxeq	lr
 8007234:	b530      	push	{r4, r5, lr}
 8007236:	f04f 0500 	mov.w	r5, #0
 800723a:	e00a      	b.n	8007252 <__aeabi_l2d+0x16>

0800723c <__aeabi_l2d>:
 800723c:	ea50 0201 	orrs.w	r2, r0, r1
 8007240:	bf08      	it	eq
 8007242:	4770      	bxeq	lr
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800724a:	d502      	bpl.n	8007252 <__aeabi_l2d+0x16>
 800724c:	4240      	negs	r0, r0
 800724e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007252:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007256:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800725a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800725e:	f43f aed8 	beq.w	8007012 <__adddf3+0xe6>
 8007262:	f04f 0203 	mov.w	r2, #3
 8007266:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800726a:	bf18      	it	ne
 800726c:	3203      	addne	r2, #3
 800726e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007272:	bf18      	it	ne
 8007274:	3203      	addne	r2, #3
 8007276:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800727a:	f1c2 0320 	rsb	r3, r2, #32
 800727e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007282:	fa20 f002 	lsr.w	r0, r0, r2
 8007286:	fa01 fe03 	lsl.w	lr, r1, r3
 800728a:	ea40 000e 	orr.w	r0, r0, lr
 800728e:	fa21 f102 	lsr.w	r1, r1, r2
 8007292:	4414      	add	r4, r2
 8007294:	e6bd      	b.n	8007012 <__adddf3+0xe6>
 8007296:	bf00      	nop

08007298 <__aeabi_dmul>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800729e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80072a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80072a6:	bf1d      	ittte	ne
 80072a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80072ac:	ea94 0f0c 	teqne	r4, ip
 80072b0:	ea95 0f0c 	teqne	r5, ip
 80072b4:	f000 f8de 	bleq	8007474 <__aeabi_dmul+0x1dc>
 80072b8:	442c      	add	r4, r5
 80072ba:	ea81 0603 	eor.w	r6, r1, r3
 80072be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80072c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80072c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80072ca:	bf18      	it	ne
 80072cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80072d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80072d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072d8:	d038      	beq.n	800734c <__aeabi_dmul+0xb4>
 80072da:	fba0 ce02 	umull	ip, lr, r0, r2
 80072de:	f04f 0500 	mov.w	r5, #0
 80072e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80072e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80072ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80072ee:	f04f 0600 	mov.w	r6, #0
 80072f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80072f6:	f09c 0f00 	teq	ip, #0
 80072fa:	bf18      	it	ne
 80072fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8007300:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007304:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007308:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800730c:	d204      	bcs.n	8007318 <__aeabi_dmul+0x80>
 800730e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007312:	416d      	adcs	r5, r5
 8007314:	eb46 0606 	adc.w	r6, r6, r6
 8007318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800731c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007324:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007328:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800732c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007330:	bf88      	it	hi
 8007332:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007336:	d81e      	bhi.n	8007376 <__aeabi_dmul+0xde>
 8007338:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800733c:	bf08      	it	eq
 800733e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007342:	f150 0000 	adcs.w	r0, r0, #0
 8007346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007350:	ea46 0101 	orr.w	r1, r6, r1
 8007354:	ea40 0002 	orr.w	r0, r0, r2
 8007358:	ea81 0103 	eor.w	r1, r1, r3
 800735c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007360:	bfc2      	ittt	gt
 8007362:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800736a:	bd70      	popgt	{r4, r5, r6, pc}
 800736c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007370:	f04f 0e00 	mov.w	lr, #0
 8007374:	3c01      	subs	r4, #1
 8007376:	f300 80ab 	bgt.w	80074d0 <__aeabi_dmul+0x238>
 800737a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800737e:	bfde      	ittt	le
 8007380:	2000      	movle	r0, #0
 8007382:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007386:	bd70      	pople	{r4, r5, r6, pc}
 8007388:	f1c4 0400 	rsb	r4, r4, #0
 800738c:	3c20      	subs	r4, #32
 800738e:	da35      	bge.n	80073fc <__aeabi_dmul+0x164>
 8007390:	340c      	adds	r4, #12
 8007392:	dc1b      	bgt.n	80073cc <__aeabi_dmul+0x134>
 8007394:	f104 0414 	add.w	r4, r4, #20
 8007398:	f1c4 0520 	rsb	r5, r4, #32
 800739c:	fa00 f305 	lsl.w	r3, r0, r5
 80073a0:	fa20 f004 	lsr.w	r0, r0, r4
 80073a4:	fa01 f205 	lsl.w	r2, r1, r5
 80073a8:	ea40 0002 	orr.w	r0, r0, r2
 80073ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80073b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80073b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80073b8:	fa21 f604 	lsr.w	r6, r1, r4
 80073bc:	eb42 0106 	adc.w	r1, r2, r6
 80073c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80073c4:	bf08      	it	eq
 80073c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80073ca:	bd70      	pop	{r4, r5, r6, pc}
 80073cc:	f1c4 040c 	rsb	r4, r4, #12
 80073d0:	f1c4 0520 	rsb	r5, r4, #32
 80073d4:	fa00 f304 	lsl.w	r3, r0, r4
 80073d8:	fa20 f005 	lsr.w	r0, r0, r5
 80073dc:	fa01 f204 	lsl.w	r2, r1, r4
 80073e0:	ea40 0002 	orr.w	r0, r0, r2
 80073e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80073e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80073ec:	f141 0100 	adc.w	r1, r1, #0
 80073f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80073f4:	bf08      	it	eq
 80073f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f1c4 0520 	rsb	r5, r4, #32
 8007400:	fa00 f205 	lsl.w	r2, r0, r5
 8007404:	ea4e 0e02 	orr.w	lr, lr, r2
 8007408:	fa20 f304 	lsr.w	r3, r0, r4
 800740c:	fa01 f205 	lsl.w	r2, r1, r5
 8007410:	ea43 0302 	orr.w	r3, r3, r2
 8007414:	fa21 f004 	lsr.w	r0, r1, r4
 8007418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800741c:	fa21 f204 	lsr.w	r2, r1, r4
 8007420:	ea20 0002 	bic.w	r0, r0, r2
 8007424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800742c:	bf08      	it	eq
 800742e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	f094 0f00 	teq	r4, #0
 8007438:	d10f      	bne.n	800745a <__aeabi_dmul+0x1c2>
 800743a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800743e:	0040      	lsls	r0, r0, #1
 8007440:	eb41 0101 	adc.w	r1, r1, r1
 8007444:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007448:	bf08      	it	eq
 800744a:	3c01      	subeq	r4, #1
 800744c:	d0f7      	beq.n	800743e <__aeabi_dmul+0x1a6>
 800744e:	ea41 0106 	orr.w	r1, r1, r6
 8007452:	f095 0f00 	teq	r5, #0
 8007456:	bf18      	it	ne
 8007458:	4770      	bxne	lr
 800745a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800745e:	0052      	lsls	r2, r2, #1
 8007460:	eb43 0303 	adc.w	r3, r3, r3
 8007464:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007468:	bf08      	it	eq
 800746a:	3d01      	subeq	r5, #1
 800746c:	d0f7      	beq.n	800745e <__aeabi_dmul+0x1c6>
 800746e:	ea43 0306 	orr.w	r3, r3, r6
 8007472:	4770      	bx	lr
 8007474:	ea94 0f0c 	teq	r4, ip
 8007478:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800747c:	bf18      	it	ne
 800747e:	ea95 0f0c 	teqne	r5, ip
 8007482:	d00c      	beq.n	800749e <__aeabi_dmul+0x206>
 8007484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007488:	bf18      	it	ne
 800748a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800748e:	d1d1      	bne.n	8007434 <__aeabi_dmul+0x19c>
 8007490:	ea81 0103 	eor.w	r1, r1, r3
 8007494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007498:	f04f 0000 	mov.w	r0, #0
 800749c:	bd70      	pop	{r4, r5, r6, pc}
 800749e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80074a2:	bf06      	itte	eq
 80074a4:	4610      	moveq	r0, r2
 80074a6:	4619      	moveq	r1, r3
 80074a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80074ac:	d019      	beq.n	80074e2 <__aeabi_dmul+0x24a>
 80074ae:	ea94 0f0c 	teq	r4, ip
 80074b2:	d102      	bne.n	80074ba <__aeabi_dmul+0x222>
 80074b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80074b8:	d113      	bne.n	80074e2 <__aeabi_dmul+0x24a>
 80074ba:	ea95 0f0c 	teq	r5, ip
 80074be:	d105      	bne.n	80074cc <__aeabi_dmul+0x234>
 80074c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80074c4:	bf1c      	itt	ne
 80074c6:	4610      	movne	r0, r2
 80074c8:	4619      	movne	r1, r3
 80074ca:	d10a      	bne.n	80074e2 <__aeabi_dmul+0x24a>
 80074cc:	ea81 0103 	eor.w	r1, r1, r3
 80074d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80074d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80074d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80074dc:	f04f 0000 	mov.w	r0, #0
 80074e0:	bd70      	pop	{r4, r5, r6, pc}
 80074e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80074e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80074ea:	bd70      	pop	{r4, r5, r6, pc}

080074ec <__aeabi_ddiv>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80074f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80074f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80074fa:	bf1d      	ittte	ne
 80074fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007500:	ea94 0f0c 	teqne	r4, ip
 8007504:	ea95 0f0c 	teqne	r5, ip
 8007508:	f000 f8a7 	bleq	800765a <__aeabi_ddiv+0x16e>
 800750c:	eba4 0405 	sub.w	r4, r4, r5
 8007510:	ea81 0e03 	eor.w	lr, r1, r3
 8007514:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007518:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800751c:	f000 8088 	beq.w	8007630 <__aeabi_ddiv+0x144>
 8007520:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007524:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007528:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800752c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007530:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8007534:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007538:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800753c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007540:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8007544:	429d      	cmp	r5, r3
 8007546:	bf08      	it	eq
 8007548:	4296      	cmpeq	r6, r2
 800754a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800754e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8007552:	d202      	bcs.n	800755a <__aeabi_ddiv+0x6e>
 8007554:	085b      	lsrs	r3, r3, #1
 8007556:	ea4f 0232 	mov.w	r2, r2, rrx
 800755a:	1ab6      	subs	r6, r6, r2
 800755c:	eb65 0503 	sbc.w	r5, r5, r3
 8007560:	085b      	lsrs	r3, r3, #1
 8007562:	ea4f 0232 	mov.w	r2, r2, rrx
 8007566:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800756a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800756e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007572:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007576:	bf22      	ittt	cs
 8007578:	1ab6      	subcs	r6, r6, r2
 800757a:	4675      	movcs	r5, lr
 800757c:	ea40 000c 	orrcs.w	r0, r0, ip
 8007580:	085b      	lsrs	r3, r3, #1
 8007582:	ea4f 0232 	mov.w	r2, r2, rrx
 8007586:	ebb6 0e02 	subs.w	lr, r6, r2
 800758a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800758e:	bf22      	ittt	cs
 8007590:	1ab6      	subcs	r6, r6, r2
 8007592:	4675      	movcs	r5, lr
 8007594:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007598:	085b      	lsrs	r3, r3, #1
 800759a:	ea4f 0232 	mov.w	r2, r2, rrx
 800759e:	ebb6 0e02 	subs.w	lr, r6, r2
 80075a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80075a6:	bf22      	ittt	cs
 80075a8:	1ab6      	subcs	r6, r6, r2
 80075aa:	4675      	movcs	r5, lr
 80075ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80075b0:	085b      	lsrs	r3, r3, #1
 80075b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80075b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80075ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80075be:	bf22      	ittt	cs
 80075c0:	1ab6      	subcs	r6, r6, r2
 80075c2:	4675      	movcs	r5, lr
 80075c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80075c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80075cc:	d018      	beq.n	8007600 <__aeabi_ddiv+0x114>
 80075ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80075d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80075d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80075da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80075de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80075e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80075e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80075ea:	d1c0      	bne.n	800756e <__aeabi_ddiv+0x82>
 80075ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80075f0:	d10b      	bne.n	800760a <__aeabi_ddiv+0x11e>
 80075f2:	ea41 0100 	orr.w	r1, r1, r0
 80075f6:	f04f 0000 	mov.w	r0, #0
 80075fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80075fe:	e7b6      	b.n	800756e <__aeabi_ddiv+0x82>
 8007600:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007604:	bf04      	itt	eq
 8007606:	4301      	orreq	r1, r0
 8007608:	2000      	moveq	r0, #0
 800760a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800760e:	bf88      	it	hi
 8007610:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007614:	f63f aeaf 	bhi.w	8007376 <__aeabi_dmul+0xde>
 8007618:	ebb5 0c03 	subs.w	ip, r5, r3
 800761c:	bf04      	itt	eq
 800761e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8007622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007626:	f150 0000 	adcs.w	r0, r0, #0
 800762a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007634:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007638:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800763c:	bfc2      	ittt	gt
 800763e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007646:	bd70      	popgt	{r4, r5, r6, pc}
 8007648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800764c:	f04f 0e00 	mov.w	lr, #0
 8007650:	3c01      	subs	r4, #1
 8007652:	e690      	b.n	8007376 <__aeabi_dmul+0xde>
 8007654:	ea45 0e06 	orr.w	lr, r5, r6
 8007658:	e68d      	b.n	8007376 <__aeabi_dmul+0xde>
 800765a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800765e:	ea94 0f0c 	teq	r4, ip
 8007662:	bf08      	it	eq
 8007664:	ea95 0f0c 	teqeq	r5, ip
 8007668:	f43f af3b 	beq.w	80074e2 <__aeabi_dmul+0x24a>
 800766c:	ea94 0f0c 	teq	r4, ip
 8007670:	d10a      	bne.n	8007688 <__aeabi_ddiv+0x19c>
 8007672:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007676:	f47f af34 	bne.w	80074e2 <__aeabi_dmul+0x24a>
 800767a:	ea95 0f0c 	teq	r5, ip
 800767e:	f47f af25 	bne.w	80074cc <__aeabi_dmul+0x234>
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	e72c      	b.n	80074e2 <__aeabi_dmul+0x24a>
 8007688:	ea95 0f0c 	teq	r5, ip
 800768c:	d106      	bne.n	800769c <__aeabi_ddiv+0x1b0>
 800768e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007692:	f43f aefd 	beq.w	8007490 <__aeabi_dmul+0x1f8>
 8007696:	4610      	mov	r0, r2
 8007698:	4619      	mov	r1, r3
 800769a:	e722      	b.n	80074e2 <__aeabi_dmul+0x24a>
 800769c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80076a0:	bf18      	it	ne
 80076a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80076a6:	f47f aec5 	bne.w	8007434 <__aeabi_dmul+0x19c>
 80076aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80076ae:	f47f af0d 	bne.w	80074cc <__aeabi_dmul+0x234>
 80076b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80076b6:	f47f aeeb 	bne.w	8007490 <__aeabi_dmul+0x1f8>
 80076ba:	e712      	b.n	80074e2 <__aeabi_dmul+0x24a>

080076bc <__gedf2>:
 80076bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80076c0:	e006      	b.n	80076d0 <__cmpdf2+0x4>
 80076c2:	bf00      	nop

080076c4 <__ledf2>:
 80076c4:	f04f 0c01 	mov.w	ip, #1
 80076c8:	e002      	b.n	80076d0 <__cmpdf2+0x4>
 80076ca:	bf00      	nop

080076cc <__cmpdf2>:
 80076cc:	f04f 0c01 	mov.w	ip, #1
 80076d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80076d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80076d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80076dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80076e0:	bf18      	it	ne
 80076e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80076e6:	d01b      	beq.n	8007720 <__cmpdf2+0x54>
 80076e8:	b001      	add	sp, #4
 80076ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80076ee:	bf0c      	ite	eq
 80076f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80076f4:	ea91 0f03 	teqne	r1, r3
 80076f8:	bf02      	ittt	eq
 80076fa:	ea90 0f02 	teqeq	r0, r2
 80076fe:	2000      	moveq	r0, #0
 8007700:	4770      	bxeq	lr
 8007702:	f110 0f00 	cmn.w	r0, #0
 8007706:	ea91 0f03 	teq	r1, r3
 800770a:	bf58      	it	pl
 800770c:	4299      	cmppl	r1, r3
 800770e:	bf08      	it	eq
 8007710:	4290      	cmpeq	r0, r2
 8007712:	bf2c      	ite	cs
 8007714:	17d8      	asrcs	r0, r3, #31
 8007716:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800771a:	f040 0001 	orr.w	r0, r0, #1
 800771e:	4770      	bx	lr
 8007720:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007724:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007728:	d102      	bne.n	8007730 <__cmpdf2+0x64>
 800772a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800772e:	d107      	bne.n	8007740 <__cmpdf2+0x74>
 8007730:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007734:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007738:	d1d6      	bne.n	80076e8 <__cmpdf2+0x1c>
 800773a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800773e:	d0d3      	beq.n	80076e8 <__cmpdf2+0x1c>
 8007740:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop

08007748 <__aeabi_cdrcmple>:
 8007748:	4684      	mov	ip, r0
 800774a:	4610      	mov	r0, r2
 800774c:	4662      	mov	r2, ip
 800774e:	468c      	mov	ip, r1
 8007750:	4619      	mov	r1, r3
 8007752:	4663      	mov	r3, ip
 8007754:	e000      	b.n	8007758 <__aeabi_cdcmpeq>
 8007756:	bf00      	nop

08007758 <__aeabi_cdcmpeq>:
 8007758:	b501      	push	{r0, lr}
 800775a:	f7ff ffb7 	bl	80076cc <__cmpdf2>
 800775e:	2800      	cmp	r0, #0
 8007760:	bf48      	it	mi
 8007762:	f110 0f00 	cmnmi.w	r0, #0
 8007766:	bd01      	pop	{r0, pc}

08007768 <__aeabi_dcmpeq>:
 8007768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800776c:	f7ff fff4 	bl	8007758 <__aeabi_cdcmpeq>
 8007770:	bf0c      	ite	eq
 8007772:	2001      	moveq	r0, #1
 8007774:	2000      	movne	r0, #0
 8007776:	f85d fb08 	ldr.w	pc, [sp], #8
 800777a:	bf00      	nop

0800777c <__aeabi_dcmplt>:
 800777c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007780:	f7ff ffea 	bl	8007758 <__aeabi_cdcmpeq>
 8007784:	bf34      	ite	cc
 8007786:	2001      	movcc	r0, #1
 8007788:	2000      	movcs	r0, #0
 800778a:	f85d fb08 	ldr.w	pc, [sp], #8
 800778e:	bf00      	nop

08007790 <__aeabi_dcmple>:
 8007790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007794:	f7ff ffe0 	bl	8007758 <__aeabi_cdcmpeq>
 8007798:	bf94      	ite	ls
 800779a:	2001      	movls	r0, #1
 800779c:	2000      	movhi	r0, #0
 800779e:	f85d fb08 	ldr.w	pc, [sp], #8
 80077a2:	bf00      	nop

080077a4 <__aeabi_dcmpge>:
 80077a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80077a8:	f7ff ffce 	bl	8007748 <__aeabi_cdrcmple>
 80077ac:	bf94      	ite	ls
 80077ae:	2001      	movls	r0, #1
 80077b0:	2000      	movhi	r0, #0
 80077b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80077b6:	bf00      	nop

080077b8 <__aeabi_dcmpgt>:
 80077b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80077bc:	f7ff ffc4 	bl	8007748 <__aeabi_cdrcmple>
 80077c0:	bf34      	ite	cc
 80077c2:	2001      	movcc	r0, #1
 80077c4:	2000      	movcs	r0, #0
 80077c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80077ca:	bf00      	nop

080077cc <__aeabi_dcmpun>:
 80077cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80077d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80077d4:	d102      	bne.n	80077dc <__aeabi_dcmpun+0x10>
 80077d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80077da:	d10a      	bne.n	80077f2 <__aeabi_dcmpun+0x26>
 80077dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80077e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80077e4:	d102      	bne.n	80077ec <__aeabi_dcmpun+0x20>
 80077e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80077ea:	d102      	bne.n	80077f2 <__aeabi_dcmpun+0x26>
 80077ec:	f04f 0000 	mov.w	r0, #0
 80077f0:	4770      	bx	lr
 80077f2:	f04f 0001 	mov.w	r0, #1
 80077f6:	4770      	bx	lr

080077f8 <__aeabi_d2iz>:
 80077f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80077fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8007800:	d215      	bcs.n	800782e <__aeabi_d2iz+0x36>
 8007802:	d511      	bpl.n	8007828 <__aeabi_d2iz+0x30>
 8007804:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007808:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800780c:	d912      	bls.n	8007834 <__aeabi_d2iz+0x3c>
 800780e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007812:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007816:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800781a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800781e:	fa23 f002 	lsr.w	r0, r3, r2
 8007822:	bf18      	it	ne
 8007824:	4240      	negne	r0, r0
 8007826:	4770      	bx	lr
 8007828:	f04f 0000 	mov.w	r0, #0
 800782c:	4770      	bx	lr
 800782e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8007832:	d105      	bne.n	8007840 <__aeabi_d2iz+0x48>
 8007834:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007838:	bf08      	it	eq
 800783a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800783e:	4770      	bx	lr
 8007840:	f04f 0000 	mov.w	r0, #0
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop

08007848 <__aeabi_uldivmod>:
 8007848:	b953      	cbnz	r3, 8007860 <__aeabi_uldivmod+0x18>
 800784a:	b94a      	cbnz	r2, 8007860 <__aeabi_uldivmod+0x18>
 800784c:	2900      	cmp	r1, #0
 800784e:	bf08      	it	eq
 8007850:	2800      	cmpeq	r0, #0
 8007852:	bf1c      	itt	ne
 8007854:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007858:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800785c:	f000 b96e 	b.w	8007b3c <__aeabi_idiv0>
 8007860:	f1ad 0c08 	sub.w	ip, sp, #8
 8007864:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007868:	f000 f806 	bl	8007878 <__udivmoddi4>
 800786c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007874:	b004      	add	sp, #16
 8007876:	4770      	bx	lr

08007878 <__udivmoddi4>:
 8007878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	9d08      	ldr	r5, [sp, #32]
 800787e:	4604      	mov	r4, r0
 8007880:	468c      	mov	ip, r1
 8007882:	2b00      	cmp	r3, #0
 8007884:	f040 8083 	bne.w	800798e <__udivmoddi4+0x116>
 8007888:	428a      	cmp	r2, r1
 800788a:	4617      	mov	r7, r2
 800788c:	d947      	bls.n	800791e <__udivmoddi4+0xa6>
 800788e:	fab2 f282 	clz	r2, r2
 8007892:	b142      	cbz	r2, 80078a6 <__udivmoddi4+0x2e>
 8007894:	f1c2 0020 	rsb	r0, r2, #32
 8007898:	fa24 f000 	lsr.w	r0, r4, r0
 800789c:	4091      	lsls	r1, r2
 800789e:	4097      	lsls	r7, r2
 80078a0:	ea40 0c01 	orr.w	ip, r0, r1
 80078a4:	4094      	lsls	r4, r2
 80078a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80078aa:	0c23      	lsrs	r3, r4, #16
 80078ac:	fbbc f6f8 	udiv	r6, ip, r8
 80078b0:	fa1f fe87 	uxth.w	lr, r7
 80078b4:	fb08 c116 	mls	r1, r8, r6, ip
 80078b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80078bc:	fb06 f10e 	mul.w	r1, r6, lr
 80078c0:	4299      	cmp	r1, r3
 80078c2:	d909      	bls.n	80078d8 <__udivmoddi4+0x60>
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80078ca:	f080 8119 	bcs.w	8007b00 <__udivmoddi4+0x288>
 80078ce:	4299      	cmp	r1, r3
 80078d0:	f240 8116 	bls.w	8007b00 <__udivmoddi4+0x288>
 80078d4:	3e02      	subs	r6, #2
 80078d6:	443b      	add	r3, r7
 80078d8:	1a5b      	subs	r3, r3, r1
 80078da:	b2a4      	uxth	r4, r4
 80078dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80078e0:	fb08 3310 	mls	r3, r8, r0, r3
 80078e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80078e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80078ec:	45a6      	cmp	lr, r4
 80078ee:	d909      	bls.n	8007904 <__udivmoddi4+0x8c>
 80078f0:	193c      	adds	r4, r7, r4
 80078f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078f6:	f080 8105 	bcs.w	8007b04 <__udivmoddi4+0x28c>
 80078fa:	45a6      	cmp	lr, r4
 80078fc:	f240 8102 	bls.w	8007b04 <__udivmoddi4+0x28c>
 8007900:	3802      	subs	r0, #2
 8007902:	443c      	add	r4, r7
 8007904:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007908:	eba4 040e 	sub.w	r4, r4, lr
 800790c:	2600      	movs	r6, #0
 800790e:	b11d      	cbz	r5, 8007918 <__udivmoddi4+0xa0>
 8007910:	40d4      	lsrs	r4, r2
 8007912:	2300      	movs	r3, #0
 8007914:	e9c5 4300 	strd	r4, r3, [r5]
 8007918:	4631      	mov	r1, r6
 800791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791e:	b902      	cbnz	r2, 8007922 <__udivmoddi4+0xaa>
 8007920:	deff      	udf	#255	; 0xff
 8007922:	fab2 f282 	clz	r2, r2
 8007926:	2a00      	cmp	r2, #0
 8007928:	d150      	bne.n	80079cc <__udivmoddi4+0x154>
 800792a:	1bcb      	subs	r3, r1, r7
 800792c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8007930:	fa1f f887 	uxth.w	r8, r7
 8007934:	2601      	movs	r6, #1
 8007936:	fbb3 fcfe 	udiv	ip, r3, lr
 800793a:	0c21      	lsrs	r1, r4, #16
 800793c:	fb0e 331c 	mls	r3, lr, ip, r3
 8007940:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007944:	fb08 f30c 	mul.w	r3, r8, ip
 8007948:	428b      	cmp	r3, r1
 800794a:	d907      	bls.n	800795c <__udivmoddi4+0xe4>
 800794c:	1879      	adds	r1, r7, r1
 800794e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8007952:	d202      	bcs.n	800795a <__udivmoddi4+0xe2>
 8007954:	428b      	cmp	r3, r1
 8007956:	f200 80e9 	bhi.w	8007b2c <__udivmoddi4+0x2b4>
 800795a:	4684      	mov	ip, r0
 800795c:	1ac9      	subs	r1, r1, r3
 800795e:	b2a3      	uxth	r3, r4
 8007960:	fbb1 f0fe 	udiv	r0, r1, lr
 8007964:	fb0e 1110 	mls	r1, lr, r0, r1
 8007968:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800796c:	fb08 f800 	mul.w	r8, r8, r0
 8007970:	45a0      	cmp	r8, r4
 8007972:	d907      	bls.n	8007984 <__udivmoddi4+0x10c>
 8007974:	193c      	adds	r4, r7, r4
 8007976:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800797a:	d202      	bcs.n	8007982 <__udivmoddi4+0x10a>
 800797c:	45a0      	cmp	r8, r4
 800797e:	f200 80d9 	bhi.w	8007b34 <__udivmoddi4+0x2bc>
 8007982:	4618      	mov	r0, r3
 8007984:	eba4 0408 	sub.w	r4, r4, r8
 8007988:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800798c:	e7bf      	b.n	800790e <__udivmoddi4+0x96>
 800798e:	428b      	cmp	r3, r1
 8007990:	d909      	bls.n	80079a6 <__udivmoddi4+0x12e>
 8007992:	2d00      	cmp	r5, #0
 8007994:	f000 80b1 	beq.w	8007afa <__udivmoddi4+0x282>
 8007998:	2600      	movs	r6, #0
 800799a:	e9c5 0100 	strd	r0, r1, [r5]
 800799e:	4630      	mov	r0, r6
 80079a0:	4631      	mov	r1, r6
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	fab3 f683 	clz	r6, r3
 80079aa:	2e00      	cmp	r6, #0
 80079ac:	d14a      	bne.n	8007a44 <__udivmoddi4+0x1cc>
 80079ae:	428b      	cmp	r3, r1
 80079b0:	d302      	bcc.n	80079b8 <__udivmoddi4+0x140>
 80079b2:	4282      	cmp	r2, r0
 80079b4:	f200 80b8 	bhi.w	8007b28 <__udivmoddi4+0x2b0>
 80079b8:	1a84      	subs	r4, r0, r2
 80079ba:	eb61 0103 	sbc.w	r1, r1, r3
 80079be:	2001      	movs	r0, #1
 80079c0:	468c      	mov	ip, r1
 80079c2:	2d00      	cmp	r5, #0
 80079c4:	d0a8      	beq.n	8007918 <__udivmoddi4+0xa0>
 80079c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80079ca:	e7a5      	b.n	8007918 <__udivmoddi4+0xa0>
 80079cc:	f1c2 0320 	rsb	r3, r2, #32
 80079d0:	fa20 f603 	lsr.w	r6, r0, r3
 80079d4:	4097      	lsls	r7, r2
 80079d6:	fa01 f002 	lsl.w	r0, r1, r2
 80079da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80079de:	40d9      	lsrs	r1, r3
 80079e0:	4330      	orrs	r0, r6
 80079e2:	0c03      	lsrs	r3, r0, #16
 80079e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80079e8:	fa1f f887 	uxth.w	r8, r7
 80079ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80079f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80079f4:	fb06 f108 	mul.w	r1, r6, r8
 80079f8:	4299      	cmp	r1, r3
 80079fa:	fa04 f402 	lsl.w	r4, r4, r2
 80079fe:	d909      	bls.n	8007a14 <__udivmoddi4+0x19c>
 8007a00:	18fb      	adds	r3, r7, r3
 8007a02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8007a06:	f080 808d 	bcs.w	8007b24 <__udivmoddi4+0x2ac>
 8007a0a:	4299      	cmp	r1, r3
 8007a0c:	f240 808a 	bls.w	8007b24 <__udivmoddi4+0x2ac>
 8007a10:	3e02      	subs	r6, #2
 8007a12:	443b      	add	r3, r7
 8007a14:	1a5b      	subs	r3, r3, r1
 8007a16:	b281      	uxth	r1, r0
 8007a18:	fbb3 f0fe 	udiv	r0, r3, lr
 8007a1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8007a20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007a24:	fb00 f308 	mul.w	r3, r0, r8
 8007a28:	428b      	cmp	r3, r1
 8007a2a:	d907      	bls.n	8007a3c <__udivmoddi4+0x1c4>
 8007a2c:	1879      	adds	r1, r7, r1
 8007a2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8007a32:	d273      	bcs.n	8007b1c <__udivmoddi4+0x2a4>
 8007a34:	428b      	cmp	r3, r1
 8007a36:	d971      	bls.n	8007b1c <__udivmoddi4+0x2a4>
 8007a38:	3802      	subs	r0, #2
 8007a3a:	4439      	add	r1, r7
 8007a3c:	1acb      	subs	r3, r1, r3
 8007a3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8007a42:	e778      	b.n	8007936 <__udivmoddi4+0xbe>
 8007a44:	f1c6 0c20 	rsb	ip, r6, #32
 8007a48:	fa03 f406 	lsl.w	r4, r3, r6
 8007a4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8007a50:	431c      	orrs	r4, r3
 8007a52:	fa20 f70c 	lsr.w	r7, r0, ip
 8007a56:	fa01 f306 	lsl.w	r3, r1, r6
 8007a5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8007a5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8007a62:	431f      	orrs	r7, r3
 8007a64:	0c3b      	lsrs	r3, r7, #16
 8007a66:	fbb1 f9fe 	udiv	r9, r1, lr
 8007a6a:	fa1f f884 	uxth.w	r8, r4
 8007a6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8007a72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007a76:	fb09 fa08 	mul.w	sl, r9, r8
 8007a7a:	458a      	cmp	sl, r1
 8007a7c:	fa02 f206 	lsl.w	r2, r2, r6
 8007a80:	fa00 f306 	lsl.w	r3, r0, r6
 8007a84:	d908      	bls.n	8007a98 <__udivmoddi4+0x220>
 8007a86:	1861      	adds	r1, r4, r1
 8007a88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8007a8c:	d248      	bcs.n	8007b20 <__udivmoddi4+0x2a8>
 8007a8e:	458a      	cmp	sl, r1
 8007a90:	d946      	bls.n	8007b20 <__udivmoddi4+0x2a8>
 8007a92:	f1a9 0902 	sub.w	r9, r9, #2
 8007a96:	4421      	add	r1, r4
 8007a98:	eba1 010a 	sub.w	r1, r1, sl
 8007a9c:	b2bf      	uxth	r7, r7
 8007a9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8007aa2:	fb0e 1110 	mls	r1, lr, r0, r1
 8007aa6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8007aaa:	fb00 f808 	mul.w	r8, r0, r8
 8007aae:	45b8      	cmp	r8, r7
 8007ab0:	d907      	bls.n	8007ac2 <__udivmoddi4+0x24a>
 8007ab2:	19e7      	adds	r7, r4, r7
 8007ab4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8007ab8:	d22e      	bcs.n	8007b18 <__udivmoddi4+0x2a0>
 8007aba:	45b8      	cmp	r8, r7
 8007abc:	d92c      	bls.n	8007b18 <__udivmoddi4+0x2a0>
 8007abe:	3802      	subs	r0, #2
 8007ac0:	4427      	add	r7, r4
 8007ac2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8007ac6:	eba7 0708 	sub.w	r7, r7, r8
 8007aca:	fba0 8902 	umull	r8, r9, r0, r2
 8007ace:	454f      	cmp	r7, r9
 8007ad0:	46c6      	mov	lr, r8
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	d31a      	bcc.n	8007b0c <__udivmoddi4+0x294>
 8007ad6:	d017      	beq.n	8007b08 <__udivmoddi4+0x290>
 8007ad8:	b15d      	cbz	r5, 8007af2 <__udivmoddi4+0x27a>
 8007ada:	ebb3 020e 	subs.w	r2, r3, lr
 8007ade:	eb67 0701 	sbc.w	r7, r7, r1
 8007ae2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8007ae6:	40f2      	lsrs	r2, r6
 8007ae8:	ea4c 0202 	orr.w	r2, ip, r2
 8007aec:	40f7      	lsrs	r7, r6
 8007aee:	e9c5 2700 	strd	r2, r7, [r5]
 8007af2:	2600      	movs	r6, #0
 8007af4:	4631      	mov	r1, r6
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	462e      	mov	r6, r5
 8007afc:	4628      	mov	r0, r5
 8007afe:	e70b      	b.n	8007918 <__udivmoddi4+0xa0>
 8007b00:	4606      	mov	r6, r0
 8007b02:	e6e9      	b.n	80078d8 <__udivmoddi4+0x60>
 8007b04:	4618      	mov	r0, r3
 8007b06:	e6fd      	b.n	8007904 <__udivmoddi4+0x8c>
 8007b08:	4543      	cmp	r3, r8
 8007b0a:	d2e5      	bcs.n	8007ad8 <__udivmoddi4+0x260>
 8007b0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8007b10:	eb69 0104 	sbc.w	r1, r9, r4
 8007b14:	3801      	subs	r0, #1
 8007b16:	e7df      	b.n	8007ad8 <__udivmoddi4+0x260>
 8007b18:	4608      	mov	r0, r1
 8007b1a:	e7d2      	b.n	8007ac2 <__udivmoddi4+0x24a>
 8007b1c:	4660      	mov	r0, ip
 8007b1e:	e78d      	b.n	8007a3c <__udivmoddi4+0x1c4>
 8007b20:	4681      	mov	r9, r0
 8007b22:	e7b9      	b.n	8007a98 <__udivmoddi4+0x220>
 8007b24:	4666      	mov	r6, ip
 8007b26:	e775      	b.n	8007a14 <__udivmoddi4+0x19c>
 8007b28:	4630      	mov	r0, r6
 8007b2a:	e74a      	b.n	80079c2 <__udivmoddi4+0x14a>
 8007b2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8007b30:	4439      	add	r1, r7
 8007b32:	e713      	b.n	800795c <__udivmoddi4+0xe4>
 8007b34:	3802      	subs	r0, #2
 8007b36:	443c      	add	r4, r7
 8007b38:	e724      	b.n	8007984 <__udivmoddi4+0x10c>
 8007b3a:	bf00      	nop

08007b3c <__aeabi_idiv0>:
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop

08007b40 <_getpid>:
 8007b40:	4b02      	ldr	r3, [pc, #8]	; (8007b4c <_getpid+0xc>)
 8007b42:	2258      	movs	r2, #88	; 0x58
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b4a:	4770      	bx	lr
 8007b4c:	20001f04 	.word	0x20001f04

08007b50 <_kill>:
 8007b50:	4b02      	ldr	r3, [pc, #8]	; (8007b5c <_kill+0xc>)
 8007b52:	2258      	movs	r2, #88	; 0x58
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b5a:	4770      	bx	lr
 8007b5c:	20001f04 	.word	0x20001f04

08007b60 <_exit>:
 8007b60:	e7fe      	b.n	8007b60 <_exit>
 8007b62:	bf00      	nop

08007b64 <CmdLED>:

  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
}

void CmdLED(int mode)
{
 8007b64:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 8007b66:	b930      	cbnz	r0, 8007b76 <CmdLED+0x12>
    return;
  }

  rc = fetch_uint32_arg(&led);
 8007b68:	4668      	mov	r0, sp
 8007b6a:	f000 fbcb 	bl	8008304 <fetch_uint32_arg>
  if(rc) {
 8007b6e:	b128      	cbz	r0, 8007b7c <CmdLED+0x18>
    printf("Missing LED index\n");
 8007b70:	480f      	ldr	r0, [pc, #60]	; (8007bb0 <CmdLED+0x4c>)
    return;
  }
    
  rc = fetch_uint32_arg(&val);
  if(rc) {
    printf("Missing state value, 0 for Off, 1 for On\n");
 8007b72:	f7f9 f817 	bl	8000ba4 <puts>
    BSP_LED_On(LEDs[led]);
  } else {
    BSP_LED_Off(LEDs[led]);
  }

} 
 8007b76:	b003      	add	sp, #12
 8007b78:	f85d fb04 	ldr.w	pc, [sp], #4
  rc = fetch_uint32_arg(&val);
 8007b7c:	a801      	add	r0, sp, #4
 8007b7e:	f000 fbc1 	bl	8008304 <fetch_uint32_arg>
  if(rc) {
 8007b82:	b108      	cbz	r0, 8007b88 <CmdLED+0x24>
    printf("Missing state value, 0 for Off, 1 for On\n");
 8007b84:	480b      	ldr	r0, [pc, #44]	; (8007bb4 <CmdLED+0x50>)
 8007b86:	e7f4      	b.n	8007b72 <CmdLED+0xe>
  if((led < 3) || (led > 10)) {
 8007b88:	9900      	ldr	r1, [sp, #0]
 8007b8a:	1ecb      	subs	r3, r1, #3
 8007b8c:	2b07      	cmp	r3, #7
 8007b8e:	d903      	bls.n	8007b98 <CmdLED+0x34>
    printf("Led index of %u is out of the range (3..10)\n",
 8007b90:	4809      	ldr	r0, [pc, #36]	; (8007bb8 <CmdLED+0x54>)
 8007b92:	f7f8 ffb1 	bl	8000af8 <printf>
    return;
 8007b96:	e7ee      	b.n	8007b76 <CmdLED+0x12>
  led -= 3;
 8007b98:	4a08      	ldr	r2, [pc, #32]	; (8007bbc <CmdLED+0x58>)
 8007b9a:	9300      	str	r3, [sp, #0]
  if(val) {
 8007b9c:	5cd0      	ldrb	r0, [r2, r3]
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	b113      	cbz	r3, 8007ba8 <CmdLED+0x44>
    BSP_LED_On(LEDs[led]);
 8007ba2:	f004 faa9 	bl	800c0f8 <BSP_LED_On>
 8007ba6:	e7e6      	b.n	8007b76 <CmdLED+0x12>
    BSP_LED_Off(LEDs[led]);
 8007ba8:	f004 fab4 	bl	800c114 <BSP_LED_Off>
 8007bac:	e7e3      	b.n	8007b76 <CmdLED+0x12>
 8007bae:	bf00      	nop
 8007bb0:	0800d560 	.word	0x0800d560
 8007bb4:	0800d572 	.word	0x0800d572
 8007bb8:	0800d59b 	.word	0x0800d59b
 8007bbc:	0800d72e 	.word	0x0800d72e

08007bc0 <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 8007bc0:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8007bc2:	b958      	cbnz	r0, 8007bdc <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 8007bc4:	4668      	mov	r0, sp
 8007bc6:	f004 fc2d 	bl	800c424 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8007bca:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007bce:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8007bd2:	f9bd 1000 	ldrsh.w	r1, [sp]
 8007bd6:	4803      	ldr	r0, [pc, #12]	; (8007be4 <CmdAccel+0x24>)
 8007bd8:	f7f8 ff8e 	bl	8000af8 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8007bdc:	b003      	add	sp, #12
 8007bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8007be2:	bf00      	nop
 8007be4:	0800d5c8 	.word	0x0800d5c8

08007be8 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8007be8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8007bea:	b9e8      	cbnz	r0, 8007c28 <CmdGyro+0x40>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8007bec:	a801      	add	r0, sp, #4
 8007bee:	f004 fc49 	bl	800c484 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
 8007bf2:	eddd 7a03 	vldr	s15, [sp, #12]
 8007bf6:	480e      	ldr	r0, [pc, #56]	; (8007c30 <CmdGyro+0x48>)
 8007bf8:	eeb0 7a67 	vmov.f32	s14, s15
 8007bfc:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007c00:	eddd 7a02 	vldr	s15, [sp, #8]
 8007c04:	ee17 3a10 	vmov	r3, s14
 8007c08:	eeb0 7a67 	vmov.f32	s14, s15
 8007c0c:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007c10:	eddd 7a01 	vldr	s15, [sp, #4]
 8007c14:	ee17 2a10 	vmov	r2, s14
 8007c18:	eeb0 7a67 	vmov.f32	s14, s15
 8007c1c:	eebe 7acc 	vcvt.s32.f32	s14, s14, #8
 8007c20:	ee17 1a10 	vmov	r1, s14
 8007c24:	f7f8 ff68 	bl	8000af8 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8007c28:	b005      	add	sp, #20
 8007c2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007c2e:	bf00      	nop
 8007c30:	0800d5fb 	.word	0x0800d5fb

08007c34 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8007c34:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 8007c36:	b958      	cbnz	r0, 8007c50 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 8007c38:	f004 fac0 	bl	800c1bc <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 8007c3c:	4a05      	ldr	r2, [pc, #20]	; (8007c54 <CmdButton+0x20>)
 8007c3e:	4906      	ldr	r1, [pc, #24]	; (8007c58 <CmdButton+0x24>)
	 button ? "Pressed" : "Released");

  return;
}
 8007c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("Button is currently: %s\n",
 8007c44:	2800      	cmp	r0, #0
 8007c46:	bf18      	it	ne
 8007c48:	4611      	movne	r1, r2
 8007c4a:	4804      	ldr	r0, [pc, #16]	; (8007c5c <CmdButton+0x28>)
 8007c4c:	f7f8 bf54 	b.w	8000af8 <printf>
}
 8007c50:	bd08      	pop	{r3, pc}
 8007c52:	bf00      	nop
 8007c54:	0800d62a 	.word	0x0800d62a
 8007c58:	0800d632 	.word	0x0800d632
 8007c5c:	0800d63b 	.word	0x0800d63b

08007c60 <Error_Handler>:
{
 8007c60:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 8007c62:	2003      	movs	r0, #3
 8007c64:	f004 fa48 	bl	800c0f8 <BSP_LED_On>
  while(1)
 8007c68:	e7fe      	b.n	8007c68 <Error_Handler+0x8>
	...

08007c6c <main>:
{
 8007c6c:	b530      	push	{r4, r5, lr}
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007c6e:	2301      	movs	r3, #1
{
 8007c70:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c72:	e9cd 3306 	strd	r3, r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007c76:	2300      	movs	r3, #0
 8007c78:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c7a:	2402      	movs	r4, #2
 8007c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c80:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007c84:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007c86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007c8a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8007c8c:	f001 f88a 	bl	8008da4 <HAL_RCC_OscConfig>
 8007c90:	b108      	cbz	r0, 8007c96 <main+0x2a>
    Error_Handler();
 8007c92:	f7ff ffe5 	bl	8007c60 <Error_Handler>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007c96:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8007c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ca0:	e9cd 3004 	strd	r3, r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ca4:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	a801      	add	r0, sp, #4
 8007caa:	f001 fb61 	bl	8009370 <HAL_RCC_ClockConfig>
 8007cae:	4604      	mov	r4, r0
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d1ee      	bne.n	8007c92 <main+0x26>
  HAL_Init();
 8007cb4:	f001 fd1c 	bl	80096f0 <HAL_Init>
  TerminalInit();  /* Initialize UART and USB */
 8007cb8:	f000 fc54 	bl	8008564 <TerminalInit>
  for(i=0; i<numLEDs; i++) {
 8007cbc:	4d0f      	ldr	r5, [pc, #60]	; (8007cfc <main+0x90>)
    BSP_LED_Init(LEDs[i]);
 8007cbe:	f815 0b01 	ldrb.w	r0, [r5], #1
  for(i=0; i<numLEDs; i++) {
 8007cc2:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8007cc4:	f004 f9e2 	bl	800c08c <BSP_LED_Init>
  for(i=0; i<numLEDs; i++) {
 8007cc8:	2c08      	cmp	r4, #8
 8007cca:	d1f8      	bne.n	8007cbe <main+0x52>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8007ccc:	2101      	movs	r1, #1
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f004 fa3a 	bl	800c148 <BSP_PB_Init>
  accelRc = BSP_ACCELERO_Init();
 8007cd4:	f004 fb86 	bl	800c3e4 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8007cd8:	b118      	cbz	r0, 8007ce2 <main+0x76>
    printf("Failed to initialize acceleromter\n");
 8007cda:	4809      	ldr	r0, [pc, #36]	; (8007d00 <main+0x94>)
 8007cdc:	f7f8 ff62 	bl	8000ba4 <puts>
 8007ce0:	e7d7      	b.n	8007c92 <main+0x26>
  gyroRc = BSP_GYRO_Init();
 8007ce2:	f004 fba7 	bl	800c434 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8007ce6:	b108      	cbz	r0, 8007cec <main+0x80>
    printf("Failed to initialize Gyroscope\n");
 8007ce8:	4806      	ldr	r0, [pc, #24]	; (8007d04 <main+0x98>)
 8007cea:	e7f7      	b.n	8007cdc <main+0x70>
  my_Init();
 8007cec:	f7f8 fe56 	bl	800099c <my_Init>
    TaskInput();
 8007cf0:	f000 fa6a 	bl	80081c8 <TaskInput>
    my_Loop();
 8007cf4:	f7f8 fe50 	bl	8000998 <my_Loop>
  while(1) {
 8007cf8:	e7fa      	b.n	8007cf0 <main+0x84>
 8007cfa:	bf00      	nop
 8007cfc:	0800d72e 	.word	0x0800d72e
 8007d00:	0800d654 	.word	0x0800d654
 8007d04:	0800d676 	.word	0x0800d676

08007d08 <SysTick_Handler>:
{
 8007d08:	b508      	push	{r3, lr}
    HAL_IncTick();
 8007d0a:	f001 fd03 	bl	8009714 <HAL_IncTick>
    my_Tick();
 8007d0e:	f7f8 fe39 	bl	8000984 <my_Tick>
    _bb_lab_tick();
 8007d12:	f7f8 fc96 	bl	8000642 <_bb_lab_tick>
    a4_game_time_logic();
 8007d16:	f7f8 fba6 	bl	8000466 <a4_game_time_logic>
}
 8007d1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _bb_a5_tick_handler();
 8007d1e:	f7f8 bb01 	b.w	8000324 <_bb_a5_tick_handler>

08007d22 <EXTI0_IRQHandler>:
{
 8007d22:	b508      	push	{r3, lr}
  _bb_a5_button_handler();
 8007d24:	f7f8 fb30 	bl	8000388 <_bb_a5_button_handler>
}
 8007d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f001 be49 	b.w	80099c4 <HAL_GPIO_EXTI_IRQHandler>
	...

08007d34 <_myTest>:
//============= test =============================

int myTest(int delay, int led);

void _myTest(int action)
{
 8007d34:	b507      	push	{r0, r1, r2, lr}

    uint32_t delay;
    int delay_status;

    delay_status = fetch_uint32_arg(&delay);
 8007d36:	4668      	mov	r0, sp
 8007d38:	f000 fae4 	bl	8008304 <fetch_uint32_arg>
    if (delay_status) {
 8007d3c:	b110      	cbz	r0, 8007d44 <_myTest+0x10>
        delay = 0xffffff;
 8007d3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007d42:	9300      	str	r3, [sp, #0]
    }

    uint32_t led;
    int led_status;

    led_status = fetch_uint32_arg(&led);
 8007d44:	a801      	add	r0, sp, #4
 8007d46:	f000 fadd 	bl	8008304 <fetch_uint32_arg>
    if (led_status) {
 8007d4a:	b108      	cbz	r0, 8007d50 <_myTest+0x1c>
        led = 5;
 8007d4c:	2305      	movs	r3, #5
 8007d4e:	9301      	str	r3, [sp, #4]
    }

    printf("myTest returned: %d\n", myTest(delay, led) );
 8007d50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d54:	f7f8 fa78 	bl	8000248 <myTest>
 8007d58:	4601      	mov	r1, r0
 8007d5a:	4803      	ldr	r0, [pc, #12]	; (8007d68 <_myTest+0x34>)
 8007d5c:	f7f8 fecc 	bl	8000af8 <printf>
}
 8007d60:	b003      	add	sp, #12
 8007d62:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d66:	bf00      	nop
 8007d68:	0800d736 	.word	0x0800d736

08007d6c <bb_watch>:
//
// PARAMETERS       : int action
// RETURNS          : none
//
void bb_watch(int action)
{
 8007d6c:	b513      	push	{r0, r1, r4, lr}
 8007d6e:	4604      	mov	r4, r0
    uint32_t timeout;
    int timeout_status;

    timeout_status = fetch_uint32_arg(&timeout);
 8007d70:	4668      	mov	r0, sp
 8007d72:	f000 fac7 	bl	8008304 <fetch_uint32_arg>
    if (timeout_status) {
 8007d76:	b110      	cbz	r0, 8007d7e <bb_watch+0x12>
        timeout = 1000;
 8007d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d7c:	9300      	str	r3, [sp, #0]
    }

    uint32_t delay;
    int delay_status;

    delay_status = fetch_uint32_arg(&delay);
 8007d7e:	a801      	add	r0, sp, #4
 8007d80:	f000 fac0 	bl	8008304 <fetch_uint32_arg>
    if (delay_status) {
 8007d84:	b110      	cbz	r0, 8007d8c <bb_watch+0x20>
        delay = 500;
 8007d86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007d8a:	9301      	str	r3, [sp, #4]
    }

    mes_InitIWDG(timeout);
 8007d8c:	9800      	ldr	r0, [sp, #0]
 8007d8e:	f000 f92f 	bl	8007ff0 <mes_InitIWDG>
    mes_IWDGStart();
 8007d92:	f000 f947 	bl	8008024 <mes_IWDGStart>

    if(action==CMD_SHORT_HELP) return;
 8007d96:	2c01      	cmp	r4, #1
 8007d98:	d004      	beq.n	8007da4 <bb_watch+0x38>

    if(action==CMD_LONG_HELP) {
 8007d9a:	2c02      	cmp	r4, #2
 8007d9c:	d104      	bne.n	8007da8 <bb_watch+0x3c>
        printf("bbWatch\n\n" "This command tests the led button watchdog function\n");
 8007d9e:	4807      	ldr	r0, [pc, #28]	; (8007dbc <bb_watch+0x50>)
 8007da0:	f7f8 ff00 	bl	8000ba4 <puts>
        return;
    }

    printf("_bbWatch returned: %d\n", _bbWatch(timeout, delay) );
}
 8007da4:	b002      	add	sp, #8
 8007da6:	bd10      	pop	{r4, pc}
    printf("_bbWatch returned: %d\n", _bbWatch(timeout, delay) );
 8007da8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007dac:	f7f8 faa6 	bl	80002fc <_bbWatch>
 8007db0:	4601      	mov	r1, r0
 8007db2:	4803      	ldr	r0, [pc, #12]	; (8007dc0 <bb_watch+0x54>)
 8007db4:	f7f8 fea0 	bl	8000af8 <printf>
 8007db8:	e7f4      	b.n	8007da4 <bb_watch+0x38>
 8007dba:	bf00      	nop
 8007dbc:	0800d74b 	.word	0x0800d74b
 8007dc0:	0800d788 	.word	0x0800d788

08007dc4 <bb_watchdog>:


// int watchdog(int rand);

void bb_watchdog(int action)
{
 8007dc4:	b507      	push	{r0, r1, r2, lr}
    uint32_t rand;
    int rand_status;

    rand_status = fetch_uint32_arg(&rand);
 8007dc6:	a801      	add	r0, sp, #4
 8007dc8:	f000 fa9c 	bl	8008304 <fetch_uint32_arg>
    if (rand_status) {
 8007dcc:	b108      	cbz	r0, 8007dd2 <bb_watchdog+0xe>
        rand = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9301      	str	r3, [sp, #4]
    }

    mes_InitIWDG(rand);
 8007dd2:	9801      	ldr	r0, [sp, #4]
 8007dd4:	f000 f90c 	bl	8007ff0 <mes_InitIWDG>
    mes_IWDGStart();
 8007dd8:	f000 f924 	bl	8008024 <mes_IWDGStart>
    mes_IWDGRefresh();
 8007ddc:	f000 f932 	bl	8008044 <mes_IWDGRefresh>

   //printf("watchdog returned: %d\n", watchdog(rand) );
}
 8007de0:	b003      	add	sp, #12
 8007de2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007de8 <bb_lab_8>:


int lab8(int rand);

void bb_lab_8(int action)
{
 8007de8:	b507      	push	{r0, r1, r2, lr}
    uint32_t rand;
    int rand_status;

    rand_status = fetch_uint32_arg(&rand);
 8007dea:	a801      	add	r0, sp, #4
 8007dec:	f000 fa8a 	bl	8008304 <fetch_uint32_arg>
    if (rand_status) {
 8007df0:	b108      	cbz	r0, 8007df6 <bb_lab_8+0xe>
        rand = 0;
 8007df2:	2300      	movs	r3, #0
 8007df4:	9301      	str	r3, [sp, #4]
    }

    printf("lab8 returned: %d\n", lab8(rand) );
 8007df6:	9801      	ldr	r0, [sp, #4]
 8007df8:	f7f8 facf 	bl	800039a <lab8>
 8007dfc:	4601      	mov	r1, r0
 8007dfe:	4803      	ldr	r0, [pc, #12]	; (8007e0c <bb_lab_8+0x24>)
 8007e00:	f7f8 fe7a 	bl	8000af8 <printf>
}
 8007e04:	b003      	add	sp, #12
 8007e06:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e0a:	bf00      	nop
 8007e0c:	0800d79f 	.word	0x0800d79f

08007e10 <bb_random_led_function>:


int random_led_function(int rand);

void bb_random_led_function(int action)
{
 8007e10:	b507      	push	{r0, r1, r2, lr}
    uint32_t rand;
    int rand_status;

    rand_status = fetch_uint32_arg(&rand);
 8007e12:	a801      	add	r0, sp, #4
 8007e14:	f000 fa76 	bl	8008304 <fetch_uint32_arg>
    if (rand_status) {
 8007e18:	b108      	cbz	r0, 8007e1e <bb_random_led_function+0xe>
        rand = 0;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9301      	str	r3, [sp, #4]
    }

    printf("random_led_function returned: %d\n", random_led_function(rand) );
 8007e1e:	9801      	ldr	r0, [sp, #4]
 8007e20:	f7f8 fad1 	bl	80003c6 <random_led_function>
 8007e24:	4601      	mov	r1, r0
 8007e26:	4803      	ldr	r0, [pc, #12]	; (8007e34 <bb_random_led_function+0x24>)
 8007e28:	f7f8 fe66 	bl	8000af8 <printf>
}
 8007e2c:	b003      	add	sp, #12
 8007e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e32:	bf00      	nop
 8007e34:	0800d7b2 	.word	0x0800d7b2

08007e38 <bb_tilt_game>:
//      be set.
// PARAMETERS       : int action
// RETURNS          : none
//
void bb_tilt_game(int action)
{
 8007e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e3a:	4604      	mov	r4, r0
    uint32_t delay;
    int delay_status;

    delay_status = fetch_uint32_arg(&delay);
 8007e3c:	a801      	add	r0, sp, #4
 8007e3e:	f000 fa61 	bl	8008304 <fetch_uint32_arg>
    if (delay_status) {
 8007e42:	b110      	cbz	r0, 8007e4a <bb_tilt_game+0x12>
        delay = 500;
 8007e44:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007e48:	9301      	str	r3, [sp, #4]
    }

    uint32_t target;
    int target_status;

    target_status = fetch_uint32_arg(&target);
 8007e4a:	a802      	add	r0, sp, #8
 8007e4c:	f000 fa5a 	bl	8008304 <fetch_uint32_arg>
    if (target_status){
 8007e50:	b108      	cbz	r0, 8007e56 <bb_tilt_game+0x1e>
        target = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	9302      	str	r3, [sp, #8]
    }

    uint32_t game_time;
    int game_time_status;

    game_time_status = fetch_uint32_arg(&game_time);
 8007e56:	a803      	add	r0, sp, #12
 8007e58:	f000 fa54 	bl	8008304 <fetch_uint32_arg>
    if (game_time_status){
 8007e5c:	b108      	cbz	r0, 8007e62 <bb_tilt_game+0x2a>
        game_time = 10;
 8007e5e:	230a      	movs	r3, #10
 8007e60:	9303      	str	r3, [sp, #12]
    }

    if(action==CMD_SHORT_HELP) return;
 8007e62:	2c01      	cmp	r4, #1
 8007e64:	d004      	beq.n	8007e70 <bb_tilt_game+0x38>

    if(action==CMD_LONG_HELP) {
 8007e66:	2c02      	cmp	r4, #2
 8007e68:	d104      	bne.n	8007e74 <bb_tilt_game+0x3c>
        printf("bbTilt game\n\n" "This command tests the led tilt game function\n");
 8007e6a:	4807      	ldr	r0, [pc, #28]	; (8007e88 <bb_tilt_game+0x50>)
 8007e6c:	f7f8 fe9a 	bl	8000ba4 <puts>
        return;
    }


     printf("bbTilt returned: %d\n", bbTilt(delay, target, game_time) );
}
 8007e70:	b004      	add	sp, #16
 8007e72:	bd10      	pop	{r4, pc}
     printf("bbTilt returned: %d\n", bbTilt(delay, target, game_time) );
 8007e74:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007e78:	9801      	ldr	r0, [sp, #4]
 8007e7a:	f7f8 fad6 	bl	800042a <bbTilt>
 8007e7e:	4601      	mov	r1, r0
 8007e80:	4802      	ldr	r0, [pc, #8]	; (8007e8c <bb_tilt_game+0x54>)
 8007e82:	f7f8 fe39 	bl	8000af8 <printf>
 8007e86:	e7f3      	b.n	8007e70 <bb_tilt_game+0x38>
 8007e88:	0800d7d4 	.word	0x0800d7d4
 8007e8c:	0800d80f 	.word	0x0800d80f

08007e90 <_bb_lab7>:

int _bb_lab_setup(int ticks, int ticksToBlinks);
//int a4_game_time_logic(int ticks, int ticksToBlinks);

void _bb_lab7(int action)
{
 8007e90:	b507      	push	{r0, r1, r2, lr}
    uint32_t ticks;
    int ticks_status;

    ticks_status = fetch_uint32_arg(&ticks);
 8007e92:	4668      	mov	r0, sp
 8007e94:	f000 fa36 	bl	8008304 <fetch_uint32_arg>
    if (ticks_status) {
 8007e98:	b108      	cbz	r0, 8007e9e <_bb_lab7+0xe>
        ticks = 25;
 8007e9a:	2319      	movs	r3, #25
 8007e9c:	9300      	str	r3, [sp, #0]
    }

    uint32_t ticksToBlinks;
    int ticksToBlinks_status;

    ticksToBlinks_status = fetch_uint32_arg(&ticksToBlinks);
 8007e9e:	a801      	add	r0, sp, #4
 8007ea0:	f000 fa30 	bl	8008304 <fetch_uint32_arg>
    if (ticksToBlinks_status){
 8007ea4:	b110      	cbz	r0, 8007eac <_bb_lab7+0x1c>
        ticksToBlinks = 500;
 8007ea6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007eaa:	9301      	str	r3, [sp, #4]
    }

    printf("_bb_lab_setup returned: %d\n", _bb_lab_setup(ticks, ticksToBlinks) );
 8007eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eb0:	f7f8 fb95 	bl	80005de <_bb_lab_setup>
 8007eb4:	4601      	mov	r1, r0
 8007eb6:	4803      	ldr	r0, [pc, #12]	; (8007ec4 <_bb_lab7+0x34>)
 8007eb8:	f7f8 fe1e 	bl	8000af8 <printf>
}
 8007ebc:	b003      	add	sp, #12
 8007ebe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ec2:	bf00      	nop
 8007ec4:	0800d824 	.word	0x0800d824

08007ec8 <testTick>:
ADD_CMD("lab7setup", _bb_lab7,"Test lab 7 setup")

int test_tick(int test);

void testTick(int action)
{
 8007ec8:	b507      	push	{r0, r1, r2, lr}
    uint32_t test;
    int test_status;

    test_status = fetch_uint32_arg(&test);
 8007eca:	a801      	add	r0, sp, #4
 8007ecc:	f000 fa1a 	bl	8008304 <fetch_uint32_arg>
    if (test_status) {
 8007ed0:	b110      	cbz	r0, 8007ed8 <testTick+0x10>
        test = 5000;
 8007ed2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007ed6:	9301      	str	r3, [sp, #4]
    }

    printf("test_tick returned: %d\n", test_tick(test) );
 8007ed8:	9801      	ldr	r0, [sp, #4]
 8007eda:	f7f8 fb7d 	bl	80005d8 <test_tick>
 8007ede:	4601      	mov	r1, r0
 8007ee0:	4802      	ldr	r0, [pc, #8]	; (8007eec <testTick+0x24>)
 8007ee2:	f7f8 fe09 	bl	8000af8 <printf>

    //printf("_bb_lab_tick returned: %d\n", _bb_lab_tick(test) );
    //_bb_lab_tick();
}
 8007ee6:	b003      	add	sp, #12
 8007ee8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007eec:	0800d840 	.word	0x0800d840

08007ef0 <_bb_A3>:
//      return the value of r0.
// PARAMETERS       : int action
// RETURNS          : none
//
void _bb_A3(int action)
{
 8007ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint32_t usrDelay;
    int usrDelay_status;

    usrDelay_status = fetch_uint32_arg(&usrDelay);
 8007ef2:	a801      	add	r0, sp, #4
 8007ef4:	f000 fa06 	bl	8008304 <fetch_uint32_arg>
    if (usrDelay_status) {
 8007ef8:	b110      	cbz	r0, 8007f00 <_bb_A3+0x10>
        usrDelay = 500;
 8007efa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007efe:	9301      	str	r3, [sp, #4]
    }

    int fetch_status;
    char *pattern;

    fetch_status = fetch_string_arg(&pattern);
 8007f00:	a802      	add	r0, sp, #8
 8007f02:	f000 fa13 	bl	800832c <fetch_string_arg>
    if(fetch_status) {
 8007f06:	b108      	cbz	r0, 8007f0c <_bb_A3+0x1c>
        pattern = "43567011";
 8007f08:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <_bb_A3+0x44>)
 8007f0a:	9302      	str	r3, [sp, #8]
    }

    uint32_t win;
    int win_status;

    win_status = fetch_uint32_arg(&win);
 8007f0c:	a803      	add	r0, sp, #12
 8007f0e:	f000 f9f9 	bl	8008304 <fetch_uint32_arg>
    if (win_status) {
 8007f12:	b108      	cbz	r0, 8007f18 <_bb_A3+0x28>
        win = 5;
 8007f14:	2305      	movs	r3, #5
 8007f16:	9303      	str	r3, [sp, #12]
    }

    printf("bb_game_a3 returned: %d\n", bb_game_a3(usrDelay, pattern, win, BUTTON_USER) );
 8007f18:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9801      	ldr	r0, [sp, #4]
 8007f20:	f7f8 fc56 	bl	80007d0 <bb_game_a3>
 8007f24:	4601      	mov	r1, r0
 8007f26:	4804      	ldr	r0, [pc, #16]	; (8007f38 <_bb_A3+0x48>)
 8007f28:	f7f8 fde6 	bl	8000af8 <printf>
}
 8007f2c:	b005      	add	sp, #20
 8007f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f32:	bf00      	nop
 8007f34:	0800d858 	.word	0x0800d858
 8007f38:	0800d861 	.word	0x0800d861

08007f3c <_lab_5>:
//-----------------

int string_test(char *dest);    // was *p

void _lab_5(int action)
{
 8007f3c:	b507      	push	{r0, r1, r2, lr}
    int fetch_status;
    char *dest;

    fetch_status = fetch_string_arg(&dest);
 8007f3e:	a801      	add	r0, sp, #4
 8007f40:	f000 f9f4 	bl	800832c <fetch_string_arg>
    if(fetch_status) {
 8007f44:	b108      	cbz	r0, 8007f4a <_lab_5+0xe>
        dest = "hello";
 8007f46:	4b06      	ldr	r3, [pc, #24]	; (8007f60 <_lab_5+0x24>)
 8007f48:	9301      	str	r3, [sp, #4]
    }

    printf("string_test returned: %d\n", string_test(dest) );
 8007f4a:	9801      	ldr	r0, [sp, #4]
 8007f4c:	f7f8 fcab 	bl	80008a6 <string_test>
 8007f50:	4601      	mov	r1, r0
 8007f52:	4804      	ldr	r0, [pc, #16]	; (8007f64 <_lab_5+0x28>)
 8007f54:	f7f8 fdd0 	bl	8000af8 <printf>
}
 8007f58:	b003      	add	sp, #12
 8007f5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f5e:	bf00      	nop
 8007f60:	0800d87a 	.word	0x0800d87a
 8007f64:	0800d880 	.word	0x0800d880

08007f68 <_bb_A2>:
//--------------------

int bb_led_demo_a2(int count, int delay);

void _bb_A2(int action)
{
 8007f68:	b513      	push	{r0, r1, r4, lr}
 8007f6a:	4604      	mov	r4, r0
    uint32_t count;
    int count_status;

    count_status = fetch_uint32_arg(&count);
 8007f6c:	4668      	mov	r0, sp
 8007f6e:	f000 f9c9 	bl	8008304 <fetch_uint32_arg>
    if (count_status) {
 8007f72:	b108      	cbz	r0, 8007f78 <_bb_A2+0x10>
        count = 1;
 8007f74:	2301      	movs	r3, #1
 8007f76:	9300      	str	r3, [sp, #0]
    }

    uint32_t delay;
    int delay_status;

    delay_status = fetch_uint32_arg(&delay);
 8007f78:	a801      	add	r0, sp, #4
 8007f7a:	f000 f9c3 	bl	8008304 <fetch_uint32_arg>
    if (delay_status) {
 8007f7e:	b110      	cbz	r0, 8007f86 <_bb_A2+0x1e>
        delay = 0xffffff;
 8007f80:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007f84:	9301      	str	r3, [sp, #4]
    }

    // original here and below
    if(action==CMD_SHORT_HELP) return;
 8007f86:	2c01      	cmp	r4, #1
 8007f88:	d004      	beq.n	8007f94 <_bb_A2+0x2c>

    if(action==CMD_LONG_HELP) {
 8007f8a:	2c02      	cmp	r4, #2
 8007f8c:	d104      	bne.n	8007f98 <_bb_A2+0x30>
        printf("Addition Test\n\n" "This command tests new addition function\n");
 8007f8e:	4807      	ldr	r0, [pc, #28]	; (8007fac <_bb_A2+0x44>)
 8007f90:	f7f8 fe08 	bl	8000ba4 <puts>
        return;
    }

    printf("bb_led_demo_a2 returned: %d\n", bb_led_demo_a2(count, delay) );
}
 8007f94:	b002      	add	sp, #8
 8007f96:	bd10      	pop	{r4, pc}
    printf("bb_led_demo_a2 returned: %d\n", bb_led_demo_a2(count, delay) );
 8007f98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f9c:	f7f8 fc96 	bl	80008cc <bb_led_demo_a2>
 8007fa0:	4601      	mov	r1, r0
 8007fa2:	4803      	ldr	r0, [pc, #12]	; (8007fb0 <_bb_A2+0x48>)
 8007fa4:	f7f8 fda8 	bl	8000af8 <printf>
 8007fa8:	e7f4      	b.n	8007f94 <_bb_A2+0x2c>
 8007faa:	bf00      	nop
 8007fac:	0800d89a 	.word	0x0800d89a
 8007fb0:	0800d8d2 	.word	0x0800d8d2

08007fb4 <lab6>:
    if(action==CMD_SHORT_HELP) return;
 8007fb4:	2801      	cmp	r0, #1
{ 
 8007fb6:	b507      	push	{r0, r1, r2, lr}
    if(action==CMD_SHORT_HELP) return;
 8007fb8:	d004      	beq.n	8007fc4 <lab6+0x10>
    if(action==CMD_LONG_HELP) 
 8007fba:	2802      	cmp	r0, #2
 8007fbc:	d105      	bne.n	8007fca <lab6+0x16>
        printf("lab6 Test\n\n"
 8007fbe:	480a      	ldr	r0, [pc, #40]	; (8007fe8 <lab6+0x34>)
 8007fc0:	f7f8 fdf0 	bl	8000ba4 <puts>
}
 8007fc4:	b003      	add	sp, #12
 8007fc6:	f85d fb04 	ldr.w	pc, [sp], #4
    fetch_status1 = fetch_uint32_arg(&input);
 8007fca:	a801      	add	r0, sp, #4
 8007fcc:	f000 f99a 	bl	8008304 <fetch_uint32_arg>
    if(fetch_status1) 
 8007fd0:	b108      	cbz	r0, 8007fd6 <lab6+0x22>
        input = 0;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9301      	str	r3, [sp, #4]
        printf("lab6_test (accelerometer test) returned: %d\n", lab6_test(input));
 8007fd6:	9801      	ldr	r0, [sp, #4]
 8007fd8:	f7f8 fbb9 	bl	800074e <lab6_test>
 8007fdc:	4601      	mov	r1, r0
 8007fde:	4803      	ldr	r0, [pc, #12]	; (8007fec <lab6+0x38>)
 8007fe0:	f7f8 fd8a 	bl	8000af8 <printf>
 8007fe4:	e7ee      	b.n	8007fc4 <lab6+0x10>
 8007fe6:	bf00      	nop
 8007fe8:	0800d8ef 	.word	0x0800d8ef
 8007fec:	0800d91f 	.word	0x0800d91f

08007ff0 <mes_InitIWDG>:

static IWDG_HandleTypeDef hiwdg;    // IWDG handle

// Initialize the Watchdog structures etc, only called once
void mes_InitIWDG(int duration)
{
 8007ff0:	b508      	push	{r3, lr}
    hiwdg.Instance = IWDG;
    hiwdg.Init.Prescaler = IWDG_PRESCALER_256;  // IWDG prescaler 4, 8, 16, 32, 64, 128, 256
 8007ff2:	4909      	ldr	r1, [pc, #36]	; (8008018 <mes_InitIWDG+0x28>)
    hiwdg.Instance = IWDG;
 8007ff4:	4b09      	ldr	r3, [pc, #36]	; (800801c <mes_InitIWDG+0x2c>)
    hiwdg.Init.Prescaler = IWDG_PRESCALER_256;  // IWDG prescaler 4, 8, 16, 32, 64, 128, 256
 8007ff6:	2206      	movs	r2, #6
 8007ff8:	e9c3 1200 	strd	r1, r2, [r3]

    // This divides the clock for longer
    // or shorter watchdog timing
    hiwdg.Init.Reload = duration;        // The watchdog counts down from this value
 8007ffc:	6098      	str	r0, [r3, #8]
    //hiwdg.Init.Reload = 100;        
    hiwdg.Init.Window = 0x0FFF;     // Window option is disabled
 8007ffe:	f640 72ff 	movw	r2, #4095	; 0xfff

    if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008002:	4618      	mov	r0, r3
    hiwdg.Init.Window = 0x0FFF;     // Window option is disabled
 8008004:	60da      	str	r2, [r3, #12]
    if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008006:	f003 f92d 	bl	800b264 <HAL_IWDG_Init>
 800800a:	b120      	cbz	r0, 8008016 <mes_InitIWDG+0x26>
    {
        printf("IWDG initialization error\n"); // Initialization Error
    }
}
 800800c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printf("IWDG initialization error\n"); // Initialization Error
 8008010:	4803      	ldr	r0, [pc, #12]	; (8008020 <mes_InitIWDG+0x30>)
 8008012:	f7f8 bdc7 	b.w	8000ba4 <puts>
}
 8008016:	bd08      	pop	{r3, pc}
 8008018:	40003000 	.word	0x40003000
 800801c:	20000ce4 	.word	0x20000ce4
 8008020:	0800da7e 	.word	0x0800da7e

08008024 <mes_IWDGStart>:


// Start the watchdog, generally would only be called once
void mes_IWDGStart( void )
{
 8008024:	b508      	push	{r3, lr}
    if (HAL_IWDG_Start(&hiwdg) != HAL_OK)
 8008026:	4805      	ldr	r0, [pc, #20]	; (800803c <mes_IWDGStart+0x18>)
 8008028:	f003 f96b 	bl	800b302 <HAL_IWDG_Start>
 800802c:	b120      	cbz	r0, 8008038 <mes_IWDGStart+0x14>
    {
        printf("IWDG start error\n");       // Start Error
    }
}
 800802e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printf("IWDG start error\n");       // Start Error
 8008032:	4803      	ldr	r0, [pc, #12]	; (8008040 <mes_IWDGStart+0x1c>)
 8008034:	f7f8 bdb6 	b.w	8000ba4 <puts>
}
 8008038:	bd08      	pop	{r3, pc}
 800803a:	bf00      	nop
 800803c:	20000ce4 	.word	0x20000ce4
 8008040:	0800da98 	.word	0x0800da98

08008044 <mes_IWDGRefresh>:


// Refresh the watchdog, this must be called before the
// watchdog timer times out or the board will reset
void mes_IWDGRefresh(void)
{
 8008044:	b508      	push	{r3, lr}
    if (HAL_IWDG_Refresh(&hiwdg) != HAL_OK)
 8008046:	4805      	ldr	r0, [pc, #20]	; (800805c <mes_IWDGRefresh+0x18>)
 8008048:	f003 f995 	bl	800b376 <HAL_IWDG_Refresh>
 800804c:	b120      	cbz	r0, 8008058 <mes_IWDGRefresh+0x14>
    {
        printf("IWDG refresh error\n");     // Refresh Error
    }
 800804e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        printf("IWDG refresh error\n");     // Refresh Error
 8008052:	4803      	ldr	r0, [pc, #12]	; (8008060 <mes_IWDGRefresh+0x1c>)
 8008054:	f7f8 bda6 	b.w	8000ba4 <puts>
 8008058:	bd08      	pop	{r3, pc}
 800805a:	bf00      	nop
 800805c:	20000ce4 	.word	0x20000ce4
 8008060:	0800daa9 	.word	0x0800daa9

08008064 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8008064:	2801      	cmp	r0, #1
{
 8008066:	b508      	push	{r3, lr}
  if(action==CMD_SHORT_HELP) return;
 8008068:	d00f      	beq.n	800808a <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 800806a:	2802      	cmp	r0, #2
 800806c:	d104      	bne.n	8008078 <CmdTest+0x14>
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 800806e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printf("testasm\n\n"
 8008072:	4806      	ldr	r0, [pc, #24]	; (800808c <CmdTest+0x28>)
 8008074:	f7f8 bd96 	b.w	8000ba4 <puts>
  printf("ret val = %d\n", mytest( 77  ) );
 8008078:	204d      	movs	r0, #77	; 0x4d
 800807a:	f7f8 fc79 	bl	8000970 <mytest>
}
 800807e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  printf("ret val = %d\n", mytest( 77  ) );
 8008082:	4601      	mov	r1, r0
 8008084:	4802      	ldr	r0, [pc, #8]	; (8008090 <CmdTest+0x2c>)
 8008086:	f7f8 bd37 	b.w	8000af8 <printf>
}
 800808a:	bd08      	pop	{r3, pc}
 800808c:	0800dabc 	.word	0x0800dabc
 8008090:	0800daf5 	.word	0x0800daf5

08008094 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8008094:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8008096:	b940      	cbnz	r0, 80080aa <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8008098:	4668      	mov	r0, sp
 800809a:	f000 f933 	bl	8008304 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800809e:	a801      	add	r0, sp, #4
 80080a0:	f000 f930 	bl	8008304 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 80080a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80080a8:	601a      	str	r2, [r3, #0]
}
 80080aa:	b003      	add	sp, #12
 80080ac:	f85d fb04 	ldr.w	pc, [sp], #4

080080b0 <CmdR>:
{
 80080b0:	b507      	push	{r0, r1, r2, lr}
  if(mode != CMD_INTERACTIVE) return;
 80080b2:	b938      	cbnz	r0, 80080c4 <CmdR+0x14>
  fetch_uint32_arg(&addr);
 80080b4:	a801      	add	r0, sp, #4
 80080b6:	f000 f925 	bl	8008304 <fetch_uint32_arg>
  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 80080ba:	9901      	ldr	r1, [sp, #4]
 80080bc:	4803      	ldr	r0, [pc, #12]	; (80080cc <CmdR+0x1c>)
 80080be:	680a      	ldr	r2, [r1, #0]
 80080c0:	f7f8 fd1a 	bl	8000af8 <printf>
}
 80080c4:	b003      	add	sp, #12
 80080c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80080ca:	bf00      	nop
 80080cc:	0800db19 	.word	0x0800db19

080080d0 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80080d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d2:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80080d4:	b930      	cbnz	r0, 80080e4 <parse+0x14>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80080d6:	4931      	ldr	r1, [pc, #196]	; (800819c <parse+0xcc>)
 80080d8:	4831      	ldr	r0, [pc, #196]	; (80081a0 <parse+0xd0>)
      t->func(arg);
      return 0;
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 80080da:	f7f8 fd0d 	bl	8000af8 <printf>
    return -1;
 80080de:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080e2:	e032      	b.n	800814a <parse+0x7a>
  if(len==0) {
 80080e4:	b911      	cbnz	r1, 80080ec <parse+0x1c>
    printf("len == 0 in %s\n",__FUNCTION__);
 80080e6:	492d      	ldr	r1, [pc, #180]	; (800819c <parse+0xcc>)
 80080e8:	482e      	ldr	r0, [pc, #184]	; (80081a4 <parse+0xd4>)
 80080ea:	e7f6      	b.n	80080da <parse+0xa>
  if(table == NULL) {
 80080ec:	b182      	cbz	r2, 8008110 <parse+0x40>
 80080ee:	1e4c      	subs	r4, r1, #1
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80080f0:	492d      	ldr	r1, [pc, #180]	; (80081a8 <parse+0xd8>)
 80080f2:	4603      	mov	r3, r0
 80080f4:	1c66      	adds	r6, r4, #1
 80080f6:	4618      	mov	r0, r3
 80080f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080fc:	d00d      	beq.n	800811a <parse+0x4a>
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d0ed      	beq.n	80080de <parse+0xe>
 8008102:	5c52      	ldrb	r2, [r2, r1]
 8008104:	0712      	lsls	r2, r2, #28
 8008106:	f104 36ff 	add.w	r6, r4, #4294967295	; 0xffffffff
 800810a:	d404      	bmi.n	8008116 <parse+0x46>
  if((i==0) || (*buf==0)) {
 800810c:	b934      	cbnz	r4, 800811c <parse+0x4c>
 800810e:	e7e6      	b.n	80080de <parse+0xe>
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 8008110:	4922      	ldr	r1, [pc, #136]	; (800819c <parse+0xcc>)
 8008112:	4826      	ldr	r0, [pc, #152]	; (80081ac <parse+0xdc>)
 8008114:	e7e1      	b.n	80080da <parse+0xa>
 8008116:	4634      	mov	r4, r6
 8008118:	e7ec      	b.n	80080f4 <parse+0x24>
  if((i==0) || (*buf==0)) {
 800811a:	b1b2      	cbz	r2, 800814a <parse+0x7a>
  p = strtok(buf,SEPS);
 800811c:	4924      	ldr	r1, [pc, #144]	; (80081b0 <parse+0xe0>)
 800811e:	f7f8 fefd 	bl	8000f1c <strtok>
  if(p==NULL) {
 8008122:	4606      	mov	r6, r0
 8008124:	b910      	cbnz	r0, 800812c <parse+0x5c>
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 8008126:	491d      	ldr	r1, [pc, #116]	; (800819c <parse+0xcc>)
 8008128:	4822      	ldr	r0, [pc, #136]	; (80081b4 <parse+0xe4>)
 800812a:	e7d6      	b.n	80080da <parse+0xa>
  if(strcasecmp(p,"help") == 0) {
 800812c:	4922      	ldr	r1, [pc, #136]	; (80081b8 <parse+0xe8>)
 800812e:	f7f8 fdeb 	bl	8000d08 <strcasecmp>
 8008132:	4604      	mov	r4, r0
 8008134:	b9c8      	cbnz	r0, 800816a <parse+0x9a>
    p = strtok(NULL,SEPS);
 8008136:	491e      	ldr	r1, [pc, #120]	; (80081b0 <parse+0xe0>)
 8008138:	f7f8 fef0 	bl	8000f1c <strtok>
    if(p == NULL) {
 800813c:	4606      	mov	r6, r0
 800813e:	b9d0      	cbnz	r0, 8008176 <parse+0xa6>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8008140:	4e1e      	ldr	r6, [pc, #120]	; (80081bc <parse+0xec>)
 8008142:	350c      	adds	r5, #12
      for(t=table; t->cmdname!=NULL; t++) {
 8008144:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8008148:	b911      	cbnz	r1, 8008150 <parse+0x80>
  return -1;
}
 800814a:	4620      	mov	r0, r4
 800814c:	b003      	add	sp, #12
 800814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(t->help != NULL) {
 8008150:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8008154:	b122      	cbz	r2, 8008160 <parse+0x90>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8008156:	4630      	mov	r0, r6
 8008158:	f7f8 fcce 	bl	8000af8 <printf>
      for(t=table; t->cmdname!=NULL; t++) {
 800815c:	350c      	adds	r5, #12
 800815e:	e7f1      	b.n	8008144 <parse+0x74>
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8008160:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8008164:	2001      	movs	r0, #1
 8008166:	4798      	blx	r3
 8008168:	e7f8      	b.n	800815c <parse+0x8c>
  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 800816a:	2700      	movs	r7, #0
  for(t=table; t->cmdname!=NULL; t++) {
 800816c:	6829      	ldr	r1, [r5, #0]
 800816e:	b921      	cbnz	r1, 800817a <parse+0xaa>
  printf("Command `%s' not found. Type `help' for online help\n",p);
 8008170:	4813      	ldr	r0, [pc, #76]	; (80081c0 <parse+0xf0>)
 8008172:	4631      	mov	r1, r6
 8008174:	e7b1      	b.n	80080da <parse+0xa>
      arg = CMD_LONG_HELP;
 8008176:	2702      	movs	r7, #2
  for(t=table; t->cmdname!=NULL; t++) {
 8008178:	e7f8      	b.n	800816c <parse+0x9c>
    if(strcasecmp(p,t->cmdname) == 0) {
 800817a:	4630      	mov	r0, r6
 800817c:	9101      	str	r1, [sp, #4]
 800817e:	f7f8 fdc3 	bl	8000d08 <strcasecmp>
 8008182:	9901      	ldr	r1, [sp, #4]
 8008184:	4604      	mov	r4, r0
 8008186:	b938      	cbnz	r0, 8008198 <parse+0xc8>
      if(arg == CMD_LONG_HELP) {	
 8008188:	b117      	cbz	r7, 8008190 <parse+0xc0>
	printf("%s:\n",t->cmdname);
 800818a:	480e      	ldr	r0, [pc, #56]	; (80081c4 <parse+0xf4>)
 800818c:	f7f8 fcb4 	bl	8000af8 <printf>
      t->func(arg);
 8008190:	686b      	ldr	r3, [r5, #4]
 8008192:	4638      	mov	r0, r7
 8008194:	4798      	blx	r3
      return 0;
 8008196:	e7d8      	b.n	800814a <parse+0x7a>
  for(t=table; t->cmdname!=NULL; t++) {
 8008198:	350c      	adds	r5, #12
 800819a:	e7e7      	b.n	800816c <parse+0x9c>
 800819c:	0800dc45 	.word	0x0800dc45
 80081a0:	0800db64 	.word	0x0800db64
 80081a4:	0800db85 	.word	0x0800db85
 80081a8:	0800d2ed 	.word	0x0800d2ed
 80081ac:	0800db95 	.word	0x0800db95
 80081b0:	0800dbb8 	.word	0x0800dbb8
 80081b4:	0800dbbf 	.word	0x0800dbbf
 80081b8:	0800dbef 	.word	0x0800dbef
 80081bc:	0800dbf4 	.word	0x0800dbf4
 80081c0:	0800dc05 	.word	0x0800dc05
 80081c4:	0800dc00 	.word	0x0800dc00

080081c8 <TaskInput>:
{
 80081c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(printPrompt) {
 80081ca:	4c43      	ldr	r4, [pc, #268]	; (80082d8 <TaskInput+0x110>)
 80081cc:	6823      	ldr	r3, [r4, #0]
 80081ce:	b123      	cbz	r3, 80081da <TaskInput+0x12>
    printf("ARMON>");
 80081d0:	4842      	ldr	r0, [pc, #264]	; (80082dc <TaskInput+0x114>)
 80081d2:	f7f8 fc91 	bl	8000af8 <printf>
    printPrompt = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	6023      	str	r3, [r4, #0]
  rc = TerminalReadAnyNonBlock(&c);
 80081da:	f10d 0007 	add.w	r0, sp, #7
 80081de:	f000 fa32 	bl	8008646 <TerminalReadAnyNonBlock>
  if(rc) {
 80081e2:	b990      	cbnz	r0, 800820a <TaskInput+0x42>
  if(((c == 010) || (c == 0x7f)) && count) {
 80081e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d001      	beq.n	80081f0 <TaskInput+0x28>
 80081ec:	2b7f      	cmp	r3, #127	; 0x7f
 80081ee:	d10e      	bne.n	800820e <TaskInput+0x46>
 80081f0:	4d3b      	ldr	r5, [pc, #236]	; (80082e0 <TaskInput+0x118>)
 80081f2:	682a      	ldr	r2, [r5, #0]
 80081f4:	b15a      	cbz	r2, 800820e <TaskInput+0x46>
    printf("\010 \010"); /* Obliterate character */
 80081f6:	483b      	ldr	r0, [pc, #236]	; (80082e4 <TaskInput+0x11c>)
 80081f8:	f7f8 fc7e 	bl	8000af8 <printf>
    buf--;     /* Then remove it from the buffer */
 80081fc:	4a3a      	ldr	r2, [pc, #232]	; (80082e8 <TaskInput+0x120>)
 80081fe:	6813      	ldr	r3, [r2, #0]
 8008200:	3b01      	subs	r3, #1
 8008202:	6013      	str	r3, [r2, #0]
    count--;   /* Then keep track of how many are left */
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	3b01      	subs	r3, #1
 8008208:	602b      	str	r3, [r5, #0]
}
 800820a:	b003      	add	sp, #12
 800820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if(c == '!') { /* '!' repeats the last command */
 800820e:	2b21      	cmp	r3, #33	; 0x21
 8008210:	d139      	bne.n	8008286 <TaskInput+0xbe>
    if(saved) {  /* But only if we have something saved */
 8008212:	4b36      	ldr	r3, [pc, #216]	; (80082ec <TaskInput+0x124>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d0f7      	beq.n	800820a <TaskInput+0x42>
      strcpy(input,input_b);  /* Restore the command */
 800821a:	4d35      	ldr	r5, [pc, #212]	; (80082f0 <TaskInput+0x128>)
 800821c:	4935      	ldr	r1, [pc, #212]	; (80082f4 <TaskInput+0x12c>)
 800821e:	4628      	mov	r0, r5
 8008220:	f7f8 fd96 	bl	8000d50 <strcpy>
      printf("%s",input);
 8008224:	4629      	mov	r1, r5
 8008226:	4834      	ldr	r0, [pc, #208]	; (80082f8 <TaskInput+0x130>)
 8008228:	f7f8 fc66 	bl	8000af8 <printf>
      count = strlen(input);
 800822c:	4628      	mov	r0, r5
 800822e:	f7f8 fe07 	bl	8000e40 <strlen>
 8008232:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <TaskInput+0x118>)
 8008234:	6018      	str	r0, [r3, #0]
      buf = input+count;
 8008236:	4b2c      	ldr	r3, [pc, #176]	; (80082e8 <TaskInput+0x120>)
 8008238:	4428      	add	r0, r5
 800823a:	6018      	str	r0, [r3, #0]
    printf("\n");
 800823c:	200a      	movs	r0, #10
 800823e:	f7f8 fc73 	bl	8000b28 <putchar>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8008242:	4d29      	ldr	r5, [pc, #164]	; (80082e8 <TaskInput+0x120>)
 8008244:	4a26      	ldr	r2, [pc, #152]	; (80082e0 <TaskInput+0x118>)
 8008246:	682b      	ldr	r3, [r5, #0]
 8008248:	6816      	ldr	r6, [r2, #0]
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	eba6 0c03 	sub.w	ip, r6, r3
 8008252:	468e      	mov	lr, r1
 8008254:	eb00 070c 	add.w	r7, r0, ip
 8008258:	2f4f      	cmp	r7, #79	; 0x4f
 800825a:	d938      	bls.n	80082ce <TaskInput+0x106>
 800825c:	2e50      	cmp	r6, #80	; 0x50
 800825e:	f1c6 0050 	rsb	r0, r6, #80	; 0x50
 8008262:	bf88      	it	hi
 8008264:	2000      	movhi	r0, #0
 8008266:	4403      	add	r3, r0
 8008268:	b101      	cbz	r1, 800826c <TaskInput+0xa4>
 800826a:	602b      	str	r3, [r5, #0]
    count = 0;
 800826c:	2300      	movs	r3, #0
 800826e:	6013      	str	r3, [r2, #0]
    parse(input, sizeof(input), Commands);
 8008270:	4e1f      	ldr	r6, [pc, #124]	; (80082f0 <TaskInput+0x128>)
 8008272:	4b22      	ldr	r3, [pc, #136]	; (80082fc <TaskInput+0x134>)
 8008274:	2150      	movs	r1, #80	; 0x50
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4630      	mov	r0, r6
 800827a:	f7ff ff29 	bl	80080d0 <parse>
    printPrompt = 1;
 800827e:	2301      	movs	r3, #1
    buf = input;
 8008280:	602e      	str	r6, [r5, #0]
    printPrompt = 1;
 8008282:	6023      	str	r3, [r4, #0]
 8008284:	e7c1      	b.n	800820a <TaskInput+0x42>
  } else if(isprint((unsigned int)c)) {
 8008286:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <TaskInput+0x138>)
 8008288:	5c9a      	ldrb	r2, [r3, r2]
 800828a:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 800828e:	d011      	beq.n	80082b4 <TaskInput+0xec>
    if(count >= sizeof(input)) {
 8008290:	4913      	ldr	r1, [pc, #76]	; (80082e0 <TaskInput+0x118>)
 8008292:	680a      	ldr	r2, [r1, #0]
 8008294:	2a4f      	cmp	r2, #79	; 0x4f
 8008296:	d903      	bls.n	80082a0 <TaskInput+0xd8>
      printf("\x07"); /* Beep */
 8008298:	2007      	movs	r0, #7
      printf("%c",c);
 800829a:	f7f8 fc45 	bl	8000b28 <putchar>
 800829e:	e7b4      	b.n	800820a <TaskInput+0x42>
      *buf++ = c;
 80082a0:	4c11      	ldr	r4, [pc, #68]	; (80082e8 <TaskInput+0x120>)
 80082a2:	6820      	ldr	r0, [r4, #0]
      count++;
 80082a4:	3201      	adds	r2, #1
      *buf++ = c;
 80082a6:	1c45      	adds	r5, r0, #1
 80082a8:	7003      	strb	r3, [r0, #0]
      printf("%c",c);
 80082aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
      *buf++ = c;
 80082ae:	6025      	str	r5, [r4, #0]
      count++;
 80082b0:	600a      	str	r2, [r1, #0]
      printf("%c",c);
 80082b2:	e7f2      	b.n	800829a <TaskInput+0xd2>
  } else if(c == '\r') {
 80082b4:	2b0d      	cmp	r3, #13
 80082b6:	d1a8      	bne.n	800820a <TaskInput+0x42>
    *buf = '\0';
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <TaskInput+0x120>)
    strcpy(input_b,input);
 80082ba:	490d      	ldr	r1, [pc, #52]	; (80082f0 <TaskInput+0x128>)
    *buf = '\0';
 80082bc:	681b      	ldr	r3, [r3, #0]
    strcpy(input_b,input);
 80082be:	480d      	ldr	r0, [pc, #52]	; (80082f4 <TaskInput+0x12c>)
    *buf = '\0';
 80082c0:	701a      	strb	r2, [r3, #0]
    strcpy(input_b,input);
 80082c2:	f7f8 fd45 	bl	8000d50 <strcpy>
    saved = 1;
 80082c6:	4b09      	ldr	r3, [pc, #36]	; (80082ec <TaskInput+0x124>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	e7b6      	b.n	800823c <TaskInput+0x74>
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 80082ce:	f800 eb01 	strb.w	lr, [r0], #1
 80082d2:	2101      	movs	r1, #1
 80082d4:	e7be      	b.n	8008254 <TaskInput+0x8c>
 80082d6:	bf00      	nop
 80082d8:	20000a2c 	.word	0x20000a2c
 80082dc:	0800dc3a 	.word	0x0800dc3a
 80082e0:	20000cf8 	.word	0x20000cf8
 80082e4:	0800dc41 	.word	0x0800dc41
 80082e8:	20000a28 	.word	0x20000a28
 80082ec:	20000cfc 	.word	0x20000cfc
 80082f0:	20001168 	.word	0x20001168
 80082f4:	20001118 	.word	0x20001118
 80082f8:	0800df36 	.word	0x0800df36
 80082fc:	20000a24 	.word	0x20000a24
 8008300:	0800d2ed 	.word	0x0800d2ed

08008304 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 8008304:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 8008306:	4908      	ldr	r1, [pc, #32]	; (8008328 <fetch_uint32_arg+0x24>)
{
 8008308:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 800830a:	2000      	movs	r0, #0
 800830c:	f7f8 fe06 	bl	8000f1c <strtok>
  if(p == NULL) {
 8008310:	b130      	cbz	r0, 8008320 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 8008312:	2200      	movs	r2, #0
 8008314:	4611      	mov	r1, r2
 8008316:	f7f8 feef 	bl	80010f8 <strtoul>
 800831a:	6020      	str	r0, [r4, #0]
  return 0;
 800831c:	2000      	movs	r0, #0
}     
 800831e:	bd10      	pop	{r4, pc}
    return -1;
 8008320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008324:	e7fb      	b.n	800831e <fetch_uint32_arg+0x1a>
 8008326:	bf00      	nop
 8008328:	0800dbb8 	.word	0x0800dbb8

0800832c <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 800832c:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 800832e:	4906      	ldr	r1, [pc, #24]	; (8008348 <fetch_string_arg+0x1c>)
{
 8008330:	4604      	mov	r4, r0
  p = strtok(NULL,SEPS);
 8008332:	2000      	movs	r0, #0
 8008334:	f7f8 fdf2 	bl	8000f1c <strtok>
  if(p == NULL) {
 8008338:	b110      	cbz	r0, 8008340 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 800833a:	6020      	str	r0, [r4, #0]
  return 0;
 800833c:	2000      	movs	r0, #0
}
 800833e:	bd10      	pop	{r4, pc}
    return -1;
 8008340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008344:	e7fb      	b.n	800833e <fetch_string_arg+0x12>
 8008346:	bf00      	nop
 8008348:	0800dbb8 	.word	0x0800dbb8

0800834c <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	b089      	sub	sp, #36	; 0x24
 8008352:	e9cd 0200 	strd	r0, r2, [sp]
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 8008356:	460c      	mov	r4, r1
 8008358:	2900      	cmp	r1, #0
 800835a:	d13e      	bne.n	80083da <DumpBuffer+0x8e>
    printf("  %s\n",buf);
  }



}
 800835c:	b009      	add	sp, #36	; 0x24
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((i% BYTES_PER_LINE) == 0) {
 8008362:	f015 0b0f 	ands.w	fp, r5, #15
 8008366:	d103      	bne.n	8008370 <DumpBuffer+0x24>
      printf("%08x:",(unsigned int)address);
 8008368:	4640      	mov	r0, r8
 800836a:	f7f8 fbc5 	bl	8000af8 <printf>
      bufp = buf;
 800836e:	46b1      	mov	r9, r6
    c = *p++;
 8008370:	9b00      	ldr	r3, [sp, #0]
 8008372:	5d58      	ldrb	r0, [r3, r5]
    if(isprint(c)) {
 8008374:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <DumpBuffer+0xa0>)
 8008376:	f810 c003 	ldrb.w	ip, [r0, r3]
 800837a:	464f      	mov	r7, r9
      *bufp++ = '.';
 800837c:	f01c 0f97 	tst.w	ip, #151	; 0x97
    if(isprint(c)) {
 8008380:	4601      	mov	r1, r0
      *bufp++ = '.';
 8008382:	bf08      	it	eq
 8008384:	202e      	moveq	r0, #46	; 0x2e
 8008386:	f807 0b01 	strb.w	r0, [r7], #1
    printf(" %02x",((unsigned int)c) & 0xff);
 800838a:	4650      	mov	r0, sl
 800838c:	f7f8 fbb4 	bl	8000af8 <printf>
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8008390:	f1bb 0f0f 	cmp.w	fp, #15
 8008394:	d106      	bne.n	80083a4 <DumpBuffer+0x58>
      *bufp = '\0';  /* NULL terminate buffer */
 8008396:	2100      	movs	r1, #0
 8008398:	f889 1001 	strb.w	r1, [r9, #1]
      printf("  %s\n",buf);
 800839c:	4814      	ldr	r0, [pc, #80]	; (80083f0 <DumpBuffer+0xa4>)
 800839e:	4631      	mov	r1, r6
 80083a0:	f7f8 fbaa 	bl	8000af8 <printf>
  for(i=0; i<count; i++) {
 80083a4:	3501      	adds	r5, #1
 80083a6:	46b9      	mov	r9, r7
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	42ac      	cmp	r4, r5
 80083ac:	eb03 0105 	add.w	r1, r3, r5
 80083b0:	d1d7      	bne.n	8008362 <DumpBuffer+0x16>
  *bufp='\0';
 80083b2:	2500      	movs	r5, #0
  if(count % BYTES_PER_LINE) {
 80083b4:	f014 040f 	ands.w	r4, r4, #15
  *bufp='\0';
 80083b8:	f889 5000 	strb.w	r5, [r9]
  if(count % BYTES_PER_LINE) {
 80083bc:	d0ce      	beq.n	800835c <DumpBuffer+0x10>
      printf("   ");
 80083be:	4f0d      	ldr	r7, [pc, #52]	; (80083f4 <DumpBuffer+0xa8>)
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80083c0:	f1c4 0410 	rsb	r4, r4, #16
      printf("   ");
 80083c4:	4638      	mov	r0, r7
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80083c6:	3501      	adds	r5, #1
      printf("   ");
 80083c8:	f7f8 fb96 	bl	8000af8 <printf>
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 80083cc:	42a5      	cmp	r5, r4
 80083ce:	d3f9      	bcc.n	80083c4 <DumpBuffer+0x78>
    printf("  %s\n",buf);
 80083d0:	4631      	mov	r1, r6
 80083d2:	4807      	ldr	r0, [pc, #28]	; (80083f0 <DumpBuffer+0xa4>)
 80083d4:	f7f8 fb90 	bl	8000af8 <printf>
 80083d8:	e7c0      	b.n	800835c <DumpBuffer+0x10>
  bufp = buf;
 80083da:	f10d 090c 	add.w	r9, sp, #12
      printf("%08x:",(unsigned int)address);
 80083de:	f8df 8018 	ldr.w	r8, [pc, #24]	; 80083f8 <DumpBuffer+0xac>
    printf(" %02x",((unsigned int)c) & 0xff);
 80083e2:	f8df a018 	ldr.w	sl, [pc, #24]	; 80083fc <DumpBuffer+0xb0>
  for(i=0; i<count; i++) {
 80083e6:	2500      	movs	r5, #0
 80083e8:	464e      	mov	r6, r9
 80083ea:	e7dd      	b.n	80083a8 <DumpBuffer+0x5c>
 80083ec:	0800d2ed 	.word	0x0800d2ed
 80083f0:	0800dc57 	.word	0x0800dc57
 80083f4:	0800dc5d 	.word	0x0800dc5d
 80083f8:	0800dc4b 	.word	0x0800dc4b
 80083fc:	0800dc51 	.word	0x0800dc51

08008400 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 8008400:	2801      	cmp	r0, #1
{
 8008402:	b538      	push	{r3, r4, r5, lr}
  if(action==CMD_SHORT_HELP) return;
 8008404:	d01d      	beq.n	8008442 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 8008406:	2802      	cmp	r0, #2
 8008408:	4d0e      	ldr	r5, [pc, #56]	; (8008444 <CmdDump+0x44>)
 800840a:	4c0f      	ldr	r4, [pc, #60]	; (8008448 <CmdDump+0x48>)
 800840c:	d109      	bne.n	8008422 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 800840e:	480f      	ldr	r0, [pc, #60]	; (800844c <CmdDump+0x4c>)
 8008410:	f7f8 fbc8 	bl	8000ba4 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 8008414:	682a      	ldr	r2, [r5, #0]
 8008416:	6821      	ldr	r1, [r4, #0]
 8008418:	480d      	ldr	r0, [pc, #52]	; (8008450 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 800841a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printf("Current address is 0x%08x, current count is 0x%x\n",
 800841e:	f7f8 bb6b 	b.w	8000af8 <printf>
  rc = fetch_uint32_arg(&address);
 8008422:	4620      	mov	r0, r4
 8008424:	f7ff ff6e 	bl	8008304 <fetch_uint32_arg>
  if(rc == 0) {
 8008428:	b910      	cbnz	r0, 8008430 <CmdDump+0x30>
    fetch_uint32_arg(&count);
 800842a:	4628      	mov	r0, r5
 800842c:	f7ff ff6a 	bl	8008304 <fetch_uint32_arg>
  DumpBuffer((uint8_t *)address, count, address);
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	6829      	ldr	r1, [r5, #0]
 8008434:	4610      	mov	r0, r2
 8008436:	f7ff ff89 	bl	800834c <DumpBuffer>
  address = address+count;
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	682a      	ldr	r2, [r5, #0]
 800843e:	4413      	add	r3, r2
 8008440:	6023      	str	r3, [r4, #0]
}
 8008442:	bd38      	pop	{r3, r4, r5, pc}
 8008444:	20000a30 	.word	0x20000a30
 8008448:	20000d00 	.word	0x20000d00
 800844c:	0800dc61 	.word	0x0800dc61
 8008450:	0800ddf9 	.word	0x0800ddf9

08008454 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8008454:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 8008456:	4b09      	ldr	r3, [pc, #36]	; (800847c <_sbrk_r+0x28>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	b90a      	cbnz	r2, 8008460 <_sbrk_r+0xc>
                heap_end = &end;
 800845c:	4a08      	ldr	r2, [pc, #32]	; (8008480 <_sbrk_r+0x2c>)
 800845e:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8008460:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8008462:	466a      	mov	r2, sp
 8008464:	4401      	add	r1, r0
 8008466:	4291      	cmp	r1, r2
 8008468:	d906      	bls.n	8008478 <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800846a:	f7f8 faa1 	bl	80009b0 <__errno>
 800846e:	230c      	movs	r3, #12
 8008470:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8008472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }

        heap_end += incr;

        return (caddr_t) prev_heap_end;
}
 8008476:	bd08      	pop	{r3, pc}
        heap_end += incr;
 8008478:	6019      	str	r1, [r3, #0]
        return (caddr_t) prev_heap_end;
 800847a:	e7fc      	b.n	8008476 <_sbrk_r+0x22>
 800847c:	20000d04 	.word	0x20000d04
 8008480:	20001f08 	.word	0x20001f08

08008484 <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	4770      	bx	lr

0800848a <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 800848a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800848e:	6053      	str	r3, [r2, #4]
        return 0;
}
 8008490:	2000      	movs	r0, #0
 8008492:	4770      	bx	lr

08008494 <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 8008494:	2001      	movs	r0, #1
 8008496:	4770      	bx	lr

08008498 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8008498:	2000      	movs	r0, #0
 800849a:	4770      	bx	lr

0800849c <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800849c:	4b1b      	ldr	r3, [pc, #108]	; (800850c <USBD_CDC_DataIn+0x70>)
{
 800849e:	b570      	push	{r4, r5, r6, lr}
  rc = (*USBDDataIn)(pdev,epnum);
 80084a0:	681b      	ldr	r3, [r3, #0]
{
 80084a2:	4604      	mov	r4, r0
  rc = (*USBDDataIn)(pdev,epnum);
 80084a4:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <USBD_CDC_DataIn+0x74>)
 80084a8:	429c      	cmp	r4, r3
  rc = (*USBDDataIn)(pdev,epnum);
 80084aa:	4606      	mov	r6, r0
  if(pdev == &hUSBDDevice) {
 80084ac:	d12c      	bne.n	8008508 <USBD_CDC_DataIn+0x6c>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 80084ae:	4c19      	ldr	r4, [pc, #100]	; (8008514 <USBD_CDC_DataIn+0x78>)
 80084b0:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outSending;
 80084b4:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
 80084b8:	b290      	uxth	r0, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 80084ba:	fa10 f181 	uxtah	r1, r0, r1
 80084be:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80084c2:	f8a4 1108 	strh.w	r1, [r4, #264]	; 0x108
    TerminalState[index].outCount -= count;
 80084c6:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 80084ca:	1a12      	subs	r2, r2, r0
 80084cc:	b292      	uxth	r2, r2
 80084ce:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 80084d2:	2200      	movs	r2, #0
 80084d4:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 80084d8:	f8b4 1108 	ldrh.w	r1, [r4, #264]	; 0x108
    count = TerminalState[index].outCount;
 80084dc:	f8b4 210a 	ldrh.w	r2, [r4, #266]	; 0x10a
 80084e0:	b292      	uxth	r2, r2
    tail = TerminalState[index].outTail;
 80084e2:	b289      	uxth	r1, r1
    if(count != 0) {
 80084e4:	b182      	cbz	r2, 8008508 <USBD_CDC_DataIn+0x6c>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 80084e6:	188b      	adds	r3, r1, r2
 80084e8:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 80084ea:	bf88      	it	hi
 80084ec:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80084f0:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80084f2:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80084f4:	462a      	mov	r2, r5
 80084f6:	4421      	add	r1, r4
 80084f8:	4805      	ldr	r0, [pc, #20]	; (8008510 <USBD_CDC_DataIn+0x74>)
 80084fa:	f003 fb2b 	bl	800bb54 <USBD_CDC_SetTxBuffer>
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 80084fe:	4804      	ldr	r0, [pc, #16]	; (8008510 <USBD_CDC_DataIn+0x74>)
 8008500:	f003 fb36 	bl	800bb70 <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 8008504:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 8008508:	4630      	mov	r0, r6
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	200013dc 	.word	0x200013dc
 8008510:	200011b8 	.word	0x200011b8
 8008514:	20000d08 	.word	0x20000d08

08008518 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 8008518:	e92d 41e0 	stmdb	sp!, {r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 800851c:	4601      	mov	r1, r0
{
 800851e:	b087      	sub	sp, #28
  if(mode != CMD_INTERACTIVE) return;
 8008520:	b9c0      	cbnz	r0, 8008554 <CmdStats+0x3c>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008522:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 8008524:	480d      	ldr	r0, [pc, #52]	; (800855c <CmdStats+0x44>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8008526:	9104      	str	r1, [sp, #16]
    s[i] = TerminalState[i].stats;
 8008528:	e9d0 5344 	ldrd	r5, r3, [r0, #272]	; 0x110
 800852c:	e9d0 6746 	ldrd	r6, r7, [r0, #280]	; 0x118
 8008530:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
 8008534:	9305      	str	r3, [sp, #20]
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 8008536:	2214      	movs	r2, #20
 8008538:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800853c:	f7f8 fa7c 	bl	8000a38 <memset>
  __ASM volatile ("cpsie i" : : : "memory");
 8008540:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8008542:	4807      	ldr	r0, [pc, #28]	; (8008560 <CmdStats+0x48>)
 8008544:	9b05      	ldr	r3, [sp, #20]
 8008546:	9904      	ldr	r1, [sp, #16]
 8008548:	9600      	str	r6, [sp, #0]
 800854a:	e9cd 7801 	strd	r7, r8, [sp, #4]
 800854e:	462a      	mov	r2, r5
 8008550:	f7f8 fad2 	bl	8000af8 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8008554:	b007      	add	sp, #28
 8008556:	e8bd 81e0 	ldmia.w	sp!, {r5, r6, r7, r8, pc}
 800855a:	bf00      	nop
 800855c:	20000d08 	.word	0x20000d08
 8008560:	0800de47 	.word	0x0800de47

08008564 <TerminalInit>:
{
 8008564:	b510      	push	{r4, lr}
  setvbuf(stdin, NULL, _IONBF, 0);
 8008566:	4c17      	ldr	r4, [pc, #92]	; (80085c4 <TerminalInit+0x60>)
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	2300      	movs	r3, #0
 800856c:	4619      	mov	r1, r3
 800856e:	2202      	movs	r2, #2
 8008570:	6840      	ldr	r0, [r0, #4]
 8008572:	f7f8 fb1f 	bl	8000bb4 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	4619      	mov	r1, r3
 800857c:	2202      	movs	r2, #2
 800857e:	6880      	ldr	r0, [r0, #8]
 8008580:	f7f8 fb18 	bl	8000bb4 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8008584:	6820      	ldr	r0, [r4, #0]
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8008586:	4c10      	ldr	r4, [pc, #64]	; (80085c8 <TerminalInit+0x64>)
  setvbuf(stderr, NULL, _IONBF, 0);
 8008588:	68c0      	ldr	r0, [r0, #12]
 800858a:	2300      	movs	r3, #0
 800858c:	4619      	mov	r1, r3
 800858e:	2202      	movs	r2, #2
 8008590:	f7f8 fb10 	bl	8000bb4 <setvbuf>
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8008594:	490d      	ldr	r1, [pc, #52]	; (80085cc <TerminalInit+0x68>)
 8008596:	2200      	movs	r2, #0
 8008598:	4620      	mov	r0, r4
 800859a:	f002 ff14 	bl	800b3c6 <USBD_Init>
  USBDDataIn = USBD_CDC.DataIn;
 800859e:	490c      	ldr	r1, [pc, #48]	; (80085d0 <TerminalInit+0x6c>)
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <TerminalInit+0x70>)
 80085a2:	694a      	ldr	r2, [r1, #20]
 80085a4:	601a      	str	r2, [r3, #0]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80085a6:	4620      	mov	r0, r4
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 80085a8:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <TerminalInit+0x74>)
 80085aa:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 80085ac:	f002 ff20 	bl	800b3f0 <USBD_RegisterClass>
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 80085b0:	4620      	mov	r0, r4
 80085b2:	490a      	ldr	r1, [pc, #40]	; (80085dc <TerminalInit+0x78>)
 80085b4:	f003 fac7 	bl	800bb46 <USBD_CDC_RegisterInterface>
  USBD_Start(&hUSBDDevice);
 80085b8:	4620      	mov	r0, r4
}
 80085ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUSBDDevice);
 80085be:	f002 bf1e 	b.w	800b3fe <USBD_Start>
 80085c2:	bf00      	nop
 80085c4:	20000078 	.word	0x20000078
 80085c8:	200011b8 	.word	0x200011b8
 80085cc:	20000b64 	.word	0x20000b64
 80085d0:	20000a38 	.word	0x20000a38
 80085d4:	200013dc 	.word	0x200013dc
 80085d8:	0800849d 	.word	0x0800849d
 80085dc:	20000b88 	.word	0x20000b88

080085e0 <TerminalRead>:
{
 80085e0:	b530      	push	{r4, r5, lr}
 80085e2:	4603      	mov	r3, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80085e4:	b672      	cpsid	i
  while(TerminalState[index].inCount && (count < len)) {
 80085e6:	4c10      	ldr	r4, [pc, #64]	; (8008628 <TerminalRead+0x48>)
 80085e8:	f44f 7592 	mov.w	r5, #292	; 0x124
  count = 0;
 80085ec:	2000      	movs	r0, #0
  while(TerminalState[index].inCount && (count < len)) {
 80085ee:	fb05 4303 	mla	r3, r5, r3, r4
 80085f2:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 80085f6:	b2a4      	uxth	r4, r4
 80085f8:	b90c      	cbnz	r4, 80085fe <TerminalRead+0x1e>
  __ASM volatile ("cpsie i" : : : "memory");
 80085fa:	b662      	cpsie	i
}
 80085fc:	bd30      	pop	{r4, r5, pc}
  while(TerminalState[index].inCount && (count < len)) {
 80085fe:	4290      	cmp	r0, r2
 8008600:	d0fb      	beq.n	80085fa <TerminalRead+0x1a>
    tail   = TerminalState[index].inTail;
 8008602:	f8b3 4082 	ldrh.w	r4, [r3, #130]	; 0x82
 8008606:	b2a4      	uxth	r4, r4
    *ptr++ = TerminalState[index].inBuffer[tail];
 8008608:	5d1d      	ldrb	r5, [r3, r4]
 800860a:	540d      	strb	r5, [r1, r0]
    TerminalState[index].inTail = TERMINALINCR(tail);
 800860c:	3401      	adds	r4, #1
 800860e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8008612:	f8a3 4082 	strh.w	r4, [r3, #130]	; 0x82
    TerminalState[index].inCount--;
 8008616:	f8b3 4084 	ldrh.w	r4, [r3, #132]	; 0x84
 800861a:	3c01      	subs	r4, #1
 800861c:	b2a4      	uxth	r4, r4
 800861e:	f8a3 4084 	strh.w	r4, [r3, #132]	; 0x84
    count++;
 8008622:	3001      	adds	r0, #1
 8008624:	e7e5      	b.n	80085f2 <TerminalRead+0x12>
 8008626:	bf00      	nop
 8008628:	20000d08 	.word	0x20000d08

0800862c <_read_r>:
{
 800862c:	4611      	mov	r1, r2
  count = TerminalRead(0, (uint8_t *)ptr, len);
 800862e:	2000      	movs	r0, #0
 8008630:	461a      	mov	r2, r3
 8008632:	f7ff bfd5 	b.w	80085e0 <TerminalRead>

08008636 <TerminalReadNonBlock>:
{
 8008636:	b508      	push	{r3, lr}
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8008638:	2201      	movs	r2, #1
 800863a:	f7ff ffd1 	bl	80085e0 <TerminalRead>
}
 800863e:	fab0 f080 	clz	r0, r0
 8008642:	0940      	lsrs	r0, r0, #5
 8008644:	bd08      	pop	{r3, pc}

08008646 <TerminalReadAnyNonBlock>:
{
 8008646:	4601      	mov	r1, r0
 8008648:	b508      	push	{r3, lr}
    rc = TerminalReadNonBlock(i, c);
 800864a:	2000      	movs	r0, #0
 800864c:	f7ff fff3 	bl	8008636 <TerminalReadNonBlock>
}
 8008650:	3800      	subs	r0, #0
 8008652:	bf18      	it	ne
 8008654:	2001      	movne	r0, #1
 8008656:	bd08      	pop	{r3, pc}

08008658 <TerminalOutputBufferWrite>:
{
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	4d37      	ldr	r5, [pc, #220]	; (8008738 <TerminalOutputBufferWrite+0xe0>)
 800865c:	f44f 7392 	mov.w	r3, #292	; 0x124
  if(len >= TERMINALBUFFERSIZE) {
 8008660:	2a7f      	cmp	r2, #127	; 0x7f
    TerminalState[index].stats.writeTooBig++;
 8008662:	fb03 5300 	mla	r3, r3, r0, r5
  if(len >= TERMINALBUFFERSIZE) {
 8008666:	d906      	bls.n	8008676 <TerminalOutputBufferWrite+0x1e>
    TerminalState[index].stats.writeTooBig++;
 8008668:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800866c:	3201      	adds	r2, #1
 800866e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return 1;
 8008672:	2001      	movs	r0, #1
}
 8008674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8008676:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 800867a:	fa12 f484 	uxtah	r4, r2, r4
 800867e:	2c7f      	cmp	r4, #127	; 0x7f
    TerminalState[index].stats.writeBlocked++;
 8008680:	bf82      	ittt	hi
 8008682:	f8d3 4114 	ldrhi.w	r4, [r3, #276]	; 0x114
 8008686:	3401      	addhi	r4, #1
 8008688:	f8c3 4114 	strhi.w	r4, [r3, #276]	; 0x114
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 800868c:	f44f 7392 	mov.w	r3, #292	; 0x124
 8008690:	fb03 5300 	mla	r3, r3, r0, r5
 8008694:	f8b3 410a 	ldrh.w	r4, [r3, #266]	; 0x10a
 8008698:	fa12 f484 	uxtah	r4, r2, r4
 800869c:	2c7f      	cmp	r4, #127	; 0x7f
 800869e:	d8f9      	bhi.n	8008694 <TerminalOutputBufferWrite+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80086a0:	b672      	cpsid	i
  TerminalState[index].stats.written += len;  /* gather statistics */
 80086a2:	f8d3 4118 	ldr.w	r4, [r3, #280]	; 0x118
 80086a6:	4414      	add	r4, r2
 80086a8:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80086ac:	f44f 7492 	mov.w	r4, #292	; 0x124
 80086b0:	440a      	add	r2, r1
 80086b2:	fb04 5400 	mla	r4, r4, r0, r5
  while((len != 0) 
 80086b6:	4291      	cmp	r1, r2
 80086b8:	d004      	beq.n	80086c4 <TerminalOutputBufferWrite+0x6c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 80086ba:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b7f      	cmp	r3, #127	; 0x7f
 80086c2:	d925      	bls.n	8008710 <TerminalOutputBufferWrite+0xb8>
  tail = TerminalState[index].outTail;
 80086c4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80086c8:	fb02 5200 	mla	r2, r2, r0, r5
 80086cc:	f8b2 3108 	ldrh.w	r3, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 80086d0:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
 80086d4:	b292      	uxth	r2, r2
  tail = TerminalState[index].outTail;
 80086d6:	b299      	uxth	r1, r3
  if((count + tail) >= TERMINALBUFFERSIZE) {
 80086d8:	fa12 f383 	uxtah	r3, r2, r3
 80086dc:	2b7f      	cmp	r3, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 80086de:	bf88      	it	hi
 80086e0:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  switch(index) {
 80086e4:	b988      	cbnz	r0, 800870a <TerminalOutputBufferWrite+0xb2>
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 80086e6:	4e15      	ldr	r6, [pc, #84]	; (800873c <TerminalOutputBufferWrite+0xe4>)
 80086e8:	f896 31fc 	ldrb.w	r3, [r6, #508]	; 0x1fc
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d10c      	bne.n	800870a <TerminalOutputBufferWrite+0xb2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80086f0:	b294      	uxth	r4, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80086f2:	3186      	adds	r1, #134	; 0x86
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80086f4:	4622      	mov	r2, r4
 80086f6:	4429      	add	r1, r5
 80086f8:	4630      	mov	r0, r6
 80086fa:	f003 fa2b 	bl	800bb54 <USBD_CDC_SetTxBuffer>
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 80086fe:	4630      	mov	r0, r6
 8008700:	f003 fa36 	bl	800bb70 <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8008704:	b908      	cbnz	r0, 800870a <TerminalOutputBufferWrite+0xb2>
	TerminalState[index].outSending = count;
 8008706:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
  __ASM volatile ("cpsie i" : : : "memory");
 800870a:	b662      	cpsie	i
 800870c:	2000      	movs	r0, #0
 800870e:	e7b1      	b.n	8008674 <TerminalOutputBufferWrite+0x1c>
    head = TerminalState[index].outHead;
 8008710:	f8b4 3106 	ldrh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8008714:	f811 7b01 	ldrb.w	r7, [r1], #1
 8008718:	fa14 f683 	uxtah	r6, r4, r3
    TerminalState[index].outHead = TERMINALINCR(head);
 800871c:	3301      	adds	r3, #1
 800871e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008722:	f8a4 3106 	strh.w	r3, [r4, #262]	; 0x106
    TerminalState[index].outCount++;
 8008726:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
    TerminalState[index].outBuffer[head] = *p++;
 800872a:	f886 7086 	strb.w	r7, [r6, #134]	; 0x86
    TerminalState[index].outCount++;
 800872e:	3301      	adds	r3, #1
 8008730:	b29b      	uxth	r3, r3
 8008732:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    len--;
 8008736:	e7be      	b.n	80086b6 <TerminalOutputBufferWrite+0x5e>
 8008738:	20000d08 	.word	0x20000d08
 800873c:	200011b8 	.word	0x200011b8

08008740 <_write_r>:
{
 8008740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008744:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800877c <_write_r+0x3c>
{
 8008748:	461d      	mov	r5, r3
 800874a:	4614      	mov	r4, r2
 800874c:	18d7      	adds	r7, r2, r3
  while(count != 0) {
 800874e:	42bc      	cmp	r4, r7
 8008750:	4626      	mov	r6, r4
 8008752:	d102      	bne.n	800875a <_write_r+0x1a>
}
 8008754:	4628      	mov	r0, r5
 8008756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(*ptr == '\n') {
 800875a:	7833      	ldrb	r3, [r6, #0]
 800875c:	2b0a      	cmp	r3, #10
 800875e:	f104 0401 	add.w	r4, r4, #1
 8008762:	d104      	bne.n	800876e <_write_r+0x2e>
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8008764:	2201      	movs	r2, #1
 8008766:	4641      	mov	r1, r8
 8008768:	2000      	movs	r0, #0
 800876a:	f7ff ff75 	bl	8008658 <TerminalOutputBufferWrite>
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 800876e:	2201      	movs	r2, #1
 8008770:	4631      	mov	r1, r6
 8008772:	2000      	movs	r0, #0
 8008774:	f7ff ff70 	bl	8008658 <TerminalOutputBufferWrite>
    count--;
 8008778:	e7e9      	b.n	800874e <_write_r+0xe>
 800877a:	bf00      	nop
 800877c:	0800dbbd 	.word	0x0800dbbd

08008780 <TerminalInputBufferWrite>:
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008780:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <TerminalInputBufferWrite+0x60>)
{
 8008782:	b510      	push	{r4, lr}
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8008784:	f44f 7492 	mov.w	r4, #292	; 0x124
 8008788:	fb04 3000 	mla	r0, r4, r0, r3
 800878c:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 8008790:	fa12 f383 	uxtah	r3, r2, r3
 8008794:	2b7f      	cmp	r3, #127	; 0x7f
 8008796:	d906      	bls.n	80087a6 <TerminalInputBufferWrite+0x26>
    TerminalState[index].stats.receiveTooBig++;
 8008798:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 800879c:	3301      	adds	r3, #1
 800879e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    return 1;
 80087a2:	2001      	movs	r0, #1
}
 80087a4:	bd10      	pop	{r4, pc}
  TerminalState[index].stats.received += len;
 80087a6:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 80087aa:	4413      	add	r3, r2
 80087ac:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
  while(len != 0) {
 80087b0:	440a      	add	r2, r1
 80087b2:	4291      	cmp	r1, r2
 80087b4:	d101      	bne.n	80087ba <TerminalInputBufferWrite+0x3a>
  return 0;
 80087b6:	2000      	movs	r0, #0
 80087b8:	e7f4      	b.n	80087a4 <TerminalInputBufferWrite+0x24>
    head = TerminalState[index].inHead;
 80087ba:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
 80087be:	f811 4b01 	ldrb.w	r4, [r1], #1
    head = TerminalState[index].inHead;
 80087c2:	b29b      	uxth	r3, r3
    TerminalState[index].inBuffer[head] = *p++;
 80087c4:	54c4      	strb	r4, [r0, r3]
    TerminalState[index].inHead = TERMINALINCR(head);
 80087c6:	3301      	adds	r3, #1
 80087c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087cc:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    TerminalState[index].inCount++;
 80087d0:	f8b0 3084 	ldrh.w	r3, [r0, #132]	; 0x84
 80087d4:	3301      	adds	r3, #1
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
    len--;
 80087dc:	e7e9      	b.n	80087b2 <TerminalInputBufferWrite+0x32>
 80087de:	bf00      	nop
 80087e0:	20000d08 	.word	0x20000d08

080087e4 <USB_LP_CAN_RX0_IRQHandler>:
  HAL_PCD_IRQHandler(&hpcd);
 80087e4:	4801      	ldr	r0, [pc, #4]	; (80087ec <USB_LP_CAN_RX0_IRQHandler+0x8>)
 80087e6:	f001 bd19 	b.w	800a21c <HAL_PCD_IRQHandler>
 80087ea:	bf00      	nop
 80087ec:	200013e0 	.word	0x200013e0

080087f0 <Uncompress>:

/* Uncompress a name, and return a pointer to a static buffer
   containging the name.
*/
static const char *Uncompress(char *str)
{
 80087f0:	b570      	push	{r4, r5, r6, lr}
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80087f2:	4a1c      	ldr	r2, [pc, #112]	; (8008864 <Uncompress+0x74>)
{
 80087f4:	b08a      	sub	sp, #40	; 0x28
 80087f6:	4603      	mov	r3, r0
  const char decoderRing[]="ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
 80087f8:	466c      	mov	r4, sp
 80087fa:	f102 0620 	add.w	r6, r2, #32
 80087fe:	6810      	ldr	r0, [r2, #0]
 8008800:	6851      	ldr	r1, [r2, #4]
 8008802:	4625      	mov	r5, r4
 8008804:	c503      	stmia	r5!, {r0, r1}
 8008806:	3208      	adds	r2, #8
 8008808:	42b2      	cmp	r2, r6
 800880a:	462c      	mov	r4, r5
 800880c:	d1f7      	bne.n	80087fe <Uncompress+0xe>
 800880e:	6810      	ldr	r0, [r2, #0]
 8008810:	6028      	str	r0, [r5, #0]
 8008812:	8892      	ldrh	r2, [r2, #4]
 8008814:	80aa      	strh	r2, [r5, #4]
  char c;

  /* Prime the data pump */
  data = (uint8_t)(*str++);
  data <<= 8;
  data |= (uint8_t)(*str++);
 8008816:	4618      	mov	r0, r3
 8008818:	4d13      	ldr	r5, [pc, #76]	; (8008868 <Uncompress+0x78>)
 800881a:	f830 3b02 	ldrh.w	r3, [r0], #2
  bits = 0;
 800881e:	2100      	movs	r1, #0
 8008820:	ba5b      	rev16	r3, r3
 8008822:	b29b      	uxth	r3, r3
  i = 0;
 8008824:	460c      	mov	r4, r1
 8008826:	462e      	mov	r6, r5
  //printf("bits: %u, data: %06x\n",(unsigned)bits, (unsigned)data);
  while((data & (0x3f << 10)) != 0) {
 8008828:	f413 427c 	ands.w	r2, r3, #64512	; 0xfc00
 800882c:	d103      	bne.n	8008836 <Uncompress+0x46>
      data |= ((uint32_t)(*str++)) << bits; 
    }
  }
  buf[i]='\0';
  return buf;
}
 800882e:	480e      	ldr	r0, [pc, #56]	; (8008868 <Uncompress+0x78>)
  buf[i]='\0';
 8008830:	5532      	strb	r2, [r6, r4]
}
 8008832:	b00a      	add	sp, #40	; 0x28
 8008834:	bd70      	pop	{r4, r5, r6, pc}
    data <<= 6;
 8008836:	019a      	lsls	r2, r3, #6
    data &= 0x3fffff;
 8008838:	f3c2 0315 	ubfx	r3, r2, #0, #22
    c = decoderRing[(data>>16)-1];
 800883c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8008840:	f3c2 4205 	ubfx	r2, r2, #16, #6
 8008844:	4462      	add	r2, ip
    buf[i++] = c;
 8008846:	3401      	adds	r4, #1
 8008848:	f812 2c29 	ldrb.w	r2, [r2, #-41]
 800884c:	f805 2b01 	strb.w	r2, [r5], #1
    bits += 6;
 8008850:	1d8a      	adds	r2, r1, #6
    if(bits >= 8) {
 8008852:	2a07      	cmp	r2, #7
      bits -= 8;
 8008854:	bf81      	itttt	hi
 8008856:	1e8a      	subhi	r2, r1, #2
      data |= ((uint32_t)(*str++)) << bits; 
 8008858:	f810 1b01 	ldrbhi.w	r1, [r0], #1
 800885c:	4091      	lslhi	r1, r2
 800885e:	430b      	orrhi	r3, r1
 8008860:	4611      	mov	r1, r2
 8008862:	e7e1      	b.n	8008828 <Uncompress+0x38>
 8008864:	0800def1 	.word	0x0800def1
 8008868:	20000e2c 	.word	0x20000e2c

0800886c <DecodeReadRegister>:


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 800886c:	b538      	push	{r3, r4, r5, lr}
  uint32_t address, val;

  if(p == NULL) return 0;
 800886e:	4604      	mov	r4, r0
 8008870:	b1f0      	cbz	r0, 80088b0 <DecodeReadRegister+0x44>
  if(r == NULL) return 0;
 8008872:	b1f9      	cbz	r1, 80088b4 <DecodeReadRegister+0x48>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 8008874:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 8008876:	888a      	ldrh	r2, [r1, #4]
 8008878:	6843      	ldr	r3, [r0, #4]
  switch(r->size) {
 800887a:	2d10      	cmp	r5, #16
 800887c:	d005      	beq.n	800888a <DecodeReadRegister+0x1e>
 800887e:	2d20      	cmp	r5, #32
 8008880:	d005      	beq.n	800888e <DecodeReadRegister+0x22>
 8008882:	2d08      	cmp	r5, #8
 8008884:	d105      	bne.n	8008892 <DecodeReadRegister+0x26>
  case 8:
    val = *(uint8_t *)address;
 8008886:	5cd0      	ldrb	r0, [r2, r3]
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 0;
  }
  return val;
}
 8008888:	bd38      	pop	{r3, r4, r5, pc}
    val = *(uint16_t *)address;
 800888a:	5ad0      	ldrh	r0, [r2, r3]
    break;  
 800888c:	e7fc      	b.n	8008888 <DecodeReadRegister+0x1c>
    val = *(uint32_t *)address;
 800888e:	58d0      	ldr	r0, [r2, r3]
    break;
 8008890:	e7fa      	b.n	8008888 <DecodeReadRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 8008892:	6808      	ldr	r0, [r1, #0]
 8008894:	f7ff ffac 	bl	80087f0 <Uncompress>
 8008898:	4629      	mov	r1, r5
 800889a:	4602      	mov	r2, r0
 800889c:	4806      	ldr	r0, [pc, #24]	; (80088b8 <DecodeReadRegister+0x4c>)
 800889e:	f7f8 f92b 	bl	8000af8 <printf>
    printf(" in periphral %s!\n",
 80088a2:	6820      	ldr	r0, [r4, #0]
 80088a4:	f7ff ffa4 	bl	80087f0 <Uncompress>
 80088a8:	4601      	mov	r1, r0
 80088aa:	4804      	ldr	r0, [pc, #16]	; (80088bc <DecodeReadRegister+0x50>)
 80088ac:	f7f8 f924 	bl	8000af8 <printf>
    return 0;
 80088b0:	2000      	movs	r0, #0
 80088b2:	e7e9      	b.n	8008888 <DecodeReadRegister+0x1c>
  if(p == NULL) return 0;
 80088b4:	4608      	mov	r0, r1
 80088b6:	e7e7      	b.n	8008888 <DecodeReadRegister+0x1c>
 80088b8:	0800df17 	.word	0x0800df17
 80088bc:	0800df39 	.word	0x0800df39

080088c0 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 80088c0:	b538      	push	{r3, r4, r5, lr}
  uint32_t address;

  if(p == NULL) return 1;
 80088c2:	4604      	mov	r4, r0
 80088c4:	b1f8      	cbz	r0, 8008906 <DecodeWriteRegister+0x46>
  if(r == NULL) return 1;
 80088c6:	b1f1      	cbz	r1, 8008906 <DecodeWriteRegister+0x46>
  
  /* Calculate effective address */
  address = p->base + r->offset;

  /* read register according to size */
  switch(r->size) {
 80088c8:	798d      	ldrb	r5, [r1, #6]
  address = p->base + r->offset;
 80088ca:	8888      	ldrh	r0, [r1, #4]
 80088cc:	6863      	ldr	r3, [r4, #4]
  switch(r->size) {
 80088ce:	2d10      	cmp	r5, #16
 80088d0:	d006      	beq.n	80088e0 <DecodeWriteRegister+0x20>
 80088d2:	2d20      	cmp	r5, #32
 80088d4:	d006      	beq.n	80088e4 <DecodeWriteRegister+0x24>
 80088d6:	2d08      	cmp	r5, #8
 80088d8:	d106      	bne.n	80088e8 <DecodeWriteRegister+0x28>
  case 8:
    *(uint8_t *)address = val;
 80088da:	54c2      	strb	r2, [r0, r3]
	   Uncompress(r->name));
    printf(" in periphral %s!\n",
	   Uncompress(p->name));
    return 1;
  }
  return 0;
 80088dc:	2000      	movs	r0, #0
}
 80088de:	bd38      	pop	{r3, r4, r5, pc}
    *(uint16_t *)address = val;
 80088e0:	52c2      	strh	r2, [r0, r3]
    break;  
 80088e2:	e7fb      	b.n	80088dc <DecodeWriteRegister+0x1c>
    *(uint32_t *)address = val;
 80088e4:	50c2      	str	r2, [r0, r3]
 80088e6:	e7f9      	b.n	80088dc <DecodeWriteRegister+0x1c>
    printf("Invalid size 0x%x for register %s",
 80088e8:	6808      	ldr	r0, [r1, #0]
 80088ea:	f7ff ff81 	bl	80087f0 <Uncompress>
 80088ee:	4629      	mov	r1, r5
 80088f0:	4602      	mov	r2, r0
 80088f2:	4806      	ldr	r0, [pc, #24]	; (800890c <DecodeWriteRegister+0x4c>)
 80088f4:	f7f8 f900 	bl	8000af8 <printf>
    printf(" in periphral %s!\n",
 80088f8:	6820      	ldr	r0, [r4, #0]
 80088fa:	f7ff ff79 	bl	80087f0 <Uncompress>
 80088fe:	4601      	mov	r1, r0
 8008900:	4803      	ldr	r0, [pc, #12]	; (8008910 <DecodeWriteRegister+0x50>)
 8008902:	f7f8 f8f9 	bl	8000af8 <printf>
  if(p == NULL) return 1;
 8008906:	2001      	movs	r0, #1
 8008908:	e7e9      	b.n	80088de <DecodeWriteRegister+0x1e>
 800890a:	bf00      	nop
 800890c:	0800df17 	.word	0x0800df17
 8008910:	0800df39 	.word	0x0800df39

08008914 <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8008914:	b530      	push	{r4, r5, lr}
  uint32_t v;
  if(f == NULL) return;
 8008916:	4604      	mov	r4, r0
{
 8008918:	b087      	sub	sp, #28
  if(f == NULL) return;
 800891a:	b1d0      	cbz	r0, 8008952 <DecodeField+0x3e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 800891c:	7942      	ldrb	r2, [r0, #5]
 800891e:	2301      	movs	r3, #1
 8008920:	4093      	lsls	r3, r2
 8008922:	7902      	ldrb	r2, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008924:	6800      	ldr	r0, [r0, #0]
  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8008926:	40d1      	lsrs	r1, r2
 8008928:	3b01      	subs	r3, #1
 800892a:	400b      	ands	r3, r1
 800892c:	9305      	str	r3, [sp, #20]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 800892e:	f7ff ff5f 	bl	80087f0 <Uncompress>
	 Uncompress(f->name),  
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
 8008932:	7965      	ldrb	r5, [r4, #5]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8008934:	4a08      	ldr	r2, [pc, #32]	; (8008958 <DecodeField+0x44>)
 8008936:	9b05      	ldr	r3, [sp, #20]
 8008938:	4601      	mov	r1, r0
 800893a:	4808      	ldr	r0, [pc, #32]	; (800895c <DecodeField+0x48>)
 800893c:	2d01      	cmp	r5, #1
 800893e:	bf98      	it	ls
 8008940:	4602      	movls	r2, r0
 8008942:	7920      	ldrb	r0, [r4, #4]
 8008944:	9500      	str	r5, [sp, #0]
 8008946:	e9cd 2001 	strd	r2, r0, [sp, #4]
 800894a:	4805      	ldr	r0, [pc, #20]	; (8008960 <DecodeField+0x4c>)
 800894c:	461a      	mov	r2, r3
 800894e:	f7f8 f8d3 	bl	8000af8 <printf>
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8008952:	b007      	add	sp, #28
 8008954:	bd30      	pop	{r4, r5, pc}
 8008956:	bf00      	nop
 8008958:	0800df4c 	.word	0x0800df4c
 800895c:	0800df52 	.word	0x0800df52
 8008960:	0800df58 	.word	0x0800df58

08008964 <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8008964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008966:	460f      	mov	r7, r1
 8008968:	4615      	mov	r5, r2
 800896a:	461e      	mov	r6, r3
  Field_t const *f;
  uint32_t i;
  
  if(r == NULL) return;
 800896c:	4604      	mov	r4, r0
 800896e:	b180      	cbz	r0, 8008992 <DecodeRegister+0x2e>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8008970:	6800      	ldr	r0, [r0, #0]
 8008972:	f7ff ff3d 	bl	80087f0 <Uncompress>
	 Uncompress(r->name),
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8008976:	88a2      	ldrh	r2, [r4, #4]
 8008978:	443a      	add	r2, r7
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 800897a:	9201      	str	r2, [sp, #4]
 800897c:	79a3      	ldrb	r3, [r4, #6]
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	4601      	mov	r1, r0
 8008982:	462b      	mov	r3, r5
 8008984:	480e      	ldr	r0, [pc, #56]	; (80089c0 <DecodeRegister+0x5c>)
 8008986:	462a      	mov	r2, r5
 8008988:	f7f8 f8b6 	bl	8000af8 <printf>
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 800898c:	68a7      	ldr	r7, [r4, #8]
 800898e:	b19f      	cbz	r7, 80089b8 <DecodeRegister+0x54>
 8008990:	b986      	cbnz	r6, 80089b4 <DecodeRegister+0x50>
  }
  if(decodeFields) {
    printf("\n");
  }

}
 8008992:	b003      	add	sp, #12
 8008994:	bdf0      	pop	{r4, r5, r6, r7, pc}
      DecodeField(f,val);
 8008996:	4629      	mov	r1, r5
 8008998:	f7ff ffbc 	bl	8008914 <DecodeField>
    for(i=0; i<r->numFields; i++) {
 800899c:	3601      	adds	r6, #1
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	42b3      	cmp	r3, r6
 80089a2:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 80089a6:	d8f6      	bhi.n	8008996 <DecodeRegister+0x32>
    printf("\n");
 80089a8:	200a      	movs	r0, #10
}
 80089aa:	b003      	add	sp, #12
 80089ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    printf("\n");
 80089b0:	f7f8 b8ba 	b.w	8000b28 <putchar>
    for(i=0; i<r->numFields; i++) {
 80089b4:	2600      	movs	r6, #0
 80089b6:	e7f2      	b.n	800899e <DecodeRegister+0x3a>
  if(decodeFields) {
 80089b8:	2e00      	cmp	r6, #0
 80089ba:	d0ea      	beq.n	8008992 <DecodeRegister+0x2e>
 80089bc:	e7f4      	b.n	80089a8 <DecodeRegister+0x44>
 80089be:	bf00      	nop
 80089c0:	0800df81 	.word	0x0800df81

080089c4 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 80089c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c8:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;
  uint32_t i;

  if(p == NULL) return;
 80089ca:	4604      	mov	r4, r0
 80089cc:	b160      	cbz	r0, 80089e8 <DecodePeripheral+0x24>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	f7ff ff0e 	bl	80087f0 <Uncompress>
 80089d4:	6862      	ldr	r2, [r4, #4]
 80089d6:	4601      	mov	r1, r0
 80089d8:	480e      	ldr	r0, [pc, #56]	; (8008a14 <DecodePeripheral+0x50>)
 80089da:	f7f8 f88d 	bl	8000af8 <printf>
	 Uncompress(p->name),  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 80089de:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80089e2:	f1b8 0f00 	cmp.w	r8, #0
 80089e6:	d112      	bne.n	8008a0e <DecodePeripheral+0x4a>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
      r++;
    }
  }
}
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      val = DecodeReadRegister(p,r);
 80089ec:	4639      	mov	r1, r7
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ff3c 	bl	800886c <DecodeReadRegister>
      DecodeRegister(r, p->base, val, decodeFields);
 80089f4:	6861      	ldr	r1, [r4, #4]
      val = DecodeReadRegister(p,r);
 80089f6:	4602      	mov	r2, r0
      DecodeRegister(r, p->base, val, decodeFields);
 80089f8:	4633      	mov	r3, r6
 80089fa:	4638      	mov	r0, r7
 80089fc:	f7ff ffb2 	bl	8008964 <DecodeRegister>
    for(i=0; i<p->numRegisters; i++) {
 8008a00:	3501      	adds	r5, #1
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	429d      	cmp	r5, r3
 8008a06:	eb08 1705 	add.w	r7, r8, r5, lsl #4
 8008a0a:	d3ef      	bcc.n	80089ec <DecodePeripheral+0x28>
 8008a0c:	e7ec      	b.n	80089e8 <DecodePeripheral+0x24>
 8008a0e:	2500      	movs	r5, #0
 8008a10:	e7f7      	b.n	8008a02 <DecodePeripheral+0x3e>
 8008a12:	bf00      	nop
 8008a14:	0800dfbc 	.word	0x0800dfbc

08008a18 <DecodePrintPeripherals>:

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	4604      	mov	r4, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8008a1e:	2009      	movs	r0, #9
 8008a20:	f7f8 f882 	bl	8000b28 <putchar>
  for(; p->name != NULL; p++) {
    col += printf("%s",Uncompress(p->name));
 8008a24:	4e0e      	ldr	r6, [pc, #56]	; (8008a60 <DecodePrintPeripherals+0x48>)
    if((p+1)->name != NULL) {
      col += printf(", ");
 8008a26:	4f0f      	ldr	r7, [pc, #60]	; (8008a64 <DecodePrintPeripherals+0x4c>)
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8008a28:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8008a68 <DecodePrintPeripherals+0x50>
  col = 8;
 8008a2c:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008a2e:	6820      	ldr	r0, [r4, #0]
 8008a30:	b908      	cbnz	r0, 8008a36 <DecodePrintPeripherals+0x1e>
      }
    }
  }
}
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    col += printf("%s",Uncompress(p->name));
 8008a36:	f7ff fedb 	bl	80087f0 <Uncompress>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7f8 f85b 	bl	8000af8 <printf>
    if((p+1)->name != NULL) {
 8008a42:	6923      	ldr	r3, [r4, #16]
    col += printf("%s",Uncompress(p->name));
 8008a44:	4405      	add	r5, r0
    if((p+1)->name != NULL) {
 8008a46:	b14b      	cbz	r3, 8008a5c <DecodePrintPeripherals+0x44>
      col += printf(", ");
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7f8 f855 	bl	8000af8 <printf>
 8008a4e:	4405      	add	r5, r0
      if(col > 70) {
 8008a50:	2d46      	cmp	r5, #70	; 0x46
 8008a52:	d903      	bls.n	8008a5c <DecodePrintPeripherals+0x44>
	printf("\n\t");
 8008a54:	4640      	mov	r0, r8
 8008a56:	f7f8 f84f 	bl	8000af8 <printf>
	col = 8;
 8008a5a:	2508      	movs	r5, #8
  for(; p->name != NULL; p++) {
 8008a5c:	3410      	adds	r4, #16
 8008a5e:	e7e6      	b.n	8008a2e <DecodePrintPeripherals+0x16>
 8008a60:	0800df36 	.word	0x0800df36
 8008a64:	0800df55 	.word	0x0800df55
 8008a68:	0800dfe4 	.word	0x0800dfe4

08008a6c <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a70:	4605      	mov	r5, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8008a72:	2009      	movs	r0, #9
void DecodePrintRegisters(const Register_t *r,uint32_t count) {
 8008a74:	460e      	mov	r6, r1
  printf("\t");
 8008a76:	f7f8 f857 	bl	8000b28 <putchar>
  while(count--) {
    col += printf("%s",Uncompress(r->name));
 8008a7a:	4f11      	ldr	r7, [pc, #68]	; (8008ac0 <DecodePrintRegisters+0x54>)
    if(count) {
      col += printf(", ");
 8008a7c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008ac4 <DecodePrintRegisters+0x58>
      if(col > 70) {
	col = 8;
	printf("\n\t");
 8008a80:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8008ac8 <DecodePrintRegisters+0x5c>
 8008a84:	3510      	adds	r5, #16
  col = 8;
 8008a86:	2408      	movs	r4, #8
  while(count--) {
 8008a88:	3e01      	subs	r6, #1
 8008a8a:	d201      	bcs.n	8008a90 <DecodePrintRegisters+0x24>
      }
    }
    r++;
  }
}
 8008a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    col += printf("%s",Uncompress(r->name));
 8008a90:	f855 0c10 	ldr.w	r0, [r5, #-16]
 8008a94:	f7ff feac 	bl	80087f0 <Uncompress>
 8008a98:	4601      	mov	r1, r0
 8008a9a:	4638      	mov	r0, r7
 8008a9c:	f7f8 f82c 	bl	8000af8 <printf>
 8008aa0:	4404      	add	r4, r0
 8008aa2:	b2e4      	uxtb	r4, r4
    if(count) {
 8008aa4:	b156      	cbz	r6, 8008abc <DecodePrintRegisters+0x50>
      col += printf(", ");
 8008aa6:	4640      	mov	r0, r8
 8008aa8:	f7f8 f826 	bl	8000af8 <printf>
 8008aac:	4404      	add	r4, r0
 8008aae:	b2e4      	uxtb	r4, r4
      if(col > 70) {
 8008ab0:	2c46      	cmp	r4, #70	; 0x46
 8008ab2:	d903      	bls.n	8008abc <DecodePrintRegisters+0x50>
	printf("\n\t");
 8008ab4:	4648      	mov	r0, r9
 8008ab6:	f7f8 f81f 	bl	8000af8 <printf>
	col = 8;
 8008aba:	2408      	movs	r4, #8
    r++;
 8008abc:	3510      	adds	r5, #16
 8008abe:	e7e3      	b.n	8008a88 <DecodePrintRegisters+0x1c>
 8008ac0:	0800df36 	.word	0x0800df36
 8008ac4:	0800df55 	.word	0x0800df55
 8008ac8:	0800dfe4 	.word	0x0800dfe4

08008acc <CmdDecode>:

void CmdDecode(int mode)
{
 8008acc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t val,oval,t,m,i;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8008ace:	2802      	cmp	r0, #2
{
 8008ad0:	b085      	sub	sp, #20
  if(mode == CMD_LONG_HELP) {
 8008ad2:	d132      	bne.n	8008b3a <CmdDecode+0x6e>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8008ad4:	a803      	add	r0, sp, #12
 8008ad6:	f7ff fc29 	bl	800832c <fetch_string_arg>
    if(rc) {
 8008ada:	b148      	cbz	r0, 8008af0 <CmdDecode+0x24>
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8008adc:	4886      	ldr	r0, [pc, #536]	; (8008cf8 <CmdDecode+0x22c>)
 8008ade:	f7f8 f861 	bl	8000ba4 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8008ae2:	4886      	ldr	r0, [pc, #536]	; (8008cfc <CmdDecode+0x230>)
 8008ae4:	f7ff ff98 	bl	8008a18 <DecodePrintPeripherals>
      printf("\n\n"
 8008ae8:	4885      	ldr	r0, [pc, #532]	; (8008d00 <CmdDecode+0x234>)
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     Uncompress(p->name));
      DecodePrintRegisters(p->registers,p->numRegisters);
      printf("\n\n");
 8008aea:	f7f8 f85b 	bl	8000ba4 <puts>
 8008aee:	e016      	b.n	8008b1e <CmdDecode+0x52>
      p = Peripherals;
 8008af0:	4c82      	ldr	r4, [pc, #520]	; (8008cfc <CmdDecode+0x230>)
 8008af2:	e008      	b.n	8008b06 <CmdDecode+0x3a>
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8008af4:	9d03      	ldr	r5, [sp, #12]
 8008af6:	f7ff fe7b 	bl	80087f0 <Uncompress>
 8008afa:	4601      	mov	r1, r0
 8008afc:	4628      	mov	r0, r5
 8008afe:	f7f8 f903 	bl	8000d08 <strcasecmp>
 8008b02:	b118      	cbz	r0, 8008b0c <CmdDecode+0x40>
	p++;
 8008b04:	3410      	adds	r4, #16
      while((p->name != NULL) && strcasecmp(n,Uncompress(p->name))) {
 8008b06:	6820      	ldr	r0, [r4, #0]
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	d1f3      	bne.n	8008af4 <CmdDecode+0x28>
      if(p->name == NULL) {
 8008b0c:	6820      	ldr	r0, [r4, #0]
 8008b0e:	b940      	cbnz	r0, 8008b22 <CmdDecode+0x56>
	printf("%s is not a valid peripheral name\n"
 8008b10:	9903      	ldr	r1, [sp, #12]
 8008b12:	487c      	ldr	r0, [pc, #496]	; (8008d04 <CmdDecode+0x238>)
 8008b14:	f7f7 fff0 	bl	8000af8 <printf>
	DecodePrintPeripherals(Peripherals);
 8008b18:	4878      	ldr	r0, [pc, #480]	; (8008cfc <CmdDecode+0x230>)
 8008b1a:	f7ff ff7d 	bl	8008a18 <DecodePrintPeripherals>
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

  return;
}
 8008b1e:	b005      	add	sp, #20
 8008b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      printf("Valid registers for peripheral %s:\n"
 8008b22:	f7ff fe65 	bl	80087f0 <Uncompress>
 8008b26:	4601      	mov	r1, r0
 8008b28:	4877      	ldr	r0, [pc, #476]	; (8008d08 <CmdDecode+0x23c>)
 8008b2a:	f7f7 ffe5 	bl	8000af8 <printf>
      DecodePrintRegisters(p->registers,p->numRegisters);
 8008b2e:	89a1      	ldrh	r1, [r4, #12]
 8008b30:	68a0      	ldr	r0, [r4, #8]
 8008b32:	f7ff ff9b 	bl	8008a6c <DecodePrintRegisters>
      printf("\n\n");
 8008b36:	4875      	ldr	r0, [pc, #468]	; (8008d0c <CmdDecode+0x240>)
 8008b38:	e7d7      	b.n	8008aea <CmdDecode+0x1e>
  rc = fetch_string_arg(&pname);
 8008b3a:	4668      	mov	r0, sp
 8008b3c:	f7ff fbf6 	bl	800832c <fetch_string_arg>
  if(rc) {
 8008b40:	b178      	cbz	r0, 8008b62 <CmdDecode+0x96>
    printf("Missing peripheral name, please chose one of:\n\n");
 8008b42:	4873      	ldr	r0, [pc, #460]	; (8008d10 <CmdDecode+0x244>)
 8008b44:	f7f8 f82e 	bl	8000ba4 <puts>
    DecodePrintPeripherals(Peripherals);
 8008b48:	486c      	ldr	r0, [pc, #432]	; (8008cfc <CmdDecode+0x230>)
 8008b4a:	f7ff ff65 	bl	8008a18 <DecodePrintPeripherals>
    printf("\n\n");
 8008b4e:	e7f2      	b.n	8008b36 <CmdDecode+0x6a>
    p++;
 8008b50:	3410      	adds	r4, #16
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008b52:	6820      	ldr	r0, [r4, #0]
 8008b54:	9d00      	ldr	r5, [sp, #0]
 8008b56:	b930      	cbnz	r0, 8008b66 <CmdDecode+0x9a>
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8008b58:	9900      	ldr	r1, [sp, #0]
 8008b5a:	486e      	ldr	r0, [pc, #440]	; (8008d14 <CmdDecode+0x248>)
 8008b5c:	f7f7 ffcc 	bl	8000af8 <printf>
 8008b60:	e7f2      	b.n	8008b48 <CmdDecode+0x7c>
  p = Peripherals;
 8008b62:	4c66      	ldr	r4, [pc, #408]	; (8008cfc <CmdDecode+0x230>)
 8008b64:	e7f5      	b.n	8008b52 <CmdDecode+0x86>
  while((p->name != NULL) && strcasecmp(pname,Uncompress(p->name))) {
 8008b66:	f7ff fe43 	bl	80087f0 <Uncompress>
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f7f8 f8cb 	bl	8000d08 <strcasecmp>
 8008b72:	4605      	mov	r5, r0
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d1eb      	bne.n	8008b50 <CmdDecode+0x84>
  if(p->name == NULL) {
 8008b78:	6823      	ldr	r3, [r4, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d0ec      	beq.n	8008b58 <CmdDecode+0x8c>
  rc = fetch_string_arg(&rname);
 8008b7e:	a801      	add	r0, sp, #4
 8008b80:	f7ff fbd4 	bl	800832c <fetch_string_arg>
  if(rc) {
 8008b84:	b120      	cbz	r0, 8008b90 <CmdDecode+0xc4>
    DecodePeripheral(p,0);
 8008b86:	4629      	mov	r1, r5
      DecodePeripheral(p,1);
 8008b88:	4620      	mov	r0, r4
 8008b8a:	f7ff ff1b 	bl	80089c4 <DecodePeripheral>
      return;
 8008b8e:	e7c6      	b.n	8008b1e <CmdDecode+0x52>
  r = p->registers;
 8008b90:	68a5      	ldr	r5, [r4, #8]
  i = p->numRegisters;
 8008b92:	89a7      	ldrh	r7, [r4, #12]
  while((i--) && strcasecmp(rname,Uncompress(r->name))) {
 8008b94:	9e01      	ldr	r6, [sp, #4]
 8008b96:	2f00      	cmp	r7, #0
 8008b98:	f000 809e 	beq.w	8008cd8 <CmdDecode+0x20c>
 8008b9c:	6828      	ldr	r0, [r5, #0]
 8008b9e:	f7ff fe27 	bl	80087f0 <Uncompress>
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7f8 f8af 	bl	8000d08 <strcasecmp>
 8008baa:	3f01      	subs	r7, #1
 8008bac:	b958      	cbnz	r0, 8008bc6 <CmdDecode+0xfa>
  rc = fetch_string_arg(&fname);
 8008bae:	a802      	add	r0, sp, #8
 8008bb0:	f7ff fbbc 	bl	800832c <fetch_string_arg>
  if(rc == 0) {
 8008bb4:	b158      	cbz	r0, 8008bce <CmdDecode+0x102>
  val = DecodeReadRegister(p,r);
 8008bb6:	4629      	mov	r1, r5
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fe57 	bl	800886c <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8008bbe:	2301      	movs	r3, #1
  val = DecodeReadRegister(p,r);
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	9003      	str	r0, [sp, #12]
  DecodeRegister(r,p->base, val,1);
 8008bc4:	e010      	b.n	8008be8 <CmdDecode+0x11c>
    r++;
 8008bc6:	3510      	adds	r5, #16
 8008bc8:	e7e4      	b.n	8008b94 <CmdDecode+0xc8>
      DecodePeripheral(p,1);
 8008bca:	2101      	movs	r1, #1
 8008bcc:	e7dc      	b.n	8008b88 <CmdDecode+0xbc>
    if(strcasecmp(fname,"val") == 0) {
 8008bce:	4952      	ldr	r1, [pc, #328]	; (8008d18 <CmdDecode+0x24c>)
 8008bd0:	9802      	ldr	r0, [sp, #8]
 8008bd2:	f7f8 f899 	bl	8000d08 <strcasecmp>
 8008bd6:	b960      	cbnz	r0, 8008bf2 <CmdDecode+0x126>
      rc = fetch_uint32_arg(&val);
 8008bd8:	a803      	add	r0, sp, #12
 8008bda:	f7ff fb93 	bl	8008304 <fetch_uint32_arg>
      if(rc) {
 8008bde:	b108      	cbz	r0, 8008be4 <CmdDecode+0x118>
	printf("Missing value to use in decode\n");
 8008be0:	484e      	ldr	r0, [pc, #312]	; (8008d1c <CmdDecode+0x250>)
 8008be2:	e782      	b.n	8008aea <CmdDecode+0x1e>
      DecodeRegister(r,p->base,val,1);
 8008be4:	9a03      	ldr	r2, [sp, #12]
 8008be6:	2301      	movs	r3, #1
  DecodeRegister(r,p->base, val,1);
 8008be8:	6861      	ldr	r1, [r4, #4]
 8008bea:	4628      	mov	r0, r5
 8008bec:	f7ff feba 	bl	8008964 <DecodeRegister>
  return;
 8008bf0:	e795      	b.n	8008b1e <CmdDecode+0x52>
    f = r->fields;
 8008bf2:	68ae      	ldr	r6, [r5, #8]
    while((f->name != NULL) && strcasecmp(fname,Uncompress(f->name))) {
 8008bf4:	6830      	ldr	r0, [r6, #0]
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d049      	beq.n	8008c8e <CmdDecode+0x1c2>
 8008bfa:	9f02      	ldr	r7, [sp, #8]
 8008bfc:	f7ff fdf8 	bl	80087f0 <Uncompress>
 8008c00:	4601      	mov	r1, r0
 8008c02:	4638      	mov	r0, r7
 8008c04:	f7f8 f880 	bl	8000d08 <strcasecmp>
 8008c08:	b970      	cbnz	r0, 8008c28 <CmdDecode+0x15c>
    if(f->name != NULL) {
 8008c0a:	6833      	ldr	r3, [r6, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d03e      	beq.n	8008c8e <CmdDecode+0x1c2>
      rc = fetch_uint32_arg(&val);
 8008c10:	a803      	add	r0, sp, #12
 8008c12:	f7ff fb77 	bl	8008304 <fetch_uint32_arg>
      if(rc) {
 8008c16:	b148      	cbz	r0, 8008c2c <CmdDecode+0x160>
	printf("Missing Value to program into register %s\n",
 8008c18:	6828      	ldr	r0, [r5, #0]
 8008c1a:	f7ff fde9 	bl	80087f0 <Uncompress>
 8008c1e:	4601      	mov	r1, r0
 8008c20:	483f      	ldr	r0, [pc, #252]	; (8008d20 <CmdDecode+0x254>)
      printf("Invalid number '%s' entered.\n",
 8008c22:	f7f7 ff69 	bl	8000af8 <printf>
      return;
 8008c26:	e77a      	b.n	8008b1e <CmdDecode+0x52>
      f++;
 8008c28:	3608      	adds	r6, #8
 8008c2a:	e7e3      	b.n	8008bf4 <CmdDecode+0x128>
      t = DecodeReadRegister(p,r);
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f7ff fe1c 	bl	800886c <DecodeReadRegister>
      m = (1<<f->width)-1;
 8008c34:	7972      	ldrb	r2, [r6, #5]
 8008c36:	2301      	movs	r3, #1
 8008c38:	4093      	lsls	r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008c3a:	7932      	ldrb	r2, [r6, #4]
      m = (1<<f->width)-1;
 8008c3c:	3b01      	subs	r3, #1
      t &= ~(m << f->offset);
 8008c3e:	fa03 f102 	lsl.w	r1, r3, r2
      oval = (t >> f->offset) & m; /* Save old value */
 8008c42:	fa20 f702 	lsr.w	r7, r0, r2
      t &= ~(m << f->offset);
 8008c46:	ea20 0001 	bic.w	r0, r0, r1
      t |= (val & m) << f->offset;
 8008c4a:	9903      	ldr	r1, [sp, #12]
      oval = (t >> f->offset) & m; /* Save old value */
 8008c4c:	401f      	ands	r7, r3
      t |= (val & m) << f->offset;
 8008c4e:	400b      	ands	r3, r1
 8008c50:	fa03 f202 	lsl.w	r2, r3, r2
      DecodeWriteRegister(p,r,t);
 8008c54:	4302      	orrs	r2, r0
 8008c56:	4629      	mov	r1, r5
 8008c58:	4620      	mov	r0, r4
 8008c5a:	f7ff fe31 	bl	80088c0 <DecodeWriteRegister>
      printf("%s.",
 8008c5e:	6820      	ldr	r0, [r4, #0]
 8008c60:	f7ff fdc6 	bl	80087f0 <Uncompress>
 8008c64:	4601      	mov	r1, r0
 8008c66:	482f      	ldr	r0, [pc, #188]	; (8008d24 <CmdDecode+0x258>)
 8008c68:	f7f7 ff46 	bl	8000af8 <printf>
      printf("%s.",
 8008c6c:	6828      	ldr	r0, [r5, #0]
 8008c6e:	f7ff fdbf 	bl	80087f0 <Uncompress>
 8008c72:	4601      	mov	r1, r0
 8008c74:	482b      	ldr	r0, [pc, #172]	; (8008d24 <CmdDecode+0x258>)
 8008c76:	f7f7 ff3f 	bl	8000af8 <printf>
      printf("%s (%d) -> (%d)\n",
 8008c7a:	6830      	ldr	r0, [r6, #0]
 8008c7c:	f7ff fdb8 	bl	80087f0 <Uncompress>
 8008c80:	9b03      	ldr	r3, [sp, #12]
 8008c82:	4601      	mov	r1, r0
 8008c84:	463a      	mov	r2, r7
 8008c86:	4828      	ldr	r0, [pc, #160]	; (8008d28 <CmdDecode+0x25c>)
 8008c88:	f7f7 ff36 	bl	8000af8 <printf>
      return;
 8008c8c:	e747      	b.n	8008b1e <CmdDecode+0x52>
    errno = 0;
 8008c8e:	f7f7 fe8f 	bl	80009b0 <__errno>
 8008c92:	2200      	movs	r2, #0
 8008c94:	6002      	str	r2, [r0, #0]
    val = strtoul(fname,NULL,0);
 8008c96:	4611      	mov	r1, r2
 8008c98:	9802      	ldr	r0, [sp, #8]
 8008c9a:	f7f8 fa2d 	bl	80010f8 <strtoul>
 8008c9e:	9003      	str	r0, [sp, #12]
    if(errno != 0) {
 8008ca0:	f7f7 fe86 	bl	80009b0 <__errno>
 8008ca4:	6803      	ldr	r3, [r0, #0]
 8008ca6:	b113      	cbz	r3, 8008cae <CmdDecode+0x1e2>
      printf("Invalid number '%s' entered.\n",
 8008ca8:	9902      	ldr	r1, [sp, #8]
 8008caa:	4820      	ldr	r0, [pc, #128]	; (8008d2c <CmdDecode+0x260>)
 8008cac:	e7b9      	b.n	8008c22 <CmdDecode+0x156>
    DecodeWriteRegister(p,r,val);
 8008cae:	9a03      	ldr	r2, [sp, #12]
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	f7ff fe04 	bl	80088c0 <DecodeWriteRegister>
    printf("%s.",
 8008cb8:	6820      	ldr	r0, [r4, #0]
 8008cba:	f7ff fd99 	bl	80087f0 <Uncompress>
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	4818      	ldr	r0, [pc, #96]	; (8008d24 <CmdDecode+0x258>)
 8008cc2:	f7f7 ff19 	bl	8000af8 <printf>
    printf("%s = 0x%08x\n",
 8008cc6:	6828      	ldr	r0, [r5, #0]
 8008cc8:	f7ff fd92 	bl	80087f0 <Uncompress>
 8008ccc:	9a03      	ldr	r2, [sp, #12]
 8008cce:	4601      	mov	r1, r0
 8008cd0:	4817      	ldr	r0, [pc, #92]	; (8008d30 <CmdDecode+0x264>)
 8008cd2:	f7f7 ff11 	bl	8000af8 <printf>
    return;
 8008cd6:	e722      	b.n	8008b1e <CmdDecode+0x52>
    if(strcasecmp(rname,"full") == 0) {
 8008cd8:	4916      	ldr	r1, [pc, #88]	; (8008d34 <CmdDecode+0x268>)
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7f8 f814 	bl	8000d08 <strcasecmp>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	f43f af72 	beq.w	8008bca <CmdDecode+0xfe>
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8008ce6:	6820      	ldr	r0, [r4, #0]
 8008ce8:	f7ff fd82 	bl	80087f0 <Uncompress>
 8008cec:	4631      	mov	r1, r6
 8008cee:	4602      	mov	r2, r0
 8008cf0:	4811      	ldr	r0, [pc, #68]	; (8008d38 <CmdDecode+0x26c>)
 8008cf2:	f7f7 ff01 	bl	8000af8 <printf>
    DecodePrintRegisters(p->registers,p->numRegisters);
 8008cf6:	e71a      	b.n	8008b2e <CmdDecode+0x62>
 8008cf8:	0800dfe7 	.word	0x0800dfe7
 8008cfc:	08018898 	.word	0x08018898
 8008d00:	0800e1fa 	.word	0x0800e1fa
 8008d04:	0800e24f 	.word	0x0800e24f
 8008d08:	0800e28a 	.word	0x0800e28a
 8008d0c:	0800e318 	.word	0x0800e318
 8008d10:	0800e2af 	.word	0x0800e2af
 8008d14:	0800e2de 	.word	0x0800e2de
 8008d18:	0800e357 	.word	0x0800e357
 8008d1c:	0800e35b 	.word	0x0800e35b
 8008d20:	0800e37a 	.word	0x0800e37a
 8008d24:	0800e3a5 	.word	0x0800e3a5
 8008d28:	0800e3a9 	.word	0x0800e3a9
 8008d2c:	0800e3ba 	.word	0x0800e3ba
 8008d30:	0800e3d8 	.word	0x0800e3d8
 8008d34:	0800e3e5 	.word	0x0800e3e5
 8008d38:	0800e31a 	.word	0x0800e31a

08008d3c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008d3c:	4915      	ldr	r1, [pc, #84]	; (8008d94 <SystemInit+0x58>)
 8008d3e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008d42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008d4a:	4b13      	ldr	r3, [pc, #76]	; (8008d98 <SystemInit+0x5c>)
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	f042 0201 	orr.w	r2, r2, #1
 8008d52:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8008d54:	6858      	ldr	r0, [r3, #4]
 8008d56:	4a11      	ldr	r2, [pc, #68]	; (8008d9c <SystemInit+0x60>)
 8008d58:	4002      	ands	r2, r0
 8008d5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008d5c:	681a      	ldr	r2, [r3, #0]
 8008d5e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008d62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008d66:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d6e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8008d76:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8008d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7a:	f022 020f 	bic.w	r2, r2, #15
 8008d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8008d80:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008d82:	4a07      	ldr	r2, [pc, #28]	; (8008da0 <SystemInit+0x64>)
 8008d84:	4002      	ands	r2, r0
 8008d86:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008d88:	2200      	movs	r2, #0
 8008d8a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008d8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d90:	608b      	str	r3, [r1, #8]
#endif
}
 8008d92:	4770      	bx	lr
 8008d94:	e000ed00 	.word	0xe000ed00
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	f87fc00c 	.word	0xf87fc00c
 8008da0:	ff00fccc 	.word	0xff00fccc

08008da4 <HAL_RCC_OscConfig>:

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008da4:	6803      	ldr	r3, [r0, #0]
 8008da6:	07db      	lsls	r3, r3, #31
{
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dae:	d46f      	bmi.n	8008e90 <HAL_RCC_OscConfig+0xec>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008db0:	6823      	ldr	r3, [r4, #0]
 8008db2:	079f      	lsls	r7, r3, #30
 8008db4:	f100 812d 	bmi.w	8009012 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	0719      	lsls	r1, r3, #28
 8008dbc:	f100 81c0 	bmi.w	8009140 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dc0:	6823      	ldr	r3, [r4, #0]
 8008dc2:	075a      	lsls	r2, r3, #29
 8008dc4:	d55e      	bpl.n	8008e84 <HAL_RCC_OscConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8008dc6:	4dc6      	ldr	r5, [pc, #792]	; (80090e0 <HAL_RCC_OscConfig+0x33c>)

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dc8:	4ec6      	ldr	r6, [pc, #792]	; (80090e4 <HAL_RCC_OscConfig+0x340>)
    __PWR_CLK_ENABLE();
 8008dca:	69eb      	ldr	r3, [r5, #28]
 8008dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd0:	61eb      	str	r3, [r5, #28]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8008dd2:	6833      	ldr	r3, [r6, #0]
 8008dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dd8:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dda:	f000 fca3 	bl	8009724 <HAL_GetTick>
 8008dde:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008de0:	6833      	ldr	r3, [r6, #0]
 8008de2:	05db      	lsls	r3, r3, #23
 8008de4:	f140 81f2 	bpl.w	80091cc <HAL_RCC_OscConfig+0x428>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8008de8:	6a2b      	ldr	r3, [r5, #32]
 8008dea:	f023 0305 	bic.w	r3, r3, #5
 8008dee:	622b      	str	r3, [r5, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008df0:	f000 fc98 	bl	8009724 <HAL_GetTick>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df4:	2702      	movs	r7, #2
 8008df6:	4606      	mov	r6, r0
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008df8:	46b9      	mov	r9, r7
 8008dfa:	f04f 0801 	mov.w	r8, #1
 8008dfe:	fa97 f3a7 	rbit	r3, r7
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e02:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e06:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e0a:	fab3 f383 	clz	r3, r3
 8008e0e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e12:	f033 0302 	bics.w	r3, r3, #2
 8008e16:	bf0c      	ite	eq
 8008e18:	6a2a      	ldreq	r2, [r5, #32]
 8008e1a:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e1c:	fa99 f3a9 	rbit	r3, r9
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e20:	fab3 f383 	clz	r3, r3
 8008e24:	f003 031f 	and.w	r3, r3, #31
 8008e28:	fa08 f303 	lsl.w	r3, r8, r3
 8008e2c:	4213      	tst	r3, r2
 8008e2e:	f040 81d4 	bne.w	80091da <HAL_RCC_OscConfig+0x436>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e32:	6a2b      	ldr	r3, [r5, #32]
 8008e34:	68e6      	ldr	r6, [r4, #12]
 8008e36:	f023 0305 	bic.w	r3, r3, #5
 8008e3a:	4333      	orrs	r3, r6
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008e3c:	2e01      	cmp	r6, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e3e:	622b      	str	r3, [r5, #32]
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008e40:	f040 81dd 	bne.w	80091fe <HAL_RCC_OscConfig+0x45a>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8008e44:	f000 fc6e 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e48:	f04f 0802 	mov.w	r8, #2
 8008e4c:	4607      	mov	r7, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e4e:	46c1      	mov	r9, r8
 8008e50:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e54:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e58:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e5c:	fab3 f383 	clz	r3, r3
 8008e60:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008e64:	f033 0302 	bics.w	r3, r3, #2
 8008e68:	bf0c      	ite	eq
 8008e6a:	6a2a      	ldreq	r2, [r5, #32]
 8008e6c:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e6e:	fa99 f3a9 	rbit	r3, r9
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008e72:	fab3 f383 	clz	r3, r3
 8008e76:	f003 031f 	and.w	r3, r3, #31
 8008e7a:	fa06 f303 	lsl.w	r3, r6, r3
 8008e7e:	4213      	tst	r3, r2
 8008e80:	f000 81b4 	beq.w	80091ec <HAL_RCC_OscConfig+0x448>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e84:	69e2      	ldr	r2, [r4, #28]
 8008e86:	2a00      	cmp	r2, #0
 8008e88:	f040 81e2 	bne.w	8009250 <HAL_RCC_OscConfig+0x4ac>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e02c      	b.n	8008eea <HAL_RCC_OscConfig+0x146>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008e90:	4d93      	ldr	r5, [pc, #588]	; (80090e0 <HAL_RCC_OscConfig+0x33c>)
 8008e92:	686b      	ldr	r3, [r5, #4]
 8008e94:	f003 030c 	and.w	r3, r3, #12
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d007      	beq.n	8008eac <HAL_RCC_OscConfig+0x108>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008e9c:	686b      	ldr	r3, [r5, #4]
 8008e9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	d129      	bne.n	8008efa <HAL_RCC_OscConfig+0x156>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008ea6:	686b      	ldr	r3, [r5, #4]
 8008ea8:	03de      	lsls	r6, r3, #15
 8008eaa:	d526      	bpl.n	8008efa <HAL_RCC_OscConfig+0x156>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008eb0:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008eb4:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8008eb8:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8008ebc:	f032 0201 	bics.w	r2, r2, #1
 8008ec0:	d115      	bne.n	8008eee <HAL_RCC_OscConfig+0x14a>
 8008ec2:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008ec8:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ecc:	fab3 f383 	clz	r3, r3
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f003 031f 	and.w	r3, r3, #31
 8008ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eda:	420b      	tst	r3, r1
 8008edc:	f43f af68 	beq.w	8008db0 <HAL_RCC_OscConfig+0xc>
 8008ee0:	6863      	ldr	r3, [r4, #4]
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	f43f af64 	beq.w	8008db0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8008ee8:	2001      	movs	r0, #1
}
 8008eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eee:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008ef2:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8008ef6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8008ef8:	e7e4      	b.n	8008ec4 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8008efa:	4e7b      	ldr	r6, [pc, #492]	; (80090e8 <HAL_RCC_OscConfig+0x344>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	7033      	strb	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008f00:	f000 fc10 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f04:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8008f08:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f0a:	f04f 0901 	mov.w	r9, #1
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008f0e:	f241 3a88 	movw	sl, #5000	; 0x1388
 8008f12:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f16:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f1a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008f1e:	f033 0301 	bics.w	r3, r3, #1
 8008f22:	d140      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x202>
 8008f24:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f26:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f2a:	fab3 f383 	clz	r3, r3
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	fa09 f303 	lsl.w	r3, r9, r3
 8008f36:	4213      	tst	r3, r2
 8008f38:	d12d      	bne.n	8008f96 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f3a:	7923      	ldrb	r3, [r4, #4]
 8008f3c:	7033      	strb	r3, [r6, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008f40:	68a2      	ldr	r2, [r4, #8]
 8008f42:	f023 030f 	bic.w	r3, r3, #15
 8008f46:	4313      	orrs	r3, r2
 8008f48:	62eb      	str	r3, [r5, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 8008f4a:	6866      	ldr	r6, [r4, #4]
 8008f4c:	2e01      	cmp	r6, #1
 8008f4e:	d136      	bne.n	8008fbe <HAL_RCC_OscConfig+0x21a>
        tickstart = HAL_GetTick();
 8008f50:	f000 fbe8 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f54:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8008f58:	4680      	mov	r8, r0
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008f5a:	f241 3988 	movw	r9, #5000	; 0x1388
 8008f5e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f62:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f66:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008f6a:	f033 0301 	bics.w	r3, r3, #1
 8008f6e:	d120      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x20e>
 8008f70:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f72:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008f76:	fab3 f383 	clz	r3, r3
 8008f7a:	f003 031f 	and.w	r3, r3, #31
 8008f7e:	fa06 f303 	lsl.w	r3, r6, r3
 8008f82:	4213      	tst	r3, r2
 8008f84:	f47f af14 	bne.w	8008db0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008f88:	f000 fbcc 	bl	8009724 <HAL_GetTick>
 8008f8c:	eba0 0008 	sub.w	r0, r0, r8
 8008f90:	4548      	cmp	r0, r9
 8008f92:	d9e4      	bls.n	8008f5e <HAL_RCC_OscConfig+0x1ba>
 8008f94:	e005      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008f96:	f000 fbc5 	bl	8009724 <HAL_GetTick>
 8008f9a:	eba0 0008 	sub.w	r0, r0, r8
 8008f9e:	4550      	cmp	r0, sl
 8008fa0:	d9b7      	bls.n	8008f12 <HAL_RCC_OscConfig+0x16e>
          return HAL_TIMEOUT;
 8008fa2:	2003      	movs	r0, #3
 8008fa4:	e7a1      	b.n	8008eea <HAL_RCC_OscConfig+0x146>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fa6:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008faa:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fae:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008fb0:	e7b9      	b.n	8008f26 <HAL_RCC_OscConfig+0x182>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fb6:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8008fbc:	e7d9      	b.n	8008f72 <HAL_RCC_OscConfig+0x1ce>
        tickstart = HAL_GetTick();
 8008fbe:	f000 fbb1 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fc2:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8008fc6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fc8:	f04f 0801 	mov.w	r8, #1
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008fcc:	f241 3988 	movw	r9, #5000	; 0x1388
 8008fd0:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fd4:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fd8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8008fdc:	f033 0301 	bics.w	r3, r3, #1
 8008fe0:	d111      	bne.n	8009006 <HAL_RCC_OscConfig+0x262>
 8008fe2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe4:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8008fe8:	fab3 f383 	clz	r3, r3
 8008fec:	f003 031f 	and.w	r3, r3, #31
 8008ff0:	fa08 f303 	lsl.w	r3, r8, r3
 8008ff4:	4213      	tst	r3, r2
 8008ff6:	f43f aedb 	beq.w	8008db0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8008ffa:	f000 fb93 	bl	8009724 <HAL_GetTick>
 8008ffe:	1bc0      	subs	r0, r0, r7
 8009000:	4548      	cmp	r0, r9
 8009002:	d9e5      	bls.n	8008fd0 <HAL_RCC_OscConfig+0x22c>
 8009004:	e7cd      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009006:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800900a:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800900e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009010:	e7e8      	b.n	8008fe4 <HAL_RCC_OscConfig+0x240>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009012:	4d33      	ldr	r5, [pc, #204]	; (80090e0 <HAL_RCC_OscConfig+0x33c>)
 8009014:	686b      	ldr	r3, [r5, #4]
 8009016:	f013 0f0c 	tst.w	r3, #12
 800901a:	d007      	beq.n	800902c <HAL_RCC_OscConfig+0x288>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800901c:	686b      	ldr	r3, [r5, #4]
 800901e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009022:	2b08      	cmp	r3, #8
 8009024:	d132      	bne.n	800908c <HAL_RCC_OscConfig+0x2e8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009026:	686b      	ldr	r3, [r5, #4]
 8009028:	03d8      	lsls	r0, r3, #15
 800902a:	d42f      	bmi.n	800908c <HAL_RCC_OscConfig+0x2e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800902c:	2302      	movs	r3, #2
 800902e:	fa93 f2a3 	rbit	r2, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009032:	fab2 f282 	clz	r2, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009036:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800903a:	f032 0201 	bics.w	r2, r2, #1
 800903e:	d11f      	bne.n	8009080 <HAL_RCC_OscConfig+0x2dc>
 8009040:	6829      	ldr	r1, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009042:	2302      	movs	r3, #2
 8009044:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009048:	fab3 f383 	clz	r3, r3
 800904c:	2201      	movs	r2, #1
 800904e:	f003 031f 	and.w	r3, r3, #31
 8009052:	fa02 f303 	lsl.w	r3, r2, r3
 8009056:	420b      	tst	r3, r1
 8009058:	d003      	beq.n	8009062 <HAL_RCC_OscConfig+0x2be>
 800905a:	6923      	ldr	r3, [r4, #16]
 800905c:	4293      	cmp	r3, r2
 800905e:	f47f af43 	bne.w	8008ee8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009062:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009064:	23f8      	movs	r3, #248	; 0xf8
 8009066:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800906a:	fab3 f383 	clz	r3, r3
 800906e:	6961      	ldr	r1, [r4, #20]
 8009070:	b2db      	uxtb	r3, r3
 8009072:	fa01 f303 	lsl.w	r3, r1, r3
 8009076:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800907a:	4313      	orrs	r3, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	e69b      	b.n	8008db8 <HAL_RCC_OscConfig+0x14>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009080:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009084:	fab3 f383 	clz	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009088:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800908a:	e7da      	b.n	8009042 <HAL_RCC_OscConfig+0x29e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800908c:	6922      	ldr	r2, [r4, #16]
 800908e:	4b17      	ldr	r3, [pc, #92]	; (80090ec <HAL_RCC_OscConfig+0x348>)
 8009090:	b372      	cbz	r2, 80090f0 <HAL_RCC_OscConfig+0x34c>
        __HAL_RCC_HSI_ENABLE();
 8009092:	2601      	movs	r6, #1
 8009094:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8009096:	f000 fb45 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800909a:	2702      	movs	r7, #2
 800909c:	4680      	mov	r8, r0
 800909e:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090a2:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090a6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80090aa:	f033 0301 	bics.w	r3, r3, #1
 80090ae:	d111      	bne.n	80090d4 <HAL_RCC_OscConfig+0x330>
 80090b0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090b2:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090b6:	fab3 f383 	clz	r3, r3
 80090ba:	f003 031f 	and.w	r3, r3, #31
 80090be:	fa06 f303 	lsl.w	r3, r6, r3
 80090c2:	4213      	tst	r3, r2
 80090c4:	d1cd      	bne.n	8009062 <HAL_RCC_OscConfig+0x2be>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 80090c6:	f000 fb2d 	bl	8009724 <HAL_GetTick>
 80090ca:	eba0 0008 	sub.w	r0, r0, r8
 80090ce:	2864      	cmp	r0, #100	; 0x64
 80090d0:	d9e5      	bls.n	800909e <HAL_RCC_OscConfig+0x2fa>
 80090d2:	e766      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090d4:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80090d8:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090dc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80090de:	e7e8      	b.n	80090b2 <HAL_RCC_OscConfig+0x30e>
 80090e0:	40021000 	.word	0x40021000
 80090e4:	40007000 	.word	0x40007000
 80090e8:	40021002 	.word	0x40021002
 80090ec:	42420000 	.word	0x42420000
        __HAL_RCC_HSI_DISABLE();
 80090f0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80090f2:	f000 fb17 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090f6:	2602      	movs	r6, #2
 80090f8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090fa:	f04f 0801 	mov.w	r8, #1
 80090fe:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009102:	fab3 f383 	clz	r3, r3
 8009106:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800910a:	f033 0301 	bics.w	r3, r3, #1
 800910e:	d111      	bne.n	8009134 <HAL_RCC_OscConfig+0x390>
 8009110:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009112:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009116:	fab3 f383 	clz	r3, r3
 800911a:	f003 031f 	and.w	r3, r3, #31
 800911e:	fa08 f303 	lsl.w	r3, r8, r3
 8009122:	4213      	tst	r3, r2
 8009124:	f43f ae48 	beq.w	8008db8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8009128:	f000 fafc 	bl	8009724 <HAL_GetTick>
 800912c:	1bc0      	subs	r0, r0, r7
 800912e:	2864      	cmp	r0, #100	; 0x64
 8009130:	d9e5      	bls.n	80090fe <HAL_RCC_OscConfig+0x35a>
 8009132:	e736      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009134:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009138:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800913c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800913e:	e7e8      	b.n	8009112 <HAL_RCC_OscConfig+0x36e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009140:	69a2      	ldr	r2, [r4, #24]
 8009142:	4d88      	ldr	r5, [pc, #544]	; (8009364 <HAL_RCC_OscConfig+0x5c0>)
 8009144:	4b88      	ldr	r3, [pc, #544]	; (8009368 <HAL_RCC_OscConfig+0x5c4>)
 8009146:	b302      	cbz	r2, 800918a <HAL_RCC_OscConfig+0x3e6>
      __HAL_RCC_LSI_ENABLE();
 8009148:	2601      	movs	r6, #1
 800914a:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
 800914c:	f000 faea 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009150:	2702      	movs	r7, #2
 8009152:	4680      	mov	r8, r0
 8009154:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009158:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800915c:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009160:	fab3 f383 	clz	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009164:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009166:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800916a:	fab3 f383 	clz	r3, r3
 800916e:	f003 031f 	and.w	r3, r3, #31
 8009172:	fa06 f303 	lsl.w	r3, r6, r3
 8009176:	4213      	tst	r3, r2
 8009178:	f47f ae22 	bne.w	8008dc0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 800917c:	f000 fad2 	bl	8009724 <HAL_GetTick>
 8009180:	eba0 0008 	sub.w	r0, r0, r8
 8009184:	2864      	cmp	r0, #100	; 0x64
 8009186:	d9e5      	bls.n	8009154 <HAL_RCC_OscConfig+0x3b0>
 8009188:	e70b      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_LSI_DISABLE();
 800918a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800918c:	f000 faca 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009190:	2602      	movs	r6, #2
 8009192:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009194:	f04f 0801 	mov.w	r8, #1
 8009198:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800919c:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a0:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	fab3 f383 	clz	r3, r3
 80091a8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091aa:	fa96 f3a6 	rbit	r3, r6
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80091ae:	fab3 f383 	clz	r3, r3
 80091b2:	f003 031f 	and.w	r3, r3, #31
 80091b6:	fa08 f303 	lsl.w	r3, r8, r3
 80091ba:	4213      	tst	r3, r2
 80091bc:	f43f ae00 	beq.w	8008dc0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 80091c0:	f000 fab0 	bl	8009724 <HAL_GetTick>
 80091c4:	1bc0      	subs	r0, r0, r7
 80091c6:	2864      	cmp	r0, #100	; 0x64
 80091c8:	d9e6      	bls.n	8009198 <HAL_RCC_OscConfig+0x3f4>
 80091ca:	e6ea      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 80091cc:	f000 faaa 	bl	8009724 <HAL_GetTick>
 80091d0:	1bc0      	subs	r0, r0, r7
 80091d2:	2864      	cmp	r0, #100	; 0x64
 80091d4:	f67f ae04 	bls.w	8008de0 <HAL_RCC_OscConfig+0x3c>
 80091d8:	e6e3      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80091da:	f000 faa3 	bl	8009724 <HAL_GetTick>
 80091de:	f241 3388 	movw	r3, #5000	; 0x1388
 80091e2:	1b80      	subs	r0, r0, r6
 80091e4:	4298      	cmp	r0, r3
 80091e6:	f67f ae0a 	bls.w	8008dfe <HAL_RCC_OscConfig+0x5a>
 80091ea:	e6da      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 80091ec:	f000 fa9a 	bl	8009724 <HAL_GetTick>
 80091f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80091f4:	1bc0      	subs	r0, r0, r7
 80091f6:	4298      	cmp	r0, r3
 80091f8:	f67f ae2a 	bls.w	8008e50 <HAL_RCC_OscConfig+0xac>
 80091fc:	e6d1      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
      tickstart = HAL_GetTick();
 80091fe:	f000 fa91 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009202:	2702      	movs	r7, #2
 8009204:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009206:	46b9      	mov	r9, r7
 8009208:	f04f 0801 	mov.w	r8, #1
 800920c:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009210:	fab3 f383 	clz	r3, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009214:	fa97 f3a7 	rbit	r3, r7
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009218:	fab3 f383 	clz	r3, r3
 800921c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009220:	f033 0302 	bics.w	r3, r3, #2
 8009224:	bf0c      	ite	eq
 8009226:	6a2a      	ldreq	r2, [r5, #32]
 8009228:	6a6a      	ldrne	r2, [r5, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800922a:	fa99 f3a9 	rbit	r3, r9
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800922e:	fab3 f383 	clz	r3, r3
 8009232:	f003 031f 	and.w	r3, r3, #31
 8009236:	fa08 f303 	lsl.w	r3, r8, r3
 800923a:	4213      	tst	r3, r2
 800923c:	f43f ae22 	beq.w	8008e84 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8009240:	f000 fa70 	bl	8009724 <HAL_GetTick>
 8009244:	f241 3388 	movw	r3, #5000	; 0x1388
 8009248:	1b80      	subs	r0, r0, r6
 800924a:	4298      	cmp	r0, r3
 800924c:	d9de      	bls.n	800920c <HAL_RCC_OscConfig+0x468>
 800924e:	e6a8      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009250:	4d44      	ldr	r5, [pc, #272]	; (8009364 <HAL_RCC_OscConfig+0x5c0>)
 8009252:	686b      	ldr	r3, [r5, #4]
 8009254:	f003 030c 	and.w	r3, r3, #12
 8009258:	2b08      	cmp	r3, #8
 800925a:	f43f ae45 	beq.w	8008ee8 <HAL_RCC_OscConfig+0x144>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800925e:	4e43      	ldr	r6, [pc, #268]	; (800936c <HAL_RCC_OscConfig+0x5c8>)
 8009260:	2300      	movs	r3, #0
 8009262:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8009264:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009266:	d156      	bne.n	8009316 <HAL_RCC_OscConfig+0x572>
        tickstart = HAL_GetTick();
 8009268:	f000 fa5c 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800926c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8009270:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009272:	2701      	movs	r7, #1
 8009274:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009278:	fab3 f383 	clz	r3, r3
 800927c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8009280:	f033 0301 	bics.w	r3, r3, #1
 8009284:	d13b      	bne.n	80092fe <HAL_RCC_OscConfig+0x55a>
 8009286:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009288:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800928c:	fab3 f383 	clz	r3, r3
 8009290:	f003 031f 	and.w	r3, r3, #31
 8009294:	fa07 f303 	lsl.w	r3, r7, r3
 8009298:	4213      	tst	r3, r2
 800929a:	d129      	bne.n	80092f0 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800929c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 80092a0:	686a      	ldr	r2, [r5, #4]
 80092a2:	430b      	orrs	r3, r1
 80092a4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80092a8:	4313      	orrs	r3, r2
 80092aa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80092ac:	6037      	str	r7, [r6, #0]
        tickstart = HAL_GetTick();
 80092ae:	f000 fa39 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092b2:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80092b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092b8:	2701      	movs	r7, #1
 80092ba:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092be:	fab3 f383 	clz	r3, r3
 80092c2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80092c6:	f033 0301 	bics.w	r3, r3, #1
 80092ca:	d11e      	bne.n	800930a <HAL_RCC_OscConfig+0x566>
 80092cc:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ce:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80092d2:	fab3 f383 	clz	r3, r3
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	fa07 f303 	lsl.w	r3, r7, r3
 80092de:	4213      	tst	r3, r2
 80092e0:	f47f add4 	bne.w	8008e8c <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80092e4:	f000 fa1e 	bl	8009724 <HAL_GetTick>
 80092e8:	1b80      	subs	r0, r0, r6
 80092ea:	2864      	cmp	r0, #100	; 0x64
 80092ec:	d9e5      	bls.n	80092ba <HAL_RCC_OscConfig+0x516>
 80092ee:	e658      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 80092f0:	f000 fa18 	bl	8009724 <HAL_GetTick>
 80092f4:	eba0 0009 	sub.w	r0, r0, r9
 80092f8:	2864      	cmp	r0, #100	; 0x64
 80092fa:	d9bb      	bls.n	8009274 <HAL_RCC_OscConfig+0x4d0>
 80092fc:	e651      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092fe:	fa98 f3a8 	rbit	r3, r8
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009302:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009306:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009308:	e7be      	b.n	8009288 <HAL_RCC_OscConfig+0x4e4>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800930a:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800930e:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009312:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009314:	e7db      	b.n	80092ce <HAL_RCC_OscConfig+0x52a>
        tickstart = HAL_GetTick();
 8009316:	f000 fa05 	bl	8009724 <HAL_GetTick>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800931a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800931e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009320:	2701      	movs	r7, #1
 8009322:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009326:	fab3 f383 	clz	r3, r3
 800932a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800932e:	f033 0301 	bics.w	r3, r3, #1
 8009332:	d111      	bne.n	8009358 <HAL_RCC_OscConfig+0x5b4>
 8009334:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009336:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800933a:	fab3 f383 	clz	r3, r3
 800933e:	f003 031f 	and.w	r3, r3, #31
 8009342:	fa07 f303 	lsl.w	r3, r7, r3
 8009346:	4213      	tst	r3, r2
 8009348:	f43f ada0 	beq.w	8008e8c <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 800934c:	f000 f9ea 	bl	8009724 <HAL_GetTick>
 8009350:	1b80      	subs	r0, r0, r6
 8009352:	2864      	cmp	r0, #100	; 0x64
 8009354:	d9e5      	bls.n	8009322 <HAL_RCC_OscConfig+0x57e>
 8009356:	e624      	b.n	8008fa2 <HAL_RCC_OscConfig+0x1fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009358:	fa94 f3a4 	rbit	r3, r4
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800935c:	fab3 f383 	clz	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009360:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8009362:	e7e8      	b.n	8009336 <HAL_RCC_OscConfig+0x592>
 8009364:	40021000 	.word	0x40021000
 8009368:	42420480 	.word	0x42420480
 800936c:	42420060 	.word	0x42420060

08009370 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009370:	4aa9      	ldr	r2, [pc, #676]	; (8009618 <HAL_RCC_ClockConfig+0x2a8>)
 8009372:	6813      	ldr	r3, [r2, #0]
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	428b      	cmp	r3, r1
{
 800937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	4604      	mov	r4, r0
 8009380:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8009382:	f080 80aa 	bcs.w	80094da <HAL_RCC_ClockConfig+0x16a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009386:	6813      	ldr	r3, [r2, #0]
 8009388:	f023 0307 	bic.w	r3, r3, #7
 800938c:	430b      	orrs	r3, r1
 800938e:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009390:	6813      	ldr	r3, [r2, #0]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	428b      	cmp	r3, r1
 8009398:	d002      	beq.n	80093a0 <HAL_RCC_ClockConfig+0x30>
    {
      return HAL_ERROR;
 800939a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 800939c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093a0:	6802      	ldr	r2, [r0, #0]
 80093a2:	0796      	lsls	r6, r2, #30
 80093a4:	d506      	bpl.n	80093b4 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093a6:	499d      	ldr	r1, [pc, #628]	; (800961c <HAL_RCC_ClockConfig+0x2ac>)
 80093a8:	6880      	ldr	r0, [r0, #8]
 80093aa:	684b      	ldr	r3, [r1, #4]
 80093ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093b0:	4303      	orrs	r3, r0
 80093b2:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093b4:	07d5      	lsls	r5, r2, #31
 80093b6:	d412      	bmi.n	80093de <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093b8:	6822      	ldr	r2, [r4, #0]
 80093ba:	0750      	lsls	r0, r2, #29
 80093bc:	f100 8124 	bmi.w	8009608 <HAL_RCC_ClockConfig+0x298>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093c0:	0713      	lsls	r3, r2, #28
 80093c2:	d507      	bpl.n	80093d4 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80093c4:	4a95      	ldr	r2, [pc, #596]	; (800961c <HAL_RCC_ClockConfig+0x2ac>)
 80093c6:	6921      	ldr	r1, [r4, #16]
 80093c8:	6853      	ldr	r3, [r2, #4]
 80093ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80093ce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80093d2:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 80093d4:	200f      	movs	r0, #15
 80093d6:	f000 f976 	bl	80096c6 <HAL_InitTick>
  return HAL_OK;
 80093da:	2000      	movs	r0, #0
 80093dc:	e7de      	b.n	800939c <HAL_RCC_ClockConfig+0x2c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093de:	6862      	ldr	r2, [r4, #4]
 80093e0:	4d8e      	ldr	r5, [pc, #568]	; (800961c <HAL_RCC_ClockConfig+0x2ac>)
 80093e2:	2a01      	cmp	r2, #1
 80093e4:	d137      	bne.n	8009456 <HAL_RCC_ClockConfig+0xe6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80093ea:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80093ee:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093f2:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80093f6:	f031 0101 	bics.w	r1, r1, #1
 80093fa:	d126      	bne.n	800944a <HAL_RCC_ClockConfig+0xda>
 80093fc:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009402:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009406:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800940a:	2101      	movs	r1, #1
 800940c:	f003 031f 	and.w	r3, r3, #31
 8009410:	fa01 f303 	lsl.w	r3, r1, r3
 8009414:	4203      	tst	r3, r0
 8009416:	d0c0      	beq.n	800939a <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009418:	686b      	ldr	r3, [r5, #4]
 800941a:	f023 0303 	bic.w	r3, r3, #3
 800941e:	431a      	orrs	r2, r3
 8009420:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8009422:	f000 f97f 	bl	8009724 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009426:	6863      	ldr	r3, [r4, #4]
 8009428:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 800942a:	4606      	mov	r6, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800942c:	f241 3788 	movw	r7, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009430:	d13b      	bne.n	80094aa <HAL_RCC_ClockConfig+0x13a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009432:	686b      	ldr	r3, [r5, #4]
 8009434:	f003 030c 	and.w	r3, r3, #12
 8009438:	2b04      	cmp	r3, #4
 800943a:	d0bd      	beq.n	80093b8 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800943c:	f000 f972 	bl	8009724 <HAL_GetTick>
 8009440:	1b80      	subs	r0, r0, r6
 8009442:	42b8      	cmp	r0, r7
 8009444:	d9f5      	bls.n	8009432 <HAL_RCC_ClockConfig+0xc2>
            return HAL_TIMEOUT;
 8009446:	2003      	movs	r0, #3
 8009448:	e7a8      	b.n	800939c <HAL_RCC_ClockConfig+0x2c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800944a:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800944e:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009452:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009454:	e7d3      	b.n	80093fe <HAL_RCC_ClockConfig+0x8e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009456:	2a02      	cmp	r2, #2
 8009458:	d114      	bne.n	8009484 <HAL_RCC_ClockConfig+0x114>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800945a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800945e:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009462:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009466:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800946a:	f031 0101 	bics.w	r1, r1, #1
 800946e:	d103      	bne.n	8009478 <HAL_RCC_ClockConfig+0x108>
 8009470:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009476:	e7c4      	b.n	8009402 <HAL_RCC_ClockConfig+0x92>
 8009478:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800947c:	fab3 f383 	clz	r3, r3
 8009480:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009482:	e7f6      	b.n	8009472 <HAL_RCC_ClockConfig+0x102>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009484:	2302      	movs	r3, #2
 8009486:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800948a:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800948e:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009492:	f031 0101 	bics.w	r1, r1, #1
 8009496:	d102      	bne.n	800949e <HAL_RCC_ClockConfig+0x12e>
 8009498:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800949a:	2302      	movs	r3, #2
 800949c:	e7b1      	b.n	8009402 <HAL_RCC_ClockConfig+0x92>
 800949e:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80094a8:	e7f7      	b.n	800949a <HAL_RCC_ClockConfig+0x12a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d110      	bne.n	80094d0 <HAL_RCC_ClockConfig+0x160>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094ae:	686b      	ldr	r3, [r5, #4]
 80094b0:	f003 030c 	and.w	r3, r3, #12
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	f43f af7f 	beq.w	80093b8 <HAL_RCC_ClockConfig+0x48>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094ba:	f000 f933 	bl	8009724 <HAL_GetTick>
 80094be:	1b80      	subs	r0, r0, r6
 80094c0:	42b8      	cmp	r0, r7
 80094c2:	d9f4      	bls.n	80094ae <HAL_RCC_ClockConfig+0x13e>
 80094c4:	e7bf      	b.n	8009446 <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80094c6:	f000 f92d 	bl	8009724 <HAL_GetTick>
 80094ca:	1b80      	subs	r0, r0, r6
 80094cc:	42b8      	cmp	r0, r7
 80094ce:	d8ba      	bhi.n	8009446 <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80094d0:	686b      	ldr	r3, [r5, #4]
 80094d2:	f013 0f0c 	tst.w	r3, #12
 80094d6:	d1f6      	bne.n	80094c6 <HAL_RCC_ClockConfig+0x156>
 80094d8:	e76e      	b.n	80093b8 <HAL_RCC_ClockConfig+0x48>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094da:	6802      	ldr	r2, [r0, #0]
 80094dc:	0791      	lsls	r1, r2, #30
 80094de:	d506      	bpl.n	80094ee <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094e0:	494e      	ldr	r1, [pc, #312]	; (800961c <HAL_RCC_ClockConfig+0x2ac>)
 80094e2:	6880      	ldr	r0, [r0, #8]
 80094e4:	684b      	ldr	r3, [r1, #4]
 80094e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094ea:	4303      	orrs	r3, r0
 80094ec:	604b      	str	r3, [r1, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094ee:	07d2      	lsls	r2, r2, #31
 80094f0:	d40c      	bmi.n	800950c <HAL_RCC_ClockConfig+0x19c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094f2:	4a49      	ldr	r2, [pc, #292]	; (8009618 <HAL_RCC_ClockConfig+0x2a8>)
 80094f4:	6813      	ldr	r3, [r2, #0]
 80094f6:	f023 0307 	bic.w	r3, r3, #7
 80094fa:	4333      	orrs	r3, r6
 80094fc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80094fe:	6813      	ldr	r3, [r2, #0]
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	42b3      	cmp	r3, r6
 8009506:	f47f af48 	bne.w	800939a <HAL_RCC_ClockConfig+0x2a>
 800950a:	e755      	b.n	80093b8 <HAL_RCC_ClockConfig+0x48>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800950c:	6862      	ldr	r2, [r4, #4]
 800950e:	4d43      	ldr	r5, [pc, #268]	; (800961c <HAL_RCC_ClockConfig+0x2ac>)
 8009510:	2a01      	cmp	r2, #1
 8009512:	d137      	bne.n	8009584 <HAL_RCC_ClockConfig+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009514:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009518:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800951c:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009520:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009524:	f031 0101 	bics.w	r1, r1, #1
 8009528:	d126      	bne.n	8009578 <HAL_RCC_ClockConfig+0x208>
 800952a:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800952c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009530:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009534:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009538:	2101      	movs	r1, #1
 800953a:	f003 031f 	and.w	r3, r3, #31
 800953e:	fa01 f303 	lsl.w	r3, r1, r3
 8009542:	4203      	tst	r3, r0
 8009544:	f43f af29 	beq.w	800939a <HAL_RCC_ClockConfig+0x2a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009548:	686b      	ldr	r3, [r5, #4]
 800954a:	f023 0303 	bic.w	r3, r3, #3
 800954e:	431a      	orrs	r2, r3
 8009550:	606a      	str	r2, [r5, #4]
      tickstart = HAL_GetTick();
 8009552:	f000 f8e7 	bl	8009724 <HAL_GetTick>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009556:	6863      	ldr	r3, [r4, #4]
 8009558:	2b01      	cmp	r3, #1
      tickstart = HAL_GetTick();
 800955a:	4607      	mov	r7, r0
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800955c:	f241 3888 	movw	r8, #5000	; 0x1388
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009560:	d13a      	bne.n	80095d8 <HAL_RCC_ClockConfig+0x268>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009562:	686b      	ldr	r3, [r5, #4]
 8009564:	f003 030c 	and.w	r3, r3, #12
 8009568:	2b04      	cmp	r3, #4
 800956a:	d0c2      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800956c:	f000 f8da 	bl	8009724 <HAL_GetTick>
 8009570:	1bc0      	subs	r0, r0, r7
 8009572:	4540      	cmp	r0, r8
 8009574:	d9f5      	bls.n	8009562 <HAL_RCC_ClockConfig+0x1f2>
 8009576:	e766      	b.n	8009446 <HAL_RCC_ClockConfig+0xd6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009578:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800957c:	fab3 f383 	clz	r3, r3
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009580:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009582:	e7d3      	b.n	800952c <HAL_RCC_ClockConfig+0x1bc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009584:	2a02      	cmp	r2, #2
 8009586:	d114      	bne.n	80095b2 <HAL_RCC_ClockConfig+0x242>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009588:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800958c:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009590:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009594:	f3c1 1142 	ubfx	r1, r1, #5, #3
 8009598:	f031 0101 	bics.w	r1, r1, #1
 800959c:	d103      	bne.n	80095a6 <HAL_RCC_ClockConfig+0x236>
 800959e:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80095a4:	e7c4      	b.n	8009530 <HAL_RCC_ClockConfig+0x1c0>
 80095a6:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095aa:	fab3 f383 	clz	r3, r3
 80095ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80095b0:	e7f6      	b.n	80095a0 <HAL_RCC_ClockConfig+0x230>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b2:	2302      	movs	r3, #2
 80095b4:	fa93 f1a3 	rbit	r1, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095b8:	fab1 f181 	clz	r1, r1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095bc:	f3c1 1142 	ubfx	r1, r1, #5, #3
 80095c0:	f031 0101 	bics.w	r1, r1, #1
 80095c4:	d102      	bne.n	80095cc <HAL_RCC_ClockConfig+0x25c>
 80095c6:	6828      	ldr	r0, [r5, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095c8:	2302      	movs	r3, #2
 80095ca:	e7b1      	b.n	8009530 <HAL_RCC_ClockConfig+0x1c0>
 80095cc:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80095d0:	fab3 f383 	clz	r3, r3
 80095d4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80095d6:	e7f7      	b.n	80095c8 <HAL_RCC_ClockConfig+0x258>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d110      	bne.n	80095fe <HAL_RCC_ClockConfig+0x28e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80095dc:	686b      	ldr	r3, [r5, #4]
 80095de:	f003 030c 	and.w	r3, r3, #12
 80095e2:	2b08      	cmp	r3, #8
 80095e4:	d085      	beq.n	80094f2 <HAL_RCC_ClockConfig+0x182>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e6:	f000 f89d 	bl	8009724 <HAL_GetTick>
 80095ea:	1bc0      	subs	r0, r0, r7
 80095ec:	4540      	cmp	r0, r8
 80095ee:	d9f5      	bls.n	80095dc <HAL_RCC_ClockConfig+0x26c>
 80095f0:	e729      	b.n	8009446 <HAL_RCC_ClockConfig+0xd6>
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f2:	f000 f897 	bl	8009724 <HAL_GetTick>
 80095f6:	1bc0      	subs	r0, r0, r7
 80095f8:	4540      	cmp	r0, r8
 80095fa:	f63f af24 	bhi.w	8009446 <HAL_RCC_ClockConfig+0xd6>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80095fe:	686b      	ldr	r3, [r5, #4]
 8009600:	f013 0f0c 	tst.w	r3, #12
 8009604:	d1f5      	bne.n	80095f2 <HAL_RCC_ClockConfig+0x282>
 8009606:	e774      	b.n	80094f2 <HAL_RCC_ClockConfig+0x182>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009608:	4904      	ldr	r1, [pc, #16]	; (800961c <HAL_RCC_ClockConfig+0x2ac>)
 800960a:	68e0      	ldr	r0, [r4, #12]
 800960c:	684b      	ldr	r3, [r1, #4]
 800960e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009612:	4303      	orrs	r3, r0
 8009614:	604b      	str	r3, [r1, #4]
 8009616:	e6d3      	b.n	80093c0 <HAL_RCC_ClockConfig+0x50>
 8009618:	40022000 	.word	0x40022000
 800961c:	40021000 	.word	0x40021000

08009620 <HAL_RCC_GetSysClockFreq>:
  *
  * @param  None
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009620:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 8009622:	4c15      	ldr	r4, [pc, #84]	; (8009678 <HAL_RCC_GetSysClockFreq+0x58>)
 8009624:	6861      	ldr	r1, [r4, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009626:	f001 030c 	and.w	r3, r1, #12
 800962a:	2b08      	cmp	r3, #8
 800962c:	d121      	bne.n	8009672 <HAL_RCC_GetSysClockFreq+0x52>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800962e:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8009632:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009636:	fab3 f383 	clz	r3, r3
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800963a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800963e:	b2db      	uxtb	r3, r3
 8009640:	fa22 f303 	lsr.w	r3, r2, r3
 8009644:	4a0d      	ldr	r2, [pc, #52]	; (800967c <HAL_RCC_GetSysClockFreq+0x5c>)
 8009646:	5cd0      	ldrb	r0, [r2, r3]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009648:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800964a:	230f      	movs	r3, #15
 800964c:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8009650:	fab3 f383 	clz	r3, r3
 8009654:	f002 020f 	and.w	r2, r2, #15
 8009658:	b2db      	uxtb	r3, r3
 800965a:	fa22 f303 	lsr.w	r3, r2, r3
 800965e:	4a08      	ldr	r2, [pc, #32]	; (8009680 <HAL_RCC_GetSysClockFreq+0x60>)
 8009660:	5cd2      	ldrb	r2, [r2, r3]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8009662:	03cb      	lsls	r3, r1, #15
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8009664:	bf4a      	itet	mi
 8009666:	4b07      	ldrmi	r3, [pc, #28]	; (8009684 <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8009668:	4b07      	ldrpl	r3, [pc, #28]	; (8009688 <HAL_RCC_GetSysClockFreq+0x68>)
      pllclk = (HSE_VALUE/prediv) * pllmul;
 800966a:	fbb3 f3f2 	udivmi	r3, r3, r2
      pllclk = (HSI_VALUE >> 1) * pllmul;
 800966e:	4358      	muls	r0, r3
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8009670:	bd10      	pop	{r4, pc}
    sysclockfreq = HSE_VALUE;
 8009672:	4804      	ldr	r0, [pc, #16]	; (8009684 <HAL_RCC_GetSysClockFreq+0x64>)
  return sysclockfreq;
 8009674:	e7fc      	b.n	8009670 <HAL_RCC_GetSysClockFreq+0x50>
 8009676:	bf00      	nop
 8009678:	40021000 	.word	0x40021000
 800967c:	0801c9d8 	.word	0x0801c9d8
 8009680:	0801c9e8 	.word	0x0801c9e8
 8009684:	007a1200 	.word	0x007a1200
 8009688:	003d0900 	.word	0x003d0900

0800968c <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800968c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800968e:	f7ff ffc7 	bl	8009620 <HAL_RCC_GetSysClockFreq>
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009694:	685a      	ldr	r2, [r3, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009696:	23f0      	movs	r3, #240	; 0xf0
 8009698:	fa93 f3a3 	rbit	r3, r3
  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800969c:	fab3 f383 	clz	r3, r3
 80096a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	fa22 f303 	lsr.w	r3, r2, r3
 80096aa:	4a04      	ldr	r2, [pc, #16]	; (80096bc <HAL_RCC_GetHCLKFreq+0x30>)
 80096ac:	5cd3      	ldrb	r3, [r2, r3]
 80096ae:	40d8      	lsrs	r0, r3
 80096b0:	4b03      	ldr	r3, [pc, #12]	; (80096c0 <HAL_RCC_GetHCLKFreq+0x34>)
 80096b2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80096b4:	bd08      	pop	{r3, pc}
 80096b6:	bf00      	nop
 80096b8:	40021000 	.word	0x40021000
 80096bc:	0801c9c8 	.word	0x0801c9c8
 80096c0:	20000a34 	.word	0x20000a34

080096c4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80096c4:	4770      	bx	lr

080096c6 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 80096c6:	b507      	push	{r0, r1, r2, lr}
 80096c8:	9001      	str	r0, [sp, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80096ca:	f7ff ffdf 	bl	800968c <HAL_RCC_GetHCLKFreq>
 80096ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80096d6:	f000 f88b 	bl	80097f0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80096da:	9901      	ldr	r1, [sp, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096e2:	f000 f845 	bl	8009770 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80096e6:	2000      	movs	r0, #0
 80096e8:	b003      	add	sp, #12
 80096ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080096f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80096f0:	4a07      	ldr	r2, [pc, #28]	; (8009710 <HAL_Init+0x20>)
{
 80096f2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	f043 0310 	orr.w	r3, r3, #16
 80096fa:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096fc:	2003      	movs	r0, #3
 80096fe:	f000 f825 	bl	800974c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8009702:	200f      	movs	r0, #15
 8009704:	f7ff ffdf 	bl	80096c6 <HAL_InitTick>
  HAL_MspInit();
 8009708:	f7ff ffdc 	bl	80096c4 <HAL_MspInit>
}
 800970c:	2000      	movs	r0, #0
 800970e:	bd08      	pop	{r3, pc}
 8009710:	40022000 	.word	0x40022000

08009714 <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8009714:	4a02      	ldr	r2, [pc, #8]	; (8009720 <HAL_IncTick+0xc>)
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	3301      	adds	r3, #1
 800971a:	6013      	str	r3, [r2, #0]
}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	20000e40 	.word	0x20000e40

08009724 <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8009724:	4b01      	ldr	r3, [pc, #4]	; (800972c <HAL_GetTick+0x8>)
 8009726:	6818      	ldr	r0, [r3, #0]
}
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20000e40 	.word	0x20000e40

08009730 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8009730:	b513      	push	{r0, r1, r4, lr}
 8009732:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8009734:	f7ff fff6 	bl	8009724 <HAL_GetTick>
 8009738:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800973a:	f7ff fff3 	bl	8009724 <HAL_GetTick>
 800973e:	9a01      	ldr	r2, [sp, #4]
 8009740:	1b03      	subs	r3, r0, r4
 8009742:	4293      	cmp	r3, r2
 8009744:	d3f9      	bcc.n	800973a <HAL_Delay+0xa>
  {
  }
}
 8009746:	b002      	add	sp, #8
 8009748:	bd10      	pop	{r4, pc}
	...

0800974c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800974c:	4907      	ldr	r1, [pc, #28]	; (800976c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800974e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009750:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8009754:	0203      	lsls	r3, r0, #8
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8009756:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8009758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800975c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800975e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8009760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8009768:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800976a:	4770      	bx	lr
 800976c:	e000ed00 	.word	0xe000ed00

08009770 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8009770:	4b17      	ldr	r3, [pc, #92]	; (80097d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009772:	b570      	push	{r4, r5, r6, lr}
 8009774:	68dd      	ldr	r5, [r3, #12]
 8009776:	f3c5 2502 	ubfx	r5, r5, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 800977a:	f1c5 0307 	rsb	r3, r5, #7
 800977e:	2b04      	cmp	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009780:	f105 0404 	add.w	r4, r5, #4
  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8009784:	bf28      	it	cs
 8009786:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8009788:	2601      	movs	r6, #1
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800978a:	2c06      	cmp	r4, #6
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800978c:	fa06 f403 	lsl.w	r4, r6, r3
 8009790:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8009794:	bf8c      	ite	hi
 8009796:	3d03      	subhi	r5, #3
 8009798:	2500      	movls	r5, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800979a:	4021      	ands	r1, r4
 800979c:	40a9      	lsls	r1, r5
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800979e:	fa06 f505 	lsl.w	r5, r6, r5
 80097a2:	3d01      	subs	r5, #1
 80097a4:	402a      	ands	r2, r5
  if(IRQn < 0) {
 80097a6:	2800      	cmp	r0, #0
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80097a8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80097ac:	bfac      	ite	ge
 80097ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80097b2:	4a08      	ldrlt	r2, [pc, #32]	; (80097d4 <HAL_NVIC_SetPriority+0x64>)
 80097b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80097b8:	bfb8      	it	lt
 80097ba:	f000 000f 	andlt.w	r0, r0, #15
 80097be:	b2db      	uxtb	r3, r3
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80097c0:	bfaa      	itet	ge
 80097c2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80097c6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80097c8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80097cc:	bd70      	pop	{r4, r5, r6, pc}
 80097ce:	bf00      	nop
 80097d0:	e000ed00 	.word	0xe000ed00
 80097d4:	e000ed14 	.word	0xe000ed14

080097d8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80097d8:	0942      	lsrs	r2, r0, #5
 80097da:	2301      	movs	r3, #1
 80097dc:	f000 001f 	and.w	r0, r0, #31
 80097e0:	fa03 f000 	lsl.w	r0, r3, r0
 80097e4:	4b01      	ldr	r3, [pc, #4]	; (80097ec <HAL_NVIC_EnableIRQ+0x14>)
 80097e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80097ea:	4770      	bx	lr
 80097ec:	e000e100 	.word	0xe000e100

080097f0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80097f0:	3801      	subs	r0, #1
 80097f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80097f6:	d20a      	bcs.n	800980e <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80097f8:	4b06      	ldr	r3, [pc, #24]	; (8009814 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80097fa:	4a07      	ldr	r2, [pc, #28]	; (8009818 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80097fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80097fe:	21f0      	movs	r1, #240	; 0xf0
 8009800:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009804:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009806:	2207      	movs	r2, #7
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8009808:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800980a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800980c:	4770      	bx	lr
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 800980e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	e000e010 	.word	0xe000e010
 8009818:	e000ed00 	.word	0xe000ed00

0800981c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009820:	4a5d      	ldr	r2, [pc, #372]	; (8009998 <HAL_GPIO_Init+0x17c>)
        __SYSCFG_CLK_ENABLE();
 8009822:	f8df 817c 	ldr.w	r8, [pc, #380]	; 80099a0 <HAL_GPIO_Init+0x184>
  for (position = 0; position < GPIO_NUMBER; position++)
 8009826:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01) << position;
 8009828:	f04f 0901 	mov.w	r9, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800982c:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800982e:	fa09 fa03 	lsl.w	sl, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009832:	ea0a 0504 	and.w	r5, sl, r4
    if (iocurrent == ioposition)
 8009836:	ea3a 0404 	bics.w	r4, sl, r4
 800983a:	f040 809c 	bne.w	8009976 <HAL_GPIO_Init+0x15a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800983e:	684c      	ldr	r4, [r1, #4]
 8009840:	f024 0e10 	bic.w	lr, r4, #16
 8009844:	f1be 0f02 	cmp.w	lr, #2
 8009848:	d114      	bne.n	8009874 <HAL_GPIO_Init+0x58>
        temp = GPIOx->AFR[position >> 3];
 800984a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800984e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009852:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8009856:	f8dc 6020 	ldr.w	r6, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800985a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800985e:	270f      	movs	r7, #15
 8009860:	fa07 f70b 	lsl.w	r7, r7, fp
 8009864:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009868:	690e      	ldr	r6, [r1, #16]
 800986a:	fa06 f60b 	lsl.w	r6, r6, fp
 800986e:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8009870:	f8cc 6020 	str.w	r6, [ip, #32]
      temp = GPIOx->MODER;
 8009874:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009878:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800987c:	2703      	movs	r7, #3
 800987e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009882:	ea2b 0b07 	bic.w	fp, fp, r7
 8009886:	43fe      	mvns	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009888:	f004 0703 	and.w	r7, r4, #3
 800988c:	fa07 f70c 	lsl.w	r7, r7, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009890:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009894:	ea47 070b 	orr.w	r7, r7, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009898:	f1be 0f01 	cmp.w	lr, #1
      GPIOx->MODER = temp;
 800989c:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800989e:	d811      	bhi.n	80098c4 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->OSPEEDR; 
 80098a0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80098a2:	ea06 0e07 	and.w	lr, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80098a6:	68cf      	ldr	r7, [r1, #12]
 80098a8:	fa07 f70c 	lsl.w	r7, r7, ip
 80098ac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80098b0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80098b2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098b4:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80098b8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80098bc:	409f      	lsls	r7, r3
 80098be:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 80098c2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80098c4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80098c6:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80098c8:	688e      	ldr	r6, [r1, #8]
 80098ca:	fa06 f60c 	lsl.w	r6, r6, ip
 80098ce:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80098d0:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80098d2:	00e6      	lsls	r6, r4, #3
 80098d4:	d54f      	bpl.n	8009976 <HAL_GPIO_Init+0x15a>
        __SYSCFG_CLK_ENABLE();
 80098d6:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80098da:	f023 0703 	bic.w	r7, r3, #3
 80098de:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80098e2:	f046 0601 	orr.w	r6, r6, #1
 80098e6:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80098ea:	f8c8 6018 	str.w	r6, [r8, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098ee:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2];
 80098f2:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80098f4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80098f8:	f04f 0c0f 	mov.w	ip, #15
 80098fc:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009900:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009904:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009908:	d03b      	beq.n	8009982 <HAL_GPIO_Init+0x166>
 800990a:	4e24      	ldr	r6, [pc, #144]	; (800999c <HAL_GPIO_Init+0x180>)
 800990c:	42b0      	cmp	r0, r6
 800990e:	d03a      	beq.n	8009986 <HAL_GPIO_Init+0x16a>
 8009910:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009914:	42b0      	cmp	r0, r6
 8009916:	d038      	beq.n	800998a <HAL_GPIO_Init+0x16e>
 8009918:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800991c:	42b0      	cmp	r0, r6
 800991e:	d036      	beq.n	800998e <HAL_GPIO_Init+0x172>
 8009920:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009924:	42b0      	cmp	r0, r6
 8009926:	d034      	beq.n	8009992 <HAL_GPIO_Init+0x176>
 8009928:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800992c:	42b0      	cmp	r0, r6
 800992e:	bf0c      	ite	eq
 8009930:	2605      	moveq	r6, #5
 8009932:	2606      	movne	r6, #6
 8009934:	fa06 f60e 	lsl.w	r6, r6, lr
 8009938:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800993c:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800993e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8009940:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009942:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8009946:	bf0c      	ite	eq
 8009948:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800994a:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 800994c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800994e:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009950:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8009954:	bf0c      	ite	eq
 8009956:	403e      	andeq	r6, r7
        { 
          temp |= iocurrent;
 8009958:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 800995a:	6056      	str	r6, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800995c:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800995e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8009962:	bf0c      	ite	eq
 8009964:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8009966:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8009968:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800996a:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800996c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800996e:	bf54      	ite	pl
 8009970:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8009972:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8009974:	60d6      	str	r6, [r2, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 8009976:	3301      	adds	r3, #1
 8009978:	2b10      	cmp	r3, #16
 800997a:	f47f af57 	bne.w	800982c <HAL_GPIO_Init+0x10>
      }
    }
  } 
}
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 8009982:	2600      	movs	r6, #0
 8009984:	e7d6      	b.n	8009934 <HAL_GPIO_Init+0x118>
 8009986:	2601      	movs	r6, #1
 8009988:	e7d4      	b.n	8009934 <HAL_GPIO_Init+0x118>
 800998a:	2602      	movs	r6, #2
 800998c:	e7d2      	b.n	8009934 <HAL_GPIO_Init+0x118>
 800998e:	2603      	movs	r6, #3
 8009990:	e7d0      	b.n	8009934 <HAL_GPIO_Init+0x118>
 8009992:	2604      	movs	r6, #4
 8009994:	e7ce      	b.n	8009934 <HAL_GPIO_Init+0x118>
 8009996:	bf00      	nop
 8009998:	40010400 	.word	0x40010400
 800999c:	48000400 	.word	0x48000400
 80099a0:	40021000 	.word	0x40021000

080099a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099a4:	6903      	ldr	r3, [r0, #16]
 80099a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 80099a8:	bf14      	ite	ne
 80099aa:	2001      	movne	r0, #1
 80099ac:	2000      	moveq	r0, #0
 80099ae:	4770      	bx	lr

080099b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099b0:	b10a      	cbz	r2, 80099b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80099b2:	8301      	strh	r1, [r0, #24]
 80099b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80099b6:	8341      	strh	r1, [r0, #26]
  }
}
 80099b8:	4770      	bx	lr

080099ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80099ba:	6943      	ldr	r3, [r0, #20]
 80099bc:	4059      	eors	r1, r3
 80099be:	6141      	str	r1, [r0, #20]
}
 80099c0:	4770      	bx	lr

080099c2 <HAL_GPIO_EXTI_Callback>:
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 80099c2:	4770      	bx	lr

080099c4 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80099c4:	4a04      	ldr	r2, [pc, #16]	; (80099d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80099c6:	6951      	ldr	r1, [r2, #20]
 80099c8:	4201      	tst	r1, r0
{
 80099ca:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80099cc:	d002      	beq.n	80099d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099ce:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099d0:	f7ff fff7 	bl	80099c2 <HAL_GPIO_EXTI_Callback>
}
 80099d4:	bd08      	pop	{r3, pc}
 80099d6:	bf00      	nop
 80099d8:	40010400 	.word	0x40010400

080099dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80099dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80099de:	4604      	mov	r4, r0
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d042      	beq.n	8009a6a <HAL_PCD_Init+0x8e>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 80099e4:	2302      	movs	r3, #2
 80099e6:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80099ea:	f002 f8ef 	bl	800bbcc <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80099ee:	2100      	movs	r1, #0
 80099f0:	6860      	ldr	r0, [r4, #4]
 80099f2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80099f6:	460a      	mov	r2, r1
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80099f8:	2501      	movs	r5, #1
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80099fa:	4288      	cmp	r0, r1
 80099fc:	f103 031c 	add.w	r3, r3, #28
 8009a00:	d11b      	bne.n	8009a3a <HAL_PCD_Init+0x5e>
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009a02:	2000      	movs	r0, #0
 8009a04:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8009a08:	4603      	mov	r3, r0
 8009a0a:	4281      	cmp	r1, r0
 8009a0c:	f102 021c 	add.w	r2, r2, #28
 8009a10:	d11f      	bne.n	8009a52 <HAL_PCD_Init+0x76>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 8009a12:	6822      	ldr	r2, [r4, #0]
 8009a14:	2101      	movs	r1, #1
 8009a16:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009a1a:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 hpcd->Instance->CNTR = 0;
 8009a1e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
 8009a22:	2000      	movs	r0, #0
 hpcd->Instance->ISTR = 0;
 8009a24:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8009a28:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8009a2c:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  hpcd->USB_Address = 0;
 8009a30:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;
 8009a34:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
}
 8009a38:	bd38      	pop	{r3, r4, r5, pc}
   hpcd->IN_ep[i].num = i;
 8009a3a:	f803 1c1c 	strb.w	r1, [r3, #-28]
   hpcd->IN_ep[i].xfer_buff = 0;
 8009a3e:	e943 2204 	strd	r2, r2, [r3, #-16]
   hpcd->IN_ep[i].is_in = 1;
 8009a42:	f803 5c1b 	strb.w	r5, [r3, #-27]
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 8009a46:	f803 2c19 	strb.w	r2, [r3, #-25]
   hpcd->IN_ep[i].xfer_len = 0;
 8009a4a:	f843 2c08 	str.w	r2, [r3, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009a4e:	3101      	adds	r1, #1
 8009a50:	e7d3      	b.n	80099fa <HAL_PCD_Init+0x1e>
   hpcd->OUT_ep[i].num = i;
 8009a52:	f802 0c1c 	strb.w	r0, [r2, #-28]
   hpcd->OUT_ep[i].xfer_buff = 0;
 8009a56:	e942 3304 	strd	r3, r3, [r2, #-16]
   hpcd->OUT_ep[i].is_in = 0;
 8009a5a:	f802 3c1b 	strb.w	r3, [r2, #-27]
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 8009a5e:	f802 3c19 	strb.w	r3, [r2, #-25]
   hpcd->OUT_ep[i].xfer_len = 0;
 8009a62:	f842 3c08 	str.w	r3, [r2, #-8]
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 8009a66:	3001      	adds	r0, #1
 8009a68:	e7cf      	b.n	8009a0a <HAL_PCD_Init+0x2e>
    return HAL_ERROR;
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	e7e4      	b.n	8009a38 <HAL_PCD_Init+0x5c>

08009a6e <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8009a6e:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8009a70:	2101      	movs	r1, #1
 8009a72:	f000 ff04 	bl	800a87e <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8009a76:	2000      	movs	r0, #0
 8009a78:	bd08      	pop	{r3, pc}

08009a7a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8009a7a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d00f      	beq.n	8009aa2 <HAL_PCD_SetAddress+0x28>
 8009a82:	2301      	movs	r3, #1
 8009a84:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8009a88:	b941      	cbnz	r1, 8009a9c <HAL_PCD_SetAddress+0x22>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8009a8a:	6803      	ldr	r3, [r0, #0]
 8009a8c:	2280      	movs	r2, #128	; 0x80
 8009a8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
 8009a92:	2300      	movs	r3, #0
 8009a94:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8009a98:	4618      	mov	r0, r3
 8009a9a:	4770      	bx	lr
     hpcd->USB_Address = address;
 8009a9c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8009aa0:	e7f7      	b.n	8009a92 <HAL_PCD_SetAddress+0x18>
   __HAL_LOCK(hpcd); 
 8009aa2:	2002      	movs	r0, #2
}
 8009aa4:	4770      	bx	lr
	...

08009aa8 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009aaa:	b24c      	sxtb	r4, r1
 8009aac:	2c00      	cmp	r4, #0
 8009aae:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8009ab2:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009ab6:	bfb5      	itete	lt
 8009ab8:	fb05 0106 	mlalt	r1, r5, r6, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009abc:	fb05 0101 	mlage	r1, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009ac0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009ac2:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009ac4:	0fe4      	lsrs	r4, r4, #31
  ep->num   = ep_addr & 0x7F;
 8009ac6:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009ac8:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 8009aca:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
 8009acc:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8009ace:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	f000 8171 	beq.w	8009dba <HAL_PCD_EP_Open+0x312>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 8009ade:	78cc      	ldrb	r4, [r1, #3]
 8009ae0:	6803      	ldr	r3, [r0, #0]
 8009ae2:	780a      	ldrb	r2, [r1, #0]
 8009ae4:	2c03      	cmp	r4, #3
 8009ae6:	d810      	bhi.n	8009b0a <HAL_PCD_EP_Open+0x62>
 8009ae8:	e8df f004 	tbb	[pc, r4]
 8009aec:	5d536902 	.word	0x5d536902
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 8009af0:	b212      	sxth	r2, r2
 8009af2:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009af6:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009afa:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009afe:	0424      	lsls	r4, r4, #16
 8009b00:	0c24      	lsrs	r4, r4, #16
 8009b02:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8009b06:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 8009b0a:	780e      	ldrb	r6, [r1, #0]
 8009b0c:	f833 4026 	ldrh.w	r4, [r3, r6, lsl #2]
 8009b10:	f640 720f 	movw	r2, #3855	; 0xf0f
 8009b14:	4014      	ands	r4, r2
 8009b16:	4334      	orrs	r4, r6
 8009b18:	f248 0780 	movw	r7, #32896	; 0x8080
 8009b1c:	433c      	orrs	r4, r7
 8009b1e:	f823 4026 	strh.w	r4, [r3, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8009b22:	7a8d      	ldrb	r5, [r1, #10]
 8009b24:	780c      	ldrb	r4, [r1, #0]
 8009b26:	f503 6680 	add.w	r6, r3, #1024	; 0x400
 8009b2a:	2d00      	cmp	r5, #0
 8009b2c:	f040 8097 	bne.w	8009c5e <HAL_PCD_EP_Open+0x1b6>
  {
    if (ep->is_in)
 8009b30:	888d      	ldrh	r5, [r1, #4]
 8009b32:	784f      	ldrb	r7, [r1, #1]
 8009b34:	086d      	lsrs	r5, r5, #1
 8009b36:	006d      	lsls	r5, r5, #1
 8009b38:	00e4      	lsls	r4, r4, #3
 8009b3a:	2f00      	cmp	r7, #0
 8009b3c:	d04b      	beq.n	8009bd6 <HAL_PCD_EP_Open+0x12e>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009b3e:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8009b42:	fa14 f487 	uxtah	r4, r4, r7
 8009b46:	f846 5014 	str.w	r5, [r6, r4, lsl #1]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009b4a:	780d      	ldrb	r5, [r1, #0]
 8009b4c:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8009b50:	0664      	lsls	r4, r4, #25
 8009b52:	d508      	bpl.n	8009b66 <HAL_PCD_EP_Open+0xbe>
 8009b54:	f833 4025 	ldrh.w	r4, [r3, r5, lsl #2]
 8009b58:	4022      	ands	r2, r4
 8009b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b5e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009b62:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8009b66:	7809      	ldrb	r1, [r1, #0]
 8009b68:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009b6c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b74:	0412      	lsls	r2, r2, #16
 8009b76:	0c12      	lsrs	r2, r2, #16
 8009b78:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009b7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009b84:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 8009b8e:	4618      	mov	r0, r3
}
 8009b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 8009b92:	b212      	sxth	r2, r2
 8009b94:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009b98:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009b9c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009ba0:	0424      	lsls	r4, r4, #16
 8009ba2:	0c24      	lsrs	r4, r4, #16
 8009ba4:	e7af      	b.n	8009b06 <HAL_PCD_EP_Open+0x5e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 8009ba6:	b212      	sxth	r2, r2
 8009ba8:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009bac:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009bb0:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009bb4:	0424      	lsls	r4, r4, #16
 8009bb6:	0c24      	lsrs	r4, r4, #16
 8009bb8:	f444 64c0 	orr.w	r4, r4, #1536	; 0x600
 8009bbc:	e7a3      	b.n	8009b06 <HAL_PCD_EP_Open+0x5e>
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8009bbe:	b212      	sxth	r2, r2
 8009bc0:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009bc4:	f424 44ec 	bic.w	r4, r4, #30208	; 0x7600
 8009bc8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8009bcc:	0424      	lsls	r4, r4, #16
 8009bce:	0c24      	lsrs	r4, r4, #16
 8009bd0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8009bd4:	e797      	b.n	8009b06 <HAL_PCD_EP_Open+0x5e>
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8009bd6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8009bda:	fa14 f482 	uxtah	r4, r4, r2
 8009bde:	3404      	adds	r4, #4
 8009be0:	f846 5014 	str.w	r5, [r6, r4, lsl #1]
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009be4:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 8009be8:	780a      	ldrb	r2, [r1, #0]
 8009bea:	68cd      	ldr	r5, [r1, #12]
 8009bec:	b2a4      	uxth	r4, r4
 8009bee:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8009bf2:	2d3e      	cmp	r5, #62	; 0x3e
 8009bf4:	f104 0406 	add.w	r4, r4, #6
 8009bf8:	d929      	bls.n	8009c4e <HAL_PCD_EP_Open+0x1a6>
 8009bfa:	f3c5 174f 	ubfx	r7, r5, #5, #16
 8009bfe:	06ea      	lsls	r2, r5, #27
 8009c00:	bf04      	itt	eq
 8009c02:	f107 32ff 	addeq.w	r2, r7, #4294967295	; 0xffffffff
 8009c06:	b297      	uxtheq	r7, r2
 8009c08:	4a6d      	ldr	r2, [pc, #436]	; (8009dc0 <HAL_PCD_EP_Open+0x318>)
 8009c0a:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	f846 2014 	str.w	r2, [r6, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009c14:	780c      	ldrb	r4, [r1, #0]
 8009c16:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009c1a:	0452      	lsls	r2, r2, #17
 8009c1c:	d50b      	bpl.n	8009c36 <HAL_PCD_EP_Open+0x18e>
 8009c1e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009c22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009c26:	0512      	lsls	r2, r2, #20
 8009c28:	0d12      	lsrs	r2, r2, #20
 8009c2a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009c32:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009c36:	7809      	ldrb	r1, [r1, #0]
 8009c38:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009c44:	0412      	lsls	r2, r2, #16
 8009c46:	0c12      	lsrs	r2, r2, #16
 8009c48:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009c4c:	e796      	b.n	8009b7c <HAL_PCD_EP_Open+0xd4>
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 8009c4e:	f3c5 024f 	ubfx	r2, r5, #1, #16
 8009c52:	07ed      	lsls	r5, r5, #31
 8009c54:	bf44      	itt	mi
 8009c56:	3201      	addmi	r2, #1
 8009c58:	b292      	uxthmi	r2, r2
 8009c5a:	0292      	lsls	r2, r2, #10
 8009c5c:	e7d7      	b.n	8009c0e <HAL_PCD_EP_Open+0x166>
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 8009c5e:	b224      	sxth	r4, r4
 8009c60:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8009c64:	b2ad      	uxth	r5, r5
 8009c66:	f445 7580 	orr.w	r5, r5, #256	; 0x100
 8009c6a:	4015      	ands	r5, r2
 8009c6c:	433d      	orrs	r5, r7
 8009c6e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8009c72:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 8009c76:	b2bd      	uxth	r5, r7
 8009c78:	780f      	ldrb	r7, [r1, #0]
 8009c7a:	2408      	movs	r4, #8
 8009c7c:	fb14 5707 	smlabb	r7, r4, r7, r5
 8009c80:	88cd      	ldrh	r5, [r1, #6]
 8009c82:	086d      	lsrs	r5, r5, #1
 8009c84:	006d      	lsls	r5, r5, #1
 8009c86:	f846 5017 	str.w	r5, [r6, r7, lsl #1]
 8009c8a:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8009c8e:	780f      	ldrb	r7, [r1, #0]
 8009c90:	b2ad      	uxth	r5, r5
 8009c92:	fb14 5407 	smlabb	r4, r4, r7, r5
 8009c96:	890d      	ldrh	r5, [r1, #8]
 8009c98:	3404      	adds	r4, #4
 8009c9a:	086d      	lsrs	r5, r5, #1
 8009c9c:	006d      	lsls	r5, r5, #1
 8009c9e:	f846 5014 	str.w	r5, [r6, r4, lsl #1]
    if (ep->is_in==0)
 8009ca2:	780c      	ldrb	r4, [r1, #0]
 8009ca4:	784d      	ldrb	r5, [r1, #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009ca6:	b224      	sxth	r4, r4
    if (ep->is_in==0)
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	d145      	bne.n	8009d38 <HAL_PCD_EP_Open+0x290>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009cac:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8009cb0:	046f      	lsls	r7, r5, #17
 8009cb2:	d508      	bpl.n	8009cc6 <HAL_PCD_EP_Open+0x21e>
 8009cb4:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8009cb8:	402a      	ands	r2, r5
 8009cba:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cc2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009cc6:	780c      	ldrb	r4, [r1, #0]
 8009cc8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009ccc:	0656      	lsls	r6, r2, #25
 8009cce:	d50b      	bpl.n	8009ce8 <HAL_PCD_EP_Open+0x240>
 8009cd0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009cd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009cd8:	0512      	lsls	r2, r2, #20
 8009cda:	0d12      	lsrs	r2, r2, #20
 8009cdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ce0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009ce4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009ce8:	780c      	ldrb	r4, [r1, #0]
 8009cea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009cee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009cf2:	0512      	lsls	r2, r2, #20
 8009cf4:	0d12      	lsrs	r2, r2, #20
 8009cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cfa:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009cfe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8009d02:	780d      	ldrb	r5, [r1, #0]
 8009d04:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8009d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009d10:	0412      	lsls	r2, r2, #16
 8009d12:	0c12      	lsrs	r2, r2, #16
 8009d14:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8009d18:	f248 0480 	movw	r4, #32896	; 0x8080
 8009d1c:	4322      	orrs	r2, r4
 8009d1e:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009d22:	7809      	ldrb	r1, [r1, #0]
 8009d24:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009d28:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009d30:	0412      	lsls	r2, r2, #16
 8009d32:	0c12      	lsrs	r2, r2, #16
 8009d34:	4322      	orrs	r2, r4
 8009d36:	e725      	b.n	8009b84 <HAL_PCD_EP_Open+0xdc>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009d38:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8009d3c:	046d      	lsls	r5, r5, #17
 8009d3e:	d508      	bpl.n	8009d52 <HAL_PCD_EP_Open+0x2aa>
 8009d40:	f833 5024 	ldrh.w	r5, [r3, r4, lsl #2]
 8009d44:	402a      	ands	r2, r5
 8009d46:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009d4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009d52:	780c      	ldrb	r4, [r1, #0]
 8009d54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009d58:	0652      	lsls	r2, r2, #25
 8009d5a:	d50b      	bpl.n	8009d74 <HAL_PCD_EP_Open+0x2cc>
 8009d5c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009d60:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009d64:	0512      	lsls	r2, r2, #20
 8009d66:	0d12      	lsrs	r2, r2, #20
 8009d68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d6c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009d70:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8009d74:	780c      	ldrb	r4, [r1, #0]
 8009d76:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009d7a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009d7e:	0512      	lsls	r2, r2, #20
 8009d80:	0d12      	lsrs	r2, r2, #20
 8009d82:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009d8a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009d8e:	780d      	ldrb	r5, [r1, #0]
 8009d90:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8009d94:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d9c:	0412      	lsls	r2, r2, #16
 8009d9e:	0c12      	lsrs	r2, r2, #16
 8009da0:	f248 0480 	movw	r4, #32896	; 0x8080
 8009da4:	4322      	orrs	r2, r4
 8009da6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009daa:	7809      	ldrb	r1, [r1, #0]
 8009dac:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009db0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009db4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009db8:	e7ba      	b.n	8009d30 <HAL_PCD_EP_Open+0x288>
  __HAL_LOCK(hpcd); 
 8009dba:	2002      	movs	r0, #2
 8009dbc:	e6e8      	b.n	8009b90 <HAL_PCD_EP_Open+0xe8>
 8009dbe:	bf00      	nop
 8009dc0:	ffff8000 	.word	0xffff8000

08009dc4 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8009dc4:	b24b      	sxtb	r3, r1
 8009dc6:	2b00      	cmp	r3, #0
{  
 8009dc8:	b530      	push	{r4, r5, lr}
 8009dca:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009dce:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8009dd2:	bfb5      	itete	lt
 8009dd4:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009dd8:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8009ddc:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8009dde:	31b4      	addge	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8009de0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8009de2:	700c      	strb	r4, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8009de4:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8009de6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	f000 80d4 	beq.w	8009f98 <HAL_PCD_EP_Close+0x1d4>
 8009df0:	2301      	movs	r3, #1
 8009df2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 8009df6:	780a      	ldrb	r2, [r1, #0]
 8009df8:	7a8d      	ldrb	r5, [r1, #10]
 8009dfa:	6803      	ldr	r3, [r0, #0]
 8009dfc:	784c      	ldrb	r4, [r1, #1]
 8009dfe:	b212      	sxth	r2, r2
 8009e00:	2d00      	cmp	r5, #0
 8009e02:	d13c      	bne.n	8009e7e <HAL_PCD_EP_Close+0xba>
  {
    if (ep->is_in)
 8009e04:	b31c      	cbz	r4, 8009e4e <HAL_PCD_EP_Close+0x8a>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009e06:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009e0a:	0664      	lsls	r4, r4, #25
 8009e0c:	d50b      	bpl.n	8009e26 <HAL_PCD_EP_Close+0x62>
 8009e0e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009e12:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009e16:	0524      	lsls	r4, r4, #20
 8009e18:	0d24      	lsrs	r4, r4, #20
 8009e1a:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8009e1e:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8009e22:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 8009e26:	7809      	ldrb	r1, [r1, #0]
 8009e28:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009e2c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009e34:	0412      	lsls	r2, r2, #16
 8009e36:	0c12      	lsrs	r2, r2, #16
 8009e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
      PCD_RX_DTOG(hpcd->Instance, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009e40:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8009e44:	2300      	movs	r3, #0
 8009e46:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8009e4a:	4618      	mov	r0, r3
}
 8009e4c:	bd30      	pop	{r4, r5, pc}
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009e4e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009e52:	0465      	lsls	r5, r4, #17
 8009e54:	d50b      	bpl.n	8009e6e <HAL_PCD_EP_Close+0xaa>
 8009e56:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009e5a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009e5e:	0524      	lsls	r4, r4, #20
 8009e60:	0d24      	lsrs	r4, r4, #20
 8009e62:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009e66:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009e6a:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009e6e:	7809      	ldrb	r1, [r1, #0]
 8009e70:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009e74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e7c:	e7da      	b.n	8009e34 <HAL_PCD_EP_Close+0x70>
    if (ep->is_in==0)
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	d146      	bne.n	8009f10 <HAL_PCD_EP_Close+0x14c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009e82:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009e86:	0464      	lsls	r4, r4, #17
 8009e88:	d50b      	bpl.n	8009ea2 <HAL_PCD_EP_Close+0xde>
 8009e8a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009e8e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009e92:	0524      	lsls	r4, r4, #20
 8009e94:	0d24      	lsrs	r4, r4, #20
 8009e96:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009e9a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009e9e:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009ea2:	780c      	ldrb	r4, [r1, #0]
 8009ea4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009ea8:	0655      	lsls	r5, r2, #25
 8009eaa:	d50b      	bpl.n	8009ec4 <HAL_PCD_EP_Close+0x100>
 8009eac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009eb0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009eb4:	0512      	lsls	r2, r2, #20
 8009eb6:	0d12      	lsrs	r2, r2, #20
 8009eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ebc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009ec0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8009ec4:	780c      	ldrb	r4, [r1, #0]
 8009ec6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009eca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009ece:	0512      	lsls	r2, r2, #20
 8009ed0:	0d12      	lsrs	r2, r2, #20
 8009ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ed6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009eda:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009ede:	780d      	ldrb	r5, [r1, #0]
 8009ee0:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8009ee4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ee8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009eec:	0412      	lsls	r2, r2, #16
 8009eee:	0c12      	lsrs	r2, r2, #16
 8009ef0:	f248 0480 	movw	r4, #32896	; 0x8080
 8009ef4:	4322      	orrs	r2, r4
 8009ef6:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009efa:	7809      	ldrb	r1, [r1, #0]
 8009efc:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009f00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009f04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009f08:	0412      	lsls	r2, r2, #16
 8009f0a:	0c12      	lsrs	r2, r2, #16
 8009f0c:	4322      	orrs	r2, r4
 8009f0e:	e797      	b.n	8009e40 <HAL_PCD_EP_Close+0x7c>
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8009f10:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009f14:	0464      	lsls	r4, r4, #17
 8009f16:	d50b      	bpl.n	8009f30 <HAL_PCD_EP_Close+0x16c>
 8009f18:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8009f1c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8009f20:	0524      	lsls	r4, r4, #20
 8009f22:	0d24      	lsrs	r4, r4, #20
 8009f24:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 8009f28:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8009f2c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8009f30:	780c      	ldrb	r4, [r1, #0]
 8009f32:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009f36:	0652      	lsls	r2, r2, #25
 8009f38:	d50b      	bpl.n	8009f52 <HAL_PCD_EP_Close+0x18e>
 8009f3a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009f3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009f42:	0512      	lsls	r2, r2, #20
 8009f44:	0d12      	lsrs	r2, r2, #20
 8009f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8009f4e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8009f52:	780c      	ldrb	r4, [r1, #0]
 8009f54:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8009f58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009f5c:	0512      	lsls	r2, r2, #20
 8009f5e:	0d12      	lsrs	r2, r2, #20
 8009f60:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8009f64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009f68:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8009f6c:	780d      	ldrb	r5, [r1, #0]
 8009f6e:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8009f72:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8009f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f7a:	0412      	lsls	r2, r2, #16
 8009f7c:	0c12      	lsrs	r2, r2, #16
 8009f7e:	f248 0480 	movw	r4, #32896	; 0x8080
 8009f82:	4322      	orrs	r2, r4
 8009f84:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8009f88:	7809      	ldrb	r1, [r1, #0]
 8009f8a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8009f8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009f92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009f96:	e7b7      	b.n	8009f08 <HAL_PCD_EP_Close+0x144>
  __HAL_LOCK(hpcd); 
 8009f98:	2002      	movs	r0, #2
 8009f9a:	e757      	b.n	8009e4c <HAL_PCD_EP_Close+0x88>

08009f9c <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8009fa2:	241c      	movs	r4, #28
 8009fa4:	fb04 0401 	mla	r4, r4, r1, r0
  ep->xfer_len = len;
 8009fa8:	e9c4 2331 	strd	r2, r3, [r4, #196]	; 0xc4
  ep->xfer_count = 0;
 8009fac:	2200      	movs	r2, #0
 8009fae:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
  ep->is_in = 0;
 8009fb2:	f884 20b5 	strb.w	r2, [r4, #181]	; 0xb5
  ep->num = ep_addr & 0x7F;
 8009fb6:	f884 10b4 	strb.w	r1, [r4, #180]	; 0xb4
   
  __HAL_LOCK(hpcd); 
 8009fba:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d065      	beq.n	800a08e <HAL_PCD_EP_Receive+0xf2>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8009fc8:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 8009fcc:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8009fd0:	42ab      	cmp	r3, r5
    ep->xfer_len-=len; 
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8009fd2:	bf98      	it	ls
 8009fd4:	4614      	movls	r4, r2
 8009fd6:	f04f 021c 	mov.w	r2, #28
 8009fda:	fb02 0201 	mla	r2, r2, r1, r0
    ep->xfer_len-=len; 
 8009fde:	bf84      	itt	hi
 8009fe0:	1b5c      	subhi	r4, r3, r5
 8009fe2:	462b      	movhi	r3, r5
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8009fe4:	f892 50be 	ldrb.w	r5, [r2, #190]	; 0xbe
 8009fe8:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8
 8009fec:	f892 60b4 	ldrb.w	r6, [r2, #180]	; 0xb4
 8009ff0:	6804      	ldr	r4, [r0, #0]
 8009ff2:	bb8d      	cbnz	r5, 800a058 <HAL_PCD_EP_Receive+0xbc>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009ff4:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 8009ff8:	b2ad      	uxth	r5, r5
 8009ffa:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 8009ffe:	2b3e      	cmp	r3, #62	; 0x3e
 800a000:	f105 0506 	add.w	r5, r5, #6
 800a004:	f504 6680 	add.w	r6, r4, #1024	; 0x400
 800a008:	d936      	bls.n	800a078 <HAL_PCD_EP_Receive+0xdc>
 800a00a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 800a00e:	06db      	lsls	r3, r3, #27
 800a010:	bf04      	itt	eq
 800a012:	f102 33ff 	addeq.w	r3, r2, #4294967295	; 0xffffffff
 800a016:	b29a      	uxtheq	r2, r3
 800a018:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <HAL_PCD_EP_Receive+0xf8>)
 800a01a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800a01e:	b29b      	uxth	r3, r3
 800a020:	f846 3015 	str.w	r3, [r6, r5, lsl #1]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a024:	231c      	movs	r3, #28
 800a026:	fb03 0101 	mla	r1, r3, r1, r0
 800a02a:	f891 20b4 	ldrb.w	r2, [r1, #180]	; 0xb4
 800a02e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800a032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a03a:	041b      	lsls	r3, r3, #16
 800a03c:	0c1b      	lsrs	r3, r3, #16
 800a03e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04a:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 800a04e:	2300      	movs	r3, #0
 800a050:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a054:	4618      	mov	r0, r3
}
 800a056:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a058:	f892 20b5 	ldrb.w	r2, [r2, #181]	; 0xb5
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	d0c9      	beq.n	8009ff4 <HAL_PCD_EP_Receive+0x58>
 800a060:	2a01      	cmp	r2, #1
 800a062:	d1df      	bne.n	800a024 <HAL_PCD_EP_Receive+0x88>
 800a064:	f8b4 5050 	ldrh.w	r5, [r4, #80]	; 0x50
 800a068:	b2ad      	uxth	r5, r5
 800a06a:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
 800a06e:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800a072:	f8c5 340c 	str.w	r3, [r5, #1036]	; 0x40c
 800a076:	e7d5      	b.n	800a024 <HAL_PCD_EP_Receive+0x88>
 800a078:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800a07c:	07db      	lsls	r3, r3, #31
 800a07e:	bf44      	itt	mi
 800a080:	3201      	addmi	r2, #1
 800a082:	b292      	uxthmi	r2, r2
 800a084:	0292      	lsls	r2, r2, #10
 800a086:	b292      	uxth	r2, r2
 800a088:	f846 2015 	str.w	r2, [r6, r5, lsl #1]
 800a08c:	e7ca      	b.n	800a024 <HAL_PCD_EP_Receive+0x88>
  __HAL_LOCK(hpcd); 
 800a08e:	2002      	movs	r0, #2
 800a090:	e7e1      	b.n	800a056 <HAL_PCD_EP_Receive+0xba>
 800a092:	bf00      	nop
 800a094:	ffff8000 	.word	0xffff8000

0800a098 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 800a098:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800a09c:	231c      	movs	r3, #28
 800a09e:	fb03 0001 	mla	r0, r3, r1, r0
}
 800a0a2:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 800a0a6:	4770      	bx	lr

0800a0a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	f001 067f 	and.w	r6, r1, #127	; 0x7f
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800a0ae:	211c      	movs	r1, #28
 800a0b0:	fb01 0106 	mla	r1, r1, r6, r0
  ep->xfer_len = len;
 800a0b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  ep->xfer_count = 0;
  ep->is_in = 1;
 800a0b8:	2201      	movs	r2, #1
  ep->xfer_count = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	640b      	str	r3, [r1, #64]	; 0x40
  ep->is_in = 1;
 800a0be:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800a0c2:	f881 6028 	strb.w	r6, [r1, #40]	; 0x28
{
 800a0c6:	4604      	mov	r4, r0
  
  __HAL_LOCK(hpcd); 
 800a0c8:	f890 0140 	ldrb.w	r0, [r0, #320]	; 0x140
 800a0cc:	4290      	cmp	r0, r2
 800a0ce:	f000 80a0 	beq.w	800a212 <HAL_PCD_EP_Transmit+0x16a>
 800a0d2:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800a0d6:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 800a0d8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800a0da:	6820      	ldr	r0, [r4, #0]
 800a0dc:	271c      	movs	r7, #28
 800a0de:	fb07 4706 	mla	r7, r7, r6, r4
 800a0e2:	4295      	cmp	r5, r2
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 800a0e4:	bf84      	itt	hi
 800a0e6:	1aab      	subhi	r3, r5, r2
 800a0e8:	4615      	movhi	r5, r2
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 800a0ea:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800a0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f0:	b2ab      	uxth	r3, r5
 800a0f2:	bb4a      	cbnz	r2, 800a148 <HAL_PCD_EP_Transmit+0xa0>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 800a0f4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800a0f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a0f8:	f000 fba2 	bl	800a840 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 800a102:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800a106:	b29b      	uxth	r3, r3
 800a108:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a10c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800a110:	f8c3 5404 	str.w	r5, [r3, #1028]	; 0x404
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a114:	211c      	movs	r1, #28
 800a116:	fb01 4606 	mla	r6, r1, r6, r4
 800a11a:	6822      	ldr	r2, [r4, #0]
 800a11c:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a120:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a12c:	041b      	lsls	r3, r3, #16
 800a12e:	0c1b      	lsrs	r3, r3, #16
 800a130:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800a134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 800a13c:	2000      	movs	r0, #0
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a13e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  __HAL_UNLOCK(hpcd);
 800a142:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
}
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a148:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 800a14c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a150:	2900      	cmp	r1, #0
 800a152:	d143      	bne.n	800a1dc <HAL_PCD_EP_Transmit+0x134>
 800a154:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800a158:	b289      	uxth	r1, r1
 800a15a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a15e:	2d3e      	cmp	r5, #62	; 0x3e
 800a160:	f101 0106 	add.w	r1, r1, #6
 800a164:	f500 6780 	add.w	r7, r0, #1024	; 0x400
 800a168:	d930      	bls.n	800a1cc <HAL_PCD_EP_Transmit+0x124>
 800a16a:	f3c5 1c4f 	ubfx	ip, r5, #5, #16
 800a16e:	06ea      	lsls	r2, r5, #27
 800a170:	bf04      	itt	eq
 800a172:	f10c 32ff 	addeq.w	r2, ip, #4294967295	; 0xffffffff
 800a176:	fa1f fc82 	uxtheq.w	ip, r2
 800a17a:	4a27      	ldr	r2, [pc, #156]	; (800a218 <HAL_PCD_EP_Transmit+0x170>)
 800a17c:	ea42 228c 	orr.w	r2, r2, ip, lsl #10
 800a180:	b292      	uxth	r2, r2
 800a182:	f847 2011 	str.w	r2, [r7, r1, lsl #1]
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800a186:	251c      	movs	r5, #28
 800a188:	fb05 4206 	mla	r2, r5, r6, r4
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800a18c:	fb05 4506 	mla	r5, r5, r6, r4
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 800a190:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
 800a194:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 800a198:	0649      	lsls	r1, r1, #25
      pmabuffer = ep->pmaaddr1;
 800a19a:	bf4c      	ite	mi
 800a19c:	8e12      	ldrhmi	r2, [r2, #48]	; 0x30
      pmabuffer = ep->pmaaddr0;
 800a19e:	8dd2      	ldrhpl	r2, [r2, #46]	; 0x2e
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 800a1a0:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800a1a2:	f000 fb4d 	bl	800a840 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800a1a6:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	bb13      	cbnz	r3, 800a1f4 <HAL_PCD_EP_Transmit+0x14c>
 800a1ae:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a1b2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a1b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1ba:	051b      	lsls	r3, r3, #20
 800a1bc:	0d1b      	lsrs	r3, r3, #20
 800a1be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a1c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a1c6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a1ca:	e7a3      	b.n	800a114 <HAL_PCD_EP_Transmit+0x6c>
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a1cc:	f3c5 024f 	ubfx	r2, r5, #1, #16
 800a1d0:	07ed      	lsls	r5, r5, #31
 800a1d2:	bf44      	itt	mi
 800a1d4:	3201      	addmi	r2, #1
 800a1d6:	b292      	uxthmi	r2, r2
 800a1d8:	0292      	lsls	r2, r2, #10
 800a1da:	e7d1      	b.n	800a180 <HAL_PCD_EP_Transmit+0xd8>
 800a1dc:	2901      	cmp	r1, #1
 800a1de:	d1d2      	bne.n	800a186 <HAL_PCD_EP_Transmit+0xde>
 800a1e0:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800a1e4:	b289      	uxth	r1, r1
 800a1e6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a1ea:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800a1ee:	f8c1 540c 	str.w	r5, [r1, #1036]	; 0x40c
 800a1f2:	e7c8      	b.n	800a186 <HAL_PCD_EP_Transmit+0xde>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d18d      	bne.n	800a114 <HAL_PCD_EP_Transmit+0x6c>
 800a1f8:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800a1fc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a204:	051b      	lsls	r3, r3, #20
 800a206:	0d1b      	lsrs	r3, r3, #20
 800a208:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a210:	e7d9      	b.n	800a1c6 <HAL_PCD_EP_Transmit+0x11e>
  __HAL_LOCK(hpcd); 
 800a212:	2002      	movs	r0, #2
 800a214:	e797      	b.n	800a146 <HAL_PCD_EP_Transmit+0x9e>
 800a216:	bf00      	nop
 800a218:	ffff8000 	.word	0xffff8000

0800a21c <HAL_PCD_IRQHandler>:
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a21c:	6803      	ldr	r3, [r0, #0]
 800a21e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
{
 800a222:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a226:	0419      	lsls	r1, r3, #16
{
 800a228:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800a22a:	d46e      	bmi.n	800a30a <HAL_PCD_IRQHandler+0xee>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a232:	0552      	lsls	r2, r2, #21
 800a234:	d50a      	bpl.n	800a24c <HAL_PCD_IRQHandler+0x30>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a236:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 800a23a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a23c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800a240:	f001 fd2b 	bl	800bc9a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 800a244:	2100      	movs	r1, #0
 800a246:	4620      	mov	r0, r4
 800a248:	f7ff fc17 	bl	8009a7a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a252:	0452      	lsls	r2, r2, #17
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 800a254:	bf44      	itt	mi
 800a256:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 800a25a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800a25e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a262:	0497      	lsls	r7, r2, #18
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 800a264:	bf44      	itt	mi
 800a266:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 800a26a:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800a26e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a272:	04d6      	lsls	r6, r2, #19
 800a274:	d513      	bpl.n	800a29e <HAL_PCD_IRQHandler+0x82>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 800a276:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a27a:	f022 0204 	bic.w	r2, r2, #4
 800a27e:	0412      	lsls	r2, r2, #16
 800a280:	0c12      	lsrs	r2, r2, #16
 800a282:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 800a286:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 800a28a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800a28e:	4620      	mov	r0, r4
 800a290:	f001 fd11 	bl	800bcb6 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	f64e 72ff 	movw	r2, #61439	; 0xefff
 800a29a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a2a4:	0515      	lsls	r5, r2, #20
 800a2a6:	d518      	bpl.n	800a2da <HAL_PCD_IRQHandler+0xbe>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800a2a8:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 800a2ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800a2b0:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a2b4:	b292      	uxth	r2, r2
 800a2b6:	f042 0208 	orr.w	r2, r2, #8
 800a2ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800a2be:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800a2c2:	b292      	uxth	r2, r2
 800a2c4:	f042 0204 	orr.w	r2, r2, #4
 800a2c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800a2cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a2d0:	04d8      	lsls	r0, r3, #19
 800a2d2:	d402      	bmi.n	800a2da <HAL_PCD_IRQHandler+0xbe>
      HAL_PCD_SuspendCallback(hpcd);
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f001 fced 	bl	800bcb4 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800a2da:	6823      	ldr	r3, [r4, #0]
 800a2dc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a2e0:	0591      	lsls	r1, r2, #22
 800a2e2:	d506      	bpl.n	800a2f2 <HAL_PCD_IRQHandler+0xd6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800a2e4:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800a2e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f001 fcd0 	bl	800bc92 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800a2f8:	05d2      	lsls	r2, r2, #23
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800a2fa:	bf44      	itt	mi
 800a2fc:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 800a300:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
}
 800a304:	b002      	add	sp, #8
 800a306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __IO uint16_t wEPVal = 0;
 800a30a:	2300      	movs	r3, #0
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a30c:	4fc6      	ldr	r7, [pc, #792]	; (800a628 <HAL_PCD_IRQHandler+0x40c>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a30e:	f8df 831c 	ldr.w	r8, [pc, #796]	; 800a62c <HAL_PCD_IRQHandler+0x410>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a312:	f8df 931c 	ldr.w	r9, [pc, #796]	; 800a630 <HAL_PCD_IRQHandler+0x414>
  __IO uint16_t wEPVal = 0;
 800a316:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800a31a:	6820      	ldr	r0, [r4, #0]
 800a31c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800a320:	b29b      	uxth	r3, r3
 800a322:	0419      	lsls	r1, r3, #16
 800a324:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a328:	d580      	bpl.n	800a22c <HAL_PCD_IRQHandler+0x10>
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a32a:	f8bd 6004 	ldrh.w	r6, [sp, #4]
    if (EPindex == 0)
 800a32e:	f016 060f 	ands.w	r6, r6, #15
 800a332:	f040 80ab 	bne.w	800a48c <HAL_PCD_IRQHandler+0x270>
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a336:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a33a:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a33c:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a340:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 800a342:	d126      	bne.n	800a392 <HAL_PCD_IRQHandler+0x176>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a344:	403b      	ands	r3, r7
 800a346:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a348:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a34c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800a350:	b29b      	uxth	r3, r3
 800a352:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a356:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 800a35a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a35c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 800a360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a364:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 800a366:	4413      	add	r3, r2
 800a368:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_PCD_DataInStageCallback(hpcd, 0);
 800a36a:	4620      	mov	r0, r4
 800a36c:	f001 fc89 	bl	800bc82 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 800a370:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a374:	2b00      	cmp	r3, #0
 800a376:	d0d0      	beq.n	800a31a <HAL_PCD_IRQHandler+0xfe>
 800a378:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	d1cd      	bne.n	800a31a <HAL_PCD_IRQHandler+0xfe>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 800a37e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800a382:	6821      	ldr	r1, [r4, #0]
 800a384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a388:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 800a38c:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 800a390:	e7c3      	b.n	800a31a <HAL_PCD_IRQHandler+0xfe>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a392:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 800a396:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a39a:	051b      	lsls	r3, r3, #20
 800a39c:	d51f      	bpl.n	800a3de <HAL_PCD_IRQHandler+0x1c2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a39e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a3a2:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a3b0:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a3b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a3b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3bc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800a3c0:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 800a3c4:	f000 fa4a 	bl	800a85c <PCD_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 800a3c8:	6822      	ldr	r2, [r4, #0]
 800a3ca:	8813      	ldrh	r3, [r2, #0]
 800a3cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3d0:	051b      	lsls	r3, r3, #20
 800a3d2:	0d1b      	lsrs	r3, r3, #20
 800a3d4:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	f001 fc44 	bl	800bc64 <HAL_PCD_SetupStageCallback>
 800a3dc:	e79d      	b.n	800a31a <HAL_PCD_IRQHandler+0xfe>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 800a3de:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a3e2:	041e      	lsls	r6, r3, #16
 800a3e4:	d599      	bpl.n	800a31a <HAL_PCD_IRQHandler+0xfe>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a3e6:	8803      	ldrh	r3, [r0, #0]
 800a3e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ec:	051b      	lsls	r3, r3, #20
 800a3ee:	0d1b      	lsrs	r3, r3, #20
 800a3f0:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a3f2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a3f6:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a400:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a404:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800a408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a40c:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          if (ep->xfer_count != 0)
 800a410:	b163      	cbz	r3, 800a42c <HAL_PCD_IRQHandler+0x210>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a412:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 800a416:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800a41a:	f000 fa1f 	bl	800a85c <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 800a41e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800a422:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 800a426:	4413      	add	r3, r2
 800a428:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 800a42c:	2100      	movs	r1, #0
 800a42e:	4620      	mov	r0, r4
 800a430:	f001 fc1e 	bl	800bc70 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
 800a43a:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 800a43e:	2d3e      	cmp	r5, #62	; 0x3e
 800a440:	b289      	uxth	r1, r1
 800a442:	f101 0106 	add.w	r1, r1, #6
 800a446:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800a44a:	d917      	bls.n	800a47c <HAL_PCD_IRQHandler+0x260>
 800a44c:	f3c5 134f 	ubfx	r3, r5, #5, #16
 800a450:	06ed      	lsls	r5, r5, #27
 800a452:	bf04      	itt	eq
 800a454:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 800a458:	b29b      	uxtheq	r3, r3
 800a45a:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 800a45e:	b29b      	uxth	r3, r3
 800a460:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a464:	8813      	ldrh	r3, [r2, #0]
 800a466:	b29b      	uxth	r3, r3
 800a468:	ea03 0308 	and.w	r3, r3, r8
 800a46c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a478:	8013      	strh	r3, [r2, #0]
 800a47a:	e74e      	b.n	800a31a <HAL_PCD_IRQHandler+0xfe>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a47c:	f3c5 034f 	ubfx	r3, r5, #1, #16
 800a480:	07ee      	lsls	r6, r5, #31
 800a482:	bf44      	itt	mi
 800a484:	3301      	addmi	r3, #1
 800a486:	b29b      	uxthmi	r3, r3
 800a488:	029b      	lsls	r3, r3, #10
 800a48a:	e7e8      	b.n	800a45e <HAL_PCD_IRQHandler+0x242>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 800a48c:	fa0f fa86 	sxth.w	sl, r6
 800a490:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800a494:	b29b      	uxth	r3, r3
 800a496:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800a49a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a49e:	041d      	lsls	r5, r3, #16
 800a4a0:	d541      	bpl.n	800a526 <HAL_PCD_IRQHandler+0x30a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800a4a2:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800a4a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4aa:	051b      	lsls	r3, r3, #20
 800a4ac:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 800a4ae:	211c      	movs	r1, #28
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 800a4b0:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 800a4b4:	fb01 4106 	mla	r1, r1, r6, r4
 800a4b8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800a4bc:	f891 30be 	ldrb.w	r3, [r1, #190]	; 0xbe
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d173      	bne.n	800a5ac <HAL_PCD_IRQHandler+0x390>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a4c4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a4c8:	f891 50b4 	ldrb.w	r5, [r1, #180]	; 0xb4
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a4d2:	3306      	adds	r3, #6
 800a4d4:	f852 5013 	ldr.w	r5, [r2, r3, lsl #1]
 800a4d8:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0)
 800a4dc:	b135      	cbz	r5, 800a4ec <HAL_PCD_IRQHandler+0x2d0>
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a4de:	f8b1 20b8 	ldrh.w	r2, [r1, #184]	; 0xb8
 800a4e2:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	f000 f9b8 	bl	800a85c <PCD_ReadPMA>
        ep->xfer_count+=count;
 800a4ec:	211c      	movs	r1, #28
 800a4ee:	fb01 4106 	mla	r1, r1, r6, r4
 800a4f2:	f8d1 30cc 	ldr.w	r3, [r1, #204]	; 0xcc
        ep->xfer_buff+=count;
 800a4f6:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
        ep->xfer_count+=count;
 800a4fa:	442b      	add	r3, r5
 800a4fc:	f8c1 30cc 	str.w	r3, [r1, #204]	; 0xcc
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800a500:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
        ep->xfer_buff+=count;
 800a504:	442a      	add	r2, r5
 800a506:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 800a50a:	b123      	cbz	r3, 800a516 <HAL_PCD_IRQHandler+0x2fa>
 800a50c:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 800a510:	4285      	cmp	r5, r0
 800a512:	f080 8082 	bcs.w	800a61a <HAL_PCD_IRQHandler+0x3fe>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a516:	231c      	movs	r3, #28
 800a518:	fb03 4306 	mla	r3, r3, r6, r4
 800a51c:	4620      	mov	r0, r4
 800a51e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a522:	f001 fba5 	bl	800bc70 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 800a526:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800a52a:	0618      	lsls	r0, r3, #24
 800a52c:	f57f aef5 	bpl.w	800a31a <HAL_PCD_IRQHandler+0xfe>
 800a530:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a532:	f830 302a 	ldrh.w	r3, [r0, sl, lsl #2]
 800a536:	b29b      	uxth	r3, r3
 800a538:	403b      	ands	r3, r7
        if (ep->doublebuffer == 0)
 800a53a:	211c      	movs	r1, #28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 800a53c:	f820 302a 	strh.w	r3, [r0, sl, lsl #2]
        if (ep->doublebuffer == 0)
 800a540:	fb01 4106 	mla	r1, r1, r6, r4
 800a544:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800a548:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d171      	bne.n	800a634 <HAL_PCD_IRQHandler+0x418>
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a550:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800a554:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
 800a558:	b29b      	uxth	r3, r3
 800a55a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a55e:	3302      	adds	r3, #2
 800a560:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a568:	640b      	str	r3, [r1, #64]	; 0x40
          if (ep->xfer_count != 0)
 800a56a:	b11b      	cbz	r3, 800a574 <HAL_PCD_IRQHandler+0x358>
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800a56c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 800a56e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a570:	f000 f966 	bl	800a840 <PCD_WritePMA>
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a574:	6822      	ldr	r2, [r4, #0]
 800a576:	211c      	movs	r1, #28
 800a578:	fb01 4606 	mla	r6, r1, r6, r4
 800a57c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800a580:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800a584:	b29b      	uxth	r3, r3
 800a586:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800a58a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a58e:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a590:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800a594:	6bb3      	ldr	r3, [r6, #56]	; 0x38
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a596:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a59a:	6432      	str	r2, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 800a59c:	441a      	add	r2, r3
        if (ep->xfer_len == 0)
 800a59e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_buff+=ep->xfer_count;
 800a5a0:	63b2      	str	r2, [r6, #56]	; 0x38
        if (ep->xfer_len == 0)
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d17a      	bne.n	800a69c <HAL_PCD_IRQHandler+0x480>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a5a6:	f001 fb6c 	bl	800bc82 <HAL_PCD_DataInStageCallback>
 800a5aa:	e6b6      	b.n	800a31a <HAL_PCD_IRQHandler+0xfe>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a5ac:	f891 30b4 	ldrb.w	r3, [r1, #180]	; 0xb4
 800a5b0:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
 800a5b4:	00dd      	lsls	r5, r3, #3
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5b6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a5ba:	f41c 4f80 	tst.w	ip, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5be:	fa15 f383 	uxtah	r3, r5, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800a5c2:	d01f      	beq.n	800a604 <HAL_PCD_IRQHandler+0x3e8>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5c4:	3302      	adds	r3, #2
 800a5c6:	f852 5013 	ldr.w	r5, [r2, r3, lsl #1]
 800a5ca:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0)
 800a5ce:	b135      	cbz	r5, 800a5de <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a5d0:	f8b1 20ba 	ldrh.w	r2, [r1, #186]	; 0xba
 800a5d4:	462b      	mov	r3, r5
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a5d6:	f8d1 10c4 	ldr.w	r1, [r1, #196]	; 0xc4
 800a5da:	f000 f93f 	bl	800a85c <PCD_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 800a5de:	231c      	movs	r3, #28
 800a5e0:	fb03 4306 	mla	r3, r3, r6, r4
 800a5e4:	6822      	ldr	r2, [r4, #0]
 800a5e6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
 800a5ea:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5f2:	051b      	lsls	r3, r3, #20
 800a5f4:	0d1b      	lsrs	r3, r3, #20
 800a5f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a5fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a602:	e773      	b.n	800a4ec <HAL_PCD_IRQHandler+0x2d0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a604:	3306      	adds	r3, #6
 800a606:	f852 5013 	ldr.w	r5, [r2, r3, lsl #1]
 800a60a:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0)
 800a60e:	2d00      	cmp	r5, #0
 800a610:	d0e5      	beq.n	800a5de <HAL_PCD_IRQHandler+0x3c2>
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a612:	f8b1 20bc 	ldrh.w	r2, [r1, #188]	; 0xbc
 800a616:	462b      	mov	r3, r5
 800a618:	e7dd      	b.n	800a5d6 <HAL_PCD_IRQHandler+0x3ba>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a61a:	f891 10b4 	ldrb.w	r1, [r1, #180]	; 0xb4
 800a61e:	4620      	mov	r0, r4
 800a620:	f7ff fcbc 	bl	8009f9c <HAL_PCD_EP_Receive>
 800a624:	e77f      	b.n	800a526 <HAL_PCD_IRQHandler+0x30a>
 800a626:	bf00      	nop
 800a628:	ffff8f0f 	.word	0xffff8f0f
 800a62c:	ffffbf8f 	.word	0xffffbf8f
 800a630:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a634:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800a638:	f830 c023 	ldrh.w	ip, [r0, r3, lsl #2]
 800a63c:	00dd      	lsls	r5, r3, #3
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a63e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a642:	f01c 0f40 	tst.w	ip, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a646:	fa15 f383 	uxtah	r3, r5, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 800a64a:	d01d      	beq.n	800a688 <HAL_PCD_IRQHandler+0x46c>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a64c:	3302      	adds	r3, #2
 800a64e:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a652:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a656:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a658:	b11b      	cbz	r3, 800a662 <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 800a65a:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a65c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800a65e:	f000 f8ef 	bl	800a840 <PCD_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 800a662:	231c      	movs	r3, #28
 800a664:	fb03 4306 	mla	r3, r3, r6, r4
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800a66e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a676:	051b      	lsls	r3, r3, #20
 800a678:	0d1b      	lsrs	r3, r3, #20
 800a67a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a682:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a686:	e775      	b.n	800a574 <HAL_PCD_IRQHandler+0x358>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a688:	3306      	adds	r3, #6
 800a68a:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800a68e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a692:	640b      	str	r3, [r1, #64]	; 0x40
            if (ep->xfer_count != 0)
 800a694:	2b00      	cmp	r3, #0
 800a696:	d0e4      	beq.n	800a662 <HAL_PCD_IRQHandler+0x446>
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800a698:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800a69a:	e7df      	b.n	800a65c <HAL_PCD_IRQHandler+0x440>
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800a69c:	f7ff fd04 	bl	800a0a8 <HAL_PCD_EP_Transmit>
 800a6a0:	e63b      	b.n	800a31a <HAL_PCD_IRQHandler+0xfe>
 800a6a2:	bf00      	nop

0800a6a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6a4:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800a6a6:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d048      	beq.n	800a740 <HAL_PCD_EP_SetStall+0x9c>
   
  if ((0x80 & ep_addr) == 0x80)
 800a6ae:	b24c      	sxtb	r4, r1
  __HAL_LOCK(hpcd); 
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  if ((0x80 & ep_addr) == 0x80)
 800a6b6:	2c00      	cmp	r4, #0
 800a6b8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800a6bc:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a6c0:	bfb5      	itete	lt
 800a6c2:	fb02 0103 	mlalt	r1, r2, r3, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a6c6:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a6ca:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a6cc:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a6d2:	0fe2      	lsrs	r2, r4, #31
  ep->num   = ep_addr & 0x7F;
 800a6d4:	700b      	strb	r3, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a6d6:	704a      	strb	r2, [r1, #1]
  
  if (ep->num == 0)
 800a6d8:	6802      	ldr	r2, [r0, #0]
 800a6da:	b9a3      	cbnz	r3, 800a706 <HAL_PCD_EP_SetStall+0x62>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800a6dc:	8813      	ldrh	r3, [r2, #0]
 800a6de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6e6:	041b      	lsls	r3, r3, #16
 800a6e8:	0c1b      	lsrs	r3, r3, #16
 800a6ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a6ee:	f083 0310 	eor.w	r3, r3, #16
 800a6f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6fa:	8013      	strh	r3, [r2, #0]
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
    }
  }
  __HAL_UNLOCK(hpcd); 
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 800a702:	4618      	mov	r0, r3
}
 800a704:	bd10      	pop	{r4, pc}
    if (ep->is_in)
 800a706:	b219      	sxth	r1, r3
 800a708:	2c00      	cmp	r4, #0
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a70a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    if (ep->is_in)
 800a70e:	da0e      	bge.n	800a72e <HAL_PCD_EP_SetStall+0x8a>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800a710:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a718:	041b      	lsls	r3, r3, #16
 800a71a:	0c1b      	lsrs	r3, r3, #16
 800a71c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 800a720:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a728:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800a72c:	e7e6      	b.n	800a6fc <HAL_PCD_EP_SetStall+0x58>
 800a72e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a736:	041b      	lsls	r3, r3, #16
 800a738:	0c1b      	lsrs	r3, r3, #16
 800a73a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a73e:	e7ef      	b.n	800a720 <HAL_PCD_EP_SetStall+0x7c>
  __HAL_LOCK(hpcd); 
 800a740:	2002      	movs	r0, #2
 800a742:	e7df      	b.n	800a704 <HAL_PCD_EP_SetStall+0x60>

0800a744 <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 800a744:	b24b      	sxtb	r3, r1
 800a746:	2b00      	cmp	r3, #0
{
 800a748:	b510      	push	{r4, lr}
 800a74a:	f04f 021c 	mov.w	r2, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a74e:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800a752:	bfb5      	itete	lt
 800a754:	fb02 0104 	mlalt	r1, r2, r4, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a758:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a75c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a75e:	31b4      	addge	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a760:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 800a762:	2200      	movs	r2, #0
 800a764:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 800a766:	700c      	strb	r4, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800a768:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 800a76a:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d049      	beq.n	800a806 <HAL_PCD_EP_ClrStall+0xc2>
 800a772:	2301      	movs	r3, #1
 800a774:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  if (ep->is_in)
 800a778:	780b      	ldrb	r3, [r1, #0]
 800a77a:	784c      	ldrb	r4, [r1, #1]
 800a77c:	6802      	ldr	r2, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a77e:	b21b      	sxth	r3, r3
  if (ep->is_in)
 800a780:	b32c      	cbz	r4, 800a7ce <HAL_PCD_EP_ClrStall+0x8a>
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800a782:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800a786:	0664      	lsls	r4, r4, #25
 800a788:	d50b      	bpl.n	800a7a2 <HAL_PCD_EP_ClrStall+0x5e>
 800a78a:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800a78e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800a792:	0524      	lsls	r4, r4, #20
 800a794:	0d24      	lsrs	r4, r4, #20
 800a796:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 800a79a:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 800a79e:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a7a2:	7809      	ldrb	r1, [r1, #0]
 800a7a4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a7a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b0:	041b      	lsls	r3, r3, #16
 800a7b2:	0c1b      	lsrs	r3, r3, #16
 800a7b4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a7b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800a7ca:	4618      	mov	r0, r3
}
 800a7cc:	bd10      	pop	{r4, pc}
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800a7ce:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800a7d2:	0464      	lsls	r4, r4, #17
 800a7d4:	d50b      	bpl.n	800a7ee <HAL_PCD_EP_ClrStall+0xaa>
 800a7d6:	f832 4023 	ldrh.w	r4, [r2, r3, lsl #2]
 800a7da:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 800a7de:	0524      	lsls	r4, r4, #20
 800a7e0:	0d24      	lsrs	r4, r4, #20
 800a7e2:	f444 4440 	orr.w	r4, r4, #49152	; 0xc000
 800a7e6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800a7ea:	f822 4023 	strh.w	r4, [r2, r3, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 800a7ee:	7809      	ldrb	r1, [r1, #0]
 800a7f0:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800a7f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7fc:	041b      	lsls	r3, r3, #16
 800a7fe:	0c1b      	lsrs	r3, r3, #16
 800a800:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800a804:	e7d8      	b.n	800a7b8 <HAL_PCD_EP_ClrStall+0x74>
  __HAL_LOCK(hpcd); 
 800a806:	2002      	movs	r0, #2
 800a808:	e7e0      	b.n	800a7cc <HAL_PCD_EP_ClrStall+0x88>

0800a80a <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800a80a:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800a80e:	b530      	push	{r4, r5, lr}
 800a810:	f04f 051c 	mov.w	r5, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a814:	bf17      	itett	ne
 800a816:	f001 047f 	andne.w	r4, r1, #127	; 0x7f
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a81a:	fb05 0001 	mlaeq	r0, r5, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800a81e:	fb05 0004 	mlane	r0, r5, r4, r0
 800a822:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 800a824:	bf08      	it	eq
 800a826:	30b4      	addeq	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a828:	b299      	uxth	r1, r3
 800a82a:	b91a      	cbnz	r2, 800a834 <HAL_PCDEx_PMAConfig+0x2a>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 800a82c:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 800a82e:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 800a830:	2000      	movs	r0, #0
 800a832:	bd30      	pop	{r4, r5, pc}
    ep->doublebuffer = 1;
 800a834:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a836:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 800a838:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800a83a:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800a83c:	8103      	strh	r3, [r0, #8]
 800a83e:	e7f7      	b.n	800a830 <HAL_PCDEx_PMAConfig+0x26>

0800a840 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a840:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a842:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800a846:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a848:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a84c:	b903      	cbnz	r3, 800a850 <PCD_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800a84e:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800a850:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 800a854:	f822 0b04 	strh.w	r0, [r2], #4
  for (i = n; i != 0; i--)
 800a858:	3b01      	subs	r3, #1
 800a85a:	e7f7      	b.n	800a84c <PCD_WritePMA+0xc>

0800a85c <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a85c:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a85e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 800a862:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 800a864:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 800a866:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 800a86a:	2400      	movs	r4, #0
 800a86c:	429c      	cmp	r4, r3
 800a86e:	d100      	bne.n	800a872 <PCD_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800a870:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 800a872:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
 800a876:	f821 2014 	strh.w	r2, [r1, r4, lsl #1]
  for (i = n; i != 0; i--)
 800a87a:	3401      	adds	r4, #1
 800a87c:	e7f6      	b.n	800a86c <PCD_ReadPMA+0x10>

0800a87e <HAL_PCDEx_SetConnectionState>:
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implenetd in the user file
   */ 
}
 800a87e:	4770      	bx	lr

0800a880 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800a880:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800a882:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a884:	9d03      	ldr	r5, [sp, #12]
  tmpreg = hi2c->Instance->CR2;
 800a886:	6860      	ldr	r0, [r4, #4]
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a888:	f020 707f 	bic.w	r0, r0, #66846720	; 0x3fc0000
 800a88c:	f420 3059 	bic.w	r0, r0, #222208	; 0x36400
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a890:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a892:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a89a:	f3c1 0109 	ubfx	r1, r1, #0, #10
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800a89e:	f020 0003 	bic.w	r0, r0, #3
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 800a8a2:	430b      	orrs	r3, r1
 800a8a4:	4303      	orrs	r3, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 800a8a6:	6063      	str	r3, [r4, #4]
}  
 800a8a8:	bd30      	pop	{r4, r5, pc}

0800a8aa <I2C_IsAcknowledgeFailed>:
{
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a8b0:	f7fe ff38 	bl	8009724 <HAL_GetTick>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8b4:	6822      	ldr	r2, [r4, #0]
 800a8b6:	6993      	ldr	r3, [r2, #24]
 800a8b8:	f013 0310 	ands.w	r3, r3, #16
  tickstart = HAL_GetTick();
 800a8bc:	4606      	mov	r6, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8be:	d03e      	beq.n	800a93e <I2C_IsAcknowledgeFailed+0x94>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 800a8c0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a8c4:	2b12      	cmp	r3, #18
 800a8c6:	d007      	beq.n	800a8d8 <I2C_IsAcknowledgeFailed+0x2e>
 800a8c8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a8cc:	2b52      	cmp	r3, #82	; 0x52
 800a8ce:	d003      	beq.n	800a8d8 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 800a8d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800a8d4:	2b62      	cmp	r3, #98	; 0x62
 800a8d6:	d106      	bne.n	800a8e6 <I2C_IsAcknowledgeFailed+0x3c>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800a8d8:	6853      	ldr	r3, [r2, #4]
 800a8da:	0198      	lsls	r0, r3, #6
 800a8dc:	d403      	bmi.n	800a8e6 <I2C_IsAcknowledgeFailed+0x3c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a8de:	6853      	ldr	r3, [r2, #4]
 800a8e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8e4:	6053      	str	r3, [r2, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	699a      	ldr	r2, [r3, #24]
 800a8ea:	0692      	lsls	r2, r2, #26
 800a8ec:	d517      	bpl.n	800a91e <I2C_IsAcknowledgeFailed+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8ee:	2210      	movs	r2, #16
 800a8f0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8f2:	2220      	movs	r2, #32
 800a8f4:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800a8fc:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800a900:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800a904:	f022 0201 	bic.w	r2, r2, #1
 800a908:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a90a:	2304      	movs	r3, #4
 800a90c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800a910:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 800a912:	2300      	movs	r3, #0
    hi2c->State= HAL_I2C_STATE_READY;
 800a914:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800a918:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a91c:	e00e      	b.n	800a93c <I2C_IsAcknowledgeFailed+0x92>
      if(Timeout != HAL_MAX_DELAY)
 800a91e:	1c69      	adds	r1, r5, #1
 800a920:	d0e2      	beq.n	800a8e8 <I2C_IsAcknowledgeFailed+0x3e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a922:	b125      	cbz	r5, 800a92e <I2C_IsAcknowledgeFailed+0x84>
 800a924:	f7fe fefe 	bl	8009724 <HAL_GetTick>
 800a928:	1b80      	subs	r0, r0, r6
 800a92a:	42a8      	cmp	r0, r5
 800a92c:	d9db      	bls.n	800a8e6 <I2C_IsAcknowledgeFailed+0x3c>
          hi2c->State= HAL_I2C_STATE_READY;
 800a92e:	2301      	movs	r3, #1
 800a930:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a934:	2300      	movs	r3, #0
 800a936:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a93a:	2003      	movs	r0, #3
}
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800a93e:	4618      	mov	r0, r3
 800a940:	e7fc      	b.n	800a93c <I2C_IsAcknowledgeFailed+0x92>

0800a942 <I2C_WaitOnFlagUntilTimeout>:
{  
 800a942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a946:	4604      	mov	r4, r0
 800a948:	460e      	mov	r6, r1
 800a94a:	4690      	mov	r8, r2
 800a94c:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800a94e:	f7fe fee9 	bl	8009724 <HAL_GetTick>
 800a952:	4607      	mov	r7, r0
  if(Status == RESET)
 800a954:	f1b8 0f00 	cmp.w	r8, #0
 800a958:	d01d      	beq.n	800a996 <I2C_WaitOnFlagUntilTimeout+0x54>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 800a95a:	6822      	ldr	r2, [r4, #0]
 800a95c:	6993      	ldr	r3, [r2, #24]
 800a95e:	ea36 0303 	bics.w	r3, r6, r3
 800a962:	d11d      	bne.n	800a9a0 <I2C_WaitOnFlagUntilTimeout+0x5e>
      if(Timeout != HAL_MAX_DELAY)
 800a964:	1c6b      	adds	r3, r5, #1
 800a966:	d0f9      	beq.n	800a95c <I2C_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a968:	b16d      	cbz	r5, 800a986 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a96a:	f7fe fedb 	bl	8009724 <HAL_GetTick>
 800a96e:	1bc0      	subs	r0, r0, r7
 800a970:	42a8      	cmp	r0, r5
 800a972:	d9f2      	bls.n	800a95a <I2C_WaitOnFlagUntilTimeout+0x18>
 800a974:	e007      	b.n	800a986 <I2C_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 800a976:	1c69      	adds	r1, r5, #1
 800a978:	d00e      	beq.n	800a998 <I2C_WaitOnFlagUntilTimeout+0x56>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a97a:	b125      	cbz	r5, 800a986 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a97c:	f7fe fed2 	bl	8009724 <HAL_GetTick>
 800a980:	1bc0      	subs	r0, r0, r7
 800a982:	42a8      	cmp	r0, r5
 800a984:	d907      	bls.n	800a996 <I2C_WaitOnFlagUntilTimeout+0x54>
          hi2c->State= HAL_I2C_STATE_READY;
 800a986:	2301      	movs	r3, #1
 800a988:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hi2c);
 800a98c:	2300      	movs	r3, #0
 800a98e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 800a992:	2003      	movs	r0, #3
 800a994:	e005      	b.n	800a9a2 <I2C_WaitOnFlagUntilTimeout+0x60>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a996:	6822      	ldr	r2, [r4, #0]
 800a998:	6993      	ldr	r3, [r2, #24]
 800a99a:	ea36 0303 	bics.w	r3, r6, r3
 800a99e:	d1ea      	bne.n	800a976 <I2C_WaitOnFlagUntilTimeout+0x34>
  return HAL_OK;
 800a9a0:	2000      	movs	r0, #0
}
 800a9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 800a9a6:	b570      	push	{r4, r5, r6, lr}
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 800a9ac:	f7fe feba 	bl	8009724 <HAL_GetTick>
 800a9b0:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	069b      	lsls	r3, r3, #26
 800a9b8:	d501      	bpl.n	800a9be <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
  return HAL_OK;
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e012      	b.n	800a9e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800a9be:	4629      	mov	r1, r5
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff ff72 	bl	800a8aa <I2C_IsAcknowledgeFailed>
 800a9c6:	b9a0      	cbnz	r0, 800a9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a9c8:	b96d      	cbnz	r5, 800a9e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a9ca:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800a9ce:	f043 0320 	orr.w	r3, r3, #32
 800a9d2:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800a9e2:	2003      	movs	r0, #3
}
 800a9e4:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800a9e6:	f7fe fe9d 	bl	8009724 <HAL_GetTick>
 800a9ea:	1b80      	subs	r0, r0, r6
 800a9ec:	42a8      	cmp	r0, r5
 800a9ee:	d9e0      	bls.n	800a9b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 800a9f0:	e7eb      	b.n	800a9ca <I2C_WaitOnSTOPFlagUntilTimeout+0x24>
      return HAL_ERROR;
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	e7f6      	b.n	800a9e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>

0800a9f6 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 800a9f6:	b570      	push	{r4, r5, r6, lr}
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800a9fc:	f7fe fe92 	bl	8009724 <HAL_GetTick>
 800aa00:	4606      	mov	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	699b      	ldr	r3, [r3, #24]
 800aa06:	079b      	lsls	r3, r3, #30
 800aa08:	d501      	bpl.n	800aa0e <I2C_WaitOnTXISFlagUntilTimeout+0x18>
  return HAL_OK;      
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e014      	b.n	800aa38 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 800aa0e:	4629      	mov	r1, r5
 800aa10:	4620      	mov	r0, r4
 800aa12:	f7ff ff4a 	bl	800a8aa <I2C_IsAcknowledgeFailed>
 800aa16:	b9b0      	cbnz	r0, 800aa46 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 800aa18:	1c6a      	adds	r2, r5, #1
 800aa1a:	d0f2      	beq.n	800aa02 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aa1c:	b96d      	cbnz	r5, 800aa3a <I2C_WaitOnTXISFlagUntilTimeout+0x44>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa1e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800aa22:	f043 0320 	orr.w	r3, r3, #32
 800aa26:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hi2c);
 800aa30:	2300      	movs	r3, #0
 800aa32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800aa36:	2003      	movs	r0, #3
}
 800aa38:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aa3a:	f7fe fe73 	bl	8009724 <HAL_GetTick>
 800aa3e:	1b80      	subs	r0, r0, r6
 800aa40:	42a8      	cmp	r0, r5
 800aa42:	d9de      	bls.n	800aa02 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800aa44:	e7eb      	b.n	800aa1e <I2C_WaitOnTXISFlagUntilTimeout+0x28>
      return HAL_ERROR;
 800aa46:	2001      	movs	r0, #1
 800aa48:	e7f6      	b.n	800aa38 <I2C_WaitOnTXISFlagUntilTimeout+0x42>

0800aa4a <I2C_RequestMemoryWrite>:
{
 800aa4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa4c:	9f08      	ldr	r7, [sp, #32]
 800aa4e:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800aa54:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa56:	9300      	str	r3, [sp, #0]
{
 800aa58:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800aa5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aa5e:	b2f2      	uxtb	r2, r6
 800aa60:	f7ff ff0e 	bl	800a880 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800aa64:	4639      	mov	r1, r7
 800aa66:	4620      	mov	r0, r4
 800aa68:	f7ff ffc5 	bl	800a9f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa6c:	b140      	cbz	r0, 800aa80 <I2C_RequestMemoryWrite+0x36>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa6e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d002      	beq.n	800aa7c <I2C_RequestMemoryWrite+0x32>
      return HAL_TIMEOUT;
 800aa76:	2003      	movs	r0, #3
}
 800aa78:	b003      	add	sp, #12
 800aa7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	e7fb      	b.n	800aa78 <I2C_RequestMemoryWrite+0x2e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa80:	2e01      	cmp	r6, #1
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	d10a      	bne.n	800aa9c <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aa86:	b2ed      	uxtb	r5, r5
 800aa88:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	463b      	mov	r3, r7
 800aa8e:	2180      	movs	r1, #128	; 0x80
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7ff ff56 	bl	800a942 <I2C_WaitOnFlagUntilTimeout>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d0ee      	beq.n	800aa78 <I2C_RequestMemoryWrite+0x2e>
 800aa9a:	e7ec      	b.n	800aa76 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800aa9c:	0a2a      	lsrs	r2, r5, #8
 800aa9e:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f7ff ffa7 	bl	800a9f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800aaa8:	2800      	cmp	r0, #0
 800aaaa:	d1e0      	bne.n	800aa6e <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	e7ea      	b.n	800aa86 <I2C_RequestMemoryWrite+0x3c>

0800aab0 <I2C_RequestMemoryRead>:
{
 800aab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aab2:	9f08      	ldr	r7, [sp, #32]
 800aab4:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800aaba:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aabc:	9300      	str	r3, [sp, #0]
{
 800aabe:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800aac0:	2300      	movs	r3, #0
 800aac2:	b2f2      	uxtb	r2, r6
 800aac4:	f7ff fedc 	bl	800a880 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800aac8:	4639      	mov	r1, r7
 800aaca:	4620      	mov	r0, r4
 800aacc:	f7ff ff93 	bl	800a9f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800aad0:	b140      	cbz	r0, 800aae4 <I2C_RequestMemoryRead+0x34>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aad2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	d002      	beq.n	800aae0 <I2C_RequestMemoryRead+0x30>
      return HAL_TIMEOUT;
 800aada:	2003      	movs	r0, #3
}
 800aadc:	b003      	add	sp, #12
 800aade:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7fb      	b.n	800aadc <I2C_RequestMemoryRead+0x2c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aae4:	2e01      	cmp	r6, #1
 800aae6:	6823      	ldr	r3, [r4, #0]
 800aae8:	d10a      	bne.n	800ab00 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800aaea:	b2ed      	uxtb	r5, r5
 800aaec:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800aaee:	2200      	movs	r2, #0
 800aaf0:	463b      	mov	r3, r7
 800aaf2:	2140      	movs	r1, #64	; 0x40
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	f7ff ff24 	bl	800a942 <I2C_WaitOnFlagUntilTimeout>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d0ee      	beq.n	800aadc <I2C_RequestMemoryRead+0x2c>
 800aafe:	e7ec      	b.n	800aada <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 800ab00:	0a2a      	lsrs	r2, r5, #8
 800ab02:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800ab04:	4639      	mov	r1, r7
 800ab06:	4620      	mov	r0, r4
 800ab08:	f7ff ff75 	bl	800a9f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1e0      	bne.n	800aad2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	e7ea      	b.n	800aaea <I2C_RequestMemoryRead+0x3a>

0800ab14 <HAL_I2C_MspInit>:
}
 800ab14:	4770      	bx	lr

0800ab16 <HAL_I2C_Init>:
{ 
 800ab16:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800ab18:	4604      	mov	r4, r0
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d041      	beq.n	800aba2 <HAL_I2C_Init+0x8c>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800ab1e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800ab22:	b90b      	cbnz	r3, 800ab28 <HAL_I2C_Init+0x12>
    HAL_I2C_MspInit(hi2c);
 800ab24:	f7ff fff6 	bl	800ab14 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	f022 0201 	bic.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ab38:	6862      	ldr	r2, [r4, #4]
 800ab3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ab3e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ab46:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 800ab48:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ab4c:	b31a      	cbz	r2, 800ab96 <HAL_I2C_Init+0x80>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab4e:	2901      	cmp	r1, #1
 800ab50:	d11e      	bne.n	800ab90 <HAL_I2C_Init+0x7a>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ab52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab56:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800ab5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab62:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ab64:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	69a1      	ldr	r1, [r4, #24]
 800ab6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800ab70:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ab72:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800ab76:	430a      	orrs	r2, r1
 800ab78:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	f042 0201 	orr.w	r2, r2, #1
 800ab80:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab82:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800ab84:	2301      	movs	r3, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab86:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800ab8a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800ab8e:	bd10      	pop	{r4, pc}
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ab90:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ab94:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ab96:	2902      	cmp	r1, #2
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ab98:	bf04      	itt	eq
 800ab9a:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 800ab9e:	605a      	streq	r2, [r3, #4]
 800aba0:	e7da      	b.n	800ab58 <HAL_I2C_Init+0x42>
    return HAL_ERROR;
 800aba2:	2001      	movs	r0, #1
 800aba4:	e7f3      	b.n	800ab8e <HAL_I2C_Init+0x78>

0800aba6 <HAL_I2C_MspDeInit>:
 800aba6:	4770      	bx	lr

0800aba8 <HAL_I2C_DeInit>:
{
 800aba8:	b510      	push	{r4, lr}
  if(hi2c == NULL)
 800abaa:	4604      	mov	r4, r0
 800abac:	b188      	cbz	r0, 800abd2 <HAL_I2C_DeInit+0x2a>
  __HAL_I2C_DISABLE(hi2c);
 800abae:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800abb0:	2302      	movs	r3, #2
 800abb2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  __HAL_I2C_DISABLE(hi2c);
 800abb6:	6813      	ldr	r3, [r2, #0]
 800abb8:	f023 0301 	bic.w	r3, r3, #1
 800abbc:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800abbe:	f7ff fff2 	bl	800aba6 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abc2:	2000      	movs	r0, #0
 800abc4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  __HAL_UNLOCK(hi2c);
 800abc8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_RESET;
 800abcc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800abd0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800abd2:	2001      	movs	r0, #1
 800abd4:	e7fc      	b.n	800abd0 <HAL_I2C_DeInit+0x28>

0800abd6 <HAL_I2C_Mem_Write>:
{
 800abd6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800abda:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800abde:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800abe2:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800abe6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800abea:	2e01      	cmp	r6, #1
{
 800abec:	4604      	mov	r4, r0
 800abee:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800abf0:	b2f7      	uxtb	r7, r6
 800abf2:	d170      	bne.n	800acd6 <HAL_I2C_Mem_Write+0x100>
    if((pData == NULL) || (Size == 0)) 
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	d01e      	beq.n	800ac38 <HAL_I2C_Mem_Write+0x62>
 800abfa:	b1ed      	cbz	r5, 800ac38 <HAL_I2C_Mem_Write+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800abfc:	6806      	ldr	r6, [r0, #0]
 800abfe:	69b6      	ldr	r6, [r6, #24]
 800ac00:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800ac04:	d167      	bne.n	800acd6 <HAL_I2C_Mem_Write+0x100>
    __HAL_LOCK(hi2c);
 800ac06:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800ac0a:	f1bc 0f01 	cmp.w	ip, #1
 800ac0e:	d062      	beq.n	800acd6 <HAL_I2C_Mem_Write+0x100>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 800ac10:	f04f 0c52 	mov.w	ip, #82	; 0x52
 800ac14:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800ac18:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac1c:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800ac20:	f8cd a000 	str.w	sl, [sp]
 800ac24:	f7ff ff11 	bl	800aa4a <I2C_RequestMemoryWrite>
 800ac28:	b150      	cbz	r0, 800ac40 <HAL_I2C_Mem_Write+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac2a:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800ac2e:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac32:	2b04      	cmp	r3, #4
 800ac34:	d000      	beq.n	800ac38 <HAL_I2C_Mem_Write+0x62>
          return HAL_TIMEOUT;
 800ac36:	2703      	movs	r7, #3
}
 800ac38:	4638      	mov	r0, r7
 800ac3a:	b002      	add	sp, #8
 800ac3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ac40:	9000      	str	r0, [sp, #0]
        if(Size > 255)
 800ac42:	2dff      	cmp	r5, #255	; 0xff
 800ac44:	d908      	bls.n	800ac58 <HAL_I2C_Mem_Write+0x82>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ac46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac4a:	22ff      	movs	r2, #255	; 0xff
 800ac4c:	4641      	mov	r1, r8
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f7ff fe16 	bl	800a880 <I2C_TransferConfig>
          Sizetmp = 255;
 800ac54:	26ff      	movs	r6, #255	; 0xff
 800ac56:	e007      	b.n	800ac68 <HAL_I2C_Mem_Write+0x92>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ac58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac5c:	b2ea      	uxtb	r2, r5
 800ac5e:	4641      	mov	r1, r8
 800ac60:	4620      	mov	r0, r4
 800ac62:	f7ff fe0d 	bl	800a880 <I2C_TransferConfig>
      Sizetmp = Size;
 800ac66:	462e      	mov	r6, r5
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 800ac68:	4651      	mov	r1, sl
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	f7ff fec3 	bl	800a9f6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ac70:	b110      	cbz	r0, 800ac78 <HAL_I2C_Mem_Write+0xa2>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac72:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800ac76:	e7dc      	b.n	800ac32 <HAL_I2C_Mem_Write+0x5c>
      hi2c->Instance->TXDR = (*pData++);
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	f819 2b01 	ldrb.w	r2, [r9], #1
 800ac7e:	629a      	str	r2, [r3, #40]	; 0x28
      Size--;
 800ac80:	3d01      	subs	r5, #1
      if((Sizetmp == 0)&&(Size!=0))
 800ac82:	3e01      	subs	r6, #1
      Size--;
 800ac84:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800ac86:	d10a      	bne.n	800ac9e <HAL_I2C_Mem_Write+0xc8>
 800ac88:	b15d      	cbz	r5, 800aca2 <HAL_I2C_Mem_Write+0xcc>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800ac8a:	4653      	mov	r3, sl
 800ac8c:	4632      	mov	r2, r6
 800ac8e:	2180      	movs	r1, #128	; 0x80
 800ac90:	4620      	mov	r0, r4
 800ac92:	f7ff fe56 	bl	800a942 <I2C_WaitOnFlagUntilTimeout>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	d1cd      	bne.n	800ac36 <HAL_I2C_Mem_Write+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ac9a:	9600      	str	r6, [sp, #0]
 800ac9c:	e7d1      	b.n	800ac42 <HAL_I2C_Mem_Write+0x6c>
    }while(Size > 0);
 800ac9e:	2d00      	cmp	r5, #0
 800aca0:	d1e2      	bne.n	800ac68 <HAL_I2C_Mem_Write+0x92>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800aca2:	2119      	movs	r1, #25
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7ff fe7e 	bl	800a9a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800acaa:	2800      	cmp	r0, #0
 800acac:	d1e1      	bne.n	800ac72 <HAL_I2C_Mem_Write+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800acae:	6823      	ldr	r3, [r4, #0]
 800acb0:	2220      	movs	r2, #32
 800acb2:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800acba:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800acbe:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 800acc8:	2301      	movs	r3, #1
 800acca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800acce:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800acd2:	4607      	mov	r7, r0
 800acd4:	e7b0      	b.n	800ac38 <HAL_I2C_Mem_Write+0x62>
    return HAL_BUSY;
 800acd6:	2702      	movs	r7, #2
 800acd8:	e7ae      	b.n	800ac38 <HAL_I2C_Mem_Write+0x62>

0800acda <HAL_I2C_Mem_Read>:
{
 800acda:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(hi2c->State == HAL_I2C_STATE_READY)
 800acde:	f890 6035 	ldrb.w	r6, [r0, #53]	; 0x35
{
 800ace2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 800ace6:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 800acea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_READY)
 800acee:	2e01      	cmp	r6, #1
{
 800acf0:	4604      	mov	r4, r0
 800acf2:	4688      	mov	r8, r1
  if(hi2c->State == HAL_I2C_STATE_READY)
 800acf4:	b2f7      	uxtb	r7, r6
 800acf6:	d175      	bne.n	800ade4 <HAL_I2C_Mem_Read+0x10a>
    if((pData == NULL) || (Size == 0)) 
 800acf8:	f1b9 0f00 	cmp.w	r9, #0
 800acfc:	d01e      	beq.n	800ad3c <HAL_I2C_Mem_Read+0x62>
 800acfe:	b1ed      	cbz	r5, 800ad3c <HAL_I2C_Mem_Read+0x62>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ad00:	6806      	ldr	r6, [r0, #0]
 800ad02:	69b6      	ldr	r6, [r6, #24]
 800ad04:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800ad08:	d16c      	bne.n	800ade4 <HAL_I2C_Mem_Read+0x10a>
    __HAL_LOCK(hi2c);
 800ad0a:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800ad0e:	f1bc 0f01 	cmp.w	ip, #1
 800ad12:	d067      	beq.n	800ade4 <HAL_I2C_Mem_Read+0x10a>
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 800ad14:	f04f 0c62 	mov.w	ip, #98	; 0x62
 800ad18:	f880 c035 	strb.w	ip, [r0, #53]	; 0x35
    __HAL_LOCK(hi2c);
 800ad1c:	f880 7034 	strb.w	r7, [r0, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad20:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 800ad24:	f8cd a000 	str.w	sl, [sp]
 800ad28:	f7ff fec2 	bl	800aab0 <I2C_RequestMemoryRead>
 800ad2c:	b150      	cbz	r0, 800ad44 <HAL_I2C_Mem_Read+0x6a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad2e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
        __HAL_UNLOCK(hi2c);
 800ad32:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad36:	2b04      	cmp	r3, #4
 800ad38:	d000      	beq.n	800ad3c <HAL_I2C_Mem_Read+0x62>
        return HAL_TIMEOUT;
 800ad3a:	2703      	movs	r7, #3
}
 800ad3c:	4638      	mov	r0, r7
 800ad3e:	b002      	add	sp, #8
 800ad40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if(Size > 255)
 800ad44:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800ad48:	2dff      	cmp	r5, #255	; 0xff
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800ad4a:	9300      	str	r3, [sp, #0]
        if(Size > 255)
 800ad4c:	d908      	bls.n	800ad60 <HAL_I2C_Mem_Read+0x86>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ad4e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad52:	22ff      	movs	r2, #255	; 0xff
 800ad54:	4641      	mov	r1, r8
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff fd92 	bl	800a880 <I2C_TransferConfig>
          Sizetmp = 255;
 800ad5c:	26ff      	movs	r6, #255	; 0xff
 800ad5e:	e007      	b.n	800ad70 <HAL_I2C_Mem_Read+0x96>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800ad60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad64:	b2ea      	uxtb	r2, r5
 800ad66:	4641      	mov	r1, r8
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f7ff fd89 	bl	800a880 <I2C_TransferConfig>
      Sizetmp = Size;
 800ad6e:	462e      	mov	r6, r5
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 800ad70:	4653      	mov	r3, sl
 800ad72:	2200      	movs	r2, #0
 800ad74:	2104      	movs	r1, #4
 800ad76:	4620      	mov	r0, r4
 800ad78:	f7ff fde3 	bl	800a942 <I2C_WaitOnFlagUntilTimeout>
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d1dc      	bne.n	800ad3a <HAL_I2C_Mem_Read+0x60>
      (*pData++) = hi2c->Instance->RXDR;
 800ad80:	6823      	ldr	r3, [r4, #0]
      Size--;   
 800ad82:	3d01      	subs	r5, #1
      (*pData++) = hi2c->Instance->RXDR;
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	f809 3b01 	strb.w	r3, [r9], #1
      if((Sizetmp == 0)&&(Size!=0))
 800ad8a:	3e01      	subs	r6, #1
      Size--;   
 800ad8c:	b2ad      	uxth	r5, r5
      if((Sizetmp == 0)&&(Size!=0))
 800ad8e:	d10b      	bne.n	800ada8 <HAL_I2C_Mem_Read+0xce>
 800ad90:	b165      	cbz	r5, 800adac <HAL_I2C_Mem_Read+0xd2>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 800ad92:	4653      	mov	r3, sl
 800ad94:	4632      	mov	r2, r6
 800ad96:	2180      	movs	r1, #128	; 0x80
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f7ff fdd2 	bl	800a942 <I2C_WaitOnFlagUntilTimeout>
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d1cb      	bne.n	800ad3a <HAL_I2C_Mem_Read+0x60>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ada2:	9600      	str	r6, [sp, #0]
        if(Size > 255)
 800ada4:	2dff      	cmp	r5, #255	; 0xff
 800ada6:	e7d1      	b.n	800ad4c <HAL_I2C_Mem_Read+0x72>
    }while(Size > 0);
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	d1e1      	bne.n	800ad70 <HAL_I2C_Mem_Read+0x96>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800adac:	2119      	movs	r1, #25
 800adae:	4620      	mov	r0, r4
 800adb0:	f7ff fdf9 	bl	800a9a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800adb4:	b110      	cbz	r0, 800adbc <HAL_I2C_Mem_Read+0xe2>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adb6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800adba:	e7bc      	b.n	800ad36 <HAL_I2C_Mem_Read+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adbc:	6823      	ldr	r3, [r4, #0]
 800adbe:	2220      	movs	r2, #32
 800adc0:	61da      	str	r2, [r3, #28]
    __HAL_I2C_RESET_CR2(hi2c);
 800adc2:	685a      	ldr	r2, [r3, #4]
 800adc4:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800adc8:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800adcc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800add0:	f022 0201 	bic.w	r2, r2, #1
 800add4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800add6:	2301      	movs	r3, #1
 800add8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hi2c);
 800addc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_OK;
 800ade0:	4607      	mov	r7, r0
 800ade2:	e7ab      	b.n	800ad3c <HAL_I2C_Mem_Read+0x62>
    return HAL_BUSY;
 800ade4:	2702      	movs	r7, #2
 800ade6:	e7a9      	b.n	800ad3c <HAL_I2C_Mem_Read+0x62>

0800ade8 <HAL_I2C_GetState>:
  return hi2c->State;
 800ade8:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800adec:	4770      	bx	lr

0800adee <SPI_WaitFifoStateUntilTimeout.part.0>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adee:	6803      	ldr	r3, [r0, #0]
 800adf0:	685a      	ldr	r2, [r3, #4]
 800adf2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800adf6:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adf8:	6842      	ldr	r2, [r0, #4]
 800adfa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800adfe:	d10a      	bne.n	800ae16 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
 800ae00:	6882      	ldr	r2, [r0, #8]
 800ae02:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800ae06:	d002      	beq.n	800ae0e <SPI_WaitFifoStateUntilTimeout.part.0+0x20>
 800ae08:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800ae0c:	d103      	bne.n	800ae16 <SPI_WaitFifoStateUntilTimeout.part.0+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae14:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800ae16:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ae18:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800ae1c:	d107      	bne.n	800ae2e <SPI_WaitFifoStateUntilTimeout.part.0+0x40>
        {
          __HAL_SPI_RESET_CRC(hspi);
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae2c:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae32:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
      }
    }
  }
  
  return HAL_OK;      
}
 800ae36:	2003      	movs	r0, #3
 800ae38:	4770      	bx	lr

0800ae3a <SPI_WaitFlagStateUntilTimeout>:
{
 800ae3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae3e:	4605      	mov	r5, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	4616      	mov	r6, r2
 800ae44:	461c      	mov	r4, r3
  uint32_t tickstart = HAL_GetTick();
 800ae46:	f7fe fc6d 	bl	8009724 <HAL_GetTick>
 800ae4a:	4680      	mov	r8, r0
  while((hspi->Instance->SR & Flag) != State)
 800ae4c:	682a      	ldr	r2, [r5, #0]
 800ae4e:	6893      	ldr	r3, [r2, #8]
 800ae50:	403b      	ands	r3, r7
 800ae52:	42b3      	cmp	r3, r6
 800ae54:	d102      	bne.n	800ae5c <SPI_WaitFlagStateUntilTimeout+0x22>
}
 800ae56:	2000      	movs	r0, #0
 800ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800ae5c:	1c63      	adds	r3, r4, #1
 800ae5e:	d0f6      	beq.n	800ae4e <SPI_WaitFlagStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ae60:	b924      	cbnz	r4, 800ae6c <SPI_WaitFlagStateUntilTimeout+0x32>
 800ae62:	4628      	mov	r0, r5
}
 800ae64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae68:	f7ff bfc1 	b.w	800adee <SPI_WaitFifoStateUntilTimeout.part.0>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800ae6c:	f7fe fc5a 	bl	8009724 <HAL_GetTick>
 800ae70:	eba0 0008 	sub.w	r0, r0, r8
 800ae74:	42a0      	cmp	r0, r4
 800ae76:	d9e9      	bls.n	800ae4c <SPI_WaitFlagStateUntilTimeout+0x12>
 800ae78:	e7f3      	b.n	800ae62 <SPI_WaitFlagStateUntilTimeout+0x28>

0800ae7a <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800ae7a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ae7e:	4607      	mov	r7, r0
 800ae80:	460e      	mov	r6, r1
 800ae82:	4615      	mov	r5, r2
 800ae84:	461c      	mov	r4, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 800ae86:	f7fe fc4d 	bl	8009724 <HAL_GetTick>
 800ae8a:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	6893      	ldr	r3, [r2, #8]
 800ae90:	4033      	ands	r3, r6
 800ae92:	42ab      	cmp	r3, r5
 800ae94:	d103      	bne.n	800ae9e <SPI_WaitFifoStateUntilTimeout+0x24>
      }
    }
  }
  
  return HAL_OK;      
}
 800ae96:	2000      	movs	r0, #0
 800ae98:	b002      	add	sp, #8
 800ae9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ae9e:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 800aea2:	d104      	bne.n	800aeae <SPI_WaitFifoStateUntilTimeout+0x34>
 800aea4:	b91d      	cbnz	r5, 800aeae <SPI_WaitFifoStateUntilTimeout+0x34>
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 800aea6:	7b13      	ldrb	r3, [r2, #12]
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	f88d 3007 	strb.w	r3, [sp, #7]
    if(Timeout != HAL_MAX_DELAY)
 800aeae:	1c63      	adds	r3, r4, #1
 800aeb0:	d0ed      	beq.n	800ae8e <SPI_WaitFifoStateUntilTimeout+0x14>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aeb2:	b92c      	cbnz	r4, 800aec0 <SPI_WaitFifoStateUntilTimeout+0x46>
 800aeb4:	4638      	mov	r0, r7
}
 800aeb6:	b002      	add	sp, #8
 800aeb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	f7ff bf97 	b.w	800adee <SPI_WaitFifoStateUntilTimeout.part.0>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800aec0:	f7fe fc30 	bl	8009724 <HAL_GetTick>
 800aec4:	eba0 0008 	sub.w	r0, r0, r8
 800aec8:	42a0      	cmp	r0, r4
 800aeca:	d9df      	bls.n	800ae8c <SPI_WaitFifoStateUntilTimeout+0x12>
 800aecc:	e7f2      	b.n	800aeb4 <SPI_WaitFifoStateUntilTimeout+0x3a>

0800aece <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800aece:	b513      	push	{r0, r1, r4, lr}
 800aed0:	460b      	mov	r3, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800aed2:	9101      	str	r1, [sp, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800aeda:	4604      	mov	r4, r0
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 800aedc:	f7ff ffcd 	bl	800ae7a <SPI_WaitFifoStateUntilTimeout>
 800aee0:	9b01      	ldr	r3, [sp, #4]
 800aee2:	4602      	mov	r2, r0
 800aee4:	b138      	cbz	r0, 800aef6 <SPI_EndRxTxTransaction+0x28>
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800aee6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800aeea:	f043 0320 	orr.w	r3, r3, #32
 800aeee:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 800aef2:	2003      	movs	r0, #3
 800aef4:	e00f      	b.n	800af16 <SPI_EndRxTxTransaction+0x48>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 800aef6:	2180      	movs	r1, #128	; 0x80
 800aef8:	4620      	mov	r0, r4
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	f7ff ff9d 	bl	800ae3a <SPI_WaitFlagStateUntilTimeout>
 800af00:	9b01      	ldr	r3, [sp, #4]
 800af02:	4602      	mov	r2, r0
 800af04:	2800      	cmp	r0, #0
 800af06:	d1ee      	bne.n	800aee6 <SPI_EndRxTxTransaction+0x18>
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 800af08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af0c:	4620      	mov	r0, r4
 800af0e:	f7ff ffb4 	bl	800ae7a <SPI_WaitFifoStateUntilTimeout>
 800af12:	2800      	cmp	r0, #0
 800af14:	d1e7      	bne.n	800aee6 <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 800af16:	b002      	add	sp, #8
 800af18:	bd10      	pop	{r4, pc}

0800af1a <HAL_SPI_MspInit>:
}
 800af1a:	4770      	bx	lr

0800af1c <HAL_SPI_Init>:
{
 800af1c:	b570      	push	{r4, r5, r6, lr}
  if(hspi == NULL)
 800af1e:	4604      	mov	r4, r0
 800af20:	2800      	cmp	r0, #0
 800af22:	d047      	beq.n	800afb4 <HAL_SPI_Init+0x98>
  hspi->State = HAL_SPI_STATE_BUSY;
 800af24:	2302      	movs	r3, #2
 800af26:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_MspInit(hspi);
 800af2a:	f7ff fff6 	bl	800af1a <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800af2e:	6822      	ldr	r2, [r4, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af30:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800af32:	6813      	ldr	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af34:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800af38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af3c:	6013      	str	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af3e:	f04f 0300 	mov.w	r3, #0
 800af42:	d839      	bhi.n	800afb8 <HAL_SPI_Init+0x9c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800af44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800af48:	d000      	beq.n	800af4c <HAL_SPI_Init+0x30>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800af4a:	62a3      	str	r3, [r4, #40]	; 0x28
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800af4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af4e:	b92b      	cbnz	r3, 800af5c <HAL_SPI_Init+0x40>
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800af50:	f5b5 6fe0 	cmp.w	r5, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800af54:	bf8c      	ite	hi
 800af56:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800af58:	2301      	movls	r3, #1
 800af5a:	6323      	str	r3, [r4, #48]	; 0x30
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800af5c:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 800af60:	4333      	orrs	r3, r6
 800af62:	6926      	ldr	r6, [r4, #16]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800af64:	69a0      	ldr	r0, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800af66:	4333      	orrs	r3, r6
 800af68:	6966      	ldr	r6, [r4, #20]
 800af6a:	4333      	orrs	r3, r6
 800af6c:	69e6      	ldr	r6, [r4, #28]
 800af6e:	4333      	orrs	r3, r6
 800af70:	6a26      	ldr	r6, [r4, #32]
 800af72:	4333      	orrs	r3, r6
 800af74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af76:	4333      	orrs	r3, r6
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800af78:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800af7c:	4333      	orrs	r3, r6
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 800af7e:	6013      	str	r3, [r2, #0]
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800af80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af82:	2b02      	cmp	r3, #2
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 800af84:	bf02      	ittt	eq
 800af86:	6813      	ldreq	r3, [r2, #0]
 800af88:	f443 6300 	orreq.w	r3, r3, #2048	; 0x800
 800af8c:	6013      	streq	r3, [r2, #0]
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af90:	432b      	orrs	r3, r5
 800af92:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800af94:	0c00      	lsrs	r0, r0, #16
 800af96:	f000 0004 	and.w	r0, r0, #4
 800af9a:	432b      	orrs	r3, r5
 800af9c:	4303      	orrs	r3, r0
                         hspi->Init.DataSize ) | frxth;
 800af9e:	430b      	orrs	r3, r1
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 800afa0:	6053      	str	r3, [r2, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800afa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800afa4:	6113      	str	r3, [r2, #16]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afa6:	2000      	movs	r0, #0
  hspi->State= HAL_SPI_STATE_READY;
 800afa8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afaa:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 800afae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800afb4:	2001      	movs	r0, #1
 800afb6:	e7fc      	b.n	800afb2 <HAL_SPI_Init+0x96>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800afb8:	4619      	mov	r1, r3
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 800afba:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
 800afbe:	e7c3      	b.n	800af48 <HAL_SPI_Init+0x2c>

0800afc0 <HAL_SPI_MspDeInit>:
 800afc0:	4770      	bx	lr

0800afc2 <HAL_SPI_DeInit>:
{
 800afc2:	b510      	push	{r4, lr}
  if(hspi == NULL)
 800afc4:	4604      	mov	r4, r0
 800afc6:	b178      	cbz	r0, 800afe8 <HAL_SPI_DeInit+0x26>
  __HAL_SPI_DISABLE(hspi);
 800afc8:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800afca:	2302      	movs	r3, #2
 800afcc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800afd0:	6813      	ldr	r3, [r2, #0]
 800afd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd6:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 800afd8:	f7ff fff2 	bl	800afc0 <HAL_SPI_MspDeInit>
  __HAL_UNLOCK(hspi);
 800afdc:	2000      	movs	r0, #0
 800afde:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800afe2:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 800afe6:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800afe8:	2001      	movs	r0, #1
 800afea:	e7fc      	b.n	800afe6 <HAL_SPI_DeInit+0x24>

0800afec <HAL_SPI_TransmitReceive>:
{
 800afec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hspi->State != HAL_SPI_STATE_READY) 
 800aff0:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
{
 800aff4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800aff6:	f04f 0b00 	mov.w	fp, #0
  if(hspi->State != HAL_SPI_STATE_READY) 
 800affa:	2f01      	cmp	r7, #1
{
 800affc:	4604      	mov	r4, r0
 800affe:	4689      	mov	r9, r1
 800b000:	4692      	mov	sl, r2
 800b002:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 800b004:	f8ad b006 	strh.w	fp, [sp, #6]
  if(hspi->State != HAL_SPI_STATE_READY) 
 800b008:	d004      	beq.n	800b014 <HAL_SPI_TransmitReceive+0x28>
    return HAL_BUSY;
 800b00a:	2702      	movs	r7, #2
}
 800b00c:	4638      	mov	r0, r7
 800b00e:	b003      	add	sp, #12
 800b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 800b014:	2900      	cmp	r1, #0
 800b016:	d0f9      	beq.n	800b00c <HAL_SPI_TransmitReceive+0x20>
 800b018:	2a00      	cmp	r2, #0
 800b01a:	d0f7      	beq.n	800b00c <HAL_SPI_TransmitReceive+0x20>
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d0f5      	beq.n	800b00c <HAL_SPI_TransmitReceive+0x20>
  tickstart = HAL_GetTick();
 800b020:	f7fe fb80 	bl	8009724 <HAL_GetTick>
  __HAL_LOCK(hspi); 
 800b024:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800b028:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800b02a:	4680      	mov	r8, r0
  __HAL_LOCK(hspi); 
 800b02c:	d0ed      	beq.n	800b00a <HAL_SPI_TransmitReceive+0x1e>
 800b02e:	f240 5301 	movw	r3, #1281	; 0x501
 800b032:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b036:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b038:	6822      	ldr	r2, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b03a:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b03e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->pRxBuffPtr  = pRxData;
 800b042:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800b046:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800b04a:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 800b04e:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800b052:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 800b054:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b056:	d107      	bne.n	800b068 <HAL_SPI_TransmitReceive+0x7c>
    __HAL_SPI_RESET_CRC(hspi);
 800b058:	6813      	ldr	r3, [r2, #0]
 800b05a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	6813      	ldr	r3, [r2, #0]
 800b062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b066:	6013      	str	r3, [r2, #0]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b068:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b06a:	6853      	ldr	r3, [r2, #4]
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 800b06c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b070:	d801      	bhi.n	800b076 <HAL_SPI_TransmitReceive+0x8a>
 800b072:	2e01      	cmp	r6, #1
 800b074:	d914      	bls.n	800b0a0 <HAL_SPI_TransmitReceive+0xb4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b07a:	6053      	str	r3, [r2, #4]
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800b07c:	6813      	ldr	r3, [r2, #0]
 800b07e:	0658      	lsls	r0, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800b080:	bf5e      	ittt	pl
 800b082:	6813      	ldrpl	r3, [r2, #0]
 800b084:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800b088:	6013      	strpl	r3, [r2, #0]
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b08a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b08e:	d83d      	bhi.n	800b10c <HAL_SPI_TransmitReceive+0x120>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 800b090:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b092:	2a00      	cmp	r2, #0
 800b094:	d175      	bne.n	800b182 <HAL_SPI_TransmitReceive+0x196>
 800b096:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d17e      	bne.n	800b19c <HAL_SPI_TransmitReceive+0x1b0>
 800b09e:	e03c      	b.n	800b11a <HAL_SPI_TransmitReceive+0x12e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b0a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b0a4:	e7e9      	b.n	800b07a <HAL_SPI_TransmitReceive+0x8e>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b0a6:	6822      	ldr	r2, [r4, #0]
 800b0a8:	6891      	ldr	r1, [r2, #8]
 800b0aa:	0789      	lsls	r1, r1, #30
 800b0ac:	d510      	bpl.n	800b0d0 <HAL_SPI_TransmitReceive+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b0b0:	3b01      	subs	r3, #1
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0b2:	f831 6b02 	ldrh.w	r6, [r1], #2
 800b0b6:	60d6      	str	r6, [r2, #12]
        hspi->TxXferCount--;
 800b0b8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0ba:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800b0bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800b0be:	b93b      	cbnz	r3, 800b0d0 <HAL_SPI_TransmitReceive+0xe4>
 800b0c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b0c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b0c6:	bf02      	ittt	eq
 800b0c8:	6813      	ldreq	r3, [r2, #0]
 800b0ca:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b0ce:	6013      	streq	r3, [r2, #0]
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b0d0:	b168      	cbz	r0, 800b0ee <HAL_SPI_TransmitReceive+0x102>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	689a      	ldr	r2, [r3, #8]
 800b0d6:	07d2      	lsls	r2, r2, #31
 800b0d8:	d509      	bpl.n	800b0ee <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b0da:	68da      	ldr	r2, [r3, #12]
 800b0dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0de:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b0e2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800b0e4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if(Timeout != HAL_MAX_DELAY)
 800b0ee:	1c6b      	adds	r3, r5, #1
 800b0f0:	d00c      	beq.n	800b10c <HAL_SPI_TransmitReceive+0x120>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b0f2:	b92d      	cbnz	r5, 800b100 <HAL_SPI_TransmitReceive+0x114>
          __HAL_UNLOCK(hspi);
 800b0f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    return HAL_TIMEOUT;
 800b0fc:	2703      	movs	r7, #3
 800b0fe:	e785      	b.n	800b00c <HAL_SPI_TransmitReceive+0x20>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 800b100:	f7fe fb10 	bl	8009724 <HAL_GetTick>
 800b104:	eba0 0008 	sub.w	r0, r0, r8
 800b108:	42a8      	cmp	r0, r5
 800b10a:	d8f3      	bhi.n	800b0f4 <HAL_SPI_TransmitReceive+0x108>
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 800b10c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b10e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1c7      	bne.n	800b0a6 <HAL_SPI_TransmitReceive+0xba>
 800b116:	2800      	cmp	r0, #0
 800b118:	d1db      	bne.n	800b0d2 <HAL_SPI_TransmitReceive+0xe6>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 800b11a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b11c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b120:	d115      	bne.n	800b14e <HAL_SPI_TransmitReceive+0x162>
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 800b122:	2202      	movs	r2, #2
 800b124:	462b      	mov	r3, r5
 800b126:	4611      	mov	r1, r2
 800b128:	4620      	mov	r0, r4
 800b12a:	f7ff fe86 	bl	800ae3a <SPI_WaitFlagStateUntilTimeout>
 800b12e:	b128      	cbz	r0, 800b13c <HAL_SPI_TransmitReceive+0x150>
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b130:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b134:	f043 0302 	orr.w	r3, r3, #2
 800b138:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b13c:	68e2      	ldr	r2, [r4, #12]
 800b13e:	6823      	ldr	r3, [r4, #0]
 800b140:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800b144:	d16f      	bne.n	800b226 <HAL_SPI_TransmitReceive+0x23a>
      tmpreg = hspi->Instance->DR;
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	b29b      	uxth	r3, r3
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b14a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 800b14e:	4629      	mov	r1, r5
 800b150:	4620      	mov	r0, r4
 800b152:	f7ff febc 	bl	800aece <SPI_EndRxTxTransaction>
 800b156:	2800      	cmp	r0, #0
 800b158:	d1d0      	bne.n	800b0fc <HAL_SPI_TransmitReceive+0x110>
  hspi->State = HAL_SPI_STATE_READY;
 800b15a:	2301      	movs	r3, #1
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b15c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 800b15e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800b162:	688a      	ldr	r2, [r1, #8]
 800b164:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b168:	f012 0210 	ands.w	r2, r2, #16
 800b16c:	d070      	beq.n	800b250 <HAL_SPI_TransmitReceive+0x264>
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b16e:	f043 0302 	orr.w	r3, r3, #2
 800b172:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800b176:	f06f 0310 	mvn.w	r3, #16
 800b17a:	608b      	str	r3, [r1, #8]
    __HAL_UNLOCK(hspi);
 800b17c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800b180:	e744      	b.n	800b00c <HAL_SPI_TransmitReceive+0x20>
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 800b182:	6821      	ldr	r1, [r4, #0]
 800b184:	688b      	ldr	r3, [r1, #8]
 800b186:	079e      	lsls	r6, r3, #30
 800b188:	d508      	bpl.n	800b19c <HAL_SPI_TransmitReceive+0x1b0>
        if(hspi->TxXferCount > 2)
 800b18a:	2a02      	cmp	r2, #2
 800b18c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b18e:	d92c      	bls.n	800b1ea <HAL_SPI_TransmitReceive+0x1fe>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800b190:	f833 0b02 	ldrh.w	r0, [r3], #2
 800b194:	60c8      	str	r0, [r1, #12]
          hspi->TxXferCount -= 2;
 800b196:	3a02      	subs	r2, #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b198:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2;
 800b19a:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 800b19c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 800b1a0:	b1b1      	cbz	r1, 800b1d0 <HAL_SPI_TransmitReceive+0x1e4>
 800b1a2:	6822      	ldr	r2, [r4, #0]
 800b1a4:	6893      	ldr	r3, [r2, #8]
 800b1a6:	07d8      	lsls	r0, r3, #31
 800b1a8:	d512      	bpl.n	800b1d0 <HAL_SPI_TransmitReceive+0x1e4>
        if(hspi->RxXferCount > 1)
 800b1aa:	2901      	cmp	r1, #1
 800b1ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1ae:	d930      	bls.n	800b212 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b1b0:	68d1      	ldr	r1, [r2, #12]
 800b1b2:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b1b6:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 800b1b8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b1bc:	3b02      	subs	r3, #2
 800b1be:	b29b      	uxth	r3, r3
          if(hspi->RxXferCount <= 1)
 800b1c0:	2b01      	cmp	r3, #1
          hspi->RxXferCount -= 2;
 800b1c2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 800b1c6:	d803      	bhi.n	800b1d0 <HAL_SPI_TransmitReceive+0x1e4>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b1c8:	6853      	ldr	r3, [r2, #4]
 800b1ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b1ce:	6053      	str	r3, [r2, #4]
      if(Timeout != HAL_MAX_DELAY)
 800b1d0:	1c6b      	adds	r3, r5, #1
 800b1d2:	f43f af5d 	beq.w	800b090 <HAL_SPI_TransmitReceive+0xa4>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800b1d6:	2d00      	cmp	r5, #0
 800b1d8:	d08c      	beq.n	800b0f4 <HAL_SPI_TransmitReceive+0x108>
 800b1da:	f7fe faa3 	bl	8009724 <HAL_GetTick>
 800b1de:	eba0 0008 	sub.w	r0, r0, r8
 800b1e2:	42a8      	cmp	r0, r5
 800b1e4:	f67f af54 	bls.w	800b090 <HAL_SPI_TransmitReceive+0xa4>
 800b1e8:	e784      	b.n	800b0f4 <HAL_SPI_TransmitReceive+0x108>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	63a2      	str	r2, [r4, #56]	; 0x38
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	730b      	strb	r3, [r1, #12]
          hspi->TxXferCount--;
 800b1f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1ce      	bne.n	800b19c <HAL_SPI_TransmitReceive+0x1b0>
 800b1fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800b204:	bf01      	itttt	eq
 800b206:	6822      	ldreq	r2, [r4, #0]
 800b208:	6813      	ldreq	r3, [r2, #0]
 800b20a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800b20e:	6013      	streq	r3, [r2, #0]
 800b210:	e7c4      	b.n	800b19c <HAL_SPI_TransmitReceive+0x1b0>
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 800b212:	1c59      	adds	r1, r3, #1
 800b214:	6421      	str	r1, [r4, #64]	; 0x40
 800b216:	7b12      	ldrb	r2, [r2, #12]
 800b218:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800b21a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800b21e:	3b01      	subs	r3, #1
 800b220:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 800b224:	e7d4      	b.n	800b1d0 <HAL_SPI_TransmitReceive+0x1e4>
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b226:	6b22      	ldr	r2, [r4, #48]	; 0x30
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b228:	7b1b      	ldrb	r3, [r3, #12]
 800b22a:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800b22e:	2a02      	cmp	r2, #2
 800b230:	d18d      	bne.n	800b14e <HAL_SPI_TransmitReceive+0x162>
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 800b232:	462b      	mov	r3, r5
 800b234:	4611      	mov	r1, r2
 800b236:	4620      	mov	r0, r4
 800b238:	f7ff fdff 	bl	800ae3a <SPI_WaitFlagStateUntilTimeout>
 800b23c:	b128      	cbz	r0, 800b24a <HAL_SPI_TransmitReceive+0x25e>
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 800b23e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800b242:	f043 0302 	orr.w	r3, r3, #2
 800b246:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	7b1b      	ldrb	r3, [r3, #12]
 800b24e:	e77c      	b.n	800b14a <HAL_SPI_TransmitReceive+0x15e>
    return HAL_BUSY;
 800b250:	1e1f      	subs	r7, r3, #0
  __HAL_UNLOCK(hspi);
 800b252:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    return HAL_BUSY;
 800b256:	bf18      	it	ne
 800b258:	2701      	movne	r7, #1
 800b25a:	e6d7      	b.n	800b00c <HAL_SPI_TransmitReceive+0x20>

0800b25c <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 800b25c:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 800b260:	4770      	bx	lr

0800b262 <HAL_IWDG_MspInit>:
__weak void HAL_IWDG_MspInit(IWDG_HandleTypeDef *hiwdg)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_IWDG_MspInit could be implemented in the user file
   */
}
 800b262:	4770      	bx	lr

0800b264 <HAL_IWDG_Init>:
{
 800b264:	b538      	push	{r3, r4, r5, lr}
  if(hiwdg == NULL)
 800b266:	4604      	mov	r4, r0
 800b268:	2800      	cmp	r0, #0
 800b26a:	d048      	beq.n	800b2fe <HAL_IWDG_Init+0x9a>
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)  &&
 800b26c:	6803      	ldr	r3, [r0, #0]
 800b26e:	68da      	ldr	r2, [r3, #12]
 800b270:	07d1      	lsls	r1, r2, #31
 800b272:	d505      	bpl.n	800b280 <HAL_IWDG_Init+0x1c>
     (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)  &&
 800b274:	68da      	ldr	r2, [r3, #12]
  if((__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET)  &&
 800b276:	0792      	lsls	r2, r2, #30
 800b278:	d502      	bpl.n	800b280 <HAL_IWDG_Init+0x1c>
     (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_WVU) != RESET))
 800b27a:	68db      	ldr	r3, [r3, #12]
     (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)  &&
 800b27c:	075b      	lsls	r3, r3, #29
 800b27e:	d43e      	bmi.n	800b2fe <HAL_IWDG_Init+0x9a>
  if(hiwdg->State == HAL_IWDG_STATE_RESET)
 800b280:	7c63      	ldrb	r3, [r4, #17]
 800b282:	b913      	cbnz	r3, 800b28a <HAL_IWDG_Init+0x26>
    HAL_IWDG_MspInit(hiwdg);
 800b284:	4620      	mov	r0, r4
 800b286:	f7ff ffec 	bl	800b262 <HAL_IWDG_MspInit>
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800b28a:	2302      	movs	r3, #2
 800b28c:	7463      	strb	r3, [r4, #17]
  __HAL_IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b28e:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 800b290:	6861      	ldr	r1, [r4, #4]
  __HAL_IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	f442 42aa 	orr.w	r2, r2, #21760	; 0x5500
 800b298:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 800b29c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hiwdg->Instance->PR, IWDG_PR_PR, hiwdg->Init.Prescaler);
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	f022 0207 	bic.w	r2, r2, #7
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hiwdg->Instance->RLR, IWDG_RLR_RL, hiwdg->Init.Reload);
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	68a1      	ldr	r1, [r4, #8]
 800b2ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800b2b0:	f022 020f 	bic.w	r2, r2, #15
 800b2b4:	430a      	orrs	r2, r1
 800b2b6:	609a      	str	r2, [r3, #8]
  if (((hiwdg->Init.Window) != IWDG_WINDOW_DISABLE) || ((hiwdg->Instance->WINR) != IWDG_WINDOW_DISABLE))
 800b2b8:	68e2      	ldr	r2, [r4, #12]
 800b2ba:	f640 71ff 	movw	r1, #4095	; 0xfff
 800b2be:	428a      	cmp	r2, r1
 800b2c0:	d102      	bne.n	800b2c8 <HAL_IWDG_Init+0x64>
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d00d      	beq.n	800b2e4 <HAL_IWDG_Init+0x80>
    tickstart = HAL_GetTick();
 800b2c8:	f7fe fa2c 	bl	8009724 <HAL_GetTick>
 800b2cc:	4605      	mov	r5, r0
    while((uint32_t)(hiwdg->Instance->SR) != RESET)
 800b2ce:	6822      	ldr	r2, [r4, #0]
 800b2d0:	68d3      	ldr	r3, [r2, #12]
 800b2d2:	b95b      	cbnz	r3, 800b2ec <HAL_IWDG_Init+0x88>
    MODIFY_REG(hiwdg->Instance->WINR, IWDG_WINR_WIN, hiwdg->Init.Window);
 800b2d4:	6913      	ldr	r3, [r2, #16]
 800b2d6:	68e1      	ldr	r1, [r4, #12]
 800b2d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b2dc:	f023 030f 	bic.w	r3, r3, #15
 800b2e0:	430b      	orrs	r3, r1
 800b2e2:	6113      	str	r3, [r2, #16]
  hiwdg->State = HAL_IWDG_STATE_READY;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e007      	b.n	800b2fc <HAL_IWDG_Init+0x98>
      if((HAL_GetTick()-tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b2ec:	f7fe fa1a 	bl	8009724 <HAL_GetTick>
 800b2f0:	1b40      	subs	r0, r0, r5
 800b2f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b2f6:	d9ea      	bls.n	800b2ce <HAL_IWDG_Init+0x6a>
        hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b2f8:	2003      	movs	r0, #3
 800b2fa:	7460      	strb	r0, [r4, #17]
}
 800b2fc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b2fe:	2001      	movs	r0, #1
 800b300:	e7fc      	b.n	800b2fc <HAL_IWDG_Init+0x98>

0800b302 <HAL_IWDG_Start>:
  * @brief  Starts the IWDG.
  * @param  hiwdg: IWDG handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Start(IWDG_HandleTypeDef *hiwdg)
{
 800b302:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Process Locked */
  __HAL_LOCK(hiwdg); 
 800b304:	7c03      	ldrb	r3, [r0, #16]
 800b306:	2b01      	cmp	r3, #1
{
 800b308:	4604      	mov	r4, r0
 800b30a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hiwdg); 
 800b30e:	d030      	beq.n	800b372 <HAL_IWDG_Start+0x70>

    /* Change IWDG peripheral state */  
  hiwdg->State = HAL_IWDG_STATE_BUSY;

  /* Reload IWDG counter with value defined in the RLR register */
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800b310:	68c1      	ldr	r1, [r0, #12]
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800b312:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hiwdg); 
 800b314:	2201      	movs	r2, #1
 800b316:	7402      	strb	r2, [r0, #16]
  if ((hiwdg->Init.Window) == IWDG_WINDOW_DISABLE)
 800b318:	f640 73ff 	movw	r3, #4095	; 0xfff
 800b31c:	6802      	ldr	r2, [r0, #0]
 800b31e:	4299      	cmp	r1, r3
  {
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b320:	bf01      	itttt	eq
 800b322:	6813      	ldreq	r3, [r2, #0]
 800b324:	f443 432a 	orreq.w	r3, r3, #43520	; 0xaa00
 800b328:	f043 03aa 	orreq.w	r3, r3, #170	; 0xaa
 800b32c:	6013      	streq	r3, [r2, #0]
  }

  /* Enable the IWDG peripheral */
  __HAL_IWDG_START(hiwdg);
 800b32e:	6813      	ldr	r3, [r2, #0]
 800b330:	f443 434c 	orr.w	r3, r3, #52224	; 0xcc00
 800b334:	f043 03cc 	orr.w	r3, r3, #204	; 0xcc
 800b338:	6013      	str	r3, [r2, #0]

  tickstart = HAL_GetTick();
 800b33a:	f7fe f9f3 	bl	8009724 <HAL_GetTick>
 800b33e:	4605      	mov	r5, r0

  /* Wait until PVU, RVU, WVU flag are RESET */
  while( (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET) &&
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	68da      	ldr	r2, [r3, #12]
 800b344:	07d1      	lsls	r1, r2, #31
 800b346:	d505      	bpl.n	800b354 <HAL_IWDG_Start+0x52>
         (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET) &&
 800b348:	68da      	ldr	r2, [r3, #12]
  while( (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_PVU) != RESET) &&
 800b34a:	0792      	lsls	r2, r2, #30
 800b34c:	d502      	bpl.n	800b354 <HAL_IWDG_Start+0x52>
         (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_WVU) != RESET) )
 800b34e:	68db      	ldr	r3, [r3, #12]
         (__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET) &&
 800b350:	075b      	lsls	r3, r3, #29
 800b352:	d404      	bmi.n	800b35e <HAL_IWDG_Start+0x5c>
      return HAL_TIMEOUT;
    } 
  }

  /* Change IWDG peripheral state */    
  hiwdg->State = HAL_IWDG_STATE_READY; 
 800b354:	2301      	movs	r3, #1
 800b356:	7463      	strb	r3, [r4, #17]
                  
  /* Process Unlocked */
  __HAL_UNLOCK(hiwdg);
 800b358:	2300      	movs	r3, #0
 800b35a:	7423      	strb	r3, [r4, #16]
  
  /* Return function status */
  return HAL_OK;
 800b35c:	e009      	b.n	800b372 <HAL_IWDG_Start+0x70>
    if((HAL_GetTick()-tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b35e:	f7fe f9e1 	bl	8009724 <HAL_GetTick>
 800b362:	1b40      	subs	r0, r0, r5
 800b364:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b368:	d9ea      	bls.n	800b340 <HAL_IWDG_Start+0x3e>
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
      __HAL_UNLOCK(hiwdg);
 800b36c:	2200      	movs	r2, #0
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b36e:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hiwdg);
 800b370:	7422      	strb	r2, [r4, #16]
}
 800b372:	4618      	mov	r0, r3
 800b374:	bd38      	pop	{r3, r4, r5, pc}

0800b376 <HAL_IWDG_Refresh>:
  * @brief  Refreshes the IWDG.
  * @param  hiwdg: IWDG handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b376:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;

  /* Process Locked */
  __HAL_LOCK(hiwdg); 
 800b378:	7c03      	ldrb	r3, [r0, #16]
 800b37a:	2b01      	cmp	r3, #1
{
 800b37c:	4604      	mov	r4, r0
 800b37e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hiwdg); 
 800b382:	d01e      	beq.n	800b3c2 <HAL_IWDG_Refresh+0x4c>
 800b384:	2201      	movs	r2, #1
 800b386:	7402      	strb	r2, [r0, #16]

  /* Change IWDG peripheral state */
  hiwdg->State = HAL_IWDG_STATE_BUSY;
 800b388:	7443      	strb	r3, [r0, #17]
  
  tickstart = HAL_GetTick();
 800b38a:	f7fe f9cb 	bl	8009724 <HAL_GetTick>
 800b38e:	4605      	mov	r5, r0

  /* Wait until RVU flag is RESET */
  while(__HAL_IWDG_GET_FLAG(hiwdg, IWDG_FLAG_RVU) != RESET)
 800b390:	6821      	ldr	r1, [r4, #0]
 800b392:	68cb      	ldr	r3, [r1, #12]
 800b394:	f013 0302 	ands.w	r3, r3, #2
 800b398:	d109      	bne.n	800b3ae <HAL_IWDG_Refresh+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b39a:	680a      	ldr	r2, [r1, #0]
 800b39c:	f442 422a 	orr.w	r2, r2, #43520	; 0xaa00
 800b3a0:	f042 02aa 	orr.w	r2, r2, #170	; 0xaa
 800b3a4:	600a      	str	r2, [r1, #0]

  /* Change IWDG peripheral state */    
  hiwdg->State = HAL_IWDG_STATE_READY; 
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	7462      	strb	r2, [r4, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hiwdg);
 800b3aa:	7423      	strb	r3, [r4, #16]
  
  /* Return function status */
  return HAL_OK;
 800b3ac:	e009      	b.n	800b3c2 <HAL_IWDG_Refresh+0x4c>
    if((HAL_GetTick()-tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b3ae:	f7fe f9b9 	bl	8009724 <HAL_GetTick>
 800b3b2:	1b40      	subs	r0, r0, r5
 800b3b4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b3b8:	d9ea      	bls.n	800b390 <HAL_IWDG_Refresh+0x1a>
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b3ba:	2303      	movs	r3, #3
      __HAL_UNLOCK(hiwdg);
 800b3bc:	2200      	movs	r2, #0
      hiwdg->State = HAL_IWDG_STATE_TIMEOUT;
 800b3be:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hiwdg);
 800b3c0:	7422      	strb	r2, [r4, #16]
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	bd38      	pop	{r3, r4, r5, pc}

0800b3c6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3c6:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b3c8:	b180      	cbz	r0, 800b3ec <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b3ca:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b3ce:	b113      	cbz	r3, 800b3d6 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b3d6:	b109      	cbz	r1, 800b3dc <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 800b3d8:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 800b3e2:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b3e4:	f000 fc68 	bl	800bcb8 <USBD_LL_Init>
  
  return USBD_OK; 
 800b3e8:	2000      	movs	r0, #0
}
 800b3ea:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800b3ec:	2002      	movs	r0, #2
 800b3ee:	e7fc      	b.n	800b3ea <USBD_Init+0x24>

0800b3f0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 800b3f0:	b119      	cbz	r1, 800b3fa <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 800b3f2:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800b3fa:	2002      	movs	r0, #2
  }
  
  return status;
}
 800b3fc:	4770      	bx	lr

0800b3fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b3fe:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800b400:	f000 fc98 	bl	800bd34 <USBD_LL_Start>
  
  return USBD_OK;  
}
 800b404:	2000      	movs	r0, #0
 800b406:	bd08      	pop	{r3, pc}

0800b408 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b408:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800b40a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b40e:	b90b      	cbnz	r3, 800b414 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800b410:	2002      	movs	r0, #2
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800b412:	bd08      	pop	{r3, pc}
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4798      	blx	r3
 800b418:	2800      	cmp	r0, #0
 800b41a:	d0fa      	beq.n	800b412 <USBD_SetClassConfig+0xa>
 800b41c:	e7f8      	b.n	800b410 <USBD_SetClassConfig+0x8>

0800b41e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b41e:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800b420:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	4798      	blx	r3
  return USBD_OK;
}
 800b428:	2000      	movs	r0, #0
 800b42a:	bd08      	pop	{r3, pc}

0800b42c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b430:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800b434:	4628      	mov	r0, r5
 800b436:	f000 fa3b 	bl	800b8b0 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 800b43a:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800b43c:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800b440:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 800b444:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800b448:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800b44c:	f001 031f 	and.w	r3, r1, #31
 800b450:	2b01      	cmp	r3, #1
 800b452:	d008      	beq.n	800b466 <USBD_LL_SetupStage+0x3a>
 800b454:	2b02      	cmp	r3, #2
 800b456:	d00b      	beq.n	800b470 <USBD_LL_SetupStage+0x44>
 800b458:	b97b      	cbnz	r3, 800b47a <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 800b45a:	4629      	mov	r1, r5
 800b45c:	4620      	mov	r0, r4
 800b45e:	f000 f8c1 	bl	800b5e4 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 800b462:	2000      	movs	r0, #0
 800b464:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800b466:	4629      	mov	r1, r5
 800b468:	4620      	mov	r0, r4
 800b46a:	f000 f9b5 	bl	800b7d8 <USBD_StdItfReq>
    break;
 800b46e:	e7f8      	b.n	800b462 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 800b470:	4629      	mov	r1, r5
 800b472:	4620      	mov	r0, r4
 800b474:	f000 f9c8 	bl	800b808 <USBD_StdEPReq>
    break;
 800b478:	e7f3      	b.n	800b462 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 800b47a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800b47e:	4620      	mov	r0, r4
 800b480:	f000 fc70 	bl	800bd64 <USBD_LL_StallEP>
    break;
 800b484:	e7ed      	b.n	800b462 <USBD_LL_SetupStage+0x36>

0800b486 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 800b486:	b538      	push	{r3, r4, r5, lr}
 800b488:	4604      	mov	r4, r0
 800b48a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800b48c:	bb01      	cbnz	r1, 800b4d0 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b48e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800b492:	2b03      	cmp	r3, #3
 800b494:	d10d      	bne.n	800b4b2 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 800b496:	e9d0 1343 	ldrd	r1, r3, [r0, #268]	; 0x10c
 800b49a:	4299      	cmp	r1, r3
 800b49c:	d90b      	bls.n	800b4b6 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 800b49e:	1ac9      	subs	r1, r1, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf28      	it	cs
 800b4a4:	460b      	movcs	r3, r1
        pep->rem_length -=  pep->maxpacket;
 800b4a6:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	f000 fa51 	bl	800b954 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800b4b6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	b123      	cbz	r3, 800b4c8 <USBD_LL_DataOutStage+0x42>
 800b4be:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b4c2:	2a03      	cmp	r2, #3
 800b4c4:	d100      	bne.n	800b4c8 <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 800b4c6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f000 fa4b 	bl	800b964 <USBD_CtlSendStatus>
 800b4ce:	e7f0      	b.n	800b4b2 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 800b4d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d0eb      	beq.n	800b4b2 <USBD_LL_DataOutStage+0x2c>
 800b4da:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b4de:	2a03      	cmp	r2, #3
 800b4e0:	d1e7      	bne.n	800b4b2 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 800b4e2:	4798      	blx	r3
 800b4e4:	e7e5      	b.n	800b4b2 <USBD_LL_DataOutStage+0x2c>

0800b4e6 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800b4e6:	b570      	push	{r4, r5, r6, lr}
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800b4ec:	bbb1      	cbnz	r1, 800b55c <USBD_LL_DataInStage+0x76>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4ee:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d109      	bne.n	800b50a <USBD_LL_DataInStage+0x24>
    {
      if(pep->rem_length > pep->maxpacket)
 800b4f6:	e9d0 5307 	ldrd	r5, r3, [r0, #28]
 800b4fa:	429d      	cmp	r5, r3
 800b4fc:	d90e      	bls.n	800b51c <USBD_LL_DataInStage+0x36>
      {
        pep->rem_length -=  pep->maxpacket;
 800b4fe:	1aeb      	subs	r3, r5, r3
 800b500:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800b502:	b29a      	uxth	r2, r3
 800b504:	4631      	mov	r1, r6
 800b506:	f000 fa10 	bl	800b92a <USBD_CtlContinueSendData>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800b50a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d102      	bne.n	800b518 <USBD_LL_DataInStage+0x32>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800b518:	2000      	movs	r0, #0
 800b51a:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800b51c:	6982      	ldr	r2, [r0, #24]
 800b51e:	fbb2 f5f3 	udiv	r5, r2, r3
 800b522:	fb03 2515 	mls	r5, r3, r5, r2
 800b526:	b95d      	cbnz	r5, 800b540 <USBD_LL_DataInStage+0x5a>
 800b528:	4293      	cmp	r3, r2
 800b52a:	d809      	bhi.n	800b540 <USBD_LL_DataInStage+0x5a>
           (pep->total_length >= pep->maxpacket) &&
 800b52c:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 800b530:	429a      	cmp	r2, r3
 800b532:	d205      	bcs.n	800b540 <USBD_LL_DataInStage+0x5a>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 800b534:	462a      	mov	r2, r5
 800b536:	f000 f9f8 	bl	800b92a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800b53a:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800b53e:	e7e4      	b.n	800b50a <USBD_LL_DataInStage+0x24>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800b540:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	b12b      	cbz	r3, 800b554 <USBD_LL_DataInStage+0x6e>
 800b548:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 800b54c:	2a03      	cmp	r2, #3
 800b54e:	d101      	bne.n	800b554 <USBD_LL_DataInStage+0x6e>
            pdev->pClass->EP0_TxSent(pdev); 
 800b550:	4620      	mov	r0, r4
 800b552:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800b554:	4620      	mov	r0, r4
 800b556:	f000 fa10 	bl	800b97a <USBD_CtlReceiveStatus>
 800b55a:	e7d6      	b.n	800b50a <USBD_LL_DataInStage+0x24>
  else if((pdev->pClass->DataIn != NULL)&& 
 800b55c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0d8      	beq.n	800b518 <USBD_LL_DataInStage+0x32>
 800b566:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b56a:	2a03      	cmp	r2, #3
 800b56c:	d1d4      	bne.n	800b518 <USBD_LL_DataInStage+0x32>
    pdev->pClass->DataIn(pdev, epnum); 
 800b56e:	4798      	blx	r3
 800b570:	e7d2      	b.n	800b518 <USBD_LL_DataInStage+0x32>

0800b572 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800b572:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800b574:	2200      	movs	r2, #0
{
 800b576:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800b578:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b57a:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 800b57c:	2340      	movs	r3, #64	; 0x40
 800b57e:	f000 fbe0 	bl	800bd42 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800b582:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b584:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800b588:	2200      	movs	r2, #0
 800b58a:	2180      	movs	r1, #128	; 0x80
 800b58c:	4620      	mov	r0, r4
 800b58e:	f000 fbd8 	bl	800bd42 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b592:	2301      	movs	r3, #1
 800b594:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800b598:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b59c:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 800b59e:	b12b      	cbz	r3, 800b5ac <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 800b5a0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b5a4:	7921      	ldrb	r1, [r4, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4798      	blx	r3
 
  
  return USBD_OK;
}
 800b5ac:	2000      	movs	r0, #0
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}

0800b5b0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800b5b0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	4770      	bx	lr

0800b5b6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800b5b6:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5b8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800b5bc:	2a03      	cmp	r2, #3
 800b5be:	d104      	bne.n	800b5ca <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800b5c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	b103      	cbz	r3, 800b5ca <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800b5c8:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	bd08      	pop	{r3, pc}

0800b5ce <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800b5ce:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800b5d0:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800b5d2:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800b5d4:	f000 fbc6 	bl	800bd64 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800b5d8:	4620      	mov	r0, r4
 800b5da:	2100      	movs	r1, #0
}
 800b5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 800b5e0:	f000 bbc0 	b.w	800bd64 <USBD_LL_StallEP>

0800b5e4 <USBD_StdDevReq>:
{
 800b5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5e6:	784b      	ldrb	r3, [r1, #1]
 800b5e8:	4604      	mov	r4, r0
 800b5ea:	460d      	mov	r5, r1
 800b5ec:	2b09      	cmp	r3, #9
 800b5ee:	d876      	bhi.n	800b6de <USBD_StdDevReq+0xfa>
 800b5f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b5f4:	00e500c9 	.word	0x00e500c9
 800b5f8:	00d90075 	.word	0x00d90075
 800b5fc:	006d0075 	.word	0x006d0075
 800b600:	0075000a 	.word	0x0075000a
 800b604:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 800b608:	884b      	ldrh	r3, [r1, #2]
 800b60a:	0a1a      	lsrs	r2, r3, #8
 800b60c:	3a01      	subs	r2, #1
 800b60e:	2a06      	cmp	r2, #6
 800b610:	d865      	bhi.n	800b6de <USBD_StdDevReq+0xfa>
 800b612:	e8df f002 	tbb	[pc, r2]
 800b616:	1c04      	.short	0x1c04
 800b618:	49646429 	.word	0x49646429
 800b61c:	52          	.byte	0x52
 800b61d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b61e:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b622:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800b624:	7c20      	ldrb	r0, [r4, #16]
 800b626:	f10d 0106 	add.w	r1, sp, #6
 800b62a:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800b62c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b630:	2a00      	cmp	r2, #0
 800b632:	d067      	beq.n	800b704 <USBD_StdDevReq+0x120>
 800b634:	88eb      	ldrh	r3, [r5, #6]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d064      	beq.n	800b704 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 800b63a:	429a      	cmp	r2, r3
 800b63c:	bf28      	it	cs
 800b63e:	461a      	movcs	r2, r3
 800b640:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800b644:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 800b646:	4620      	mov	r0, r4
 800b648:	f000 f962 	bl	800b910 <USBD_CtlSendData>
    break;
 800b64c:	e05a      	b.n	800b704 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800b64e:	7c02      	ldrb	r2, [r0, #16]
 800b650:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b654:	b932      	cbnz	r2, 800b664 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b658:	f10d 0006 	add.w	r0, sp, #6
 800b65c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b65e:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b660:	7043      	strb	r3, [r0, #1]
      break; 
 800b662:	e7e3      	b.n	800b62c <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b666:	e7f7      	b.n	800b658 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800b668:	b2db      	uxtb	r3, r3
 800b66a:	2b05      	cmp	r3, #5
 800b66c:	d837      	bhi.n	800b6de <USBD_StdDevReq+0xfa>
 800b66e:	e8df f003 	tbb	[pc, r3]
 800b672:	0703      	.short	0x0703
 800b674:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800b678:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	e7d1      	b.n	800b624 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b680:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	e7cd      	b.n	800b624 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b688:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	e7c9      	b.n	800b624 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b690:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	e7c5      	b.n	800b624 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b698:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	e7c1      	b.n	800b624 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6a0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	e7bd      	b.n	800b624 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800b6a8:	7c03      	ldrb	r3, [r0, #16]
 800b6aa:	b9c3      	cbnz	r3, 800b6de <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b6ac:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b6b0:	f10d 0006 	add.w	r0, sp, #6
 800b6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b6:	4798      	blx	r3
      break;
 800b6b8:	e7b8      	b.n	800b62c <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800b6ba:	7c03      	ldrb	r3, [r0, #16]
 800b6bc:	b97b      	cbnz	r3, 800b6de <USBD_StdDevReq+0xfa>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b6be:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b6c2:	f10d 0006 	add.w	r0, sp, #6
 800b6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6ca:	2307      	movs	r3, #7
 800b6cc:	e7c8      	b.n	800b660 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800b6ce:	888b      	ldrh	r3, [r1, #4]
 800b6d0:	b92b      	cbnz	r3, 800b6de <USBD_StdDevReq+0xfa>
 800b6d2:	88cb      	ldrh	r3, [r1, #6]
 800b6d4:	b91b      	cbnz	r3, 800b6de <USBD_StdDevReq+0xfa>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800b6d6:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b6da:	2b03      	cmp	r3, #3
 800b6dc:	d103      	bne.n	800b6e6 <USBD_StdDevReq+0x102>
       USBD_CtlError(pdev , req);                     
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f7ff ff75 	bl	800b5ce <USBD_CtlError.constprop.0>
      break;
 800b6e4:	e00e      	b.n	800b704 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800b6e6:	788d      	ldrb	r5, [r1, #2]
 800b6e8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      pdev->dev_address = dev_addr;
 800b6ec:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800b6f0:	4629      	mov	r1, r5
 800b6f2:	f000 fb58 	bl	800bda6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	f000 f934 	bl	800b964 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800b6fc:	b12d      	cbz	r5, 800b70a <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800b6fe:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800b700:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800b704:	2000      	movs	r0, #0
 800b706:	b003      	add	sp, #12
 800b708:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800b70a:	2301      	movs	r3, #1
 800b70c:	e7f8      	b.n	800b700 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800b70e:	7889      	ldrb	r1, [r1, #2]
 800b710:	4d30      	ldr	r5, [pc, #192]	; (800b7d4 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800b712:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800b714:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800b716:	d8e2      	bhi.n	800b6de <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state) 
 800b718:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d00c      	beq.n	800b73a <USBD_StdDevReq+0x156>
 800b720:	2b03      	cmp	r3, #3
 800b722:	d1dc      	bne.n	800b6de <USBD_StdDevReq+0xfa>
      if (cfgidx == 0) 
 800b724:	b9b1      	cbnz	r1, 800b754 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b726:	2302      	movs	r3, #2
 800b728:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 800b72c:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 800b72e:	f7ff fe76 	bl	800b41e <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800b732:	4620      	mov	r0, r4
 800b734:	f000 f916 	bl	800b964 <USBD_CtlSendStatus>
 800b738:	e7e4      	b.n	800b704 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 800b73a:	2900      	cmp	r1, #0
 800b73c:	d0f9      	beq.n	800b732 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800b73e:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b740:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800b742:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b744:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800b748:	4620      	mov	r0, r4
 800b74a:	f7ff fe5d 	bl	800b408 <USBD_SetClassConfig>
 800b74e:	2802      	cmp	r0, #2
 800b750:	d1ef      	bne.n	800b732 <USBD_StdDevReq+0x14e>
 800b752:	e7c4      	b.n	800b6de <USBD_StdDevReq+0xfa>
      else  if (cfgidx != pdev->dev_config) 
 800b754:	6841      	ldr	r1, [r0, #4]
 800b756:	2901      	cmp	r1, #1
 800b758:	d0eb      	beq.n	800b732 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800b75a:	b2c9      	uxtb	r1, r1
 800b75c:	f7ff fe5f 	bl	800b41e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b760:	7829      	ldrb	r1, [r5, #0]
 800b762:	6061      	str	r1, [r4, #4]
 800b764:	e7f0      	b.n	800b748 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800b766:	88ca      	ldrh	r2, [r1, #6]
 800b768:	2a01      	cmp	r2, #1
 800b76a:	d1b8      	bne.n	800b6de <USBD_StdDevReq+0xfa>
    switch (pdev->dev_state )  
 800b76c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b770:	2b02      	cmp	r3, #2
 800b772:	d003      	beq.n	800b77c <USBD_StdDevReq+0x198>
 800b774:	2b03      	cmp	r3, #3
 800b776:	d1b2      	bne.n	800b6de <USBD_StdDevReq+0xfa>
      USBD_CtlSendData (pdev, 
 800b778:	1d01      	adds	r1, r0, #4
 800b77a:	e764      	b.n	800b646 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 800b77c:	4601      	mov	r1, r0
 800b77e:	2300      	movs	r3, #0
 800b780:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 800b784:	e75f      	b.n	800b646 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800b786:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b78a:	3b02      	subs	r3, #2
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d8a6      	bhi.n	800b6de <USBD_StdDevReq+0xfa>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800b790:	2301      	movs	r3, #1
 800b792:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800b794:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800b798:	b10b      	cbz	r3, 800b79e <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800b79a:	2303      	movs	r3, #3
 800b79c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f104 010c 	add.w	r1, r4, #12
 800b7a4:	e74f      	b.n	800b646 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7a6:	884b      	ldrh	r3, [r1, #2]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d1ab      	bne.n	800b704 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b7ac:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800b7b0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b7b4:	4629      	mov	r1, r5
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	4798      	blx	r3
 800b7bc:	e7b9      	b.n	800b732 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800b7be:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b7c2:	3b02      	subs	r3, #2
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d88a      	bhi.n	800b6de <USBD_StdDevReq+0xfa>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800b7c8:	884b      	ldrh	r3, [r1, #2]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d19a      	bne.n	800b704 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	e7ec      	b.n	800b7ac <USBD_StdDevReq+0x1c8>
 800b7d2:	bf00      	nop
 800b7d4:	20000e44 	.word	0x20000e44

0800b7d8 <USBD_StdItfReq>:
{
 800b7d8:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800b7da:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b7de:	2b03      	cmp	r3, #3
{
 800b7e0:	4604      	mov	r4, r0
 800b7e2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 800b7e4:	d10d      	bne.n	800b802 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800b7e6:	790b      	ldrb	r3, [r1, #4]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d80a      	bhi.n	800b802 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 800b7ec:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 800b7f4:	88eb      	ldrh	r3, [r5, #6]
 800b7f6:	b913      	cbnz	r3, 800b7fe <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f000 f8b3 	bl	800b964 <USBD_CtlSendStatus>
}
 800b7fe:	2000      	movs	r0, #0
 800b800:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800b802:	f7ff fee4 	bl	800b5ce <USBD_CtlError.constprop.0>
    break;
 800b806:	e7fa      	b.n	800b7fe <USBD_StdItfReq+0x26>

0800b808 <USBD_StdEPReq>:
{
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800b80c:	888a      	ldrh	r2, [r1, #4]
  switch (req->bRequest) 
 800b80e:	786b      	ldrb	r3, [r5, #1]
  ep_addr  = LOBYTE(req->wIndex);   
 800b810:	7909      	ldrb	r1, [r1, #4]
  switch (req->bRequest) 
 800b812:	2b01      	cmp	r3, #1
{
 800b814:	4604      	mov	r4, r0
  switch (req->bRequest) 
 800b816:	d038      	beq.n	800b88a <USBD_StdEPReq+0x82>
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d01b      	beq.n	800b854 <USBD_StdEPReq+0x4c>
 800b81c:	bb1b      	cbnz	r3, 800b866 <USBD_StdEPReq+0x5e>
    switch (pdev->dev_state) 
 800b81e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b822:	2b02      	cmp	r3, #2
 800b824:	d03f      	beq.n	800b8a6 <USBD_StdEPReq+0x9e>
 800b826:	2b03      	cmp	r3, #3
 800b828:	d11a      	bne.n	800b860 <USBD_StdEPReq+0x58>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800b82a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800b82e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800b832:	0613      	lsls	r3, r2, #24
 800b834:	bf4c      	ite	mi
 800b836:	3514      	addmi	r5, #20
 800b838:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800b83c:	f000 faa0 	bl	800bd80 <USBD_LL_IsStallEP>
 800b840:	3800      	subs	r0, #0
 800b842:	bf18      	it	ne
 800b844:	2001      	movne	r0, #1
 800b846:	6028      	str	r0, [r5, #0]
      USBD_CtlSendData (pdev,
 800b848:	2202      	movs	r2, #2
 800b84a:	4629      	mov	r1, r5
 800b84c:	4620      	mov	r0, r4
 800b84e:	f000 f85f 	bl	800b910 <USBD_CtlSendData>
      break;
 800b852:	e008      	b.n	800b866 <USBD_StdEPReq+0x5e>
    switch (pdev->dev_state) 
 800b854:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b858:	2b02      	cmp	r3, #2
 800b85a:	d024      	beq.n	800b8a6 <USBD_StdEPReq+0x9e>
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d004      	beq.n	800b86a <USBD_StdEPReq+0x62>
      USBD_CtlError(pdev , req);
 800b860:	4620      	mov	r0, r4
 800b862:	f7ff feb4 	bl	800b5ce <USBD_CtlError.constprop.0>
}
 800b866:	2000      	movs	r0, #0
 800b868:	bd38      	pop	{r3, r4, r5, pc}
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b86a:	886b      	ldrh	r3, [r5, #2]
 800b86c:	b91b      	cbnz	r3, 800b876 <USBD_StdEPReq+0x6e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800b86e:	064a      	lsls	r2, r1, #25
 800b870:	d001      	beq.n	800b876 <USBD_StdEPReq+0x6e>
          USBD_LL_StallEP(pdev , ep_addr);
 800b872:	f000 fa77 	bl	800bd64 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 800b876:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800b87a:	4629      	mov	r1, r5
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	4620      	mov	r0, r4
 800b880:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800b882:	4620      	mov	r0, r4
 800b884:	f000 f86e 	bl	800b964 <USBD_CtlSendStatus>
 800b888:	e7ed      	b.n	800b866 <USBD_StdEPReq+0x5e>
    switch (pdev->dev_state) 
 800b88a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d009      	beq.n	800b8a6 <USBD_StdEPReq+0x9e>
 800b892:	2b03      	cmp	r3, #3
 800b894:	d1e4      	bne.n	800b860 <USBD_StdEPReq+0x58>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800b896:	886b      	ldrh	r3, [r5, #2]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e4      	bne.n	800b866 <USBD_StdEPReq+0x5e>
        if ((ep_addr & 0x7F) != 0x00) 
 800b89c:	064b      	lsls	r3, r1, #25
 800b89e:	d0f0      	beq.n	800b882 <USBD_StdEPReq+0x7a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800b8a0:	f000 fa67 	bl	800bd72 <USBD_LL_ClearStallEP>
 800b8a4:	e7e7      	b.n	800b876 <USBD_StdEPReq+0x6e>
      if ((ep_addr & 0x7F) != 0x00) 
 800b8a6:	064a      	lsls	r2, r1, #25
 800b8a8:	d0dd      	beq.n	800b866 <USBD_StdEPReq+0x5e>
        USBD_LL_StallEP(pdev , ep_addr);
 800b8aa:	f000 fa5b 	bl	800bd64 <USBD_LL_StallEP>
 800b8ae:	e7da      	b.n	800b866 <USBD_StdEPReq+0x5e>

0800b8b0 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b8b0:	780b      	ldrb	r3, [r1, #0]
 800b8b2:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b8b4:	784b      	ldrb	r3, [r1, #1]
 800b8b6:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b8b8:	78ca      	ldrb	r2, [r1, #3]
 800b8ba:	788b      	ldrb	r3, [r1, #2]
 800b8bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b8c0:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b8c2:	794a      	ldrb	r2, [r1, #5]
 800b8c4:	790b      	ldrb	r3, [r1, #4]
 800b8c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b8ca:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b8cc:	79ca      	ldrb	r2, [r1, #7]
 800b8ce:	798b      	ldrb	r3, [r1, #6]
 800b8d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800b8d4:	80c3      	strh	r3, [r0, #6]
}
 800b8d6:	4770      	bx	lr

0800b8d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8d8:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800b8da:	b188      	cbz	r0, 800b900 <USBD_GetString+0x28>
 800b8dc:	2500      	movs	r5, #0
 800b8de:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	3501      	adds	r5, #1
 800b8e4:	5d44      	ldrb	r4, [r0, r5]
 800b8e6:	2c00      	cmp	r4, #0
 800b8e8:	d1fa      	bne.n	800b8e0 <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	005b      	lsls	r3, r3, #1
 800b8f0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800b8f2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	704b      	strb	r3, [r1, #1]
 800b8f8:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800b8fa:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b8fe:	b905      	cbnz	r5, 800b902 <USBD_GetString+0x2a>
}
 800b900:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800b902:	1c5a      	adds	r2, r3, #1
 800b904:	b2d2      	uxtb	r2, r2
 800b906:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800b908:	3302      	adds	r3, #2
 800b90a:	548c      	strb	r4, [r1, r2]
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	e7f4      	b.n	800b8fa <USBD_GetString+0x22>

0800b910 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800b910:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b912:	2402      	movs	r4, #2
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b914:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length   = len;
 800b916:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800b91a:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800b91e:	460a      	mov	r2, r1
 800b920:	2100      	movs	r1, #0
 800b922:	f000 fa47 	bl	800bdb4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b926:	2000      	movs	r0, #0
 800b928:	bd10      	pop	{r4, pc}

0800b92a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800b92a:	b508      	push	{r3, lr}
 800b92c:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800b92e:	460a      	mov	r2, r1
 800b930:	2100      	movs	r1, #0
 800b932:	f000 fa3f 	bl	800bdb4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b936:	2000      	movs	r0, #0
 800b938:	bd08      	pop	{r3, pc}

0800b93a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800b93a:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b93c:	2403      	movs	r4, #3
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800b93e:	4613      	mov	r3, r2
  pdev->ep_out[0].rem_length   = len;
 800b940:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800b944:	f8c0 41f4 	str.w	r4, [r0, #500]	; 0x1f4
  USBD_LL_PrepareReceive (pdev,
 800b948:	460a      	mov	r2, r1
 800b94a:	2100      	movs	r1, #0
 800b94c:	f000 fa39 	bl	800bdc2 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 800b950:	2000      	movs	r0, #0
 800b952:	bd10      	pop	{r4, pc}

0800b954 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800b954:	b508      	push	{r3, lr}
 800b956:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 800b958:	460a      	mov	r2, r1
 800b95a:	2100      	movs	r1, #0
 800b95c:	f000 fa31 	bl	800bdc2 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800b960:	2000      	movs	r0, #0
 800b962:	bd08      	pop	{r3, pc}

0800b964 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800b964:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b966:	2304      	movs	r3, #4
 800b968:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800b96c:	2300      	movs	r3, #0
 800b96e:	461a      	mov	r2, r3
 800b970:	4619      	mov	r1, r3
 800b972:	f000 fa1f 	bl	800bdb4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800b976:	2000      	movs	r0, #0
 800b978:	bd08      	pop	{r3, pc}

0800b97a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800b97a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800b97c:	2305      	movs	r3, #5
 800b97e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800b982:	2300      	movs	r3, #0
 800b984:	461a      	mov	r2, r3
 800b986:	4619      	mov	r1, r3
 800b988:	f000 fa1b 	bl	800bdc2 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800b98c:	2000      	movs	r0, #0
 800b98e:	bd08      	pop	{r3, pc}

0800b990 <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b990:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800b994:	b11b      	cbz	r3, 800b99e <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 800b996:	2000      	movs	r0, #0
 800b998:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 800b99c:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800b99e:	2002      	movs	r0, #2
  }
}
 800b9a0:	4770      	bx	lr

0800b9a2 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b9a2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 800b9a6:	b510      	push	{r4, lr}
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b9a8:	b16b      	cbz	r3, 800b9c6 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800b9aa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800b9ae:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800b9b2:	28ff      	cmp	r0, #255	; 0xff
 800b9b4:	d007      	beq.n	800b9c6 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800b9bc:	4621      	mov	r1, r4
 800b9be:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800b9c0:	23ff      	movs	r3, #255	; 0xff
 800b9c2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	bd10      	pop	{r4, pc}
	...

0800b9cc <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b9cc:	2343      	movs	r3, #67	; 0x43
 800b9ce:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800b9d0:	4800      	ldr	r0, [pc, #0]	; (800b9d4 <USBD_CDC_GetFSCfgDesc+0x8>)
 800b9d2:	4770      	bx	lr
 800b9d4:	20000a70 	.word	0x20000a70

0800b9d8 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b9d8:	2343      	movs	r3, #67	; 0x43
 800b9da:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800b9dc:	4800      	ldr	r0, [pc, #0]	; (800b9e0 <USBD_CDC_GetHSCfgDesc+0x8>)
 800b9de:	4770      	bx	lr
 800b9e0:	20000ab4 	.word	0x20000ab4

0800b9e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b9e4:	2343      	movs	r3, #67	; 0x43
 800b9e6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 800b9e8:	4800      	ldr	r0, [pc, #0]	; (800b9ec <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800b9ea:	4770      	bx	lr
 800b9ec:	20000b04 	.word	0x20000b04

0800b9f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b9f0:	230a      	movs	r3, #10
 800b9f2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800b9f4:	4800      	ldr	r0, [pc, #0]	; (800b9f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800b9f6:	4770      	bx	lr
 800b9f8:	20000af8 	.word	0x20000af8

0800b9fc <USBD_CDC_DataOut>:
{      
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800ba00:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ba04:	f000 f9e4 	bl	800bdd0 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 800ba08:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ba0c:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800ba10:	b14b      	cbz	r3, 800ba26 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ba12:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800ba16:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800ba20:	4798      	blx	r3
    return USBD_OK;
 800ba22:	2000      	movs	r0, #0
}
 800ba24:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800ba26:	2002      	movs	r0, #2
 800ba28:	e7fc      	b.n	800ba24 <USBD_CDC_DataOut+0x28>

0800ba2a <USBD_CDC_DeInit>:
{
 800ba2a:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 800ba2c:	2181      	movs	r1, #129	; 0x81
{
 800ba2e:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 800ba30:	f000 f991 	bl	800bd56 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800ba34:	2101      	movs	r1, #1
 800ba36:	4620      	mov	r0, r4
 800ba38:	f000 f98d 	bl	800bd56 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800ba3c:	2182      	movs	r1, #130	; 0x82
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 f989 	bl	800bd56 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800ba44:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800ba48:	b153      	cbz	r3, 800ba60 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ba4a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ba52:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800ba56:	f000 f9c5 	bl	800bde4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 800ba60:	2000      	movs	r0, #0
 800ba62:	bd10      	pop	{r4, pc}

0800ba64 <USBD_CDC_Init>:
{
 800ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ba66:	7c03      	ldrb	r3, [r0, #16]
{
 800ba68:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800ba6a:	bb7b      	cbnz	r3, 800bacc <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 800ba6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba70:	2202      	movs	r2, #2
 800ba72:	2181      	movs	r1, #129	; 0x81
 800ba74:	f000 f965 	bl	800bd42 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800ba78:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	2101      	movs	r1, #1
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 f95e 	bl	800bd42 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 800ba86:	2308      	movs	r3, #8
 800ba88:	2203      	movs	r2, #3
 800ba8a:	2182      	movs	r1, #130	; 0x82
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 f958 	bl	800bd42 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800ba92:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ba96:	f000 f9a1 	bl	800bddc <USBD_static_malloc>
 800ba9a:	4605      	mov	r5, r0
 800ba9c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800baa0:	b320      	cbz	r0, 800baec <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800baa2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
    hcdc->TxState =0;
 800baa6:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4798      	blx	r3
    hcdc->TxState =0;
 800baac:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
    hcdc->RxState =0;
 800bab0:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bab4:	7c26      	ldrb	r6, [r4, #16]
 800bab6:	b986      	cbnz	r6, 800bada <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800bab8:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800babc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bac0:	2101      	movs	r1, #1
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 f97d 	bl	800bdc2 <USBD_LL_PrepareReceive>
}
 800bac8:	4630      	mov	r0, r6
 800baca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	2202      	movs	r2, #2
 800bad0:	2181      	movs	r1, #129	; 0x81
 800bad2:	f000 f936 	bl	800bd42 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800bad6:	2340      	movs	r3, #64	; 0x40
 800bad8:	e7d0      	b.n	800ba7c <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 800bada:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	2101      	movs	r1, #1
 800bae2:	4620      	mov	r0, r4
 800bae4:	f000 f96d 	bl	800bdc2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800bae8:	463e      	mov	r6, r7
 800baea:	e7ed      	b.n	800bac8 <USBD_CDC_Init+0x64>
    ret = 1; 
 800baec:	2601      	movs	r6, #1
 800baee:	e7eb      	b.n	800bac8 <USBD_CDC_Init+0x64>

0800baf0 <USBD_CDC_Setup>:
{
 800baf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baf2:	780e      	ldrb	r6, [r1, #0]
 800baf4:	f006 0360 	and.w	r3, r6, #96	; 0x60
 800baf8:	2b20      	cmp	r3, #32
{
 800bafa:	4604      	mov	r4, r0
 800bafc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bafe:	d111      	bne.n	800bb24 <USBD_CDC_Setup+0x34>
    if (req->wLength)
 800bb00:	88ca      	ldrh	r2, [r1, #6]
 800bb02:	784b      	ldrb	r3, [r1, #1]
 800bb04:	b1c2      	cbz	r2, 800bb38 <USBD_CDC_Setup+0x48>
      if (req->bmRequest & 0x80)
 800bb06:	0636      	lsls	r6, r6, #24
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb08:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 800bb0c:	d50d      	bpl.n	800bb2a <USBD_CDC_Setup+0x3a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb0e:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 800bb12:	9101      	str	r1, [sp, #4]
 800bb14:	6886      	ldr	r6, [r0, #8]
 800bb16:	4618      	mov	r0, r3
 800bb18:	47b0      	blx	r6
          USBD_CtlSendData (pdev, 
 800bb1a:	88ea      	ldrh	r2, [r5, #6]
 800bb1c:	9901      	ldr	r1, [sp, #4]
 800bb1e:	4620      	mov	r0, r4
 800bb20:	f7ff fef6 	bl	800b910 <USBD_CtlSendData>
}
 800bb24:	2000      	movs	r0, #0
 800bb26:	b002      	add	sp, #8
 800bb28:	bd70      	pop	{r4, r5, r6, pc}
        hcdc->CmdOpCode = req->bRequest;
 800bb2a:	f881 3200 	strb.w	r3, [r1, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800bb2e:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800bb32:	f7ff ff02 	bl	800b93a <USBD_CtlPrepareRx>
 800bb36:	e7f5      	b.n	800bb24 <USBD_CDC_Setup+0x34>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bb38:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	688c      	ldr	r4, [r1, #8]
 800bb40:	4611      	mov	r1, r2
 800bb42:	47a0      	blx	r4
 800bb44:	e7ee      	b.n	800bb24 <USBD_CDC_Setup+0x34>

0800bb46 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800bb46:	b119      	cbz	r1, 800bb50 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800bb48:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800bb4c:	2000      	movs	r0, #0
 800bb4e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 800bb50:	2002      	movs	r0, #2
  }
  
  return ret;
}
 800bb52:	4770      	bx	lr

0800bb54 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb54:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 800bb58:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800bb5a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800bb5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 800bb62:	4770      	bx	lr

0800bb64 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 800bb64:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 800bb68:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800bb6a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800bb6e:	4770      	bx	lr

0800bb70 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 800bb70:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb72:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 800bb76:	b175      	cbz	r5, 800bb96 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 800bb78:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800bb7c:	b96c      	cbnz	r4, 800bb9a <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 800bb7e:	f8b5 3210 	ldrh.w	r3, [r5, #528]	; 0x210
 800bb82:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 800bb86:	2181      	movs	r1, #129	; 0x81
 800bb88:	f000 f914 	bl	800bdb4 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      return USBD_OK;
 800bb92:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 800bb94:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 800bb96:	2002      	movs	r0, #2
 800bb98:	e7fc      	b.n	800bb94 <USBD_CDC_TransmitPacket+0x24>
      return USBD_BUSY;
 800bb9a:	2001      	movs	r0, #1
 800bb9c:	e7fa      	b.n	800bb94 <USBD_CDC_TransmitPacket+0x24>

0800bb9e <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800bb9e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 800bba2:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800bba4:	b182      	cbz	r2, 800bbc8 <USBD_CDC_ReceivePacket+0x2a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800bba6:	7c04      	ldrb	r4, [r0, #16]
 800bba8:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 800bbac:	b934      	cbnz	r4, 800bbbc <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bbae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	f000 f905 	bl	800bdc2 <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 800bbb8:	4620      	mov	r0, r4
 800bbba:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800bbbc:	2340      	movs	r3, #64	; 0x40
 800bbbe:	2101      	movs	r1, #1
 800bbc0:	f000 f8ff 	bl	800bdc2 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800bbc4:	2400      	movs	r4, #0
 800bbc6:	e7f7      	b.n	800bbb8 <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 800bbc8:	2402      	movs	r4, #2
 800bbca:	e7f5      	b.n	800bbb8 <USBD_CDC_ReceivePacket+0x1a>

0800bbcc <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 800bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 800bbd0:	4c23      	ldr	r4, [pc, #140]	; (800bc60 <HAL_PCD_MspInit+0x94>)
 800bbd2:	6963      	ldr	r3, [r4, #20]
 800bbd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbd8:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800bbda:	6963      	ldr	r3, [r4, #20]
{
 800bbdc:	b086      	sub	sp, #24
  __GPIOB_CLK_ENABLE();
 800bbde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bbe2:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bbe4:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
 800bbe8:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bbea:	2500      	movs	r5, #0
 800bbec:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bbf0:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bbf2:	a901      	add	r1, sp, #4
 800bbf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800bbf8:	e9cd 6301 	strd	r6, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800bbfc:	e9cd 5803 	strd	r5, r8, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bc00:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bc02:	f7fd fe0b 	bl	800981c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800bc06:	462a      	mov	r2, r5
 800bc08:	4631      	mov	r1, r6
 800bc0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc0e:	f7fd fecf 	bl	80099b0 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800bc12:	2001      	movs	r0, #1
 800bc14:	f7fd fd8c 	bl	8009730 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800bc18:	2201      	movs	r2, #1
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bc20:	f7fd fec6 	bl	80099b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc24:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bc26:	a901      	add	r1, sp, #4
 800bc28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc2c:	e9cd 3502 	strd	r3, r5, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800bc30:	e9cd 8704 	strd	r8, r7, [sp, #16]
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800bc34:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800bc36:	f7fd fdf1 	bl	800981c <HAL_GPIO_Init>
  __USB_CLK_ENABLE();
 800bc3a:	69e3      	ldr	r3, [r4, #28]
 800bc3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc40:	61e3      	str	r3, [r4, #28]
  __SYSCFG_CLK_ENABLE();
 800bc42:	69a3      	ldr	r3, [r4, #24]
 800bc44:	f043 0301 	orr.w	r3, r3, #1
 800bc48:	61a3      	str	r3, [r4, #24]
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	2105      	movs	r1, #5
 800bc4e:	2014      	movs	r0, #20
 800bc50:	f7fd fd8e 	bl	8009770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 800bc54:	2014      	movs	r0, #20
 800bc56:	f7fd fdbf 	bl	80097d8 <HAL_NVIC_EnableIRQ>
}
 800bc5a:	b006      	add	sp, #24
 800bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc60:	40021000 	.word	0x40021000

0800bc64 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc64:	f500 71a2 	add.w	r1, r0, #324	; 0x144
 800bc68:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc6c:	f7ff bbde 	b.w	800b42c <USBD_LL_SetupStage>

0800bc70 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc70:	231c      	movs	r3, #28
 800bc72:	fb03 0301 	mla	r3, r3, r1, r0
 800bc76:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc7a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800bc7e:	f7ff bc02 	b.w	800b486 <USBD_LL_DataOutStage>

0800bc82 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc82:	231c      	movs	r3, #28
 800bc84:	fb03 0301 	mla	r3, r3, r1, r0
 800bc88:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc8e:	f7ff bc2a 	b.w	800b4e6 <USBD_LL_DataInStage>

0800bc92 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF(hpcd->pData);
 800bc92:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bc96:	f7ff bc8e 	b.w	800b5b6 <USBD_LL_SOF>

0800bc9a <HAL_PCD_ResetCallback>:
{   
 800bc9a:	b510      	push	{r4, lr}
 800bc9c:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 800bc9e:	2101      	movs	r1, #1
 800bca0:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800bca4:	f7ff fc84 	bl	800b5b0 <USBD_LL_SetSpeed>
  USBD_LL_Reset(hpcd->pData);
 800bca8:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 800bcac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 800bcb0:	f7ff bc5f 	b.w	800b572 <USBD_LL_Reset>

0800bcb4 <HAL_PCD_SuspendCallback>:
}
 800bcb4:	4770      	bx	lr

0800bcb6 <HAL_PCD_ResumeCallback>:
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_LL_Init>:
{    
 800bcb8:	b538      	push	{r3, r4, r5, lr}
  hpcd.Init.dev_endpoints = 8;
 800bcba:	4a1c      	ldr	r2, [pc, #112]	; (800bd2c <USBD_LL_Init+0x74>)
{    
 800bcbc:	4604      	mov	r4, r0
  hpcd.Instance = USB;
 800bcbe:	481c      	ldr	r0, [pc, #112]	; (800bd30 <USBD_LL_Init+0x78>)
  pdev->pData = &hpcd;
 800bcc0:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd.Init.dev_endpoints = 8;
 800bcc4:	2308      	movs	r3, #8
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcc6:	2500      	movs	r5, #0
  hpcd.Init.dev_endpoints = 8;
 800bcc8:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bccc:	2302      	movs	r3, #2
 800bcce:	e9c0 5303 	strd	r5, r3, [r0, #12]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800bcd2:	6083      	str	r3, [r0, #8]
  hpcd.pData = pdev;
 800bcd4:	f8c0 4174 	str.w	r4, [r0, #372]	; 0x174
  HAL_PCD_Init(pdev->pData);
 800bcd8:	f7fd fe80 	bl	80099dc <HAL_PCD_Init>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800bcdc:	462a      	mov	r2, r5
 800bcde:	4629      	mov	r1, r5
 800bce0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bce4:	2340      	movs	r3, #64	; 0x40
 800bce6:	f7fe fd90 	bl	800a80a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800bcea:	2380      	movs	r3, #128	; 0x80
 800bcec:	462a      	mov	r2, r5
 800bcee:	4619      	mov	r1, r3
 800bcf0:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bcf4:	f7fe fd89 	bl	800a80a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 800bcf8:	462a      	mov	r2, r5
 800bcfa:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bcfe:	23c0      	movs	r3, #192	; 0xc0
 800bd00:	2181      	movs	r1, #129	; 0x81
 800bd02:	f7fe fd82 	bl	800a80a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 800bd06:	462a      	mov	r2, r5
 800bd08:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bd0c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bd10:	2101      	movs	r1, #1
 800bd12:	f7fe fd7a 	bl	800a80a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 800bd16:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800bd1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd1e:	462a      	mov	r2, r5
 800bd20:	2182      	movs	r1, #130	; 0x82
 800bd22:	f7fe fd72 	bl	800a80a <HAL_PCDEx_PMAConfig>
}
 800bd26:	4628      	mov	r0, r5
 800bd28:	bd38      	pop	{r3, r4, r5, pc}
 800bd2a:	bf00      	nop
 800bd2c:	40005c00 	.word	0x40005c00
 800bd30:	200013e0 	.word	0x200013e0

0800bd34 <USBD_LL_Start>:
{
 800bd34:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800bd36:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd3a:	f7fd fe98 	bl	8009a6e <HAL_PCD_Start>
}
 800bd3e:	2000      	movs	r0, #0
 800bd40:	bd08      	pop	{r3, pc}

0800bd42 <USBD_LL_OpenEP>:
{
 800bd42:	b510      	push	{r4, lr}
 800bd44:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 800bd46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 800bd4a:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData,
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	f7fd feab 	bl	8009aa8 <HAL_PCD_EP_Open>
}
 800bd52:	2000      	movs	r0, #0
 800bd54:	bd10      	pop	{r4, pc}

0800bd56 <USBD_LL_CloseEP>:
{
 800bd56:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd58:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd5c:	f7fe f832 	bl	8009dc4 <HAL_PCD_EP_Close>
}
 800bd60:	2000      	movs	r0, #0
 800bd62:	bd08      	pop	{r3, pc}

0800bd64 <USBD_LL_StallEP>:
{
 800bd64:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bd66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd6a:	f7fe fc9b 	bl	800a6a4 <HAL_PCD_EP_SetStall>
}
 800bd6e:	2000      	movs	r0, #0
 800bd70:	bd08      	pop	{r3, pc}

0800bd72 <USBD_LL_ClearStallEP>:
{
 800bd72:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd74:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bd78:	f7fe fce4 	bl	800a744 <HAL_PCD_EP_ClrStall>
}
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	bd08      	pop	{r3, pc}

0800bd80 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 800bd80:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bd84:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  if((ep_addr & 0x80) == 0x80)
 800bd88:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd8c:	bf1b      	ittet	ne
 800bd8e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 800bd92:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd96:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd9a:	f891 002a 	ldrbne.w	r0, [r1, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd9e:	bf08      	it	eq
 800bda0:	f891 00b6 	ldrbeq.w	r0, [r1, #182]	; 0xb6
}
 800bda4:	4770      	bx	lr

0800bda6 <USBD_LL_SetUSBAddress>:
{
 800bda6:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bda8:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bdac:	f7fd fe65 	bl	8009a7a <HAL_PCD_SetAddress>
}
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	bd08      	pop	{r3, pc}

0800bdb4 <USBD_LL_Transmit>:
{
 800bdb4:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bdb6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bdba:	f7fe f975 	bl	800a0a8 <HAL_PCD_EP_Transmit>
}
 800bdbe:	2000      	movs	r0, #0
 800bdc0:	bd08      	pop	{r3, pc}

0800bdc2 <USBD_LL_PrepareReceive>:
{
 800bdc2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdc4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bdc8:	f7fe f8e8 	bl	8009f9c <HAL_PCD_EP_Receive>
}
 800bdcc:	2000      	movs	r0, #0
 800bdce:	bd08      	pop	{r3, pc}

0800bdd0 <USBD_LL_GetRxDataSize>:
{
 800bdd0:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800bdd2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800bdd6:	f7fe f95f 	bl	800a098 <HAL_PCD_EP_GetRxCount>
}
 800bdda:	bd08      	pop	{r3, pc}

0800bddc <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 800bddc:	4800      	ldr	r0, [pc, #0]	; (800bde0 <USBD_static_malloc+0x4>)
 800bdde:	4770      	bx	lr
 800bde0:	20000e48 	.word	0x20000e48

0800bde4 <USBD_static_free>:
 800bde4:	4770      	bx	lr
	...

0800bde8 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800bde8:	2312      	movs	r3, #18
  return (uint8_t*)hUSBDDeviceDesc;
}
 800bdea:	4801      	ldr	r0, [pc, #4]	; (800bdf0 <USBD_VCP_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 800bdec:	800b      	strh	r3, [r1, #0]
}
 800bdee:	4770      	bx	lr
 800bdf0:	0801ca49 	.word	0x0801ca49

0800bdf4 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 800bdf4:	2304      	movs	r3, #4
  return (uint8_t*)USBD_LangIDDesc;
}
 800bdf6:	4801      	ldr	r0, [pc, #4]	; (800bdfc <USBD_VCP_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);  
 800bdf8:	800b      	strh	r3, [r1, #0]
}
 800bdfa:	4770      	bx	lr
 800bdfc:	0801ca45 	.word	0x0801ca45

0800be00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800be00:	2300      	movs	r3, #0
 800be02:	b570      	push	{r4, r5, r6, lr}
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 800be04:	1c4d      	adds	r5, r1, #1
 800be06:	461e      	mov	r6, r3
    if( ((value >> 28)) < 0xA )
 800be08:	0f04      	lsrs	r4, r0, #28
 800be0a:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[ 2* idx] = (value >> 28) + '0';
 800be0e:	bf34      	ite	cc
 800be10:	3430      	addcc	r4, #48	; 0x30
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800be12:	3437      	addcs	r4, #55	; 0x37
 800be14:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[ 2* idx + 1] = 0;
 800be18:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
 800be1c:	3301      	adds	r3, #1
  for( idx = 0 ; idx < len ; idx ++)
 800be1e:	b2dc      	uxtb	r4, r3
 800be20:	42a2      	cmp	r2, r4
    value = value << 4;
 800be22:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for( idx = 0 ; idx < len ; idx ++)
 800be26:	d8ef      	bhi.n	800be08 <IntToUnicode+0x8>
  }
}
 800be28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be2c <USBD_VCP_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800be2c:	231a      	movs	r3, #26
{
 800be2e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800be30:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 800be32:	4b09      	ldr	r3, [pc, #36]	; (800be58 <USBD_VCP_SerialStrDescriptor+0x2c>)
 800be34:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 800be36:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 800be38:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800be3a:	18c0      	adds	r0, r0, r3
 800be3c:	d00a      	beq.n	800be54 <USBD_VCP_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800be3e:	4b07      	ldr	r3, [pc, #28]	; (800be5c <USBD_VCP_SerialStrDescriptor+0x30>)
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800be40:	4907      	ldr	r1, [pc, #28]	; (800be60 <USBD_VCP_SerialStrDescriptor+0x34>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 800be42:	681c      	ldr	r4, [r3, #0]
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 800be44:	2208      	movs	r2, #8
 800be46:	f7ff ffdb 	bl	800be00 <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 800be4a:	4906      	ldr	r1, [pc, #24]	; (800be64 <USBD_VCP_SerialStrDescriptor+0x38>)
 800be4c:	2204      	movs	r2, #4
 800be4e:	4620      	mov	r0, r4
 800be50:	f7ff ffd6 	bl	800be00 <IntToUnicode>
}
 800be54:	4804      	ldr	r0, [pc, #16]	; (800be68 <USBD_VCP_SerialStrDescriptor+0x3c>)
 800be56:	bd10      	pop	{r4, pc}
 800be58:	1ffff7ac 	.word	0x1ffff7ac
 800be5c:	1ffff7b0 	.word	0x1ffff7b0
 800be60:	20000b49 	.word	0x20000b49
 800be64:	20000b59 	.word	0x20000b59
 800be68:	20000b47 	.word	0x20000b47

0800be6c <USBD_VCP_ProductStrDescriptor>:
{
 800be6c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800be6e:	4c04      	ldr	r4, [pc, #16]	; (800be80 <USBD_VCP_ProductStrDescriptor+0x14>)
 800be70:	4804      	ldr	r0, [pc, #16]	; (800be84 <USBD_VCP_ProductStrDescriptor+0x18>)
{
 800be72:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 800be74:	4621      	mov	r1, r4
 800be76:	f7ff fd2f 	bl	800b8d8 <USBD_GetString>
}
 800be7a:	4620      	mov	r0, r4
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	bf00      	nop
 800be80:	20001558 	.word	0x20001558
 800be84:	0801c9f8 	.word	0x0801c9f8

0800be88 <USBD_VCP_ManufacturerStrDescriptor>:
{
 800be88:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be8a:	4c04      	ldr	r4, [pc, #16]	; (800be9c <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 800be8c:	4804      	ldr	r0, [pc, #16]	; (800bea0 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
{
 800be8e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be90:	4621      	mov	r1, r4
 800be92:	f7ff fd21 	bl	800b8d8 <USBD_GetString>
}
 800be96:	4620      	mov	r0, r4
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	bf00      	nop
 800be9c:	20001558 	.word	0x20001558
 800bea0:	0801ca19 	.word	0x0801ca19

0800bea4 <USBD_VCP_ConfigStrDescriptor>:
{
 800bea4:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800bea6:	4c04      	ldr	r4, [pc, #16]	; (800beb8 <USBD_VCP_ConfigStrDescriptor+0x14>)
 800bea8:	4804      	ldr	r0, [pc, #16]	; (800bebc <USBD_VCP_ConfigStrDescriptor+0x18>)
{
 800beaa:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800beac:	4621      	mov	r1, r4
 800beae:	f7ff fd13 	bl	800b8d8 <USBD_GetString>
}
 800beb2:	4620      	mov	r0, r4
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	bf00      	nop
 800beb8:	20001558 	.word	0x20001558
 800bebc:	0801ca2c 	.word	0x0801ca2c

0800bec0 <USBD_VCP_InterfaceStrDescriptor>:
{
 800bec0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800bec2:	4c04      	ldr	r4, [pc, #16]	; (800bed4 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 800bec4:	4804      	ldr	r0, [pc, #16]	; (800bed8 <USBD_VCP_InterfaceStrDescriptor+0x18>)
{
 800bec6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800bec8:	4621      	mov	r1, r4
 800beca:	f7ff fd05 	bl	800b8d8 <USBD_GetString>
}
 800bece:	4620      	mov	r0, r4
 800bed0:	bd10      	pop	{r4, pc}
 800bed2:	bf00      	nop
 800bed4:	20001558 	.word	0x20001558
 800bed8:	0801ca37 	.word	0x0801ca37

0800bedc <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 800bedc:	2000      	movs	r0, #0
 800bede:	4770      	bx	lr

0800bee0 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 800bee0:	b508      	push	{r3, lr}
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800bee2:	680a      	ldr	r2, [r1, #0]
 800bee4:	4601      	mov	r1, r0
 800bee6:	2000      	movs	r0, #0
 800bee8:	f7fc fc4a 	bl	8008780 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 800beec:	4802      	ldr	r0, [pc, #8]	; (800bef8 <CDC_Itf_Receive+0x18>)
 800beee:	f7ff fe56 	bl	800bb9e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800bef2:	2000      	movs	r0, #0
 800bef4:	bd08      	pop	{r3, pc}
 800bef6:	bf00      	nop
 800bef8:	200011b8 	.word	0x200011b8

0800befc <CDC_Itf_Init>:
{
 800befc:	b508      	push	{r3, lr}
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 800befe:	4903      	ldr	r1, [pc, #12]	; (800bf0c <CDC_Itf_Init+0x10>)
 800bf00:	4803      	ldr	r0, [pc, #12]	; (800bf10 <CDC_Itf_Init+0x14>)
 800bf02:	f7ff fe2f 	bl	800bb64 <USBD_CDC_SetRxBuffer>
}
 800bf06:	2000      	movs	r0, #0
 800bf08:	bd08      	pop	{r3, pc}
 800bf0a:	bf00      	nop
 800bf0c:	200016c8 	.word	0x200016c8
 800bf10:	200011b8 	.word	0x200011b8

0800bf14 <CDC_Itf_Control>:
  switch (cmd)
 800bf14:	2820      	cmp	r0, #32
 800bf16:	d003      	beq.n	800bf20 <CDC_Itf_Control+0xc>
 800bf18:	2821      	cmp	r0, #33	; 0x21
 800bf1a:	d00b      	beq.n	800bf34 <CDC_Itf_Control+0x20>
}
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	4770      	bx	lr
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 800bf20:	4b0d      	ldr	r3, [pc, #52]	; (800bf58 <CDC_Itf_Control+0x44>)
 800bf22:	680a      	ldr	r2, [r1, #0]
 800bf24:	601a      	str	r2, [r3, #0]
    LineCoding.format     = pbuf[4];
 800bf26:	790a      	ldrb	r2, [r1, #4]
 800bf28:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 800bf2a:	794a      	ldrb	r2, [r1, #5]
 800bf2c:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 800bf2e:	798a      	ldrb	r2, [r1, #6]
 800bf30:	719a      	strb	r2, [r3, #6]
    break;
 800bf32:	e7f3      	b.n	800bf1c <CDC_Itf_Control+0x8>
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800bf34:	4b08      	ldr	r3, [pc, #32]	; (800bf58 <CDC_Itf_Control+0x44>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	0a12      	lsrs	r2, r2, #8
 800bf3e:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800bf40:	885a      	ldrh	r2, [r3, #2]
 800bf42:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800bf44:	78da      	ldrb	r2, [r3, #3]
 800bf46:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 800bf48:	791a      	ldrb	r2, [r3, #4]
 800bf4a:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 800bf4c:	795a      	ldrb	r2, [r3, #5]
 800bf4e:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 800bf50:	799b      	ldrb	r3, [r3, #6]
 800bf52:	718b      	strb	r3, [r1, #6]
    break;
 800bf54:	e7e2      	b.n	800bf1c <CDC_Itf_Control+0x8>
 800bf56:	bf00      	nop
 800bf58:	20000b80 	.word	0x20000b80

0800bf5c <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 800bf5c:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800bf5e:	4c1d      	ldr	r4, [pc, #116]	; (800bfd4 <SPIx_Init+0x78>)
{
 800bf60:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800bf62:	4620      	mov	r0, r4
 800bf64:	f7ff f97a 	bl	800b25c <HAL_SPI_GetState>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d130      	bne.n	800bfce <SPIx_Init+0x72>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800bf6c:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <SPIx_Init+0x7c>)
 800bf6e:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800bf70:	2318      	movs	r3, #24
 800bf72:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800bf74:	2307      	movs	r3, #7
 800bf76:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800bf78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800bf7c:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800bf7e:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800bf82:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800bf86:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800bf88:	f44f 7382 	mov.w	r3, #260	; 0x104
 800bf8c:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800bf8e:	4b13      	ldr	r3, [pc, #76]	; (800bfdc <SPIx_Init+0x80>)
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 800bf90:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800bf92:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800bf94:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800bf96:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800bf98:	699a      	ldr	r2, [r3, #24]
 800bf9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf9e:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800bfa0:	695a      	ldr	r2, [r3, #20]
 800bfa2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800bfa6:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800bfa8:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
 800bfac:	2302      	movs	r3, #2
 800bfae:	e9cd c301 	strd	ip, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800bfb2:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800bfb4:	f04f 0e03 	mov.w	lr, #3
 800bfb8:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800bfba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bfbe:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800bfc0:	e9cd e304 	strd	lr, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800bfc4:	f7fd fc2a 	bl	800981c <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f7fe ffa7 	bl	800af1c <HAL_SPI_Init>
}
 800bfce:	b006      	add	sp, #24
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	bf00      	nop
 800bfd4:	200010b0 	.word	0x200010b0
 800bfd8:	40013000 	.word	0x40013000
 800bfdc:	40021000 	.word	0x40021000

0800bfe0 <SPIx_WriteRead>:
{
 800bfe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t receivedbyte = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	f88d 3017 	strb.w	r3, [sp, #23]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800bfe8:	4b0b      	ldr	r3, [pc, #44]	; (800c018 <SPIx_WriteRead+0x38>)
{
 800bfea:	f88d 000f 	strb.w	r0, [sp, #15]
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	480a      	ldr	r0, [pc, #40]	; (800c01c <SPIx_WriteRead+0x3c>)
 800bff4:	2301      	movs	r3, #1
 800bff6:	f10d 0217 	add.w	r2, sp, #23
 800bffa:	f10d 010f 	add.w	r1, sp, #15
 800bffe:	f7fe fff5 	bl	800afec <HAL_SPI_TransmitReceive>
 800c002:	b120      	cbz	r0, 800c00e <SPIx_WriteRead+0x2e>
  HAL_SPI_DeInit(&SpiHandle);
 800c004:	4805      	ldr	r0, [pc, #20]	; (800c01c <SPIx_WriteRead+0x3c>)
 800c006:	f7fe ffdc 	bl	800afc2 <HAL_SPI_DeInit>
  SPIx_Init();
 800c00a:	f7ff ffa7 	bl	800bf5c <SPIx_Init>
}
 800c00e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c012:	b007      	add	sp, #28
 800c014:	f85d fb04 	ldr.w	pc, [sp], #4
 800c018:	20000bc0 	.word	0x20000bc0
 800c01c:	200010b0 	.word	0x200010b0

0800c020 <I2Cx_Init>:
{
 800c020:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800c022:	4c16      	ldr	r4, [pc, #88]	; (800c07c <I2Cx_Init+0x5c>)
{
 800c024:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800c026:	4620      	mov	r0, r4
 800c028:	f7fe fede 	bl	800ade8 <HAL_I2C_GetState>
 800c02c:	bb20      	cbnz	r0, 800c078 <I2Cx_Init+0x58>
    I2cHandle.Instance = DISCOVERY_I2Cx;
 800c02e:	4b14      	ldr	r3, [pc, #80]	; (800c080 <I2Cx_Init+0x60>)
 800c030:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c032:	2132      	movs	r1, #50	; 0x32
 800c034:	2301      	movs	r3, #1
 800c036:	e9c4 1302 	strd	r1, r3, [r4, #8]
    I2cHandle.Init.OwnAddress2 = 0;
 800c03a:	e9c4 0004 	strd	r0, r0, [r4, #16]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 800c03e:	e9c4 0007 	strd	r0, r0, [r4, #28]
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 800c042:	4d10      	ldr	r5, [pc, #64]	; (800c084 <I2Cx_Init+0x64>)
 800c044:	696b      	ldr	r3, [r5, #20]
 800c046:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c04a:	616b      	str	r3, [r5, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800c04c:	20c0      	movs	r0, #192	; 0xc0
 800c04e:	2302      	movs	r3, #2
 800c050:	e9cd 0301 	strd	r0, r3, [sp, #4]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800c054:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c056:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c058:	480b      	ldr	r0, [pc, #44]	; (800c088 <I2Cx_Init+0x68>)
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c05a:	f04f 0c03 	mov.w	ip, #3
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c05e:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 800c062:	e9cd c304 	strd	ip, r3, [sp, #16]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800c066:	f7fd fbd9 	bl	800981c <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 800c06a:	69eb      	ldr	r3, [r5, #28]
 800c06c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c070:	61eb      	str	r3, [r5, #28]
    HAL_I2C_Init(&I2cHandle);
 800c072:	4620      	mov	r0, r4
 800c074:	f7fe fd4f 	bl	800ab16 <HAL_I2C_Init>
}
 800c078:	b007      	add	sp, #28
 800c07a:	bd30      	pop	{r4, r5, pc}
 800c07c:	20001078 	.word	0x20001078
 800c080:	40005400 	.word	0x40005400
 800c084:	40021000 	.word	0x40021000
 800c088:	48000400 	.word	0x48000400

0800c08c <BSP_LED_Init>:
{
 800c08c:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 800c08e:	4604      	mov	r4, r0
{
 800c090:	b086      	sub	sp, #24
  LEDx_GPIO_CLK_ENABLE(Led);
 800c092:	b928      	cbnz	r0, 800c0a0 <BSP_LED_Init+0x14>
 800c094:	4a15      	ldr	r2, [pc, #84]	; (800c0ec <BSP_LED_Init+0x60>)
 800c096:	6953      	ldr	r3, [r2, #20]
 800c098:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c09c:	6153      	str	r3, [r2, #20]
 800c09e:	e00d      	b.n	800c0bc <BSP_LED_Init+0x30>
 800c0a0:	2801      	cmp	r0, #1
 800c0a2:	d0f7      	beq.n	800c094 <BSP_LED_Init+0x8>
 800c0a4:	2802      	cmp	r0, #2
 800c0a6:	d0f5      	beq.n	800c094 <BSP_LED_Init+0x8>
 800c0a8:	2803      	cmp	r0, #3
 800c0aa:	d0f3      	beq.n	800c094 <BSP_LED_Init+0x8>
 800c0ac:	2804      	cmp	r0, #4
 800c0ae:	d0f1      	beq.n	800c094 <BSP_LED_Init+0x8>
 800c0b0:	2805      	cmp	r0, #5
 800c0b2:	d0ef      	beq.n	800c094 <BSP_LED_Init+0x8>
 800c0b4:	2806      	cmp	r0, #6
 800c0b6:	d0ed      	beq.n	800c094 <BSP_LED_Init+0x8>
 800c0b8:	2807      	cmp	r0, #7
 800c0ba:	d0eb      	beq.n	800c094 <BSP_LED_Init+0x8>
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c0bc:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <BSP_LED_Init+0x64>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c0be:	4d0d      	ldr	r5, [pc, #52]	; (800c0f4 <BSP_LED_Init+0x68>)
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c0c0:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c0c4:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800c0c8:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0ca:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c0cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c0d0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c0d2:	2303      	movs	r3, #3
 800c0d4:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800c0d6:	f7fd fba1 	bl	800981c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800c0da:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4631      	mov	r1, r6
 800c0e2:	f7fd fc65 	bl	80099b0 <HAL_GPIO_WritePin>
}
 800c0e6:	b006      	add	sp, #24
 800c0e8:	bd70      	pop	{r4, r5, r6, pc}
 800c0ea:	bf00      	nop
 800c0ec:	40021000 	.word	0x40021000
 800c0f0:	0801ca5c 	.word	0x0801ca5c
 800c0f4:	20000ba0 	.word	0x20000ba0

0800c0f8 <BSP_LED_On>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 800c0f8:	4b04      	ldr	r3, [pc, #16]	; (800c10c <BSP_LED_On+0x14>)
 800c0fa:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c0fe:	4b04      	ldr	r3, [pc, #16]	; (800c110 <BSP_LED_On+0x18>)
 800c100:	2201      	movs	r2, #1
 800c102:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c106:	f7fd bc53 	b.w	80099b0 <HAL_GPIO_WritePin>
 800c10a:	bf00      	nop
 800c10c:	0801ca5c 	.word	0x0801ca5c
 800c110:	20000ba0 	.word	0x20000ba0

0800c114 <BSP_LED_Off>:
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <BSP_LED_Off+0x14>)
 800c116:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c11a:	4b04      	ldr	r3, [pc, #16]	; (800c12c <BSP_LED_Off+0x18>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c122:	f7fd bc45 	b.w	80099b0 <HAL_GPIO_WritePin>
 800c126:	bf00      	nop
 800c128:	0801ca5c 	.word	0x0801ca5c
 800c12c:	20000ba0 	.word	0x20000ba0

0800c130 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800c130:	4b03      	ldr	r3, [pc, #12]	; (800c140 <BSP_LED_Toggle+0x10>)
 800c132:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800c136:	4b03      	ldr	r3, [pc, #12]	; (800c144 <BSP_LED_Toggle+0x14>)
 800c138:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c13c:	f7fd bc3d 	b.w	80099ba <HAL_GPIO_TogglePin>
 800c140:	0801ca5c 	.word	0x0801ca5c
 800c144:	20000ba0 	.word	0x20000ba0

0800c148 <BSP_PB_Init>:
{
 800c148:	b510      	push	{r4, lr}
 800c14a:	4b19      	ldr	r3, [pc, #100]	; (800c1b0 <BSP_PB_Init+0x68>)
 800c14c:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800c14e:	b918      	cbnz	r0, 800c158 <BSP_PB_Init+0x10>
 800c150:	695a      	ldr	r2, [r3, #20]
 800c152:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c156:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 800c158:	699a      	ldr	r2, [r3, #24]
 800c15a:	f042 0201 	orr.w	r2, r2, #1
 800c15e:	619a      	str	r2, [r3, #24]
  if (ButtonMode == BUTTON_MODE_GPIO)
 800c160:	b971      	cbnz	r1, 800c180 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800c162:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c164:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c168:	2202      	movs	r2, #2
 800c16a:	2303      	movs	r3, #3
 800c16c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c170:	4b10      	ldr	r3, [pc, #64]	; (800c1b4 <BSP_PB_Init+0x6c>)
 800c172:	a901      	add	r1, sp, #4
 800c174:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c178:	f7fd fb50 	bl	800981c <HAL_GPIO_Init>
}
 800c17c:	b006      	add	sp, #24
 800c17e:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 800c180:	2901      	cmp	r1, #1
 800c182:	d1fb      	bne.n	800c17c <BSP_PB_Init+0x34>
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c184:	2400      	movs	r4, #0
 800c186:	2303      	movs	r3, #3
 800c188:	e9cd 4303 	strd	r4, r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 800c18c:	4b0a      	ldr	r3, [pc, #40]	; (800c1b8 <BSP_PB_Init+0x70>)
 800c18e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c190:	4b08      	ldr	r3, [pc, #32]	; (800c1b4 <BSP_PB_Init+0x6c>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800c192:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800c194:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c198:	a901      	add	r1, sp, #4
 800c19a:	f7fd fb3f 	bl	800981c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800c19e:	4622      	mov	r2, r4
 800c1a0:	210f      	movs	r1, #15
 800c1a2:	2006      	movs	r0, #6
 800c1a4:	f7fd fae4 	bl	8009770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800c1a8:	2006      	movs	r0, #6
 800c1aa:	f7fd fb15 	bl	80097d8 <HAL_NVIC_EnableIRQ>
}
 800c1ae:	e7e5      	b.n	800c17c <BSP_PB_Init+0x34>
 800c1b0:	40021000 	.word	0x40021000
 800c1b4:	20000b98 	.word	0x20000b98
 800c1b8:	10110000 	.word	0x10110000

0800c1bc <BSP_PB_GetState>:
{
 800c1bc:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800c1be:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <BSP_PB_GetState+0x10>)
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c1c6:	f7fd fbed 	bl	80099a4 <HAL_GPIO_ReadPin>
}
 800c1ca:	bd08      	pop	{r3, pc}
 800c1cc:	20000b98 	.word	0x20000b98

0800c1d0 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800c1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c1d4:	4c14      	ldr	r4, [pc, #80]	; (800c228 <GYRO_IO_Init+0x58>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c1d6:	4815      	ldr	r0, [pc, #84]	; (800c22c <GYRO_IO_Init+0x5c>)
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c1d8:	6963      	ldr	r3, [r4, #20]
{
 800c1da:	b086      	sub	sp, #24
  GYRO_CS_GPIO_CLK_ENABLE();  
 800c1dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c1e0:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c1e2:	2500      	movs	r5, #0
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c1e4:	2708      	movs	r7, #8
 800c1e6:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c1ea:	2603      	movs	r6, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c1ec:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800c1ee:	e9cd 7801 	strd	r7, r8, [sp, #4]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c1f2:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800c1f6:	f7fd fb11 	bl	800981c <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 800c1fa:	4642      	mov	r2, r8
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	480b      	ldr	r0, [pc, #44]	; (800c22c <GYRO_IO_Init+0x5c>)
 800c200:	f7fd fbd6 	bl	80099b0 <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800c204:	6963      	ldr	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c206:	4809      	ldr	r0, [pc, #36]	; (800c22c <GYRO_IO_Init+0x5c>)
  GYRO_INT_GPIO_CLK_ENABLE();
 800c208:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c20c:	6163      	str	r3, [r4, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c20e:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 800c210:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c212:	e9cd 3501 	strd	r3, r5, [sp, #4]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800c216:	e9cd 5603 	strd	r5, r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c21a:	f7fd faff 	bl	800981c <HAL_GPIO_Init>
  
  SPIx_Init();
 800c21e:	f7ff fe9d 	bl	800bf5c <SPIx_Init>
}
 800c222:	b006      	add	sp, #24
 800c224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c228:	40021000 	.word	0x40021000
 800c22c:	48001000 	.word	0x48001000

0800c230 <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800c230:	2a01      	cmp	r2, #1
{
 800c232:	b570      	push	{r4, r5, r6, lr}
 800c234:	460e      	mov	r6, r1
 800c236:	4605      	mov	r5, r0
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800c238:	bf88      	it	hi
 800c23a:	f041 0640 	orrhi.w	r6, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800c23e:	480c      	ldr	r0, [pc, #48]	; (800c270 <GYRO_IO_Write+0x40>)
{
 800c240:	4614      	mov	r4, r2
  GYRO_CS_LOW();
 800c242:	2108      	movs	r1, #8
 800c244:	2200      	movs	r2, #0
 800c246:	f7fd fbb3 	bl	80099b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7ff fec8 	bl	800bfe0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800c250:	442c      	add	r4, r5
 800c252:	42a5      	cmp	r5, r4
 800c254:	d106      	bne.n	800c264 <GYRO_IO_Write+0x34>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}
 800c256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800c25a:	4805      	ldr	r0, [pc, #20]	; (800c270 <GYRO_IO_Write+0x40>)
 800c25c:	2201      	movs	r2, #1
 800c25e:	2108      	movs	r1, #8
 800c260:	f7fd bba6 	b.w	80099b0 <HAL_GPIO_WritePin>
    SPIx_WriteRead(*pBuffer);
 800c264:	f815 0b01 	ldrb.w	r0, [r5], #1
 800c268:	f7ff feba 	bl	800bfe0 <SPIx_WriteRead>
    pBuffer++;
 800c26c:	e7f1      	b.n	800c252 <GYRO_IO_Write+0x22>
 800c26e:	bf00      	nop
 800c270:	48001000 	.word	0x48001000

0800c274 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 800c274:	2a01      	cmp	r2, #1
{  
 800c276:	b570      	push	{r4, r5, r6, lr}
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800c278:	bf8c      	ite	hi
 800c27a:	f041 04c0 	orrhi.w	r4, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800c27e:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
{  
 800c282:	4606      	mov	r6, r0
 800c284:	4615      	mov	r5, r2
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800c286:	480c      	ldr	r0, [pc, #48]	; (800c2b8 <GYRO_IO_Read+0x44>)
 800c288:	2200      	movs	r2, #0
 800c28a:	2108      	movs	r1, #8
 800c28c:	f7fd fb90 	bl	80099b0 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800c290:	4620      	mov	r0, r4
 800c292:	f7ff fea5 	bl	800bfe0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800c296:	4435      	add	r5, r6
 800c298:	42ae      	cmp	r6, r5
 800c29a:	d106      	bne.n	800c2aa <GYRO_IO_Read+0x36>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
}  
 800c29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  GYRO_CS_HIGH();
 800c2a0:	4805      	ldr	r0, [pc, #20]	; (800c2b8 <GYRO_IO_Read+0x44>)
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	2108      	movs	r1, #8
 800c2a6:	f7fd bb83 	b.w	80099b0 <HAL_GPIO_WritePin>
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	f7ff fe98 	bl	800bfe0 <SPIx_WriteRead>
 800c2b0:	f806 0b01 	strb.w	r0, [r6], #1
    pBuffer++;
 800c2b4:	e7f0      	b.n	800c298 <GYRO_IO_Read+0x24>
 800c2b6:	bf00      	nop
 800c2b8:	48001000 	.word	0x48001000

0800c2bc <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800c2bc:	4b16      	ldr	r3, [pc, #88]	; (800c318 <COMPASSACCELERO_IO_Init+0x5c>)
 800c2be:	695a      	ldr	r2, [r3, #20]
{
 800c2c0:	b570      	push	{r4, r5, r6, lr}
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 800c2c2:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800c2c6:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c2c8:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c2ca:	4d14      	ldr	r5, [pc, #80]	; (800c31c <COMPASSACCELERO_IO_Init+0x60>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c2cc:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
{
 800c2d0:	b086      	sub	sp, #24
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c2d2:	615a      	str	r2, [r3, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c2d4:	2304      	movs	r3, #4
 800c2d6:	2400      	movs	r4, #0
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c2d8:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c2dc:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c2de:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c2e4:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800c2e6:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800c2e8:	f7fd fa98 	bl	800981c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	2008      	movs	r0, #8
 800c2f2:	f7fd fa3d 	bl	8009770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800c2f6:	2008      	movs	r0, #8
 800c2f8:	f7fd fa6e 	bl	80097d8 <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800c2fc:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c2fe:	a901      	add	r1, sp, #4
 800c300:	4628      	mov	r0, r5
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800c302:	e9cd 3401 	strd	r3, r4, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c306:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c30a:	f7fd fa87 	bl	800981c <HAL_GPIO_Init>
  
  I2Cx_Init();
 800c30e:	f7ff fe87 	bl	800c020 <I2Cx_Init>
}
 800c312:	b006      	add	sp, #24
 800c314:	bd70      	pop	{r4, r5, r6, pc}
 800c316:	bf00      	nop
 800c318:	40021000 	.word	0x40021000
 800c31c:	48001000 	.word	0x48001000

0800c320 <COMPASSACCELERO_IO_ITConfig>:
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c320:	4a0e      	ldr	r2, [pc, #56]	; (800c35c <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c322:	480f      	ldr	r0, [pc, #60]	; (800c360 <COMPASSACCELERO_IO_ITConfig+0x40>)
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c324:	6953      	ldr	r3, [r2, #20]
{
 800c326:	b510      	push	{r4, lr}
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800c328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c32c:	6153      	str	r3, [r2, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c32e:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <COMPASSACCELERO_IO_ITConfig+0x44>)
{
 800c330:	b086      	sub	sp, #24
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800c332:	2230      	movs	r2, #48	; 0x30
 800c334:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c338:	2400      	movs	r4, #0
 800c33a:	2303      	movs	r3, #3
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c33c:	a901      	add	r1, sp, #4
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800c33e:	e9cd 4303 	strd	r4, r3, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800c342:	f7fd fa6b 	bl	800981c <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 800c346:	4622      	mov	r2, r4
 800c348:	4621      	mov	r1, r4
 800c34a:	200a      	movs	r0, #10
 800c34c:	f7fd fa10 	bl	8009770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 800c350:	200a      	movs	r0, #10
 800c352:	f7fd fa41 	bl	80097d8 <HAL_NVIC_EnableIRQ>
  
}
 800c356:	b006      	add	sp, #24
 800c358:	bd10      	pop	{r4, pc}
 800c35a:	bf00      	nop
 800c35c:	40021000 	.word	0x40021000
 800c360:	48001000 	.word	0x48001000
 800c364:	10110000 	.word	0x10110000

0800c368 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 800c368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800c36a:	4b0c      	ldr	r3, [pc, #48]	; (800c39c <COMPASSACCELERO_IO_Write+0x34>)
 800c36c:	f88d 2017 	strb.w	r2, [sp, #23]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	9302      	str	r3, [sp, #8]
 800c374:	f10d 0217 	add.w	r2, sp, #23
 800c378:	2301      	movs	r3, #1
 800c37a:	9200      	str	r2, [sp, #0]
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	460a      	mov	r2, r1
 800c380:	4601      	mov	r1, r0
 800c382:	4807      	ldr	r0, [pc, #28]	; (800c3a0 <COMPASSACCELERO_IO_Write+0x38>)
 800c384:	f7fe fc27 	bl	800abd6 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800c388:	b120      	cbz	r0, 800c394 <COMPASSACCELERO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2cHandle);
 800c38a:	4805      	ldr	r0, [pc, #20]	; (800c3a0 <COMPASSACCELERO_IO_Write+0x38>)
 800c38c:	f7fe fc0c 	bl	800aba8 <HAL_I2C_DeInit>
  I2Cx_Init();
 800c390:	f7ff fe46 	bl	800c020 <I2Cx_Init>
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 800c394:	b007      	add	sp, #28
 800c396:	f85d fb04 	ldr.w	pc, [sp], #4
 800c39a:	bf00      	nop
 800c39c:	20000b9c 	.word	0x20000b9c
 800c3a0:	20001078 	.word	0x20001078

0800c3a4 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 800c3a4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800c3ac:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <COMPASSACCELERO_IO_Read+0x38>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	9302      	str	r3, [sp, #8]
{
 800c3b2:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	f10d 0117 	add.w	r1, sp, #23
 800c3ba:	9100      	str	r1, [sp, #0]
 800c3bc:	9301      	str	r3, [sp, #4]
 800c3be:	4601      	mov	r1, r0
 800c3c0:	4807      	ldr	r0, [pc, #28]	; (800c3e0 <COMPASSACCELERO_IO_Read+0x3c>)
 800c3c2:	f7fe fc8a 	bl	800acda <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800c3c6:	b120      	cbz	r0, 800c3d2 <COMPASSACCELERO_IO_Read+0x2e>
  HAL_I2C_DeInit(&I2cHandle);
 800c3c8:	4805      	ldr	r0, [pc, #20]	; (800c3e0 <COMPASSACCELERO_IO_Read+0x3c>)
 800c3ca:	f7fe fbed 	bl	800aba8 <HAL_I2C_DeInit>
  I2Cx_Init();
 800c3ce:	f7ff fe27 	bl	800c020 <I2Cx_Init>
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 800c3d2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800c3d6:	b007      	add	sp, #28
 800c3d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3dc:	20000b9c 	.word	0x20000b9c
 800c3e0:	20001078 	.word	0x20001078

0800c3e4 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 800c3e4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800c3e6:	4c0c      	ldr	r4, [pc, #48]	; (800c418 <BSP_ACCELERO_Init+0x34>)
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	4798      	blx	r3
 800c3ec:	2833      	cmp	r0, #51	; 0x33
 800c3ee:	d10b      	bne.n	800c408 <BSP_ACCELERO_Init+0x24>
    ret = ACCELERO_OK;
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 800c3f0:	4d0a      	ldr	r5, [pc, #40]	; (800c41c <BSP_ACCELERO_Init+0x38>)

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800c3f2:	6823      	ldr	r3, [r4, #0]
    AccelerometerDrv = &Lsm303agrDrv;
 800c3f4:	602c      	str	r4, [r5, #0]
    AccelerometerDrv->Init(ctrl);
 800c3f6:	f640 0047 	movw	r0, #2119	; 0x847
 800c3fa:	4798      	blx	r3
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
                      Accelero_FilterStructure.HighPassFilter_AOI2);

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800c3fc:	682b      	ldr	r3, [r5, #0]
 800c3fe:	2090      	movs	r0, #144	; 0x90
 800c400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c402:	4798      	blx	r3

    ret = ACCELERO_OK;
 800c404:	2000      	movs	r0, #0
  }

  return ret;
}
 800c406:	bd38      	pop	{r3, r4, r5, pc}
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 800c408:	4c05      	ldr	r4, [pc, #20]	; (800c420 <BSP_ACCELERO_Init+0x3c>)
 800c40a:	68a3      	ldr	r3, [r4, #8]
 800c40c:	4798      	blx	r3
 800c40e:	2833      	cmp	r0, #51	; 0x33
 800c410:	d0ee      	beq.n	800c3f0 <BSP_ACCELERO_Init+0xc>
  uint8_t ret = ACCELERO_ERROR;
 800c412:	2001      	movs	r0, #1
 800c414:	e7f7      	b.n	800c406 <BSP_ACCELERO_Init+0x22>
 800c416:	bf00      	nop
 800c418:	20000bc4 	.word	0x20000bc4
 800c41c:	20001110 	.word	0x20001110
 800c420:	20000c60 	.word	0x20000c60

0800c424 <BSP_ACCELERO_GetXYZ>:
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv->GetXYZ!= NULL)
 800c424:	4b02      	ldr	r3, [pc, #8]	; (800c430 <BSP_ACCELERO_GetXYZ+0xc>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c42a:	b103      	cbz	r3, 800c42e <BSP_ACCELERO_GetXYZ+0xa>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800c42c:	4718      	bx	r3
  }
}
 800c42e:	4770      	bx	lr
 800c430:	20001110 	.word	0x20001110

0800c434 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 800c434:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800c436:	4c10      	ldr	r4, [pc, #64]	; (800c478 <BSP_GYRO_Init+0x44>)
 800c438:	68a3      	ldr	r3, [r4, #8]
 800c43a:	4798      	blx	r3
 800c43c:	28d4      	cmp	r0, #212	; 0xd4
 800c43e:	4625      	mov	r5, r4
 800c440:	d10f      	bne.n	800c462 <BSP_GYRO_Init+0x2e>
    ret = GYRO_OK;
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 800c442:	4c0e      	ldr	r4, [pc, #56]	; (800c47c <BSP_GYRO_Init+0x48>)

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
                         Gyro_InitStructure.Full_Scale) << 8);

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800c444:	682b      	ldr	r3, [r5, #0]
    GyroscopeDrv = &I3g4250Drv;
 800c446:	6025      	str	r5, [r4, #0]
    GyroscopeDrv->Init(ctrl);
 800c448:	f241 003f 	movw	r0, #4159	; 0x103f
 800c44c:	4798      	blx	r3

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	2000      	movs	r0, #0
 800c452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c454:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	2010      	movs	r0, #16
 800c45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c45c:	4798      	blx	r3

    ret = GYRO_OK;
 800c45e:	2000      	movs	r0, #0
  }

  return ret;
}
 800c460:	bd38      	pop	{r3, r4, r5, pc}
  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800c462:	68a3      	ldr	r3, [r4, #8]
 800c464:	4798      	blx	r3
 800c466:	28d5      	cmp	r0, #213	; 0xd5
 800c468:	d0eb      	beq.n	800c442 <BSP_GYRO_Init+0xe>
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 800c46a:	4d05      	ldr	r5, [pc, #20]	; (800c480 <BSP_GYRO_Init+0x4c>)
 800c46c:	68ab      	ldr	r3, [r5, #8]
 800c46e:	4798      	blx	r3
 800c470:	28d3      	cmp	r0, #211	; 0xd3
 800c472:	d0e6      	beq.n	800c442 <BSP_GYRO_Init+0xe>
  uint8_t ret = GYRO_ERROR;
 800c474:	2001      	movs	r0, #1
 800c476:	e7f3      	b.n	800c460 <BSP_GYRO_Init+0x2c>
 800c478:	20000bf8 	.word	0x20000bf8
 800c47c:	20001114 	.word	0x20001114
 800c480:	20000c2c 	.word	0x20000c2c

0800c484 <BSP_GYRO_GetXYZ>:
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv->GetXYZ!= NULL)
 800c484:	4b02      	ldr	r3, [pc, #8]	; (800c490 <BSP_GYRO_GetXYZ+0xc>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c48a:	b103      	cbz	r3, 800c48e <BSP_GYRO_GetXYZ+0xa>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800c48c:	4718      	bx	r3
  }
}
 800c48e:	4770      	bx	lr
 800c490:	20001114 	.word	0x20001114

0800c494 <LSM303DLHC_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
}
 800c494:	4770      	bx	lr

0800c496 <LSM303DLHC_AccInit>:
{  
 800c496:	b510      	push	{r4, lr}
 800c498:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800c49a:	f7ff ff0f 	bl	800c2bc <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800c49e:	b2e2      	uxtb	r2, r4
 800c4a0:	2120      	movs	r1, #32
 800c4a2:	2032      	movs	r0, #50	; 0x32
 800c4a4:	f7ff ff60 	bl	800c368 <COMPASSACCELERO_IO_Write>
}
 800c4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	2123      	movs	r1, #35	; 0x23
 800c4b0:	2032      	movs	r0, #50	; 0x32
 800c4b2:	f7ff bf59 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c4b6 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800c4b6:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800c4b8:	f7ff ff00 	bl	800c2bc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800c4bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800c4c0:	210f      	movs	r1, #15
 800c4c2:	2032      	movs	r0, #50	; 0x32
 800c4c4:	f7ff bf6e 	b.w	800c3a4 <COMPASSACCELERO_IO_Read>

0800c4c8 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 800c4c8:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800c4ca:	2124      	movs	r1, #36	; 0x24
 800c4cc:	2032      	movs	r0, #50	; 0x32
 800c4ce:	f7ff ff69 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 800c4d2:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800c4d6:	b2c2      	uxtb	r2, r0
}
 800c4d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800c4dc:	2124      	movs	r1, #36	; 0x24
 800c4de:	2032      	movs	r0, #50	; 0x32
 800c4e0:	f7ff bf42 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c4e4 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800c4e4:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c4e6:	2121      	movs	r1, #33	; 0x21
{
 800c4e8:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c4ea:	2032      	movs	r0, #50	; 0x32
 800c4ec:	f7ff ff5a 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800c4f0:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c4f4:	ea40 0204 	orr.w	r2, r0, r4
 800c4f8:	2121      	movs	r1, #33	; 0x21
}
 800c4fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c4fe:	2032      	movs	r0, #50	; 0x32
 800c500:	f7ff bf32 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c504 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800c504:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c506:	2121      	movs	r1, #33	; 0x21
{
 800c508:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c50a:	2032      	movs	r0, #50	; 0x32
 800c50c:	f7ff ff4a 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800c510:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c514:	ea40 0204 	orr.w	r2, r0, r4
 800c518:	2121      	movs	r1, #33	; 0x21
}
 800c51a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c51e:	2032      	movs	r0, #50	; 0x32
 800c520:	f7ff bf22 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c524 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 800c524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800c528:	2123      	movs	r1, #35	; 0x23
{
 800c52a:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800c52c:	2032      	movs	r0, #50	; 0x32
 800c52e:	f7ff ff39 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800c532:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 800c534:	4607      	mov	r7, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 800c536:	2032      	movs	r0, #50	; 0x32
 800c538:	f7ff ff34 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800c53c:	2128      	movs	r1, #40	; 0x28
 800c53e:	2032      	movs	r0, #50	; 0x32
 800c540:	f7ff ff30 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800c544:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 800c546:	fa4f f880 	sxtb.w	r8, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800c54a:	2032      	movs	r0, #50	; 0x32
 800c54c:	f7ff ff2a 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800c550:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800c552:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800c556:	2032      	movs	r0, #50	; 0x32
 800c558:	f7ff ff24 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800c55c:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800c55e:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800c560:	2032      	movs	r0, #50	; 0x32
 800c562:	f7ff ff1f 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800c566:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800c568:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800c56c:	2032      	movs	r0, #50	; 0x32
 800c56e:	f7ff ff19 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800c572:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 800c574:	b245      	sxtb	r5, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800c576:	2032      	movs	r0, #50	; 0x32
 800c578:	f7ff ff14 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800c57c:	067a      	lsls	r2, r7, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 800c57e:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 800c580:	d51d      	bpl.n	800c5be <LSM303DLHC_AccReadXYZ+0x9a>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800c582:	eb09 2808 	add.w	r8, r9, r8, lsl #8
 800c586:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800c58a:	fa0f f888 	sxth.w	r8, r8
 800c58e:	b224      	sxth	r4, r4
 800c590:	eb03 2505 	add.w	r5, r3, r5, lsl #8
 800c594:	f007 0030 	and.w	r0, r7, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800c598:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c59a:	b22d      	sxth	r5, r5
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800c59c:	d019      	beq.n	800c5d2 <LSM303DLHC_AccReadXYZ+0xae>
 800c59e:	2830      	cmp	r0, #48	; 0x30
 800c5a0:	d019      	beq.n	800c5d6 <LSM303DLHC_AccReadXYZ+0xb2>
 800c5a2:	2810      	cmp	r0, #16
 800c5a4:	bf14      	ite	ne
 800c5a6:	2301      	movne	r3, #1
 800c5a8:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800c5aa:	fb08 f803 	mul.w	r8, r8, r3
 800c5ae:	435c      	muls	r4, r3
 800c5b0:	435d      	muls	r5, r3
 800c5b2:	f8a6 8000 	strh.w	r8, [r6]
 800c5b6:	8074      	strh	r4, [r6, #2]
 800c5b8:	80b5      	strh	r5, [r6, #4]
  }
}
 800c5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800c5be:	eb08 2809 	add.w	r8, r8, r9, lsl #8
 800c5c2:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800c5c6:	fa0f f888 	sxth.w	r8, r8
 800c5ca:	b224      	sxth	r4, r4
 800c5cc:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 800c5d0:	e7e0      	b.n	800c594 <LSM303DLHC_AccReadXYZ+0x70>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 800c5d2:	2304      	movs	r3, #4
 800c5d4:	e7e9      	b.n	800c5aa <LSM303DLHC_AccReadXYZ+0x86>
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800c5d6:	230c      	movs	r3, #12
 800c5d8:	e7e7      	b.n	800c5aa <LSM303DLHC_AccReadXYZ+0x86>

0800c5da <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800c5da:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c5dc:	2121      	movs	r1, #33	; 0x21
{
 800c5de:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800c5e0:	2032      	movs	r0, #50	; 0x32
 800c5e2:	f7ff fedf 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800c5e6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c5ea:	ea40 0204 	orr.w	r2, r0, r4
 800c5ee:	2121      	movs	r1, #33	; 0x21
}
 800c5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800c5f4:	2032      	movs	r0, #50	; 0x32
 800c5f6:	f7ff beb7 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c5fa <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 800c5fa:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800c5fc:	2122      	movs	r1, #34	; 0x22
{
 800c5fe:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 800c600:	2032      	movs	r0, #50	; 0x32
 800c602:	f7ff fecf 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800c606:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800c608:	b2c2      	uxtb	r2, r0
}
 800c60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 800c60e:	2122      	movs	r1, #34	; 0x22
 800c610:	2032      	movs	r0, #50	; 0x32
 800c612:	f7ff bea9 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c616 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 800c616:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800c618:	2138      	movs	r1, #56	; 0x38
{  
 800c61a:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 800c61c:	2032      	movs	r0, #50	; 0x32
 800c61e:	f7ff fec1 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800c622:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800c624:	b2c2      	uxtb	r2, r0
 800c626:	2138      	movs	r1, #56	; 0x38
 800c628:	2032      	movs	r0, #50	; 0x32
 800c62a:	f7ff fe9d 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800c62e:	220a      	movs	r2, #10
 800c630:	213a      	movs	r1, #58	; 0x3a
 800c632:	2032      	movs	r0, #50	; 0x32
 800c634:	f7ff fe98 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800c638:	2205      	movs	r2, #5
 800c63a:	213b      	movs	r1, #59	; 0x3b
 800c63c:	2032      	movs	r0, #50	; 0x32
 800c63e:	f7ff fe93 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 800c642:	2205      	movs	r2, #5
 800c644:	213c      	movs	r1, #60	; 0x3c
 800c646:	2032      	movs	r0, #50	; 0x32
 800c648:	f7ff fe8e 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800c64c:	2232      	movs	r2, #50	; 0x32
}
 800c64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 800c652:	213d      	movs	r1, #61	; 0x3d
 800c654:	4610      	mov	r0, r2
 800c656:	f7ff be87 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800c65a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800c65a:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800c65c:	f7ff fe60 	bl	800c320 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800c660:	2080      	movs	r0, #128	; 0x80
 800c662:	f7ff ffca 	bl	800c5fa <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 800c666:	2004      	movs	r0, #4
 800c668:	f7ff ffb7 	bl	800c5da <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
}
 800c66c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800c670:	2010      	movs	r0, #16
 800c672:	f7ff bfd0 	b.w	800c616 <LSM303DLHC_AccClickITEnable>

0800c676 <L3GD20_DeInit>:
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
}
 800c676:	4770      	bx	lr

0800c678 <L3GD20_Init>:
{  
 800c678:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800c67a:	2300      	movs	r3, #0
{  
 800c67c:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800c67e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c682:	f7ff fda5 	bl	800c1d0 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c686:	f10d 0007 	add.w	r0, sp, #7
 800c68a:	2201      	movs	r2, #1
 800c68c:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800c68e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c692:	f7ff fdcd 	bl	800c230 <GYRO_IO_Write>
  ctrl = (uint8_t) (InitStruct >> 8);
 800c696:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800c698:	2201      	movs	r2, #1
 800c69a:	2123      	movs	r1, #35	; 0x23
 800c69c:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t) (InitStruct >> 8);
 800c6a0:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800c6a4:	f7ff fdc4 	bl	800c230 <GYRO_IO_Write>
}
 800c6a8:	b002      	add	sp, #8
 800c6aa:	bd10      	pop	{r4, pc}

0800c6ac <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800c6ac:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c6ae:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800c6b0:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800c6b4:	2120      	movs	r1, #32
 800c6b6:	f10d 0007 	add.w	r0, sp, #7
 800c6ba:	f7ff fdb9 	bl	800c230 <GYRO_IO_Write>
}
 800c6be:	b003      	add	sp, #12
 800c6c0:	f85d fb04 	ldr.w	pc, [sp], #4

0800c6c4 <L3GD20_ReadID>:
{
 800c6c4:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800c6c6:	f7ff fd83 	bl	800c1d0 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800c6ca:	f10d 0007 	add.w	r0, sp, #7
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	210f      	movs	r1, #15
 800c6d2:	f7ff fdcf 	bl	800c274 <GYRO_IO_Read>
}
 800c6d6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c6da:	b003      	add	sp, #12
 800c6dc:	f85d fb04 	ldr.w	pc, [sp], #4

0800c6e0 <L3GD20_RebootCmd>:
{
 800c6e0:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f10d 0007 	add.w	r0, sp, #7
 800c6e8:	2124      	movs	r1, #36	; 0x24
 800c6ea:	f7ff fdc3 	bl	800c274 <GYRO_IO_Read>
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c6ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6f2:	2201      	movs	r2, #1
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c6f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c6f8:	2124      	movs	r1, #36	; 0x24
 800c6fa:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800c6fe:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c702:	f7ff fd95 	bl	800c230 <GYRO_IO_Write>
}
 800c706:	b003      	add	sp, #12
 800c708:	f85d fb04 	ldr.w	pc, [sp], #4

0800c70c <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800c70c:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c70e:	2300      	movs	r3, #0
{
 800c710:	4604      	mov	r4, r0
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c712:	2201      	movs	r2, #1
 800c714:	f10d 0006 	add.w	r0, sp, #6
 800c718:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c71a:	f88d 3006 	strb.w	r3, [sp, #6]
 800c71e:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c722:	f7ff fda7 	bl	800c274 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c726:	f10d 0007 	add.w	r0, sp, #7
 800c72a:	2201      	movs	r2, #1
 800c72c:	2122      	movs	r1, #34	; 0x22
 800c72e:	f7ff fda1 	bl	800c274 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800c732:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c73a:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
 800c73e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c742:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);   
 800c746:	ea43 0004 	orr.w	r0, r3, r4
 800c74a:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800c74e:	2201      	movs	r2, #1
 800c750:	f10d 0006 	add.w	r0, sp, #6
 800c754:	2130      	movs	r1, #48	; 0x30
 800c756:	f7ff fd6b 	bl	800c230 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800c75a:	2201      	movs	r2, #1
 800c75c:	2122      	movs	r1, #34	; 0x22
 800c75e:	f10d 0007 	add.w	r0, sp, #7
 800c762:	f7ff fd65 	bl	800c230 <GYRO_IO_Write>
}
 800c766:	b002      	add	sp, #8
 800c768:	bd10      	pop	{r4, pc}

0800c76a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800c76a:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c76c:	2201      	movs	r2, #1
{  
 800c76e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c770:	2122      	movs	r1, #34	; 0x22
 800c772:	f10d 0007 	add.w	r0, sp, #7
 800c776:	f7ff fd7d 	bl	800c274 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c77a:	b96c      	cbnz	r4, 800c798 <L3GD20_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c77c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800c780:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c784:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c788:	2201      	movs	r2, #1
 800c78a:	2122      	movs	r1, #34	; 0x22
 800c78c:	f10d 0007 	add.w	r0, sp, #7
 800c790:	f7ff fd4e 	bl	800c230 <GYRO_IO_Write>
}
 800c794:	b002      	add	sp, #8
 800c796:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c798:	2c01      	cmp	r4, #1
 800c79a:	d1f5      	bne.n	800c788 <L3GD20_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800c79c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7a0:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800c7a4:	f043 0308 	orr.w	r3, r3, #8
 800c7a8:	e7ec      	b.n	800c784 <L3GD20_EnableIT+0x1a>

0800c7aa <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800c7aa:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c7ac:	2201      	movs	r2, #1
{  
 800c7ae:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c7b0:	2122      	movs	r1, #34	; 0x22
 800c7b2:	f10d 0007 	add.w	r0, sp, #7
 800c7b6:	f7ff fd5d 	bl	800c274 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800c7ba:	b96c      	cbnz	r4, 800c7d8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800c7bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
  {
    tmpreg &= 0xF7;
 800c7c4:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	2122      	movs	r1, #34	; 0x22
 800c7cc:	f10d 0007 	add.w	r0, sp, #7
 800c7d0:	f7ff fd2e 	bl	800c230 <GYRO_IO_Write>
}
 800c7d4:	b002      	add	sp, #8
 800c7d6:	bd10      	pop	{r4, pc}
  else if(IntSel == L3GD20_INT2)
 800c7d8:	2c01      	cmp	r4, #1
 800c7da:	d1f5      	bne.n	800c7c8 <L3GD20_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800c7dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c7e0:	f023 0308 	bic.w	r3, r3, #8
 800c7e4:	e7ee      	b.n	800c7c4 <L3GD20_DisableIT+0x1a>

0800c7e6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800c7e6:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c7e8:	2201      	movs	r2, #1
{
 800c7ea:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c7ec:	2121      	movs	r1, #33	; 0x21
 800c7ee:	f10d 0007 	add.w	r0, sp, #7
 800c7f2:	f7ff fd3f 	bl	800c274 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800c7f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c7fa:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800c7fe:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c800:	2201      	movs	r2, #1
 800c802:	2121      	movs	r1, #33	; 0x21
 800c804:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800c808:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800c80c:	f7ff fd10 	bl	800c230 <GYRO_IO_Write>
}
 800c810:	b002      	add	sp, #8
 800c812:	bd10      	pop	{r4, pc}

0800c814 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800c814:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c816:	2201      	movs	r2, #1
{
 800c818:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c81a:	2124      	movs	r1, #36	; 0x24
 800c81c:	f10d 0007 	add.w	r0, sp, #7
 800c820:	f7ff fd28 	bl	800c274 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800c824:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c828:	f020 0010 	bic.w	r0, r0, #16
  
  tmpreg |= HighPassFilterState;
 800c82c:	4304      	orrs	r4, r0
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c82e:	2201      	movs	r2, #1
 800c830:	2124      	movs	r1, #36	; 0x24
 800c832:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800c836:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800c83a:	f7ff fcf9 	bl	800c230 <GYRO_IO_Write>
}
 800c83e:	b002      	add	sp, #8
 800c840:	bd10      	pop	{r4, pc}
	...

0800c844 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800c844:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c846:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] ={0};
 800c848:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c84a:	2201      	movs	r2, #1
 800c84c:	2123      	movs	r1, #35	; 0x23
{
 800c84e:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c850:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] ={0};
 800c854:	9302      	str	r3, [sp, #8]
 800c856:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800c85a:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800c85e:	f7ff fd09 	bl	800c274 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800c862:	2206      	movs	r2, #6
 800c864:	2128      	movs	r1, #40	; 0x28
 800c866:	a802      	add	r0, sp, #8
 800c868:	f7ff fd04 	bl	800c274 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800c86c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c870:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800c874:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800c878:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800c87c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800c880:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c884:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800c888:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c88c:	d039      	beq.n	800c902 <L3GD20_ReadXYZAngRate+0xbe>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800c88e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800c892:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800c896:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c89a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c89e:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800c8a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c8a6:	2b10      	cmp	r3, #16
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c8a8:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800c8ac:	d034      	beq.n	800c918 <L3GD20_ReadXYZAngRate+0xd4>
 800c8ae:	2b20      	cmp	r3, #32
 800c8b0:	d035      	beq.n	800c91e <L3GD20_ReadXYZAngRate+0xda>
 800c8b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800c924 <L3GD20_ReadXYZAngRate+0xe0>
 800c8b6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c928 <L3GD20_ReadXYZAngRate+0xe4>
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	bf08      	it	eq
 800c8be:	eef0 7a47 	vmoveq.f32	s15, s14
    break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800c8c2:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800c8c6:	ee07 3a10 	vmov	s14, r3
 800c8ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800c8d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8d6:	ed84 7a00 	vstr	s14, [r4]
 800c8da:	ee07 3a10 	vmov	s14, r3
 800c8de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8e2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800c8e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ea:	ed84 7a01 	vstr	s14, [r4, #4]
 800c8ee:	ee07 3a10 	vmov	s14, r3
 800c8f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8fa:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800c8fe:	b007      	add	sp, #28
 800c900:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800c902:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800c906:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800c90a:	f8ad 6010 	strh.w	r6, [sp, #16]
 800c90e:	f8ad 0012 	strh.w	r0, [sp, #18]
 800c912:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800c916:	e7c4      	b.n	800c8a2 <L3GD20_ReadXYZAngRate+0x5e>
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800c918:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c92c <L3GD20_ReadXYZAngRate+0xe8>
 800c91c:	e7d1      	b.n	800c8c2 <L3GD20_ReadXYZAngRate+0x7e>
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800c91e:	eddf 7a04 	vldr	s15, [pc, #16]	; 800c930 <L3GD20_ReadXYZAngRate+0xec>
 800c922:	e7ce      	b.n	800c8c2 <L3GD20_ReadXYZAngRate+0x7e>
 800c924:	00000000 	.word	0x00000000
 800c928:	410c0000 	.word	0x410c0000
 800c92c:	418c0000 	.word	0x418c0000
 800c930:	428c0000 	.word	0x428c0000

0800c934 <I3G4250D_DeInit>:
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
}
 800c934:	4770      	bx	lr

0800c936 <I3G4250D_Init>:
{
 800c936:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl = 0x00;
 800c938:	2300      	movs	r3, #0
{
 800c93a:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 800c93c:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 800c940:	f7ff fc46 	bl	800c1d0 <GYRO_IO_Init>
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c944:	f10d 0007 	add.w	r0, sp, #7
 800c948:	2201      	movs	r2, #1
 800c94a:	2120      	movs	r1, #32
  ctrl = (uint8_t) InitStruct;
 800c94c:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c950:	f7ff fc6e 	bl	800c230 <GYRO_IO_Write>
  ctrl = (uint8_t)(InitStruct >> 8);
 800c954:	0a24      	lsrs	r4, r4, #8
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c956:	2201      	movs	r2, #1
 800c958:	2123      	movs	r1, #35	; 0x23
 800c95a:	f10d 0007 	add.w	r0, sp, #7
  ctrl = (uint8_t)(InitStruct >> 8);
 800c95e:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800c962:	f7ff fc65 	bl	800c230 <GYRO_IO_Write>
}
 800c966:	b002      	add	sp, #8
 800c968:	bd10      	pop	{r4, pc}

0800c96a <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 800c96a:	b507      	push	{r0, r1, r2, lr}
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c96c:	2201      	movs	r2, #1
  ctrl = (uint8_t) InitStruct;
 800c96e:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800c972:	2120      	movs	r1, #32
 800c974:	f10d 0007 	add.w	r0, sp, #7
 800c978:	f7ff fc5a 	bl	800c230 <GYRO_IO_Write>
}
 800c97c:	b003      	add	sp, #12
 800c97e:	f85d fb04 	ldr.w	pc, [sp], #4

0800c982 <I3G4250D_ReadID>:
{
 800c982:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Init();
 800c984:	f7ff fc24 	bl	800c1d0 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800c988:	f10d 0007 	add.w	r0, sp, #7
 800c98c:	2201      	movs	r2, #1
 800c98e:	210f      	movs	r1, #15
 800c990:	f7ff fc70 	bl	800c274 <GYRO_IO_Read>
}
 800c994:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c998:	b003      	add	sp, #12
 800c99a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c99e <I3G4250D_RebootCmd>:
{
 800c99e:	b507      	push	{r0, r1, r2, lr}
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c9a0:	2201      	movs	r2, #1
 800c9a2:	f10d 0007 	add.w	r0, sp, #7
 800c9a6:	2124      	movs	r1, #36	; 0x24
 800c9a8:	f7ff fc64 	bl	800c274 <GYRO_IO_Read>
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c9ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c9b0:	2201      	movs	r2, #1
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c9b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c9b6:	2124      	movs	r1, #36	; 0x24
 800c9b8:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800c9bc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800c9c0:	f7ff fc36 	bl	800c230 <GYRO_IO_Write>
}
 800c9c4:	b003      	add	sp, #12
 800c9c6:	f85d fb04 	ldr.w	pc, [sp], #4

0800c9ca <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800c9ca:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c9cc:	2300      	movs	r3, #0
{
 800c9ce:	4604      	mov	r4, r0

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f10d 0006 	add.w	r0, sp, #6
 800c9d6:	2130      	movs	r1, #48	; 0x30
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800c9d8:	f88d 3006 	strb.w	r3, [sp, #6]
 800c9dc:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800c9e0:	f7ff fc48 	bl	800c274 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800c9e4:	f10d 0007 	add.w	r0, sp, #7
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	2122      	movs	r1, #34	; 0x22
 800c9ec:	f7ff fc42 	bl	800c274 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 800c9f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c9f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c9f8:	f88d 3006 	strb.w	r3, [sp, #6]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);

  ctrl3 &= 0xDF;
 800c9fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca00:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 800ca04:	ea43 0004 	orr.w	r0, r3, r4
 800ca08:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800ca0c:	2201      	movs	r2, #1
 800ca0e:	f10d 0006 	add.w	r0, sp, #6
 800ca12:	2130      	movs	r1, #48	; 0x30
 800ca14:	f7ff fc0c 	bl	800c230 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca18:	2201      	movs	r2, #1
 800ca1a:	2122      	movs	r1, #34	; 0x22
 800ca1c:	f10d 0007 	add.w	r0, sp, #7
 800ca20:	f7ff fc06 	bl	800c230 <GYRO_IO_Write>
}
 800ca24:	b002      	add	sp, #8
 800ca26:	bd10      	pop	{r4, pc}

0800ca28 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 800ca28:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca2a:	2201      	movs	r2, #1
{
 800ca2c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca2e:	2122      	movs	r1, #34	; 0x22
 800ca30:	f10d 0007 	add.w	r0, sp, #7
 800ca34:	f7ff fc1e 	bl	800c274 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800ca38:	b96c      	cbnz	r4, 800ca56 <I3G4250D_EnableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800ca3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 800ca3e:	f063 037f 	orn	r3, r3, #127	; 0x7f
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800ca42:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca46:	2201      	movs	r2, #1
 800ca48:	2122      	movs	r1, #34	; 0x22
 800ca4a:	f10d 0007 	add.w	r0, sp, #7
 800ca4e:	f7ff fbef 	bl	800c230 <GYRO_IO_Write>
}
 800ca52:	b002      	add	sp, #8
 800ca54:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800ca56:	2c01      	cmp	r4, #1
 800ca58:	d1f5      	bne.n	800ca46 <I3G4250D_EnableIT+0x1e>
    tmpreg &= 0xF7;
 800ca5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca5e:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800ca62:	f043 0308 	orr.w	r3, r3, #8
 800ca66:	e7ec      	b.n	800ca42 <I3G4250D_EnableIT+0x1a>

0800ca68 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800ca68:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca6a:	2201      	movs	r2, #1
{
 800ca6c:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca6e:	2122      	movs	r1, #34	; 0x22
 800ca70:	f10d 0007 	add.w	r0, sp, #7
 800ca74:	f7ff fbfe 	bl	800c274 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800ca78:	b96c      	cbnz	r4, 800ca96 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800ca7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
  }
  else if (IntSel == I3G4250D_INT2)
  {
    tmpreg &= 0xF7;
 800ca82:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800ca86:	2201      	movs	r2, #1
 800ca88:	2122      	movs	r1, #34	; 0x22
 800ca8a:	f10d 0007 	add.w	r0, sp, #7
 800ca8e:	f7ff fbcf 	bl	800c230 <GYRO_IO_Write>
}
 800ca92:	b002      	add	sp, #8
 800ca94:	bd10      	pop	{r4, pc}
  else if (IntSel == I3G4250D_INT2)
 800ca96:	2c01      	cmp	r4, #1
 800ca98:	d1f5      	bne.n	800ca86 <I3G4250D_DisableIT+0x1e>
    tmpreg &= 0xF7;
 800ca9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ca9e:	f023 0308 	bic.w	r3, r3, #8
 800caa2:	e7ee      	b.n	800ca82 <I3G4250D_DisableIT+0x1a>

0800caa4 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800caa4:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800caa6:	2201      	movs	r2, #1
{
 800caa8:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800caaa:	2121      	movs	r1, #33	; 0x21
 800caac:	f10d 0007 	add.w	r0, sp, #7
 800cab0:	f7ff fbe0 	bl	800c274 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 800cab4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cab8:	f020 003f 	bic.w	r0, r0, #63	; 0x3f

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800cabc:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800cabe:	2201      	movs	r2, #1
 800cac0:	2121      	movs	r1, #33	; 0x21
 800cac2:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= FilterStruct;
 800cac6:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 800caca:	f7ff fbb1 	bl	800c230 <GYRO_IO_Write>
}
 800cace:	b002      	add	sp, #8
 800cad0:	bd10      	pop	{r4, pc}

0800cad2 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800cad2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800cad4:	2201      	movs	r2, #1
{
 800cad6:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800cad8:	2124      	movs	r1, #36	; 0x24
 800cada:	f10d 0007 	add.w	r0, sp, #7
 800cade:	f7ff fbc9 	bl	800c274 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800cae2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800cae6:	f020 0010 	bic.w	r0, r0, #16

  tmpreg |= HighPassFilterState;
 800caea:	4304      	orrs	r4, r0

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800caec:	2201      	movs	r2, #1
 800caee:	2124      	movs	r1, #36	; 0x24
 800caf0:	f10d 0007 	add.w	r0, sp, #7
  tmpreg |= HighPassFilterState;
 800caf4:	f88d 4007 	strb.w	r4, [sp, #7]
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800caf8:	f7ff fb9a 	bl	800c230 <GYRO_IO_Write>
}
 800cafc:	b002      	add	sp, #8
 800cafe:	bd10      	pop	{r4, pc}

0800cb00 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 800cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb02:	b087      	sub	sp, #28
  uint8_t tmpbuffer[6] = {0};
 800cb04:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i = 0;

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800cb06:	2201      	movs	r2, #1
 800cb08:	2123      	movs	r1, #35	; 0x23
{
 800cb0a:	4604      	mov	r4, r0
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800cb0c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t tmpbuffer[6] = {0};
 800cb10:	9302      	str	r3, [sp, #8]
 800cb12:	f8ad 300c 	strh.w	r3, [sp, #12]
  uint8_t tmpreg = 0;
 800cb16:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 800cb1a:	f7ff fbab 	bl	800c274 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800cb1e:	2206      	movs	r2, #6
 800cb20:	2128      	movs	r1, #40	; 0x28
 800cb22:	a802      	add	r0, sp, #8
 800cb24:	f7ff fba6 	bl	800c274 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800cb28:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cb2c:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800cb30:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800cb34:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800cb38:	f89d 500b 	ldrb.w	r5, [sp, #11]
 800cb3c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800cb40:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800cb44:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cb48:	d039      	beq.n	800cbbe <I3G4250D_ReadXYZAngRate+0xbe>
  }
  else
  {
    for (i = 0; i < 3; i++)
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800cb4a:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 800cb4e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
 800cb52:	f8ad 6010 	strh.w	r6, [sp, #16]
 800cb56:	f8ad 0012 	strh.w	r0, [sp, #18]
 800cb5a:	eb01 2202 	add.w	r2, r1, r2, lsl #8
 800cb5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800cb62:	2b10      	cmp	r3, #16
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800cb64:	f8ad 2014 	strh.w	r2, [sp, #20]
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800cb68:	d034      	beq.n	800cbd4 <I3G4250D_ReadXYZAngRate+0xd4>
 800cb6a:	2b20      	cmp	r3, #32
 800cb6c:	d035      	beq.n	800cbda <I3G4250D_ReadXYZAngRate+0xda>
 800cb6e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800cbe0 <I3G4250D_ReadXYZAngRate+0xe0>
 800cb72:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800cbe4 <I3G4250D_ReadXYZAngRate+0xe4>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bf08      	it	eq
 800cb7a:	eef0 7a47 	vmoveq.f32	s15, s14
      break;
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800cb7e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 800cb82:	ee07 3a10 	vmov	s14, r3
 800cb86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb8a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800cb8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb92:	ed84 7a00 	vstr	s14, [r4]
 800cb96:	ee07 3a10 	vmov	s14, r3
 800cb9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cb9e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800cba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cba6:	ed84 7a01 	vstr	s14, [r4, #4]
 800cbaa:	ee07 3a10 	vmov	s14, r3
 800cbae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800cbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb6:	edc4 7a02 	vstr	s15, [r4, #8]
  }
}
 800cbba:	b007      	add	sp, #28
 800cbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800cbbe:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800cbc2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 800cbc6:	f8ad 6010 	strh.w	r6, [sp, #16]
 800cbca:	f8ad 0012 	strh.w	r0, [sp, #18]
 800cbce:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800cbd2:	e7c4      	b.n	800cb5e <I3G4250D_ReadXYZAngRate+0x5e>
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800cbd4:	eddf 7a04 	vldr	s15, [pc, #16]	; 800cbe8 <I3G4250D_ReadXYZAngRate+0xe8>
 800cbd8:	e7d1      	b.n	800cb7e <I3G4250D_ReadXYZAngRate+0x7e>
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 800cbda:	eddf 7a04 	vldr	s15, [pc, #16]	; 800cbec <I3G4250D_ReadXYZAngRate+0xec>
 800cbde:	e7ce      	b.n	800cb7e <I3G4250D_ReadXYZAngRate+0x7e>
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	410c0000 	.word	0x410c0000
 800cbe8:	418c0000 	.word	0x418c0000
 800cbec:	428c0000 	.word	0x428c0000

0800cbf0 <LSM303AGR_AccDeInit>:
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
}
 800cbf0:	4770      	bx	lr

0800cbf2 <LSM303AGR_AccInit>:
{  
 800cbf2:	b510      	push	{r4, lr}
 800cbf4:	4604      	mov	r4, r0
  COMPASSACCELERO_IO_Init();
 800cbf6:	f7ff fb61 	bl	800c2bc <COMPASSACCELERO_IO_Init>
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 800cbfa:	b2e2      	uxtb	r2, r4
 800cbfc:	2120      	movs	r1, #32
 800cbfe:	2032      	movs	r0, #50	; 0x32
 800cc00:	f7ff fbb2 	bl	800c368 <COMPASSACCELERO_IO_Write>
}
 800cc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2123      	movs	r1, #35	; 0x23
 800cc0c:	2032      	movs	r0, #50	; 0x32
 800cc0e:	f7ff bbab 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cc12 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 800cc12:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 800cc14:	f7ff fb52 	bl	800c2bc <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
  
  return ctrl;
}
 800cc18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 800cc1c:	210f      	movs	r1, #15
 800cc1e:	2032      	movs	r0, #50	; 0x32
 800cc20:	f7ff bbc0 	b.w	800c3a4 <COMPASSACCELERO_IO_Read>

0800cc24 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 800cc24:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800cc26:	2124      	movs	r1, #36	; 0x24
 800cc28:	2032      	movs	r0, #50	; 0x32
 800cc2a:	f7ff fbbb 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800cc2e:	f060 007f 	orn	r0, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800cc32:	b2c2      	uxtb	r2, r0
}
 800cc34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 800cc38:	2124      	movs	r1, #36	; 0x24
 800cc3a:	2032      	movs	r0, #50	; 0x32
 800cc3c:	f7ff bb94 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cc40 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 800cc40:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc42:	2121      	movs	r1, #33	; 0x21
{
 800cc44:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc46:	2032      	movs	r0, #50	; 0x32
 800cc48:	f7ff fbac 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 800cc4c:	f000 000c 	and.w	r0, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc50:	ea40 0204 	orr.w	r2, r0, r4
 800cc54:	2121      	movs	r1, #33	; 0x21
}
 800cc56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc5a:	2032      	movs	r0, #50	; 0x32
 800cc5c:	f7ff bb84 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cc60 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 800cc60:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc62:	2121      	movs	r1, #33	; 0x21
{
 800cc64:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cc66:	2032      	movs	r0, #50	; 0x32
 800cc68:	f7ff fb9c 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0xF7;
 800cc6c:	f000 00f7 	and.w	r0, r0, #247	; 0xf7
  
  tmpreg |= HighPassFilterState;
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc70:	ea40 0204 	orr.w	r2, r0, r4
 800cc74:	2121      	movs	r1, #33	; 0x21
}
 800cc76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cc7a:	2032      	movs	r0, #50	; 0x32
 800cc7c:	f7ff bb74 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cc80 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800cc80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800cc84:	2123      	movs	r1, #35	; 0x23
{
 800cc86:	4606      	mov	r6, r0
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800cc88:	2032      	movs	r0, #50	; 0x32
 800cc8a:	f7ff fb8b 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800cc8e:	2124      	movs	r1, #36	; 0x24
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 800cc90:	4607      	mov	r7, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 800cc92:	2032      	movs	r0, #50	; 0x32
 800cc94:	f7ff fb86 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800cc98:	2128      	movs	r1, #40	; 0x28
 800cc9a:	2032      	movs	r0, #50	; 0x32
 800cc9c:	f7ff fb82 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800cca0:	2129      	movs	r1, #41	; 0x29
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 800cca2:	fa4f f880 	sxtb.w	r8, r0
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800cca6:	2032      	movs	r0, #50	; 0x32
 800cca8:	f7ff fb7c 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800ccac:	212a      	movs	r1, #42	; 0x2a
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 800ccae:	fa4f f980 	sxtb.w	r9, r0
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800ccb2:	2032      	movs	r0, #50	; 0x32
 800ccb4:	f7ff fb76 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800ccb8:	212b      	movs	r1, #43	; 0x2b
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 800ccba:	b244      	sxtb	r4, r0
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800ccbc:	2032      	movs	r0, #50	; 0x32
 800ccbe:	f7ff fb71 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800ccc2:	212c      	movs	r1, #44	; 0x2c
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 800ccc4:	fa4f fa80 	sxtb.w	sl, r0
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800ccc8:	2032      	movs	r0, #50	; 0x32
 800ccca:	f7ff fb6b 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800ccce:	212d      	movs	r1, #45	; 0x2d
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 800ccd0:	b245      	sxtb	r5, r0
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800ccd2:	2032      	movs	r0, #50	; 0x32
 800ccd4:	f7ff fb66 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800ccd8:	067a      	lsls	r2, r7, #25
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 800ccda:	b243      	sxtb	r3, r0
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 800ccdc:	d51d      	bpl.n	800cd1a <LSM303AGR_AccReadXYZ+0x9a>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800ccde:	eb09 2808 	add.w	r8, r9, r8, lsl #8
 800cce2:	eb0a 2404 	add.w	r4, sl, r4, lsl #8
 800cce6:	fa0f f888 	sxth.w	r8, r8
 800ccea:	b224      	sxth	r4, r4
 800ccec:	eb03 2505 	add.w	r5, r3, r5, lsl #8
 800ccf0:	f007 0030 	and.w	r0, r7, #48	; 0x30
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800ccf4:	2820      	cmp	r0, #32
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800ccf6:	b22d      	sxth	r5, r5
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 800ccf8:	d019      	beq.n	800cd2e <LSM303AGR_AccReadXYZ+0xae>
 800ccfa:	2830      	cmp	r0, #48	; 0x30
 800ccfc:	d019      	beq.n	800cd32 <LSM303AGR_AccReadXYZ+0xb2>
 800ccfe:	2810      	cmp	r0, #16
 800cd00:	bf14      	ite	ne
 800cd02:	2301      	movne	r3, #1
 800cd04:	2302      	moveq	r3, #2
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800cd06:	fb08 f803 	mul.w	r8, r8, r3
 800cd0a:	435c      	muls	r4, r3
 800cd0c:	435d      	muls	r5, r3
 800cd0e:	f8a6 8000 	strh.w	r8, [r6]
 800cd12:	8074      	strh	r4, [r6, #2]
 800cd14:	80b5      	strh	r5, [r6, #4]
  }
}
 800cd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 800cd1a:	eb08 2809 	add.w	r8, r8, r9, lsl #8
 800cd1e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800cd22:	fa0f f888 	sxth.w	r8, r8
 800cd26:	b224      	sxth	r4, r4
 800cd28:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 800cd2c:	e7e0      	b.n	800ccf0 <LSM303AGR_AccReadXYZ+0x70>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 800cd2e:	2304      	movs	r3, #4
 800cd30:	e7e9      	b.n	800cd06 <LSM303AGR_AccReadXYZ+0x86>
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 800cd32:	230c      	movs	r3, #12
 800cd34:	e7e7      	b.n	800cd06 <LSM303AGR_AccReadXYZ+0x86>

0800cd36 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 800cd36:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cd38:	2121      	movs	r1, #33	; 0x21
{
 800cd3a:	4604      	mov	r4, r0
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800cd3c:	2032      	movs	r0, #50	; 0x32
 800cd3e:	f7ff fb31 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 800cd42:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  
  tmpreg |= HighPassFilterClickState;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cd46:	ea40 0204 	orr.w	r2, r0, r4
 800cd4a:	2121      	movs	r1, #33	; 0x21
}
 800cd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800cd50:	2032      	movs	r0, #50	; 0x32
 800cd52:	f7ff bb09 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cd56 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 800cd56:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800cd58:	2122      	movs	r1, #34	; 0x22
{
 800cd5a:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 800cd5c:	2032      	movs	r0, #50	; 0x32
 800cd5e:	f7ff fb21 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 800cd62:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800cd64:	b2c2      	uxtb	r2, r0
}
 800cd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 800cd6a:	2122      	movs	r1, #34	; 0x22
 800cd6c:	2032      	movs	r0, #50	; 0x32
 800cd6e:	f7ff bafb 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cd72 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 800cd72:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800cd74:	2138      	movs	r1, #56	; 0x38
{  
 800cd76:	4604      	mov	r4, r0
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 800cd78:	2032      	movs	r0, #50	; 0x32
 800cd7a:	f7ff fb13 	bl	800c3a4 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 800cd7e:	4320      	orrs	r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 800cd80:	b2c2      	uxtb	r2, r0
 800cd82:	2138      	movs	r1, #56	; 0x38
 800cd84:	2032      	movs	r0, #50	; 0x32
 800cd86:	f7ff faef 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 800cd8a:	220a      	movs	r2, #10
 800cd8c:	213a      	movs	r1, #58	; 0x3a
 800cd8e:	2032      	movs	r0, #50	; 0x32
 800cd90:	f7ff faea 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 800cd94:	2205      	movs	r2, #5
 800cd96:	213b      	movs	r1, #59	; 0x3b
 800cd98:	2032      	movs	r0, #50	; 0x32
 800cd9a:	f7ff fae5 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 800cd9e:	2205      	movs	r2, #5
 800cda0:	213c      	movs	r1, #60	; 0x3c
 800cda2:	2032      	movs	r0, #50	; 0x32
 800cda4:	f7ff fae0 	bl	800c368 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800cda8:	2232      	movs	r2, #50	; 0x32
}
 800cdaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 800cdae:	213d      	movs	r1, #61	; 0x3d
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f7ff bad9 	b.w	800c368 <COMPASSACCELERO_IO_Write>

0800cdb6 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 800cdb6:	b508      	push	{r3, lr}
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800cdb8:	f7ff fab2 	bl	800c320 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 800cdbc:	2080      	movs	r0, #128	; 0x80
 800cdbe:	f7ff ffca 	bl	800cd56 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 800cdc2:	2004      	movs	r0, #4
 800cdc4:	f7ff ffb7 	bl	800cd36 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
}
 800cdc8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800cdcc:	2010      	movs	r0, #16
 800cdce:	f7ff bfd0 	b.w	800cd72 <LSM303AGR_AccClickITEnable>
	...

0800cdd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800cdd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ce0c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800cdd8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800cdda:	e003      	b.n	800cde4 <LoopCopyDataInit>

0800cddc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800cddc:	4b0c      	ldr	r3, [pc, #48]	; (800ce10 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800cdde:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800cde0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800cde2:	3104      	adds	r1, #4

0800cde4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800cde4:	480b      	ldr	r0, [pc, #44]	; (800ce14 <LoopForever+0xa>)
	ldr	r3, =_edata
 800cde6:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <LoopForever+0xe>)
	adds	r2, r0, r1
 800cde8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800cdea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800cdec:	d3f6      	bcc.n	800cddc <CopyDataInit>
	ldr	r2, =_sbss
 800cdee:	4a0b      	ldr	r2, [pc, #44]	; (800ce1c <LoopForever+0x12>)
	b	LoopFillZerobss
 800cdf0:	e002      	b.n	800cdf8 <LoopFillZerobss>

0800cdf2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800cdf2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800cdf4:	f842 3b04 	str.w	r3, [r2], #4

0800cdf8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800cdf8:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <LoopForever+0x16>)
	cmp	r2, r3
 800cdfa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800cdfc:	d3f9      	bcc.n	800cdf2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800cdfe:	f7fb ff9d 	bl	8008d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ce02:	f7f3 fdf5 	bl	80009f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ce06:	f7fa ff31 	bl	8007c6c <main>

0800ce0a <LoopForever>:

LoopForever:
    b LoopForever
 800ce0a:	e7fe      	b.n	800ce0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ce0c:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 800ce10:	0801cba4 	.word	0x0801cba4
	ldr	r0, =_sdata
 800ce14:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ce18:	20000c94 	.word	0x20000c94
	ldr	r2, =_sbss
 800ce1c:	20000c94 	.word	0x20000c94
	ldr	r3, = _ebss
 800ce20:	20001f08 	.word	0x20001f08

0800ce24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ce24:	e7fe      	b.n	800ce24 <ADC1_2_IRQHandler>
	...

0800ce28 <register_fini>:
 800ce28:	4b02      	ldr	r3, [pc, #8]	; (800ce34 <register_fini+0xc>)
 800ce2a:	b113      	cbz	r3, 800ce32 <register_fini+0xa>
 800ce2c:	4802      	ldr	r0, [pc, #8]	; (800ce38 <register_fini+0x10>)
 800ce2e:	f7f3 bdb9 	b.w	80009a4 <atexit>
 800ce32:	4770      	bx	lr
 800ce34:	00000000 	.word	0x00000000
 800ce38:	080009bd 	.word	0x080009bd

0800ce3c <_init>:
 800ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3e:	bf00      	nop
 800ce40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce42:	bc08      	pop	{r3}
 800ce44:	469e      	mov	lr, r3
 800ce46:	4770      	bx	lr

0800ce48 <_fini>:
 800ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4a:	bf00      	nop
 800ce4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4e:	bc08      	pop	{r3}
 800ce50:	469e      	mov	lr, r3
 800ce52:	4770      	bx	lr
